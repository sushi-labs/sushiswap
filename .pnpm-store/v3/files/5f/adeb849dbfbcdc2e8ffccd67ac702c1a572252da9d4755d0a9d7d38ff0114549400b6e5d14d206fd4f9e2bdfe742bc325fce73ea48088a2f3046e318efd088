{"version":3,"file":"headers.js","sources":["../../../src/core/headers.ts"],"sourcesContent":["import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport type CoreHeaderGroup<TData extends RowData> = {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport type HeaderContext<TData, TValue> = {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport type CoreHeader<TData extends RowData, TValue> = {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport type HeadersInstance<TData extends RowData> = {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n) {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n"],"names":["createHeader","table","column","options","id","header","index","isPlaceholder","placeholderId","depth","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","length","map","push","getContext","_features","forEach","feature","Object","assign","Headers","createTable","getHeaderGroups","memo","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","leafColumns","leftColumns","columnId","find","d","filter","Boolean","rightColumns","centerColumns","includes","headerGroups","buildHeaderGroups","key","process","env","NODE_ENV","debug","debugAll","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","orderedLeafColumns","getRightHeaderGroups","getFooterGroups","reverse","getLeftFooterGroups","getCenterFooterGroups","getRightFooterGroups","getFlatHeaders","headers","flat","getLeftFlatHeaders","getCenterFlatHeaders","getRightFlatHeaders","getCenterLeafHeaders","flatHeaders","getLeftLeafHeaders","getRightLeafHeaders","center","columnsToGroup","headerFamily","maxDepth","findMaxDepth","columns","Math","max","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","parent","undefined","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","min"],"mappings":"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"}