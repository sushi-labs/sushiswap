/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  PoolFactoryMock,
  PoolFactoryMockInterface,
} from "../PoolFactoryMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_masterDeployer",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidTokenOrder",
    type: "error",
  },
  {
    inputs: [],
    name: "UnauthorisedDeployer",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "configAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_deployData",
        type: "bytes",
      },
    ],
    name: "deployPool",
    outputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "startIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    name: "getPools",
    outputs: [
      {
        internalType: "address[]",
        name: "pairPools",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "masterDeployer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "pools",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
    ],
    name: "poolsCount",
    outputs: [
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610f87380380610f8783398101604081905261002f91610069565b806001600160a01b0381166100575760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b031660805250610099565b60006020828403121561007b57600080fd5b81516001600160a01b038116811461009257600080fd5b9392505050565b608051610ec56100c26000396000818161013e0152818161020201526105110152610ec56000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c806371a258121161005057806371a2581214610119578063cf58879a14610139578063f6ab6d991461016057600080fd5b8063169c4cef1461007757806327c3cae1146100b45780635bc93d6c146100c7575b600080fd5b61008a610085366004610875565b610196565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61008a6100c23660046108e5565b6101e8565b61010b6100d53660046109b4565b73ffffffffffffffffffffffffffffffffffffffff91821660009081526020818152604080832093909416825291909152205490565b6040519081526020016100ab565b61012c6101273660046109ed565b6103e0565b6040516100ab9190610a33565b61008a7f000000000000000000000000000000000000000000000000000000000000000081565b61008a61016e366004610a8d565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b600060205282600052604060002060205281600052604060002081815481106101be57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16925083915050565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610259576040517f03781a5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080838060200190518101906102709190610aa6565b915091508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1611156102aa57905b6040805173ffffffffffffffffffffffffffffffffffffffff848116602083015283168183015281518082038301815260026060830181815260c0840185529197506000939192909160809091019080368337019050509050828160008151811061031757610317610ad5565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818160018151811061036557610365610ad5565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091018201528551908601206040518190879061039f90610843565b6103a99190610b04565b8190604051809103906000f59050801580156103c9573d6000803e3d6000fd5b5094506103d78583836104f9565b50505050919050565b60608167ffffffffffffffff8111156103fb576103fb6108b6565b604051908082528060200260200182016040528015610424578160200160208202803683370190505b50905060005b828110156104f05773ffffffffffffffffffffffffffffffffffffffff80871660009081526020818152604080832093891683529290522061046c8286610ba6565b8154811061047c5761047c610ad5565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168282815181106104b9576104b9610ad5565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152806104e881610bbe565b91505061042a565b50949350505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610568576040517f03781a5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081815260016020526040812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86161790555b600183510381101561083d578281600101815181106105d6576105d6610ad5565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1683828151811061060657610606610ad5565b602002602001015173ffffffffffffffffffffffffffffffffffffffff161061065b576040517f3f06bf8100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181015b83518110156108345760008085848151811061067e5761067e610ad5565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008583815181106106d4576106d4610ad5565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff90811683528282019390935260409091016000908120805460018101825590825291812090910180547fffffffffffffffffffffffff000000000000000000000000000000000000000016928816929092179091558451819086908490811061076057610760610ad5565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008584815181106107b6576107b6610ad5565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff908116835282820193909352604090910160009081208054600180820183559183529290912090910180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169288169290921790915501610660565b506001016105b5565b50505050565b61029880610bf883390190565b73ffffffffffffffffffffffffffffffffffffffff8116811461087257600080fd5b50565b60008060006060848603121561088a57600080fd5b833561089581610850565b925060208401356108a581610850565b929592945050506040919091013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082840312156108f757600080fd5b813567ffffffffffffffff8082111561090f57600080fd5b818401915084601f83011261092357600080fd5b813581811115610935576109356108b6565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561097b5761097b6108b6565b8160405282815287602084870101111561099457600080fd5b826020860160208301376000928101602001929092525095945050505050565b600080604083850312156109c757600080fd5b82356109d281610850565b915060208301356109e281610850565b809150509250929050565b60008060008060808587031215610a0357600080fd5b8435610a0e81610850565b93506020850135610a1e81610850565b93969395505050506040820135916060013590565b6020808252825182820181905260009190848201906040850190845b81811015610a8157835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101610a4f565b50909695505050505050565b600060208284031215610a9f57600080fd5b5035919050565b60008060408385031215610ab957600080fd5b8251610ac481610850565b60208401519092506109e281610850565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208083528351808285015260005b81811015610b3157858101830151858201604001528201610b15565b81811115610b43576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610bb957610bb9610b77565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610bf057610bf0610b77565b506001019056fe60c060405234801561001057600080fd5b5060405161029838038061029883398101604081905261002f91610077565b600080828060200190518101906100469190610162565b6001600160a01b039182166080521660a05250610195915050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561008a57600080fd5b82516001600160401b03808211156100a157600080fd5b818501915085601f8301126100b557600080fd5b8151818111156100c7576100c7610061565b604051601f8201601f19908116603f011681019083821181831017156100ef576100ef610061565b81604052828152888684870101111561010757600080fd5b600093505b82841015610129578484018601518185018701529285019261010c565b8284111561013a5760008684830101525b98975050505050505050565b80516001600160a01b038116811461015d57600080fd5b919050565b6000806040838503121561017557600080fd5b61017e83610146565b915061018c60208401610146565b90509250929050565b60805160a05160e26101b66000396000608a01526000603b015260e26000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80630dfe1681146037578063d21220a7146086575b600080fd5b605d7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b605d7f00000000000000000000000000000000000000000000000000000000000000008156fea26469706673582212200f050b0704f0a2fd716d5b1d327d80fb07bbf9bf8225a53304cdc7e147cd492464736f6c634300080a0033a2646970667358221220f0f27145f84c09ddf0fce883d0308a21243cfabbed0e7adb7699ab95967cdf1064736f6c634300080a0033";

type PoolFactoryMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PoolFactoryMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PoolFactoryMock__factory extends ContractFactory {
  constructor(...args: PoolFactoryMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _masterDeployer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PoolFactoryMock> {
    return super.deploy(
      _masterDeployer,
      overrides || {}
    ) as Promise<PoolFactoryMock>;
  }
  getDeployTransaction(
    _masterDeployer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_masterDeployer, overrides || {});
  }
  attach(address: string): PoolFactoryMock {
    return super.attach(address) as PoolFactoryMock;
  }
  connect(signer: Signer): PoolFactoryMock__factory {
    return super.connect(signer) as PoolFactoryMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PoolFactoryMockInterface {
    return new utils.Interface(_abi) as PoolFactoryMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PoolFactoryMock {
    return new Contract(address, _abi, signerOrProvider) as PoolFactoryMock;
  }
}
