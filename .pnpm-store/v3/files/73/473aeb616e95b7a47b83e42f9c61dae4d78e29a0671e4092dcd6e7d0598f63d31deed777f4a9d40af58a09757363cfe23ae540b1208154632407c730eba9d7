/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type TokenInputStruct = {
  token: string;
  native: boolean;
  amount: BigNumberish;
};

export type TokenInputStructOutput = [string, boolean, BigNumber] & {
  token: string;
  native: boolean;
  amount: BigNumber;
};

export type TokenAmountStruct = { token: string; amount: BigNumberish };

export type TokenAmountStructOutput = [string, BigNumber] & {
  token: string;
  amount: BigNumber;
};

export type InitialPathStruct = {
  tokenIn: string;
  pool: string;
  native: boolean;
  amount: BigNumberish;
  data: BytesLike;
};

export type InitialPathStructOutput = [
  string,
  string,
  boolean,
  BigNumber,
  string
] & {
  tokenIn: string;
  pool: string;
  native: boolean;
  amount: BigNumber;
  data: string;
};

export type PercentagePathStruct = {
  tokenIn: string;
  pool: string;
  balancePercentage: BigNumberish;
  data: BytesLike;
};

export type PercentagePathStructOutput = [string, string, BigNumber, string] & {
  tokenIn: string;
  pool: string;
  balancePercentage: BigNumber;
  data: string;
};

export type OutputStruct = {
  token: string;
  to: string;
  unwrapBento: boolean;
  minAmount: BigNumberish;
};

export type OutputStructOutput = [string, string, boolean, BigNumber] & {
  token: string;
  to: string;
  unwrapBento: boolean;
  minAmount: BigNumber;
};

export type ComplexPathParamsStruct = {
  initialPath: InitialPathStruct[];
  percentagePath: PercentagePathStruct[];
  output: OutputStruct[];
};

export type ComplexPathParamsStructOutput = [
  InitialPathStructOutput[],
  PercentagePathStructOutput[],
  OutputStructOutput[]
] & {
  initialPath: InitialPathStructOutput[];
  percentagePath: PercentagePathStructOutput[];
  output: OutputStructOutput[];
};

export type PathStruct = { pool: string; data: BytesLike };

export type PathStructOutput = [string, string] & {
  pool: string;
  data: string;
};

export type ExactInputParamsStruct = {
  tokenIn: string;
  amountIn: BigNumberish;
  amountOutMinimum: BigNumberish;
  path: PathStruct[];
};

export type ExactInputParamsStructOutput = [
  string,
  BigNumber,
  BigNumber,
  PathStructOutput[]
] & {
  tokenIn: string;
  amountIn: BigNumber;
  amountOutMinimum: BigNumber;
  path: PathStructOutput[];
};

export type ExactInputSingleParamsStruct = {
  amountIn: BigNumberish;
  amountOutMinimum: BigNumberish;
  pool: string;
  tokenIn: string;
  data: BytesLike;
};

export type ExactInputSingleParamsStructOutput = [
  BigNumber,
  BigNumber,
  string,
  string,
  string
] & {
  amountIn: BigNumber;
  amountOutMinimum: BigNumber;
  pool: string;
  tokenIn: string;
  data: string;
};

export interface TridentRouterInterface extends utils.Interface {
  functions: {
    "addLiquidity((address,bool,uint256)[],address,uint256,bytes)": FunctionFragment;
    "approveMasterContract(uint8,bytes32,bytes32)": FunctionFragment;
    "bento()": FunctionFragment;
    "burnLiquidity(address,uint256,bytes,(address,uint256)[])": FunctionFragment;
    "burnLiquiditySingle(address,uint256,bytes,uint256)": FunctionFragment;
    "complexPath(((address,address,bool,uint256,bytes)[],(address,address,uint64,bytes)[],(address,address,bool,uint256)[]))": FunctionFragment;
    "deployPool(address,bytes)": FunctionFragment;
    "exactInput((address,uint256,uint256,(address,bytes)[]))": FunctionFragment;
    "exactInputSingle((uint256,uint256,address,address,bytes))": FunctionFragment;
    "exactInputSingleWithNativeToken((uint256,uint256,address,address,bytes))": FunctionFragment;
    "exactInputWithNativeToken((address,uint256,uint256,(address,bytes)[]))": FunctionFragment;
    "harvest(address,uint256)": FunctionFragment;
    "masterDeployer()": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "sweep(address,address,bool)": FunctionFragment;
    "unwrapWETH(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [TokenInputStruct[], string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approveMasterContract",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "bento", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burnLiquidity",
    values: [string, BigNumberish, BytesLike, TokenAmountStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burnLiquiditySingle",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "complexPath",
    values: [ComplexPathParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "deployPool",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exactInput",
    values: [ExactInputParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "exactInputSingle",
    values: [ExactInputSingleParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "exactInputSingleWithNativeToken",
    values: [ExactInputSingleParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "exactInputWithNativeToken",
    values: [ExactInputParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "masterDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "selfPermit",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "selfPermitAllowed",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "selfPermitAllowedIfNecessary",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "selfPermitIfNecessary",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sweep",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "unwrapWETH", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveMasterContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bento", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnLiquiditySingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "complexPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exactInput", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exactInputSingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactInputSingleWithNativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactInputWithNativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "selfPermit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selfPermitAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selfPermitAllowedIfNecessary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selfPermitIfNecessary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unwrapWETH", data: BytesLike): Result;

  events: {};
}

export interface TridentRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TridentRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidity(
      tokenInput: TokenInputStruct[],
      pool: string,
      minLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveMasterContract(
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bento(overrides?: CallOverrides): Promise<[string]>;

    burnLiquidity(
      pool: string,
      liquidity: BigNumberish,
      data: BytesLike,
      minWithdrawals: TokenAmountStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnLiquiditySingle(
      pool: string,
      liquidity: BigNumberish,
      data: BytesLike,
      minWithdrawal: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    complexPath(
      params: ComplexPathParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployPool(
      factory: string,
      deployData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exactInput(
      params: ExactInputParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exactInputSingle(
      params: ExactInputSingleParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exactInputSingleWithNativeToken(
      params: ExactInputSingleParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exactInputWithNativeToken(
      params: ExactInputParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvest(
      token: string,
      maxChangeAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    masterDeployer(overrides?: CallOverrides): Promise<[string]>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    selfPermit(
      token: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    selfPermitAllowed(
      token: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    selfPermitAllowedIfNecessary(
      token: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    selfPermitIfNecessary(
      token: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sweep(
      token: string,
      recipient: string,
      fromBento: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unwrapWETH(
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    tokenInput: TokenInputStruct[],
    pool: string,
    minLiquidity: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveMasterContract(
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bento(overrides?: CallOverrides): Promise<string>;

  burnLiquidity(
    pool: string,
    liquidity: BigNumberish,
    data: BytesLike,
    minWithdrawals: TokenAmountStruct[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnLiquiditySingle(
    pool: string,
    liquidity: BigNumberish,
    data: BytesLike,
    minWithdrawal: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  complexPath(
    params: ComplexPathParamsStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployPool(
    factory: string,
    deployData: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exactInput(
    params: ExactInputParamsStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exactInputSingle(
    params: ExactInputSingleParamsStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exactInputSingleWithNativeToken(
    params: ExactInputSingleParamsStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exactInputWithNativeToken(
    params: ExactInputParamsStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvest(
    token: string,
    maxChangeAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  masterDeployer(overrides?: CallOverrides): Promise<string>;

  multicall(
    data: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  selfPermit(
    token: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  selfPermitAllowed(
    token: string,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  selfPermitAllowedIfNecessary(
    token: string,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  selfPermitIfNecessary(
    token: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sweep(
    token: string,
    recipient: string,
    fromBento: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unwrapWETH(
    recipient: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      tokenInput: TokenInputStruct[],
      pool: string,
      minLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approveMasterContract(
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    bento(overrides?: CallOverrides): Promise<string>;

    burnLiquidity(
      pool: string,
      liquidity: BigNumberish,
      data: BytesLike,
      minWithdrawals: TokenAmountStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    burnLiquiditySingle(
      pool: string,
      liquidity: BigNumberish,
      data: BytesLike,
      minWithdrawal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    complexPath(
      params: ComplexPathParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    deployPool(
      factory: string,
      deployData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    exactInput(
      params: ExactInputParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exactInputSingle(
      params: ExactInputSingleParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exactInputSingleWithNativeToken(
      params: ExactInputSingleParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exactInputWithNativeToken(
      params: ExactInputParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvest(
      token: string,
      maxChangeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    masterDeployer(overrides?: CallOverrides): Promise<string>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    selfPermit(
      token: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    selfPermitAllowed(
      token: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    selfPermitAllowedIfNecessary(
      token: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    selfPermitIfNecessary(
      token: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sweep(
      token: string,
      recipient: string,
      fromBento: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    unwrapWETH(recipient: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addLiquidity(
      tokenInput: TokenInputStruct[],
      pool: string,
      minLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveMasterContract(
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bento(overrides?: CallOverrides): Promise<BigNumber>;

    burnLiquidity(
      pool: string,
      liquidity: BigNumberish,
      data: BytesLike,
      minWithdrawals: TokenAmountStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnLiquiditySingle(
      pool: string,
      liquidity: BigNumberish,
      data: BytesLike,
      minWithdrawal: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    complexPath(
      params: ComplexPathParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployPool(
      factory: string,
      deployData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exactInput(
      params: ExactInputParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exactInputSingle(
      params: ExactInputSingleParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exactInputSingleWithNativeToken(
      params: ExactInputSingleParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exactInputWithNativeToken(
      params: ExactInputParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvest(
      token: string,
      maxChangeAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    masterDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    selfPermit(
      token: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    selfPermitAllowed(
      token: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    selfPermitAllowedIfNecessary(
      token: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    selfPermitIfNecessary(
      token: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sweep(
      token: string,
      recipient: string,
      fromBento: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unwrapWETH(
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      tokenInput: TokenInputStruct[],
      pool: string,
      minLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveMasterContract(
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bento(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnLiquidity(
      pool: string,
      liquidity: BigNumberish,
      data: BytesLike,
      minWithdrawals: TokenAmountStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnLiquiditySingle(
      pool: string,
      liquidity: BigNumberish,
      data: BytesLike,
      minWithdrawal: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    complexPath(
      params: ComplexPathParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployPool(
      factory: string,
      deployData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exactInput(
      params: ExactInputParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exactInputSingle(
      params: ExactInputSingleParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exactInputSingleWithNativeToken(
      params: ExactInputSingleParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exactInputWithNativeToken(
      params: ExactInputParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvest(
      token: string,
      maxChangeAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    masterDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    selfPermit(
      token: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    selfPermitAllowed(
      token: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    selfPermitAllowedIfNecessary(
      token: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    selfPermitIfNecessary(
      token: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sweep(
      token: string,
      recipient: string,
      fromBento: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unwrapWETH(
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
