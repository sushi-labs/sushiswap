/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TickMathMock, TickMathMockInterface } from "../TickMathMock";

const _abi = [
  {
    inputs: [],
    name: "PriceOutOfBounds",
    type: "error",
  },
  {
    inputs: [],
    name: "TickOutOfBounds",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    name: "getSqrtRatioAtTick",
    outputs: [
      {
        internalType: "uint160",
        name: "",
        type: "uint160",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtPriceX96",
        type: "uint160",
      },
    ],
    name: "getTickAtSqrtRatio",
    outputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061094f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634f76c0581461003b578063986cfba314610066575b600080fd5b61004e6100493660046107e3565b61009e565b60405160029190910b81526020015b60405180910390f35b610079610074366004610820565b6100af565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161005d565b60006100a9826100ba565b92915050565b60006100a982610450565b60006401000276a373ffffffffffffffffffffffffffffffffffffffff8316108061010f575073fffd8963efd1fc6a506488495d951d5263988d2673ffffffffffffffffffffffffffffffffffffffff831610155b15610146576040517f6e4ba61d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b77ffffffffffffffffffffffffffffffffffffffff00000000602083901b166fffffffffffffffffffffffffffffffff811160071b81811c67ffffffffffffffff811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c979088119617909417909217179091171717608081106101f057607f810383901c91506101fa565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581027ffffffffffffffffffffffffffffffffffd709b7e5480fba5a50fed5e62ffc5568101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b14610441578873ffffffffffffffffffffffffffffffffffffffff1661041982610450565b73ffffffffffffffffffffffffffffffffffffffff16111561043b5781610443565b80610443565b815b9998505050505050505050565b60008060008360020b12610467578260020b610474565b8260020b61047490610872565b905061049f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186108ab565b62ffffff168111156104dd576040517ff87dc40c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600182166104fe57700100000000000000000000000000000000610510565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615610544576ffff97272373d413259a46990580e213a0260801c5b6004821615610563576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615610582576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156105a1576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156105c0576fff973b41fa98c081472e6896dfb254c00260801c5b60408216156105df576fff2ea16466c96a3843ec78b326b528610260801c5b60808216156105fe576ffe5dee046a99a2a811c461f1969c30530260801c5b61010082161561061e576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b61020082161561063e576ff987a7253ac413176f2b074cf7815e540260801c5b61040082161561065e576ff3392b0822b70005940c7a398e4b70f30260801c5b61080082161561067e576fe7159475a2c29b7443b29c7fa6e889d90260801c5b61100082161561069e576fd097f3bdfd2022b8845ad8f792aa58250260801c5b6120008216156106be576fa9f746462d870fdf8a65dc1f90e061e50260801c5b6140008216156106de576f70d869a156d2a1b890bb3df62baf32f70260801c5b6180008216156106fe576f31be135f97d08fd981231505542fcfa60260801c5b6201000082161561071f576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b6202000082161561073f576e5d6af8dedb81196699c329225ee6040260801c5b6204000082161561075e576d2216e584f5fa1ea926041bedfe980260801c5b6208000082161561077b576b048a170391f7dc42444e8fa20260801c5b60008460020b13156107ba57807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff816107b6576107b66108ea565b0490505b6401000000008106156107ce5760016107d1565b60005b60ff16602082901c0192505050919050565b6000602082840312156107f557600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461081957600080fd5b9392505050565b60006020828403121561083257600080fd5b81358060020b811461081957600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007f80000000000000000000000000000000000000000000000000000000000000008214156108a4576108a4610843565b5060000390565b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008114156108e1576108e1610843565b60000392915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220753a50f4713cb3dffea85c883eb2fd0517615f4e7d3ac1ead0da0a7bccec52eb64736f6c634300080a0033";

type TickMathMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TickMathMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TickMathMock__factory extends ContractFactory {
  constructor(...args: TickMathMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TickMathMock> {
    return super.deploy(overrides || {}) as Promise<TickMathMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TickMathMock {
    return super.attach(address) as TickMathMock;
  }
  connect(signer: Signer): TickMathMock__factory {
    return super.connect(signer) as TickMathMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TickMathMockInterface {
    return new utils.Interface(_abi) as TickMathMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TickMathMock {
    return new Contract(address, _abi, signerOrProvider) as TickMathMock;
  }
}
