/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TransferMock, TransferMockInterface } from "../TransferMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "safeApprove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "safeTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "safeTransferETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610789806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80637c4368c114610051578063d1660f9914610066578063d9fc4b6114610079578063eb5625d91461008c575b600080fd5b61006461005f36600461063e565b61009f565b005b610064610074366004610668565b6100ad565b6100646100873660046106a4565b6100bd565b61006461009a366004610668565b6100cf565b6100a982826100da565b5050565b6100b88383836101c3565b505050565b6100c984848484610333565b50505050565b6100b88383836104ac565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff841690839060405161011191906106ef565b60006040518083038185875af1925050503d806000811461014e576040519150601f19603f3d011682016040523d82523d6000602084013e610153565b606091505b50509050806100b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f535445000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052915160009283929087169161025a91906106ef565b6000604051808303816000865af19150503d8060008114610297576040519150601f19603f3d011682016040523d82523d6000602084013e61029c565b606091505b50915091508180156102c65750805115806102c65750808060200190518101906102c6919061072a565b61032c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f535400000000000000000000000000000000000000000000000000000000000060448201526064016101ba565b5050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905291516000928392908816916103d291906106ef565b6000604051808303816000865af19150503d806000811461040f576040519150601f19603f3d011682016040523d82523d6000602084013e610414565b606091505b509150915081801561043e57508051158061043e57508080602001905181019061043e919061072a565b6104a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f535446000000000000000000000000000000000000000000000000000000000060448201526064016101ba565b505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052915160009283929087169161054391906106ef565b6000604051808303816000865af19150503d8060008114610580576040519150601f19603f3d011682016040523d82523d6000602084013e610585565b606091505b50915091508180156105af5750805115806105af5750808060200190518101906105af919061072a565b61032c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f534100000000000000000000000000000000000000000000000000000000000060448201526064016101ba565b803573ffffffffffffffffffffffffffffffffffffffff8116811461063957600080fd5b919050565b6000806040838503121561065157600080fd5b61065a83610615565b946020939093013593505050565b60008060006060848603121561067d57600080fd5b61068684610615565b925061069460208501610615565b9150604084013590509250925092565b600080600080608085870312156106ba57600080fd5b6106c385610615565b93506106d160208601610615565b92506106df60408601610615565b9396929550929360600135925050565b6000825160005b8181101561071057602081860181015185830152016106f6565b8181111561071f576000828501525b509190910192915050565b60006020828403121561073c57600080fd5b8151801515811461074c57600080fd5b939250505056fea264697066735822122068983922643dcb56bf49d38ae030e75d12e354de95a9486376d0f97556891ef364736f6c634300080a0033";

type TransferMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TransferMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TransferMock__factory extends ContractFactory {
  constructor(...args: TransferMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TransferMock> {
    return super.deploy(overrides || {}) as Promise<TransferMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TransferMock {
    return super.attach(address) as TransferMock;
  }
  connect(signer: Signer): TransferMock__factory {
    return super.connect(signer) as TransferMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TransferMockInterface {
    return new utils.Interface(_abi) as TransferMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TransferMock {
    return new Contract(address, _abi, signerOrProvider) as TransferMock;
  }
}
