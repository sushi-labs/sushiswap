{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,IAAM,WAAW,GAAG,0JAA0J,CAAC;AAC/K,IAAM,MAAM,GAAG,eAAe,CAAC;AAC/B,IAAM,UAAU,GAAG,IAAI,CAAC;AACxB,IAAM,cAAc,GAAG,gBAAgB,CAAC;AACxC,IAAM,oBAAoB,GAAG,0BAA0B,CAAC;AAExD,MAAM,UAAU,SAAS,CAAC,KAAa;IACrC,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB,IAAI,CAAyB,CAAC;IAE9B,2BAA2B;IAC3B,OAAO,CAAC,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,IAAI,EAAE;QAChC,IAAG,KAAK,GAAY,CAAC,GAAb,EAAE,KAAK,GAAK,CAAC,MAAN,CAAO;QAE9B;QACE,oCAAoC;QACpC,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC;YAC3B,iDAAiD;YACjD,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC;gBACvB,KAAK,KAAK,CAAC;gBACX,KAAK,GAAG,KAAK,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,CAAC;YACxC,eAAe;YACf,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,GAAG;gBACzC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,EAC1D;YACA,mEAAmE;YACnE,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,oBAAoB,EAAE,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,WAAW,EAAE,EAAf,CAAe,CAAC,CAAC;YACtE,SAAS;SACV;QAED,MAAM,IAAI,KAAK,CAAC;KACjB;IAED,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["const SMALL_WORDS = /\\b(?:an?d?|a[st]|because|but|by|en|for|i[fn]|neither|nor|o[fnr]|only|over|per|so|some|tha[tn]|the|to|up|upon|vs?\\.?|versus|via|when|with|without|yet)\\b/i;\nconst TOKENS = /[^\\s:–—-]+|./g;\nconst WHITESPACE = /\\s/;\nconst IS_MANUAL_CASE = /.(?=[A-Z]|\\..)/;\nconst ALPHANUMERIC_PATTERN = /[A-Za-z0-9\\u00C0-\\u00FF]/;\n\nexport function titleCase(input: string) {\n  let result = \"\";\n  let m: RegExpExecArray | null;\n\n  // tslint:disable-next-line\n  while ((m = TOKENS.exec(input)) !== null) {\n    const { 0: token, index } = m;\n\n    if (\n      // Ignore already capitalized words.\n      !IS_MANUAL_CASE.test(token) &&\n      // Ignore small words except at beginning or end.\n      (!SMALL_WORDS.test(token) ||\n        index === 0 ||\n        index + token.length === input.length) &&\n      // Ignore URLs.\n      (input.charAt(index + token.length) !== \":\" ||\n        WHITESPACE.test(input.charAt(index + token.length + 1)))\n    ) {\n      // Find and uppercase first word character, skips over *modifiers*.\n      result += token.replace(ALPHANUMERIC_PATTERN, (m) => m.toUpperCase());\n      continue;\n    }\n\n    result += token;\n  }\n\n  return result;\n}\n"]}