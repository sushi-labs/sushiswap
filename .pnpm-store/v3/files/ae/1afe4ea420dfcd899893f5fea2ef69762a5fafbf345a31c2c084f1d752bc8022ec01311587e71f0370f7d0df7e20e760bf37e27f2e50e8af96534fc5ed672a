import { QueryKey, QueryObserver, UseBaseQueryOptions } from '@tanstack/react-query';
export declare function useBaseQuery<TQueryFnData, TError = unknown, TData = TQueryFnData, TQueryData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(options: UseBaseQueryOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>, Observer: typeof QueryObserver): {
    readonly defaultedOptions: import("@tanstack/react-query").DefaultedQueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>;
    readonly isIdle: boolean;
    readonly isLoading: boolean;
    readonly observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>;
    readonly status: "error" | "success" | "idle" | "loading";
    readonly data: undefined;
    readonly error: TError;
    readonly isError: true;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (import("@tanstack/react-query").RefetchOptions & import("@tanstack/react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("@tanstack/react-query").QueryObserverResult<TData, TError>>;
    readonly remove: () => void;
    readonly fetchStatus: import("@tanstack/react-query").FetchStatus;
} | {
    readonly defaultedOptions: import("@tanstack/react-query").DefaultedQueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>;
    readonly isIdle: boolean;
    readonly isLoading: boolean;
    readonly observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>;
    readonly status: "error" | "success" | "idle" | "loading";
    readonly data: undefined;
    readonly error: null;
    readonly isError: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (import("@tanstack/react-query").RefetchOptions & import("@tanstack/react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("@tanstack/react-query").QueryObserverResult<TData, TError>>;
    readonly remove: () => void;
    readonly fetchStatus: import("@tanstack/react-query").FetchStatus;
} | {
    readonly defaultedOptions: import("@tanstack/react-query").DefaultedQueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>;
    readonly isIdle: boolean;
    readonly isLoading: boolean;
    readonly observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>;
    readonly status: "error" | "success" | "idle" | "loading";
    readonly data: TData;
    readonly error: TError;
    readonly isError: true;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (import("@tanstack/react-query").RefetchOptions & import("@tanstack/react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("@tanstack/react-query").QueryObserverResult<TData, TError>>;
    readonly remove: () => void;
    readonly fetchStatus: import("@tanstack/react-query").FetchStatus;
} | {
    readonly defaultedOptions: import("@tanstack/react-query").DefaultedQueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>;
    readonly isIdle: boolean;
    readonly isLoading: boolean;
    readonly observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>;
    readonly status: "error" | "success" | "idle" | "loading";
    readonly data: TData;
    readonly error: null;
    readonly isError: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isPaused: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (import("@tanstack/react-query").RefetchOptions & import("@tanstack/react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("@tanstack/react-query").QueryObserverResult<TData, TError>>;
    readonly remove: () => void;
    readonly fetchStatus: import("@tanstack/react-query").FetchStatus;
};
