/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MigratorInterface extends utils.Interface {
  functions: {
    "bento()": FunctionFragment;
    "constantProductPoolFactory()": FunctionFragment;
    "masterChef()": FunctionFragment;
    "masterDeployer()": FunctionFragment;
    "migrate(address)": FunctionFragment;
    "migrated(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bento", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "constantProductPoolFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "masterChef",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "masterDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "migrate", values: [string]): string;
  encodeFunctionData(functionFragment: "migrated", values: [string]): string;

  decodeFunctionResult(functionFragment: "bento", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "constantProductPoolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "masterChef", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrated", data: BytesLike): Result;

  events: {
    "Migrate(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Migrate"): EventFragment;
}

export type MigrateEvent = TypedEvent<
  [string, string, string],
  { oldPool: string; newPool: string; intermediaryToken: string }
>;

export type MigrateEventFilter = TypedEventFilter<MigrateEvent>;

export interface Migrator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MigratorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bento(overrides?: CallOverrides): Promise<[string]>;

    constantProductPoolFactory(overrides?: CallOverrides): Promise<[string]>;

    masterChef(overrides?: CallOverrides): Promise<[string]>;

    masterDeployer(overrides?: CallOverrides): Promise<[string]>;

    migrate(
      oldPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrated(arg0: string, overrides?: CallOverrides): Promise<[string]>;
  };

  bento(overrides?: CallOverrides): Promise<string>;

  constantProductPoolFactory(overrides?: CallOverrides): Promise<string>;

  masterChef(overrides?: CallOverrides): Promise<string>;

  masterDeployer(overrides?: CallOverrides): Promise<string>;

  migrate(
    oldPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrated(arg0: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    bento(overrides?: CallOverrides): Promise<string>;

    constantProductPoolFactory(overrides?: CallOverrides): Promise<string>;

    masterChef(overrides?: CallOverrides): Promise<string>;

    masterDeployer(overrides?: CallOverrides): Promise<string>;

    migrate(oldPool: string, overrides?: CallOverrides): Promise<string>;

    migrated(arg0: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Migrate(address,address,address)"(
      oldPool?: string | null,
      newPool?: string | null,
      intermediaryToken?: string | null
    ): MigrateEventFilter;
    Migrate(
      oldPool?: string | null,
      newPool?: string | null,
      intermediaryToken?: string | null
    ): MigrateEventFilter;
  };

  estimateGas: {
    bento(overrides?: CallOverrides): Promise<BigNumber>;

    constantProductPoolFactory(overrides?: CallOverrides): Promise<BigNumber>;

    masterChef(overrides?: CallOverrides): Promise<BigNumber>;

    masterDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      oldPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrated(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bento(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    constantProductPoolFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterChef(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    masterDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrate(
      oldPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrated(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
