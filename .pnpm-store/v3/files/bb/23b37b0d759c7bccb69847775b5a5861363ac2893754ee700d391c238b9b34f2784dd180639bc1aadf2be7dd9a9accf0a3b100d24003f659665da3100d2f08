{"version":3,"file":"index.js","sources":["../../src/utils.ts","../../src/core/column.ts","../../src/core/headers.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/core/instance.ts","../../src/createTable.ts","../../src/core/cell.ts","../../src/core/row.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getSortedRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getExpandedRowModel.ts","../../src/utils/getPaginationRowModel.ts"],"sourcesContent":["import { NoInfer, TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type IfDefined<T, N> = 0 extends 1 & T ? N : T extends {} ? T : N\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater(key: keyof TableState, instance: unknown) {\n  return (updater: Updater<any>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import {\n  Cell,\n  Column,\n  Header,\n  TableGenerics,\n  TableInstance,\n  Row,\n  AccessorFn,\n  ColumnDef,\n  Renderable,\n} from '../types'\nimport { memo } from '../utils'\n\nexport type CoreColumnDefType = 'data' | 'display' | 'group'\n\nexport type CoreColumnDef<TGenerics extends TableGenerics> = {\n  id: string\n  accessorKey?: string & keyof TGenerics['Row']\n  accessorFn?: AccessorFn<TGenerics['Row']>\n  columns?: ColumnDef<TGenerics>[]\n  header?: Renderable<\n    TGenerics,\n    {\n      instance: TableInstance<TGenerics>\n      header: Header<TGenerics>\n      column: Column<TGenerics>\n    }\n  >\n  footer?: Renderable<\n    TGenerics,\n    {\n      instance: TableInstance<TGenerics>\n      header: Header<TGenerics>\n      column: Column<TGenerics>\n    }\n  >\n  cell?: Renderable<\n    TGenerics,\n    {\n      instance: TableInstance<TGenerics>\n      row: Row<TGenerics>\n      column: Column<TGenerics>\n      cell: Cell<TGenerics>\n      getValue: () => TGenerics['Value']\n    }\n  >\n  meta?: TGenerics['ColumnMeta']\n}\n\nexport type CoreColumn<TGenerics extends TableGenerics> = {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TGenerics['Row']>\n  columnDef: ColumnDef<TGenerics>\n  columnDefType: CoreColumnDefType\n  columns: Column<TGenerics>[]\n  parent?: Column<TGenerics>\n  getFlatColumns: () => Column<TGenerics>[]\n  getLeafColumns: () => Column<TGenerics>[]\n}\n\nexport function createColumn<TGenerics extends TableGenerics>(\n  instance: TableInstance<TGenerics>,\n  columnDef: ColumnDef<TGenerics> & { columnDefType?: CoreColumnDefType },\n  depth: number,\n  parent?: Column<TGenerics>\n) {\n  const defaultColumn = instance._getDefaultColumnDef()\n\n  columnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  }\n\n  let id =\n    columnDef.id ??\n    columnDef.accessorKey ??\n    (typeof columnDef.header === 'string' ? columnDef.header : undefined)\n\n  let accessorFn: AccessorFn<TGenerics['Row']> | undefined\n\n  if (columnDef.accessorFn) {\n    accessorFn = columnDef.accessorFn\n  } else if (columnDef.accessorKey) {\n    accessorFn = (originalRow?: TGenerics['Row']) =>\n      (originalRow as any)[columnDef.accessorKey]\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        columnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TGenerics> = {\n    ...columnDef,\n    id: `${id}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef,\n    columnDefType: columnDef.columnDefType as CoreColumnDefType,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TGenerics>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [instance._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TGenerics>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n  }\n\n  column = instance._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, instance))\n  }, column)\n\n  // Yes, we have to convert instance to uknown, because we know more than the compiler here.\n  return column as Column<TGenerics>\n}\n","import {\n  Column,\n  Header,\n  HeaderGroup,\n  TableGenerics,\n  TableInstance,\n} from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './instance'\n\nexport type CoreHeaderGroup<TGenerics extends TableGenerics> = {\n  id: string\n  depth: number\n  headers: Header<TGenerics>[]\n}\n\nexport type CoreHeader<TGenerics extends TableGenerics> = {\n  id: string\n  index: number\n  depth: number\n  column: Column<TGenerics>\n  headerGroup: HeaderGroup<TGenerics>\n  subHeaders: Header<TGenerics>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TGenerics>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  renderHeader: (options?: {\n    renderPlaceholder?: boolean\n  }) => string | null | TGenerics['Rendered']\n  renderFooter: (options?: {\n    renderPlaceholder?: boolean\n  }) => string | null | TGenerics['Rendered']\n}\n\nexport type HeadersInstance<TGenerics extends TableGenerics> = {\n  getHeaderGroups: () => HeaderGroup<TGenerics>[]\n  getLeftHeaderGroups: () => HeaderGroup<TGenerics>[]\n  getCenterHeaderGroups: () => HeaderGroup<TGenerics>[]\n  getRightHeaderGroups: () => HeaderGroup<TGenerics>[]\n\n  getFooterGroups: () => HeaderGroup<TGenerics>[]\n  getLeftFooterGroups: () => HeaderGroup<TGenerics>[]\n  getCenterFooterGroups: () => HeaderGroup<TGenerics>[]\n  getRightFooterGroups: () => HeaderGroup<TGenerics>[]\n\n  getFlatHeaders: () => Header<TGenerics>[]\n  getLeftFlatHeaders: () => Header<TGenerics>[]\n  getCenterFlatHeaders: () => Header<TGenerics>[]\n  getRightFlatHeaders: () => Header<TGenerics>[]\n\n  getLeafHeaders: () => Header<TGenerics>[]\n  getLeftLeafHeaders: () => Header<TGenerics>[]\n  getCenterLeafHeaders: () => Header<TGenerics>[]\n  getRightLeafHeaders: () => Header<TGenerics>[]\n}\n\n//\n\nfunction createHeader<TGenerics extends TableGenerics>(\n  instance: TableInstance<TGenerics>,\n  column: Column<TGenerics>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n) {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TGenerics> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TGenerics>[] => {\n      const leafHeaders: CoreHeader<TGenerics>[] = []\n\n      const recurseHeader = (h: CoreHeader<TGenerics>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders as Header<TGenerics>[]\n    },\n    renderHeader: () =>\n      column.columnDef.header\n        ? instance._render(column.columnDef.header, {\n            instance,\n            header: header as Header<TGenerics>,\n            column,\n          })\n        : null,\n    renderFooter: () =>\n      column.columnDef.footer\n        ? instance._render(column.columnDef.footer, {\n            instance,\n            header: header as Header<TGenerics>,\n            column,\n          })\n        : null,\n  }\n\n  instance._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, instance))\n  })\n\n  return header as Header<TGenerics>\n}\n\nexport const Headers: TableFeature = {\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): HeadersInstance<TGenerics> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            instance\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, instance, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            instance,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            instance,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [instance.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [instance.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [instance.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [instance.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [instance.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [instance.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [instance.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [instance.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [instance.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [instance.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [instance.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          instance.getLeftHeaderGroups(),\n          instance.getCenterHeaderGroups(),\n          instance.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TGenerics extends TableGenerics>(\n  allColumns: Column<TGenerics>[],\n  columnsToGroup: Column<TGenerics>[],\n  instance: TableInstance<TGenerics>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TGenerics>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TGenerics>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TGenerics>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TGenerics> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TGenerics>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TGenerics>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (latestPendingParentHeader?.column === column) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(instance, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(instance, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TGenerics>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/instance'\nimport {\n  Column,\n  Header,\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  Updater,\n} from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport type ColumnSizingTableState = {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport type ColumnSizingInfoState = {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport type ColumnSizingOptions = {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingDefaultOptions = {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingInstance<TGenerics extends TableGenerics> = {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport type ColumnSizingColumnDef = {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport type ColumnSizingColumn<TGenerics extends TableGenerics> = {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport type ColumnSizingHeader<TGenerics extends TableGenerics> = {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', instance),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', instance),\n    }\n  },\n\n  createColumn: <TGenerics extends TableGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingColumn<TGenerics> => {\n    return {\n      getSize: () => {\n        const columnSize = instance.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? instance.getVisibleLeafColumns()\n          : position === 'left'\n          ? instance.getLeftVisibleLeafColumns()\n          : instance.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        instance.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (instance.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return (\n          instance.getState().columnSizingInfo.isResizingColumn === column.id\n        )\n      },\n    }\n  },\n\n  createHeader: <TGenerics extends TableGenerics>(\n    header: Header<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingHeader<TGenerics> => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TGenerics>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = instance.getColumn(header.column.id)\n        const canResize = column.getCanResize()\n\n        return (e: unknown) => {\n          if (!canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            let newColumnSizing: ColumnSizingState = {}\n\n            instance.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              instance.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              instance.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            instance.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]!.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          instance.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingInstance<TGenerics> => {\n    return {\n      setColumnSizing: updater =>\n        instance.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        instance.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        instance.setColumnSizing(\n          defaultState ? {} : instance.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        instance.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : instance.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        instance.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        instance.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        instance.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        instance.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/instance'\nimport {\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  Row,\n  Updater,\n} from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport type ExpandedTableState = {\n  expanded: ExpandedState\n}\n\nexport type ExpandedRow = {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport type ExpandedOptions<TGenerics extends TableGenerics> = {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (\n    instance: TableInstance<TGenerics>\n  ) => () => RowModel<TGenerics>\n  getIsRowExpanded?: (row: Row<TGenerics>) => boolean\n  getRowCanExpand?: (row: Row<TGenerics>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport type ExpandedInstance<TGenerics extends TableGenerics> = {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TGenerics>\n  _getExpandedRowModel?: () => RowModel<TGenerics>\n  getPreExpandedRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ExpandedOptions<TGenerics> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', instance),\n      autoResetExpanded: true,\n      paginateExpandedRows: true,\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ExpandedInstance<TGenerics> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          instance._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (\n          instance.options.autoResetAll === true ||\n          instance.options.autoResetExpanded\n        ) {\n          if (queued) return\n          queued = true\n          instance._queue(() => {\n            instance.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => instance.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !instance.getIsAllRowsExpanded()) {\n          instance.setExpanded(true)\n        } else {\n          instance.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        instance.setExpanded(\n          defaultState ? {} : instance.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return instance.getRowModel().flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          instance.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = instance.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = instance.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (expanded === true) {\n          return true\n        }\n\n        // If any row is not expanded, return false\n        if (instance.getRowModel().flatRows.some(row => row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          instance.getState().expanded === true\n            ? Object.keys(instance.getRowModel().rowsById)\n            : Object.keys(instance.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => instance.getGroupedRowModel(),\n      getExpandedRowModel: () => {\n        if (\n          !instance._getExpandedRowModel &&\n          instance.options.getExpandedRowModel\n        ) {\n          instance._getExpandedRowModel =\n            instance.options.getExpandedRowModel(instance)\n        }\n\n        if (\n          instance.options.manualExpanding ||\n          !instance._getExpandedRowModel\n        ) {\n          return instance.getPreExpandedRowModel()\n        }\n\n        return instance._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TGenerics extends TableGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        instance.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(instance.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = instance.getState().expanded\n\n        return !!(\n          instance.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          (instance.options.getRowCanExpand?.(row) ?? true) &&\n          (instance.options.enableExpanding ?? true) &&\n          !!row.subRows?.length\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return row.getValue(columnId).toLowerCase().includes(search)\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return row.getValue(columnId).includes(filterValue)\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return row.getValue(columnId).toLowerCase() === filterValue.toLowerCase()\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId).includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(val => !row.getValue(columnId).includes(val))\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val => row.getValue(columnId).includes(val))\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/instance'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  Row,\n  Updater,\n} from '../types'\nimport {\n  functionalUpdate,\n  isFunction,\n  makeStateUpdater,\n  memo,\n  Overwrite,\n} from '../utils'\n\nexport type FiltersTableState = {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport type ColumnFilter = {\n  id: string\n  value: unknown\n}\n\nexport type ResolvedColumnFilter<TGenerics extends TableGenerics> = {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TGenerics>\n}\n\nexport type FilterFn<TGenerics extends TableGenerics> = {\n  (\n    row: Row<TGenerics>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: TGenerics['FilterMeta']) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TGenerics>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TGenerics>\n}\n\nexport type TransformFilterValueFn<TGenerics extends TableGenerics> = (\n  value: any,\n  column?: Column<TGenerics>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TGenerics extends TableGenerics> = (\n  value: any,\n  column?: Column<TGenerics>\n) => boolean\n\nexport type CustomFilterFns<TGenerics extends TableGenerics> = Record<\n  string,\n  FilterFn<TGenerics>\n>\n\nexport type FilterFnOption<TGenerics extends TableGenerics> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof TGenerics['FilterFns']\n  | FilterFn<TGenerics>\n\nexport type FiltersColumnDef<TGenerics extends TableGenerics> = {\n  filterFn?: FilterFnOption<Overwrite<TGenerics, { Value: any }>>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport type FiltersColumn<TGenerics extends TableGenerics> = {\n  filterFn: FilterFnOption<Overwrite<TGenerics, { Value: any }>>\n  getAutoFilterFn: () => FilterFn<TGenerics> | undefined\n  getFilterFn: () => FilterFn<TGenerics> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TGenerics>\n  _getFacetedRowModel?: () => RowModel<TGenerics>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport type FiltersRow<TGenerics extends TableGenerics> = {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, TGenerics['FilterMeta']>\n}\n\nexport type FiltersOptions<TGenerics extends TableGenerics> = {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  filterFns?: TGenerics['FilterFns']\n  getFilteredRowModel?: (\n    instance: TableInstance<TGenerics>\n  ) => () => RowModel<TGenerics>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TGenerics>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TGenerics>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    instance: TableInstance<TGenerics>,\n    columnId: string\n  ) => () => RowModel<TGenerics>\n  getFacetedUniqueValues?: (\n    instance: TableInstance<TGenerics>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    instance: TableInstance<TGenerics>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\nexport type FiltersInstance<TGenerics extends TableGenerics> = {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TGenerics>\n  getFilteredRowModel: () => RowModel<TGenerics>\n  _getFilteredRowModel?: () => RowModel<TGenerics>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TGenerics> | undefined\n  getGlobalFilterFn: () => FilterFn<TGenerics> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TGenerics>\n  _getGlobalFacetedRowModel?: () => RowModel<TGenerics>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <\n    TGenerics extends TableGenerics\n  >(): FiltersColumnDef<TGenerics> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): FiltersOptions<TGenerics> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', instance),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', instance),\n      filterFromLeafRows: false,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = instance\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string'\n      },\n    }\n  },\n\n  createColumn: <TGenerics extends TableGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): FiltersColumn<TGenerics> => {\n    return {\n      filterFn: column.filterFn,\n      getAutoFilterFn: () => {\n        const firstRow = instance.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        const userFilterFns = instance.options.filterFns\n\n        return isFunction(column.filterFn)\n          ? column.filterFn\n          : column.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          : (userFilterFns as Record<string, any>)?.[\n              column.filterFn as string\n            ] ??\n            (filterFns[\n              column.filterFn as BuiltInFilterFn\n            ] as FilterFn<TGenerics>)\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (instance.options.enableColumnFilters ?? true) &&\n          (instance.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (instance.options.enableGlobalFilter ?? true) &&\n          (instance.options.enableFilters ?? true) &&\n          (instance.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        instance.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        instance.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        instance.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TGenerics>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        instance.options.getFacetedRowModel &&\n        instance.options.getFacetedRowModel(instance, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return instance.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        instance.options.getFacetedUniqueValues &&\n        instance.options.getFacetedUniqueValues(instance, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        instance.options.getFacetedMinMaxValues &&\n        instance.options.getFacetedMinMaxValues(instance, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TGenerics extends TableGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): FiltersRow<TGenerics> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): FiltersInstance<TGenerics> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { filterFns: userFilterFns, globalFilterFn: globalFilterFn } =\n          instance.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? instance.getGlobalAutoFilterFn()\n          : (userFilterFns as Record<string, any>)?.[\n              globalFilterFn as string\n            ] ??\n            (filterFns[\n              globalFilterFn as BuiltInFilterFn\n            ] as FilterFn<TGenerics>)\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = instance.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        instance.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        instance.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        instance.setGlobalFilter(\n          defaultState ? undefined : instance.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        instance.setColumnFilters(\n          defaultState ? [] : instance.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => instance.getCoreRowModel(),\n      _getFilteredRowModel:\n        instance.options.getFilteredRowModel &&\n        instance.options.getFilteredRowModel(instance),\n      getFilteredRowModel: () => {\n        if (\n          instance.options.manualFiltering ||\n          !instance._getFilteredRowModel\n        ) {\n          return instance.getPreFilteredRowModel()\n        }\n\n        return instance._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        instance.options.getFacetedRowModel &&\n        instance.options.getFacetedRowModel(instance, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (\n          instance.options.manualFiltering ||\n          !instance._getGlobalFacetedRowModel\n        ) {\n          return instance.getPreFilteredRowModel()\n        }\n\n        return instance._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        instance.options.getFacetedUniqueValues &&\n        instance.options.getFacetedUniqueValues(instance, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!instance._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return instance._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        instance.options.getFacetedMinMaxValues &&\n        instance.options.getFacetedMinMaxValues(instance, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!instance._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return instance._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TGenerics extends TableGenerics>(\n  filterFn?: FilterFn<TGenerics>,\n  value?: any,\n  column?: Column<TGenerics>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce(\n    (sum: number, next: unknown) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId)\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/instance'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  TableInstance,\n  Row,\n  Updater,\n  Renderable,\n  TableGenerics,\n} from '../types'\nimport { isFunction, makeStateUpdater, Overwrite } from '../utils'\n\nexport type GroupingState = string[]\n\nexport type GroupingTableState = {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TGenerics extends TableGenerics> = (\n  columnId: string,\n  leafRows: Row<TGenerics>[],\n  childRows: Row<TGenerics>[]\n) => any\n\nexport type CustomAggregationFns<TGenerics extends TableGenerics> = Record<\n  string,\n  AggregationFn<TGenerics>\n>\n\nexport type AggregationFnOption<TGenerics extends TableGenerics> =\n  | 'auto'\n  | BuiltInAggregationFn\n  | keyof TGenerics['AggregationFns']\n  | AggregationFn<TGenerics>\n\nexport type GroupingColumnDef<TGenerics extends TableGenerics> = {\n  aggregationFn?: AggregationFnOption<Overwrite<TGenerics, { Value: any }>>\n  aggregatedCell?: Renderable<\n    TGenerics,\n    {\n      instance: TableInstance<TGenerics>\n      row: Row<TGenerics>\n      column: Column<TGenerics>\n      cell: Cell<TGenerics>\n      getValue: () => TGenerics['Value']\n    }\n  >\n  enableGrouping?: boolean\n}\n\nexport type GroupingColumn<TGenerics extends TableGenerics> = {\n  aggregationFn?: AggregationFnOption<Overwrite<TGenerics, { Value: any }>>\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TGenerics> | undefined\n  getAggregationFn: () => AggregationFn<TGenerics> | undefined\n}\n\nexport type GroupingRow = {\n  groupingColumnId?: string\n  groupingValue?: any\n  getIsGrouped: () => boolean\n  _groupingValuesCache: Record<string, any>\n}\n\nexport type GroupingCell<TGenerics extends TableGenerics> = {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n  renderAggregatedCell: () => string | null | TGenerics['Rendered']\n}\n\nexport type ColumnDefaultOptions = {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\nexport type GroupingOptions<TGenerics extends TableGenerics> = {\n  manualGrouping?: boolean\n  aggregationFns?: TGenerics['AggregationFns']\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (\n    instance: TableInstance<TGenerics>\n  ) => () => RowModel<TGenerics>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport type GroupingInstance<TGenerics extends TableGenerics> = {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TGenerics>\n  getGroupedRowModel: () => RowModel<TGenerics>\n  _getGroupedRowModel?: () => RowModel<TGenerics>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <\n    TGenerics extends TableGenerics\n  >(): GroupingColumnDef<TGenerics> => {\n    return {\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): GroupingOptions<TGenerics> => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', instance),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TGenerics extends TableGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): GroupingColumn<TGenerics> => {\n    return {\n      toggleGrouping: () => {\n        instance.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          instance.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return instance.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => instance.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = instance.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n\n        return aggregationFns.count\n      },\n      getAggregationFn: () => {\n        const userAggregationFns = instance.options.aggregationFns\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.aggregationFn)\n          ? column.aggregationFn\n          : column.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : (userAggregationFns as Record<string, any>)?.[\n              column.aggregationFn as string\n            ] ??\n            (aggregationFns[\n              column.aggregationFn as BuiltInAggregationFn\n            ] as AggregationFn<TGenerics>)\n      },\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): GroupingInstance<TGenerics> => {\n    return {\n      setGrouping: updater => instance.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        instance.setGrouping(\n          defaultState ? [] : instance.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => instance.getSortedRowModel(),\n      getGroupedRowModel: () => {\n        if (\n          !instance._getGroupedRowModel &&\n          instance.options.getGroupedRowModel\n        ) {\n          instance._getGroupedRowModel =\n            instance.options.getGroupedRowModel(instance)\n        }\n\n        if (instance.options.manualGrouping || !instance._getGroupedRowModel) {\n          return instance.getPreGroupedRowModel()\n        }\n\n        return instance._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TGenerics extends TableGenerics>(\n    row: Row<TGenerics>\n  ): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TGenerics extends TableGenerics>(\n    cell: Cell<TGenerics>,\n    column: Column<TGenerics>,\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): GroupingCell<TGenerics> => {\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        row.subRows?.length > 1,\n      renderAggregatedCell: () => {\n        const template =\n          column.columnDef.aggregatedCell ?? column.columnDef.cell\n\n        return template\n          ? instance._render(template, {\n              instance,\n              column,\n              row,\n              cell,\n              getValue: cell.getValue,\n            })\n          : null\n      },\n    }\n  },\n}\n\nexport function orderColumns<TGenerics extends TableGenerics>(\n  leafColumns: Column<TGenerics>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport {\n  TableInstance,\n  OnChangeFn,\n  Updater,\n  Column,\n  TableGenerics,\n} from '../types'\n\nimport { Grouping, orderColumns } from './Grouping'\nimport { TableFeature } from '../core/instance'\n\nexport type ColumnOrderTableState = {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport type ColumnOrderOptions = {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderDefaultOptions = {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderInstance<TGenerics extends TableGenerics> = {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TGenerics>[]\n  ) => Column<TGenerics>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', instance),\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnOrderInstance<TGenerics> => {\n    return {\n      setColumnOrder: updater =>\n        instance.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        instance.setColumnOrder(\n          defaultState ? [] : instance.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          instance.getState().columnOrder,\n          instance.getState().grouping,\n          instance.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TGenerics>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/instance'\nimport {\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  RowModel,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport type PaginationState = {\n  pageIndex: number\n  pageSize: number\n  pageCount?: number\n}\n\nexport type PaginationTableState = {\n  pagination: PaginationState\n}\n\nexport type PaginationInitialTableState = {\n  pagination?: Partial<PaginationState>\n}\n\nexport type PaginationOptions<TGenerics extends TableGenerics> = {\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (\n    instance: TableInstance<TGenerics>\n  ) => () => RowModel<TGenerics>\n}\n\nexport type PaginationDefaultOptions = {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport type PaginationInstance<TGenerics extends TableGenerics> = {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TGenerics>\n  getPaginationRowModel: () => RowModel<TGenerics>\n  _getPaginationRowModel?: () => RowModel<TGenerics>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', instance),\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): PaginationInstance<TGenerics> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          instance._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          instance.options.autoResetAll ??\n          instance.options.autoResetPageIndex ??\n          !instance.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          instance._queue(() => {\n            instance.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return instance.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        instance.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : instance.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        instance.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof old.pageCount !== 'undefined'\n              ? old.pageCount - 1\n              : Number.MAX_SAFE_INTEGER\n\n          pageIndex = Math.min(Math.max(0, pageIndex), maxPageIndex)\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        instance.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : instance.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        instance.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : instance.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        instance.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        instance.setPagination(old => {\n          let newPageCount = functionalUpdate(updater, old.pageCount ?? -1)\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [\n          instance.getState().pagination.pageSize,\n          instance.getState().pagination.pageCount,\n        ],\n        (pageSize, pageCount) => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => instance.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = instance.getState().pagination\n\n        const pageCount = instance.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return instance.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return instance.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => instance.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !instance._getPaginationRowModel &&\n          instance.options.getPaginationRowModel\n        ) {\n          instance._getPaginationRowModel =\n            instance.options.getPaginationRowModel(instance)\n        }\n\n        if (\n          instance.options.manualPagination ||\n          !instance._getPaginationRowModel\n        ) {\n          return instance.getPrePaginationRowModel()\n        }\n\n        return instance._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        const { pageCount } = instance.getState().pagination\n\n        if (typeof pageCount !== 'undefined') {\n          return pageCount\n        }\n\n        return Math.ceil(\n          instance.getPrePaginationRowModel().rows.length /\n            instance.getState().pagination.pageSize\n        )\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/instance'\nimport {\n  OnChangeFn,\n  Updater,\n  TableInstance,\n  Column,\n  TableGenerics,\n  Row,\n  Cell,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport type ColumnPinningState = {\n  left?: string[]\n  right?: string[]\n}\n\nexport type ColumnPinningTableState = {\n  columnPinning: ColumnPinningState\n}\n\nexport type ColumnPinningOptions = {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningDefaultOptions = {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport type ColumnPinningColumnDef = {\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningColumn = {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport type ColumnPinningRow<TGenerics extends TableGenerics> = {\n  getLeftVisibleCells: () => Cell<TGenerics>[]\n  getCenterVisibleCells: () => Cell<TGenerics>[]\n  getRightVisibleCells: () => Cell<TGenerics>[]\n}\n\nexport type ColumnPinningInstance<TGenerics extends TableGenerics> = {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TGenerics>[]\n  getRightLeafColumns: () => Column<TGenerics>[]\n  getCenterLeafColumns: () => Column<TGenerics>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', instance),\n    }\n  },\n\n  createColumn: <TGenerics extends TableGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        instance.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (instance.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = instance.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? instance.getState().columnPinning?.[position]?.indexOf(column.id) ??\n              -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TGenerics extends TableGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningRow<TGenerics> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          instance.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TGenerics>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          instance.getState().columnPinning.right,\n        ],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TGenerics>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningInstance<TGenerics> => {\n    return {\n      setColumnPinning: updater =>\n        instance.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        instance.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : instance.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = instance.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [\n          instance.getAllLeafColumns(),\n          instance.getState().columnPinning.left,\n        ],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [\n          instance.getAllLeafColumns(),\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          instance.getAllLeafColumns(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/instance'\nimport {\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  Row,\n  RowModel,\n  Updater,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport type RowSelectionTableState = {\n  rowSelection: RowSelectionState\n}\n\nexport type RowSelectionOptions<TGenerics extends TableGenerics> = {\n  enableRowSelection?: boolean | ((row: Row<TGenerics>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TGenerics>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TGenerics>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TGenerics>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   instance: TableInstance<\n  //     TData,\n  //     TValue,\n  //     TFilterFns,\n  //     TSortingFns,\n  //     TAggregationFns\n  //   >,\n  //   rowModel: RowModel<TGenerics>\n  // ) => RowModel<TGenerics>\n}\n\nexport type RowSelectionRow = {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport type RowSelectionInstance<TGenerics extends TableGenerics> = {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value: boolean) => void\n  toggleAllPageRowsSelected: (value: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TGenerics>\n  getSelectedRowModel: () => RowModel<TGenerics>\n  getFilteredSelectedRowModel: () => RowModel<TGenerics>\n  getGroupedSelectedRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): RowSelectionOptions<TGenerics> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', instance),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): RowSelectionInstance<TGenerics> => {\n    return {\n      setRowSelection: updater =>\n        instance.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        instance.setRowSelection(\n          defaultState ? {} : instance.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        instance.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined'\n              ? value\n              : !instance.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = instance.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        instance.setRowSelection(old => {\n          const selectAll =\n            typeof value !== 'undefined'\n              ? value\n              : !instance.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          instance.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, value, instance)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = instance\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   instance.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   instance.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => instance.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [instance.getState().rowSelection, instance.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(instance, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [\n          instance.getState().rowSelection,\n          instance.getFilteredRowModel(),\n        ],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(instance, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [instance.getState().rowSelection, instance.getGroupedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(instance, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = instance.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof instance.options.enableGroupingRowSelection === 'function') {\n      //     return instance.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return instance.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preFilteredFlatRows = instance.getPreFilteredRowModel().flatRows\n        const { rowSelection } = instance.getState()\n\n        let isAllRowsSelected = Boolean(\n          preFilteredFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (preFilteredFlatRows.some(row => !rowSelection[row.id])) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = instance.getPaginationRowModel().flatRows\n        const { rowSelection } = instance.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        return (\n          !instance.getIsAllRowsSelected() &&\n          !!Object.keys(instance.getState().rowSelection ?? {}).length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = instance.getPaginationRowModel().flatRows\n        return instance.getIsAllPageRowsSelected()\n          ? false\n          : !!paginationFlatRows?.length\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          instance.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          instance.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TGenerics extends TableGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        instance.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, instance)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = instance.getState()\n        return isRowSelected(row, rowSelection, instance) === true\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = instance.getState()\n        return isRowSelected(row, rowSelection, instance) === 'some'\n      },\n\n      getCanSelect: () => {\n        if (typeof instance.options.enableRowSelection === 'function') {\n          return instance.options.enableRowSelection(row)\n        }\n\n        return instance.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof instance.options.enableSubRowSelection === 'function') {\n          return instance.options.enableSubRowSelection(row)\n        }\n\n        return instance.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof instance.options.enableMultiRowSelection === 'function') {\n          return instance.options.enableMultiRowSelection(row)\n        }\n\n        return instance.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TGenerics extends TableGenerics>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  instance: TableInstance<TGenerics>\n) => {\n  const row = instance.getRow(id)\n\n  const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && instance.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    selectedRowIds[id] = true\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, instance)\n    )\n  }\n}\n\nexport function selectRowsFn<TGenerics extends TableGenerics>(\n  instance: TableInstance<TGenerics>,\n  rowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const rowSelection = instance.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TGenerics>[] = []\n  const newSelectedRowsById: Record<string, Row<TGenerics>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TGenerics>[], depth = 0): Row<TGenerics>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection, instance) === true\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TGenerics>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TGenerics extends TableGenerics>(\n  row: Row<TGenerics>,\n  selection: Record<string, boolean>,\n  instance: TableInstance<TGenerics>\n): boolean | 'some' {\n  if (selection[row.id]) {\n    return true\n  }\n\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection, instance)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? true : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    (rowA.getValue(columnId) as Date).getTime(),\n    (rowB.getValue(columnId) as Date).getTime()\n  )\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/instance'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  Row,\n  Updater,\n} from '../types'\n\nimport { isFunction, makeStateUpdater, Overwrite } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport type ColumnSort = {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport type SortingTableState = {\n  sorting: SortingState\n}\n\nexport type SortingFn<TGenerics extends TableGenerics> = {\n  (rowA: Row<TGenerics>, rowB: Row<TGenerics>, columnId: string): number\n}\n\nexport type CustomSortingFns<TGenerics extends TableGenerics> = Record<\n  string,\n  SortingFn<TGenerics>\n>\n\nexport type SortingFnOption<TGenerics extends TableGenerics> =\n  | 'auto'\n  | BuiltInSortingFn\n  | keyof TGenerics['SortingFns']\n  | SortingFn<TGenerics>\n\nexport type SortingColumnDef<TGenerics extends TableGenerics> = {\n  sortingFn?: SortingFnOption<Overwrite<TGenerics, { Value: any }>>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport type SortingColumn<TGenerics extends TableGenerics> = {\n  getAutoSortingFn: () => SortingFn<TGenerics>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TGenerics>\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\nexport type SortingOptions<TGenerics extends TableGenerics> = {\n  manualSorting?: boolean\n  sortingFns?: TGenerics['SortingFns']\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (\n    instance: TableInstance<TGenerics>\n  ) => () => RowModel<TGenerics>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\nexport type SortingInstance<TGenerics extends TableGenerics> = {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TGenerics>\n  getSortedRowModel: () => RowModel<TGenerics>\n  _getSortedRowModel?: () => RowModel<TGenerics>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <\n    TGenerics extends TableGenerics\n  >(): SortingColumnDef<TGenerics> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): SortingOptions<TGenerics> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', instance),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TGenerics extends TableGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): SortingColumn<TGenerics> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = instance.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = instance.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        const userSortingFn = instance.options.sortingFns\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : (userSortingFn as Record<string, any>)?.[\n              column.columnDef.sortingFn as string\n            ] ??\n            (sortingFns[\n              column.columnDef.sortingFn as BuiltInSortingFn\n            ] as SortingFn<TGenerics>)\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       instance.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        instance.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n          const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction\n\n          if (column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          const sortDescFirst =\n            column.columnDef.sortDescFirst ??\n            instance.options.sortDescFirst ??\n            column.getAutoSortDir() === 'desc'\n\n          // Handle toggle states that will remove the sorting\n          if (\n            sortAction === 'toggle' && // Must be toggling\n            (instance.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n            !hasDescDefined && // Must not be setting desc\n            (multi ? instance.options.enableMultiRemove ?? true : true) && // If multi, don't allow if enableMultiRemove\n            (existingSorting?.desc // Finally, detect if it should indeed be removed\n              ? !sortDescFirst\n              : sortDescFirst)\n          ) {\n            sortAction = 'remove'\n          }\n\n          if (sortAction === 'replace') {\n            newSorting = [\n              {\n                id: column.id,\n                desc: hasDescDefined ? desc! : !!sortDescFirst,\n              },\n            ]\n          } else if (sortAction === 'add' && old?.length) {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: hasDescDefined ? desc! : !!sortDescFirst,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (instance.options.maxMultiSortColCount ??\n                  Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle' && old?.length) {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: hasDescDefined ? desc! : !existingSorting?.desc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove' && old?.length) {\n            newSorting = old.filter(d => d.id !== column.id)\n          }\n\n          return newSorting\n        })\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (instance.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          instance.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = instance\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        instance.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        instance.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? instance.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): SortingInstance<TGenerics> => {\n    let registered = false\n\n    return {\n      setSorting: updater => instance.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        instance.setSorting(\n          defaultState ? [] : instance.initialState?.sorting ?? []\n        )\n      },\n      getPreSortedRowModel: () => instance.getFilteredRowModel(),\n      getSortedRowModel: () => {\n        if (\n          !instance._getSortedRowModel &&\n          instance.options.getSortedRowModel\n        ) {\n          instance._getSortedRowModel =\n            instance.options.getSortedRowModel(instance)\n        }\n\n        if (instance.options.manualSorting || !instance._getSortedRowModel) {\n          return instance.getPreSortedRowModel()\n        }\n\n        return instance._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/instance'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  Updater,\n  Row,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport type VisibilityTableState = {\n  columnVisibility: VisibilityState\n}\n\nexport type VisibilityOptions = {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport type VisibilityDefaultOptions = {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport type VisibilityInstance<TGenerics extends TableGenerics> = {\n  getVisibleFlatColumns: () => Column<TGenerics>[]\n  getVisibleLeafColumns: () => Column<TGenerics>[]\n  getLeftVisibleLeafColumns: () => Column<TGenerics>[]\n  getRightVisibleLeafColumns: () => Column<TGenerics>[]\n  getCenterVisibleLeafColumns: () => Column<TGenerics>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport type VisibilityColumnDef = {\n  enableHiding?: boolean\n}\n\nexport type VisibilityRow<TGenerics extends TableGenerics> = {\n  _getAllVisibleCells: () => Cell<TGenerics>[]\n  getVisibleCells: () => Cell<TGenerics>[]\n}\n\nexport type VisibilityColumn = {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', instance),\n    }\n  },\n\n  createColumn: <TGenerics extends TableGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          instance.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return instance.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (instance.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TGenerics extends TableGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): VisibilityRow<TGenerics> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [\n          row\n            .getAllCells()\n            .filter(cell => cell.column.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        _ => {\n          return row.getAllCells().filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): VisibilityInstance<TGenerics> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TGenerics>[]\n    ): (() => Column<TGenerics>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => instance.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => instance.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => instance.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => instance.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => instance.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        instance.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        instance.setColumnVisibility(\n          defaultState ? {} : instance.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !instance.getIsAllColumnsVisible()\n\n        instance.setColumnVisibility(\n          instance.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !instance.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        instance.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          instance.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { flattenBy, functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  TableInstance,\n  Renderable,\n  TableGenerics,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport type TableFeature = {\n  getDefaultOptions?: (instance: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createInstance?: (instance: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, instance: any) => any\n  createHeader?: (column: any, instance: any) => any\n  createCell?: (cell: any, column: any, row: any, instance: any) => any\n  createRow?: (row: any, instance: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport type CoreTableState = {}\n\nexport type CoreOptions<TGenerics extends TableGenerics> = {\n  data: TGenerics['Row'][]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  render: TGenerics['Renderer']\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: <T>(defaultOptions: T, options: Partial<T>) => T\n  meta?: TGenerics['TableMeta']\n  getCoreRowModel: (\n    instance: TableInstance<TGenerics>\n  ) => () => RowModel<TGenerics>\n  getSubRows?: (\n    originalRow: TGenerics['Row'],\n    index: number\n  ) => undefined | TGenerics['Row'][]\n  getRowId?: (\n    originalRow: TGenerics['Row'],\n    index: number,\n    parent?: Row<TGenerics>\n  ) => string\n  columns: ColumnDef<TGenerics>[]\n  defaultColumn?: Partial<ColumnDef<TGenerics>>\n}\n\nexport type CoreInstance<TGenerics extends TableGenerics> = {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TGenerics>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TGenerics>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _render: <TProps>(\n    template: Renderable<TGenerics, TProps>,\n    props: TProps\n  ) => string | null | TGenerics['Rendered']\n  _getRowId: (\n    _: TGenerics['Row'],\n    index: number,\n    parent?: Row<TGenerics>\n  ) => string\n  getCoreRowModel: () => RowModel<TGenerics>\n  _getCoreRowModel?: () => RowModel<TGenerics>\n  getRowModel: () => RowModel<TGenerics>\n  getRow: (id: string) => Row<TGenerics>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TGenerics>>\n  _getColumnDefs: () => ColumnDef<TGenerics>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TGenerics>>\n  getAllColumns: () => Column<TGenerics>[]\n  getAllFlatColumns: () => Column<TGenerics>[]\n  getAllLeafColumns: () => Column<TGenerics>[]\n  getColumn: (columnId: string) => Column<TGenerics>\n}\n\nexport function createTableInstance<TGenerics extends TableGenerics>(\n  options: TableOptionsResolved<TGenerics>\n): TableInstance<TGenerics> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let instance = { _features: features } as unknown as TableInstance<TGenerics>\n\n  const defaultOptions = instance._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(instance))\n  }, {}) as TableOptionsResolved<TGenerics>\n\n  const mergeOptions = (options: TableOptionsResolved<TGenerics>) => {\n    if (instance.options.mergeOptions) {\n      return instance.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  instance._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TGenerics> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      instance.setState(instance.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, instance.options)\n      instance.options = mergeOptions(newOptions)\n    },\n    _render: (template, props) => {\n      if (typeof instance.options.render === 'function') {\n        return instance.options.render(template, props)\n      }\n\n      if (typeof template === 'function') {\n        return (template as Function)(props)\n      }\n\n      return template\n    },\n\n    getState: () => {\n      return instance.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      instance.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (\n      row: TGenerics['Row'],\n      index: number,\n      parent?: Row<TGenerics>\n    ) =>\n      instance.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!instance._getCoreRowModel) {\n        instance._getCoreRowModel = instance.options.getCoreRowModel(instance)\n      }\n\n      return instance._getCoreRowModel()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return instance.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = instance.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [instance.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<ColumnDef<TGenerics>>\n\n        return {\n          header: props => props.header.column.id,\n          footer: props => props.header.column.id,\n          cell: props => props.getValue().toString?.() ?? null,\n          ...instance._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TGenerics>>\n      },\n      {\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => instance.options.columns,\n\n    getAllColumns: memo(\n      () => [instance._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TGenerics>[],\n          parent?: Column<TGenerics>,\n          depth = 0\n        ): Column<TGenerics>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(instance, columnDef, depth, parent)\n\n            column.columns = columnDef.columns\n              ? recurseColumns(columnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [instance.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [instance.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TGenerics>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [instance.getAllColumns(), instance._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = instance._getAllFlatColumnsById()[columnId]\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`[Table] Column with id ${columnId} does not exist.`)\n        }\n        throw new Error()\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(instance, coreInstance)\n\n  instance._features.forEach(feature => {\n    return Object.assign(instance, feature.createInstance?.(instance))\n  })\n\n  return instance\n}\n","import { CustomFilterFns, FilterFn } from './features/Filters'\nimport { AggregationFn, CustomAggregationFns } from './features/Grouping'\nimport { CustomSortingFns, SortingFn } from './features/Sorting'\nimport {\n  ColumnDef,\n  AccessorFn,\n  AnyRender,\n  TableGenerics,\n  TableOptionsResolved,\n  TableOptions,\n} from './types'\nimport { IfDefined, Overwrite } from './utils'\n\nexport type TableFactory<TGenerics extends TableGenerics> =\n  () => Table<TGenerics>\n\nexport type CreateTableOptions<\n  TRender extends AnyRender,\n  TFilterFns extends CustomFilterFns<any>,\n  TSortingFns extends CustomSortingFns<any>,\n  TAggregationFns extends CustomAggregationFns<any>,\n  TGenerics extends TableGenerics\n> = Partial<\n  {\n    render?: TRender\n    filterFns?: TFilterFns\n    sortingFns?: TSortingFns\n    aggregationFns?: TAggregationFns\n  } & Omit<\n    TableOptionsResolved<TGenerics>,\n    'filterFns' | 'sortingFns' | 'aggregationFns'\n  >\n>\n\nexport type Table<TGenerics extends TableGenerics> = {\n  generics: TGenerics\n  options: Partial<TableOptionsResolved<TGenerics>>\n  // setGenerics: <T extends TableGenerics>() => Table<T>\n  setRowType: <TRow>() => Table<Overwrite<TGenerics, { Row: TRow }>>\n  setTableMetaType: <TTableMeta>() => Table<\n    Overwrite<TGenerics, { TableMeta: TTableMeta }>\n  >\n  setColumnMetaType: <TColumnMeta>() => Table<\n    Overwrite<TGenerics, { ColumnMeta: TColumnMeta }>\n  >\n  setFilterMetaType: <TFilterMeta>() => Table<\n    Overwrite<TGenerics, { FilterMeta: TFilterMeta }>\n  >\n  setOptions: <\n    TFilterFns extends Record<string, FilterFn<TGenerics>>,\n    TSortingFns extends Record<string, SortingFn<TGenerics>>,\n    TAggregationFns extends Record<string, AggregationFn<TGenerics>>\n  >(\n    options: CreateTableOptions<\n      any,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns,\n      TGenerics\n    >\n  ) => Table<\n    Overwrite<\n      TGenerics,\n      {\n        FilterFns: IfDefined<TFilterFns, TGenerics['FilterFns']>\n        SortingFns: IfDefined<TSortingFns, TGenerics['SortingFns']>\n        AggregationFns: IfDefined<TAggregationFns, TGenerics['AggregationFns']>\n      }\n    >\n  >\n  createGroup: (\n    column: Overwrite<\n      | Overwrite<\n          ColumnDef<any>,\n          {\n            header: string\n            id?: string\n          }\n        >\n      | Overwrite<\n          ColumnDef<any>,\n          {\n            id: string\n            header?: string | ((...any: any) => any)\n          }\n        >,\n      {\n        accessorFn?: never\n        accessorKey?: never\n        columns?: ColumnDef<any>[]\n      }\n    >\n  ) => ColumnDef<TGenerics>\n  createDisplayColumn: (\n    column: Omit<ColumnDef<TGenerics>, 'columns'>\n  ) => ColumnDef<TGenerics>\n  createDataColumn: <\n    TAccessor extends AccessorFn<TGenerics['Row']> | keyof TGenerics['Row']\n  >(\n    accessor: TAccessor,\n    column: Overwrite<\n      TAccessor extends (...args: any[]) => any\n        ? // Accessor Fn\n          ColumnDef<Overwrite<TGenerics, { Value: ReturnType<TAccessor> }>>\n        : TAccessor extends keyof TGenerics['Row']\n        ? // Accessor Key\n          Overwrite<\n            ColumnDef<\n              Overwrite<TGenerics, { Value: TGenerics['Row'][TAccessor] }>\n            >,\n            {\n              id?: string\n            }\n          >\n        : never,\n      {\n        accessorFn?: never\n        accessorKey?: never\n        columns?: ColumnDef<any>[]\n      }\n    >\n  ) => ColumnDef<TGenerics>\n  createOptions: (options: TableOptions<TGenerics>) => TableOptions<TGenerics>\n}\n\n//\n\nexport function createTableFactory<TRenderer extends AnyRender>(opts: {\n  render: TRenderer\n}): () => Table<{ Renderer: TRenderer; Rendered: ReturnType<TRenderer> }> {\n  return () => createTable(undefined, undefined, opts)\n}\n\n// A lot of returns in here are `as any` for a reason. Unless you\n// can find a better way to do this, then don't worry about them\nfunction createTable<TGenerics extends TableGenerics>(\n  _?: undefined,\n  __?: undefined,\n  options?: CreateTableOptions<any, any, any, any, TGenerics>\n): Table<TGenerics> {\n  const table: Table<TGenerics> = {\n    generics: undefined!,\n    options: options ?? {\n      render: (() => {\n        throw new Error('')\n      })(),\n    },\n    // setGenerics: () => table as any,\n    setRowType: () => table as any,\n    setTableMetaType: () => table as any,\n    setColumnMetaType: () => table as any,\n    setFilterMetaType: () => table as any,\n    setOptions: newOptions =>\n      createTable(_, __, {\n        ...options,\n        ...newOptions,\n      } as any),\n    createDisplayColumn: column => ({ ...column, columnDefType: 'display' }),\n    createGroup: column => ({ ...column, columnDefType: 'group' } as any),\n    createDataColumn: (accessor, column): any => {\n      column = {\n        ...column,\n        columnDefType: 'data',\n        id: column.id,\n      }\n\n      if (typeof accessor === 'string') {\n        return {\n          ...column,\n          id: column.id ?? accessor,\n          accessorKey: accessor,\n        }\n      }\n\n      if (typeof accessor === 'function') {\n        return {\n          ...column,\n          accessorFn: accessor,\n        }\n      }\n\n      throw new Error('Invalid accessor')\n    },\n    createOptions: options => options,\n  }\n\n  return table\n}\n","import { Cell, Column, Row, TableGenerics, TableInstance } from '../types'\n\nexport type CoreCell<TGenerics extends TableGenerics> = {\n  id: string\n  getValue: () => TGenerics['Value']\n  row: Row<TGenerics>\n  column: Column<TGenerics>\n  renderCell: () => string | null | TGenerics['Rendered']\n}\n\nexport function createCell<TGenerics extends TableGenerics>(\n  instance: TableInstance<TGenerics>,\n  row: Row<TGenerics>,\n  column: Column<TGenerics>,\n  columnId: string\n) {\n  const cell: CoreCell<TGenerics> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderCell: () =>\n      column.columnDef.cell\n        ? instance._render(column.columnDef.cell, {\n            instance,\n            column,\n            row,\n            cell: cell as Cell<TGenerics>,\n            getValue: cell.getValue,\n          })\n        : null,\n  }\n\n  instance._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TGenerics>,\n        column,\n        row as Row<TGenerics>,\n        instance\n      )\n    )\n  }, {})\n\n  return cell as Cell<TGenerics>\n}\n","import { Cell, Row, TableGenerics, TableInstance } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport type CoreRow<TGenerics extends TableGenerics> = {\n  id: string\n  index: number\n  original?: TGenerics['Row']\n  depth: number\n  _valuesCache: Record<string, any>\n  getValue: (columnId: string) => any\n  subRows: Row<TGenerics>[]\n  getLeafRows: () => Row<TGenerics>[]\n  originalSubRows?: TGenerics['Row'][]\n  getAllCells: () => Cell<TGenerics>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TGenerics>>\n}\n\nexport const createRow = <TGenerics extends TableGenerics>(\n  instance: TableInstance<TGenerics>,\n  id: string,\n  original: TGenerics['Row'] | undefined,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TGenerics>[]\n): Row<TGenerics> => {\n  let row: CoreRow<TGenerics> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    _valuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = instance.getColumn(columnId)\n\n      if (!column.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(row.original, rowIndex)\n\n      return row._valuesCache[columnId]\n    },\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getAllCells: memo(\n      () => [instance.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(instance, row as Row<TGenerics>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => instance.options.debugAll ?? instance.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TGenerics>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => instance.options.debugAll ?? instance.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < instance._features.length; i++) {\n    const feature = instance._features[i]\n    Object.assign(row, feature?.createRow?.(row, instance))\n  }\n\n  return row as Row<TGenerics>\n}\n","import { createRow } from '../core/row'\nimport { TableInstance, Row, RowModel, TableGenerics } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>\n) => () => RowModel<TGenerics> {\n  return instance =>\n    memo(\n      () => [instance.options.data],\n      (\n        data\n      ): {\n        rows: Row<TGenerics>[]\n        flatRows: Row<TGenerics>[]\n        rowsById: Record<string, Row<TGenerics>>\n      } => {\n        const rowModel: RowModel<TGenerics> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        let rows\n        let row\n        let originalRow\n\n        const accessRows = (\n          originalRows: TGenerics['Row'][],\n          depth = 0,\n          parent?: Row<TGenerics>\n        ): Row<TGenerics>[] => {\n          rows = []\n\n          for (let i = 0; i < originalRows.length; i++) {\n            originalRow = originalRows[i]\n\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            row = createRow(\n              instance,\n              instance._getRowId(originalRow, i, parent),\n              originalRow,\n              i,\n              depth\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push instance row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (instance.options.getSubRows) {\n              row.originalSubRows = instance.options.getSubRows(originalRow, i)\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {\n          instance._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { TableGenerics, Row, RowModel, TableInstance } from '../types'\n\nexport function filterRows<TGenerics extends TableGenerics>(\n  rows: Row<TGenerics>[],\n  filterRowImpl: (row: Row<TGenerics>) => any,\n  instance: TableInstance<TGenerics>\n) {\n  if (instance.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, instance)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, instance)\n}\n\nexport function filterRowModelFromLeafs<TGenerics extends TableGenerics>(\n  rowsToFilter: Row<TGenerics>[],\n  filterRow: (row: Row<TGenerics>) => Row<TGenerics>[],\n  instance: TableInstance<TGenerics>\n): RowModel<TGenerics> {\n  const newFilteredFlatRows: Row<TGenerics>[] = []\n  const newFilteredRowsById: Record<string, Row<TGenerics>> = {}\n\n  let row\n  let newRow\n\n  const recurseFilterRows = (rowsToFilter: Row<TGenerics>[], depth = 0) => {\n    const rows: Row<TGenerics>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      row = rowsToFilter[i]!\n\n      if (row.subRows?.length) {\n        newRow = createRow(instance, row.id, row.original, row.index, row.depth)\n        newRow.columnFilters = row.columnFilters\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        if (!newRow.subRows.length) {\n          continue\n        }\n        row = newRow\n      }\n\n      if (filterRow(row)) {\n        rows.push(row)\n        newFilteredRowsById[row.id] = row\n        newFilteredRowsById[i] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TGenerics extends TableGenerics>(\n  rowsToFilter: Row<TGenerics>[],\n  filterRow: (row: Row<TGenerics>) => any,\n  instance: TableInstance<TGenerics>\n): RowModel<TGenerics> {\n  const newFilteredFlatRows: Row<TGenerics>[] = []\n  const newFilteredRowsById: Record<string, Row<TGenerics>> = {}\n\n  let rows\n  let row\n  let newRow\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TGenerics>[], depth = 0) => {\n    // Filter from parents downward first\n\n    rows = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length) {\n          newRow = createRow(\n            instance,\n            row.id,\n            row.original,\n            row.index,\n            row.depth\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { TableInstance, RowModel, TableGenerics, Row } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>\n) => () => RowModel<TGenerics> {\n  return instance =>\n    memo(\n      () => [\n        instance.getPreFilteredRowModel(),\n        instance.getState().columnFilters,\n        instance.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TGenerics>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TGenerics>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = instance.getColumn(d.id)\n\n          if (!column) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Table: Could not find a column to filter with columnId: ${d.id}`\n              )\n            }\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = instance.getGlobalFilterFn()\n\n        const globallyFilterableColumns = instance\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TGenerics>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, instance)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {\n          instance._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { TableInstance, RowModel, TableGenerics, Row } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>,\n  columnId: string\n) => () => RowModel<TGenerics> {\n  return (instance, columnId) =>\n    memo(\n      () => [\n        instance.getPreFilteredRowModel(),\n        instance.getState().columnFilters,\n        instance.getState().globalFilter,\n        instance.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TGenerics>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, instance)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { TableInstance, TableGenerics } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>,\n  columnId: string\n) => () => Map<any, number> {\n  return (instance, columnId) =>\n    memo(\n      () => [instance.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const value = facetedRowModel.flatRows[i]?.getValue(columnId)\n\n          if (facetedUniqueValues.has(value)) {\n            facetedUniqueValues.set(\n              value,\n              (facetedUniqueValues.get(value) ?? 0) + 1\n            )\n          } else {\n            facetedUniqueValues.set(value, 1)\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { TableInstance, TableGenerics } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (instance, columnId) =>\n    memo(\n      () => [instance.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        const firstValue = facetedRowModel.flatRows[0]?.getValue(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const value = facetedRowModel.flatRows[i]?.getValue(columnId)\n\n          if (value < facetedMinMaxValues[0]) {\n            facetedMinMaxValues[0] = value\n          } else if (value > facetedMinMaxValues[1]) {\n            facetedMinMaxValues[1] = value\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { TableInstance, Row, RowModel, TableGenerics } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>\n) => () => RowModel<TGenerics> {\n  return instance =>\n    memo(\n      () => [instance.getState().sorting, instance.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = instance.getState().sorting\n\n        const sortedFlatRows: Row<TGenerics>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          instance.getColumn(sort.id).getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TGenerics>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = instance.getColumn(sortEntry.id)\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TGenerics>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = rows.slice()\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (!row.subRows || row.subRows.length <= 1) {\n              return\n            }\n            row.subRows = sortData(row.subRows)\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {\n          instance._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { TableInstance, Row, RowModel, TableGenerics } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>\n) => () => RowModel<TGenerics> {\n  return instance =>\n    memo(\n      () => [instance.getState().grouping, instance.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          instance.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TGenerics>[] = []\n        const groupedRowsById: Record<string, Row<TGenerics>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TGenerics>[],\n          depth = 0,\n          parentId: string\n        ) => {\n          // This is the last level, just return the rows\n          if (depth === existingGrouping.length) {\n            return rows\n          }\n\n          const columnId = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(instance, id, undefined, index, depth)\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = instance.getColumn(columnId)\n                  const aggregateFn = column.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  } else if (column.aggregationFn) {\n                    console.info({ column })\n                    throw new Error(\n                      process.env.NODE_ENV !== 'production'\n                        ? `Table: Invalid column.aggregateType option for column listed above`\n                        : ''\n                    )\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0, '')\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {\n          instance._queue(() => {\n            instance._autoResetExpanded()\n            instance._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TGenerics extends TableGenerics>(\n  rows: Row<TGenerics>[],\n  columnId: string\n) {\n  const groupMap = new Map<any, Row<TGenerics>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      map.set(resKey, [...previous, row])\n    }\n    return map\n  }, groupMap)\n}\n","import { TableInstance, Row, RowModel, TableGenerics } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>\n) => () => RowModel<TGenerics> {\n  return instance =>\n    memo(\n      () => [\n        instance.getState().expanded,\n        instance.getPreExpandedRowModel(),\n        instance.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          // Do not expand if rows are not included in pagination\n          !paginateExpandedRows ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        return expandRows(rowModel, instance)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TGenerics extends TableGenerics>(\n  rowModel: RowModel<TGenerics>,\n  instance: TableInstance<TGenerics>\n) {\n  const expandedRows: Row<TGenerics>[] = []\n\n  const handleRow = (row: Row<TGenerics>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { TableInstance, RowModel, TableGenerics } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TGenerics extends TableGenerics>(opts?: {\n  initialSync: boolean\n}): (instance: TableInstance<TGenerics>) => () => RowModel<TGenerics> {\n  return instance =>\n    memo(\n      () => [\n        instance.getState().pagination,\n        instance.getPrePaginationRowModel(),\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        if (!instance.options.paginateExpandedRows) {\n          return expandRows(\n            {\n              rows,\n              flatRows,\n              rowsById,\n            },\n            instance\n          )\n        }\n\n        return {\n          rows,\n          flatRows,\n          rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","noop","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","deps","result","depTime","debug","Date","now","newDeps","depsChanged","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","columnDef","depth","parent","defaultColumn","_getDefaultColumnDef","id","accessorKey","header","undefined","accessorFn","originalRow","process","env","NODE_ENV","Error","column","columnDefType","columns","getFlatColumns","flatMap","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","leafColumns","_features","reduce","obj","feature","Object","assign","createHeader","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","renderHeader","_render","renderFooter","footer","Headers","createInstance","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","leftColumns","columnId","find","filter","Boolean","rightColumns","centerColumns","includes","headerGroups","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","orderedLeafColumns","getRightHeaderGroups","getFooterGroups","reverse","getLeftFooterGroups","getCenterFooterGroups","getRightFooterGroups","getFlatHeaders","headers","getLeftFlatHeaders","getCenterFlatHeaders","getRightFlatHeaders","getCenterLeafHeaders","flatHeaders","getLeftLeafHeaders","getRightLeafHeaders","center","columnsToGroup","headerFamily","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","getDefaultColumnSizingInfoState","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_","rest","getCanResize","enableResizing","enableColumnResizing","getIsResizing","sum","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","updateOffset","eventType","clientXPos","newColumnSizing","setColumnSizingInfo","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","initialState","resetHeaderSizeInfo","getTotalSize","getLeftTotalSize","getCenterTotalSize","getRightTotalSize","passiveSupported","supported","window","err","type","Expanding","expanded","onExpandedChange","autoResetExpanded","paginateExpandedRows","registered","queued","_autoResetExpanded","_queue","autoResetAll","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","getCanSomeRowsExpand","getRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","getIsExpanded","getExpandedDepth","rowIds","keys","rowsById","splitId","split","getPreExpandedRowModel","getGroupedRowModel","getExpandedRowModel","_getExpandedRowModel","manualExpanding","createRow","toggleExpanded","exists","oldExpanded","rowId","getIsRowExpanded","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","search","toLowerCase","getValue","autoRemove","val","testFalsey","includesStringSensitive","equalsString","arrIncludes","arrIncludesAll","arrIncludesSome","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","globalFilterFn","getColumnCanGlobalFilter","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","Array","isArray","getFilterFn","userFilterFns","getCanFilter","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","setFilterValue","setColumnFilters","previousfilter","newFilter","shouldAutoRemoveFilter","newFilterObj","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","getAllLeafColumns","updateFn","setGlobalFilter","resetGlobalFilter","resetColumnFilters","_getFilteredRowModel","getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","_leafRows","childRows","next","extent","mean","leafRows","count","median","unique","from","Set","uniqueCount","_columnId","aggregationFns","Grouping","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","getGroupedIndex","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","toString","call","getAggregationFn","userAggregationFns","resetGrouping","getPreGroupedRowModel","getSortedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","_groupingValuesCache","createCell","cell","getIsPlaceholder","getIsAggregated","renderAggregatedCell","template","aggregatedCell","nonGroupingColumns","col","groupingColumns","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","defaultPageIndex","defaultPageSize","getDefaultPaginationState","pageIndex","pageSize","Pagination","pagination","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","safeUpdater","newState","resetPagination","setPageIndex","maxPageIndex","pageCount","resetPageSize","setPageSize","topRowIndex","floor","setPageCount","newPageCount","getPageOptions","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","getPageCount","previousPage","nextPage","getPrePaginationRowModel","getPaginationRowModel","_getPaginationRowModel","ceil","rows","getDefaultPinningState","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","getCanPin","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","cells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","pinningState","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","toggleAllPageRowsSelected","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","preFilteredFlatRows","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","getIsSomePageRowsSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","getIsSelected","selectedRowIds","isRowSelected","getIsSomeSelected","getCanSelect","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","selection","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","alphanumeric","rowA","rowB","compareAlphanumeric","alphanumericCaseSensitive","text","compareBasic","textCaseSensitive","datetime","getTime","basic","a","b","aStr","bStr","aa","bb","an","parseInt","bn","combo","sort","sortingFns","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","userSortingFn","toggleSorting","desc","multi","setSorting","existingSorting","existingIndex","hasDescDefined","newSorting","sortAction","getCanMultiSort","sortDescFirst","enableSortingRemoval","enableMultiRemove","maxMultiSortColCount","getCanSort","enableSorting","enableMultiSort","getIsSorted","columnSort","getSortIndex","clearSorting","getToggleSortingHandler","canSort","resetSorting","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","createTableInstance","defaultOptions","mergeOptions","coreInitialState","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","props","render","onStateChange","_getRowId","getRowId","_getCoreRowModel","_getColumnDefs","columnDefs","recurseColumns","_getAllFlatColumnsById","flatColumns","acc","warn","createTableFactory","createTable","__","table","generics","setRowType","setTableMetaType","setColumnMetaType","setFilterMetaType","createDisplayColumn","createGroup","createDataColumn","accessor","createOptions","renderCell","original","rowIndex","_valuesCache","hasOwnProperty","getLeafRows","data","accessRows","originalRows","getSubRows","originalSubRows","filterRows","filterRowImpl","filterRowModelFromLeafs","filterRowModelFromRoot","rowsToFilter","filterRow","newFilteredFlatRows","newFilteredRowsById","newRow","recurseFilterRows","pass","resolvedColumnFilters","resolvedGlobalFilters","resolvedValue","filterableIds","globallyFilterableColumns","currentColumnFilter","currentGlobalFilter","j","filterMeta","__global__","filterRowsImpl","preRowModel","facetedRowModel","facetedUniqueValues","has","set","get","firstValue","facetedMinMaxValues","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","columnInfo","isDesc","aValue","bValue","aUndefined","bUndefined","sortInt","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","parentId","rowGroupsMap","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","aggregateFn","groupMap","resKey","previous","expandRows","expandedRows","handleRow","pageStart","pageEnd"],"mappings":"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"}