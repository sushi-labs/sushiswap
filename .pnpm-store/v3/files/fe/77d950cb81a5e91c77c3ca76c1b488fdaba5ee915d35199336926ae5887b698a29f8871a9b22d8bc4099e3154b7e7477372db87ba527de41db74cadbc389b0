"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.waffleChai = void 0;
require("./types");
const bigNumber_1 = require("./matchers/bigNumber");
const reverted_1 = require("./matchers/reverted");
const revertedWith_1 = require("./matchers/revertedWith");
const emit_1 = require("./matchers/emit");
const properAddress_1 = require("./matchers/properAddress");
const properPrivateKey_1 = require("./matchers/properPrivateKey");
const properHex_1 = require("./matchers/properHex");
const hexEqual_1 = require("./matchers/hexEqual");
const changeBalance_1 = require("./matchers/changeBalance");
const changeBalances_1 = require("./matchers/changeBalances");
const changeEtherBalance_1 = require("./matchers/changeEtherBalance");
const changeEtherBalances_1 = require("./matchers/changeEtherBalances");
const changeTokenBalance_1 = require("./matchers/changeTokenBalance");
const changeTokenBalances_1 = require("./matchers/changeTokenBalances");
const calledOnContract_1 = require("./matchers/calledOnContract/calledOnContract");
const calledOnContractWith_1 = require("./matchers/calledOnContract/calledOnContractWith");
function waffleChai(chai, utils) {
    bigNumber_1.supportBigNumber(chai.Assertion, utils);
    reverted_1.supportReverted(chai.Assertion);
    revertedWith_1.supportRevertedWith(chai.Assertion);
    emit_1.supportEmit(chai.Assertion);
    properAddress_1.supportProperAddress(chai.Assertion);
    properPrivateKey_1.supportProperPrivateKey(chai.Assertion);
    properHex_1.supportProperHex(chai.Assertion);
    hexEqual_1.supportHexEqual(chai.Assertion);
    changeBalance_1.supportChangeBalance(chai.Assertion);
    changeBalances_1.supportChangeBalances(chai.Assertion);
    changeEtherBalance_1.supportChangeEtherBalance(chai.Assertion);
    changeEtherBalances_1.supportChangeEtherBalances(chai.Assertion);
    changeTokenBalance_1.supportChangeTokenBalance(chai.Assertion);
    changeTokenBalances_1.supportChangeTokenBalances(chai.Assertion);
    calledOnContract_1.supportCalledOnContract(chai.Assertion);
    calledOnContractWith_1.supportCalledOnContractWith(chai.Assertion);
}
exports.waffleChai = waffleChai;
