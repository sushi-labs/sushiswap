/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IMasterDeployerInterface extends utils.Interface {
  functions: {
    "barFee()": FunctionFragment;
    "barFeeTo()": FunctionFragment;
    "bento()": FunctionFragment;
    "deployPool(address,bytes)": FunctionFragment;
    "migrator()": FunctionFragment;
    "pools(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "barFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "barFeeTo", values?: undefined): string;
  encodeFunctionData(functionFragment: "bento", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deployPool",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "migrator", values?: undefined): string;
  encodeFunctionData(functionFragment: "pools", values: [string]): string;

  decodeFunctionResult(functionFragment: "barFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "barFeeTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bento", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deployPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;

  events: {};
}

export interface IMasterDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMasterDeployerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    barFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    barFeeTo(overrides?: CallOverrides): Promise<[string]>;

    bento(overrides?: CallOverrides): Promise<[string]>;

    deployPool(
      factory: string,
      deployData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrator(overrides?: CallOverrides): Promise<[string]>;

    pools(pool: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  barFee(overrides?: CallOverrides): Promise<BigNumber>;

  barFeeTo(overrides?: CallOverrides): Promise<string>;

  bento(overrides?: CallOverrides): Promise<string>;

  deployPool(
    factory: string,
    deployData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrator(overrides?: CallOverrides): Promise<string>;

  pools(pool: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    barFee(overrides?: CallOverrides): Promise<BigNumber>;

    barFeeTo(overrides?: CallOverrides): Promise<string>;

    bento(overrides?: CallOverrides): Promise<string>;

    deployPool(
      factory: string,
      deployData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    migrator(overrides?: CallOverrides): Promise<string>;

    pools(pool: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    barFee(overrides?: CallOverrides): Promise<BigNumber>;

    barFeeTo(overrides?: CallOverrides): Promise<BigNumber>;

    bento(overrides?: CallOverrides): Promise<BigNumber>;

    deployPool(
      factory: string,
      deployData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrator(overrides?: CallOverrides): Promise<BigNumber>;

    pools(pool: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    barFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    barFeeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bento(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployPool(
      factory: string,
      deployData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
