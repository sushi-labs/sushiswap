{"version":3,"file":"Pagination.js","sources":["../../../src/features/Pagination.ts"],"sourcesContent":["import { TableFeature } from '../core/instance'\nimport {\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  RowModel,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport type PaginationState = {\n  pageIndex: number\n  pageSize: number\n  pageCount?: number\n}\n\nexport type PaginationTableState = {\n  pagination: PaginationState\n}\n\nexport type PaginationInitialTableState = {\n  pagination?: Partial<PaginationState>\n}\n\nexport type PaginationOptions<TGenerics extends TableGenerics> = {\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (\n    instance: TableInstance<TGenerics>\n  ) => () => RowModel<TGenerics>\n}\n\nexport type PaginationDefaultOptions = {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport type PaginationInstance<TGenerics extends TableGenerics> = {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TGenerics>\n  getPaginationRowModel: () => RowModel<TGenerics>\n  _getPaginationRowModel?: () => RowModel<TGenerics>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', instance),\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): PaginationInstance<TGenerics> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          instance._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          instance.options.autoResetAll ??\n          instance.options.autoResetPageIndex ??\n          !instance.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          instance._queue(() => {\n            instance.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return instance.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        instance.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : instance.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        instance.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof old.pageCount !== 'undefined'\n              ? old.pageCount - 1\n              : Number.MAX_SAFE_INTEGER\n\n          pageIndex = Math.min(Math.max(0, pageIndex), maxPageIndex)\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        instance.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : instance.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        instance.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : instance.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        instance.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        instance.setPagination(old => {\n          let newPageCount = functionalUpdate(updater, old.pageCount ?? -1)\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [\n          instance.getState().pagination.pageSize,\n          instance.getState().pagination.pageCount,\n        ],\n        (pageSize, pageCount) => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => instance.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = instance.getState().pagination\n\n        const pageCount = instance.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return instance.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return instance.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => instance.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !instance._getPaginationRowModel &&\n          instance.options.getPaginationRowModel\n        ) {\n          instance._getPaginationRowModel =\n            instance.options.getPaginationRowModel(instance)\n        }\n\n        if (\n          instance.options.manualPagination ||\n          !instance._getPaginationRowModel\n        ) {\n          return instance.getPrePaginationRowModel()\n        }\n\n        return instance._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        const { pageCount } = instance.getState().pagination\n\n        if (typeof pageCount !== 'undefined') {\n          return pageCount\n        }\n\n        return Math.ceil(\n          instance.getPrePaginationRowModel().rows.length /\n            instance.getState().pagination.pageSize\n        )\n      },\n    }\n  },\n}\n"],"names":["defaultPageIndex","defaultPageSize","getDefaultPaginationState","pageIndex","pageSize","Pagination","getInitialState","state","pagination","getDefaultOptions","instance","onPaginationChange","makeStateUpdater","createInstance","registered","queued","_autoResetPageIndex","_queue","options","autoResetAll","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","updater","safeUpdater","old","newState","functionalUpdate","resetPagination","defaultState","initialState","setPageIndex","maxPageIndex","pageCount","Number","MAX_SAFE_INTEGER","Math","min","max","resetPageSize","setPageSize","topRowIndex","floor","setPageCount","newPageCount","getPageOptions","memo","getState","pageOptions","Array","fill","map","_","i","key","process","env","NODE_ENV","debug","debugAll","debugTable","getCanPreviousPage","getCanNextPage","getPageCount","previousPage","nextPage","getPrePaginationRowModel","getExpandedRowModel","getPaginationRowModel","_getPaginationRowModel","ceil","rows","length"],"mappings":"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"}