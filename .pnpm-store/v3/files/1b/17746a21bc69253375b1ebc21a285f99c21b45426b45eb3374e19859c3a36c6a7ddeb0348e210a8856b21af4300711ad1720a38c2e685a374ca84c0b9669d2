{"version":3,"file":"index.development.js","sources":["../../src/utils.ts","../../src/core/column.ts","../../src/core/headers.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/core/table.ts","../../src/core/cell.ts","../../src/core/row.ts","../../src/columnHelper.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getSortedRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getExpandedRowModel.ts","../../src/utils/getPaginationRowModel.ts"],"sourcesContent":["import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import { TaggedTemplateExpression } from '@babel/types'\nimport {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  ColumnDefTemplate,\n  RowData,\n  ColumnMeta,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport type CoreColumn<TData extends RowData, TValue> = {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n) {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result[key]\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport type CoreHeaderGroup<TData extends RowData> = {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport type HeaderContext<TData, TValue> = {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport type CoreHeader<TData extends RowData, TValue> = {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport type HeadersInstance<TData extends RowData> = {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n) {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport type ColumnSizingTableState = {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport type ColumnSizingInfoState = {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport type ColumnSizingOptions = {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingDefaultOptions = {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingInstance = {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport type ColumnSizingColumnDef = {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport type ColumnSizingColumn = {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport type ColumnSizingHeader = {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column.getCanResize()\n\n        return (e: unknown) => {\n          if (!canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            let newColumnSizing: ColumnSizingState = {}\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]!.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport type ExpandedTableState = {\n  expanded: ExpandedState\n}\n\nexport type ExpandedRow = {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport type ExpandedOptions<TData extends RowData> = {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport type ExpandedInstance<TData extends RowData> = {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table.getRowModel().flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return row.getValue<string>(columnId)?.toLowerCase().includes(search)\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return row.getValue<string>(columnId)?.includes(filterValue)\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string>(columnId)?.toLowerCase() === filterValue.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport type FiltersTableState = {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport type ColumnFilter = {\n  id: string\n  value: unknown\n}\n\nexport type ResolvedColumnFilter<TData extends RowData> = {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport type FilterFn<TData extends RowData> = {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport type FiltersColumnDef<TData extends RowData> = {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport type FiltersColumn<TData extends RowData> = {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport type FiltersRow<TData extends RowData> = {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\nexport type FiltersOptions<TData extends RowData> = {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n} & (keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    })\n\nexport type FiltersInstance<TData extends RowData> = {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId)\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport type GroupingTableState = {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport type GroupingColumnDef<TData extends RowData, TValue> = {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n}\n\nexport type GroupingColumn<TData extends RowData> = {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport type GroupingRow = {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  _groupingValuesCache: Record<string, any>\n}\n\nexport type GroupingCell = {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport type ColumnDefaultOptions = {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\nexport type GroupingOptions = {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n} & (keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    })\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport type GroupingInstance<TData extends RowData> = {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(row: Row<TData>): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { Grouping, orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport type ColumnOrderTableState = {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport type ColumnOrderOptions = {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderDefaultOptions = {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderInstance<TData extends RowData> = {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport type PaginationState = {\n  pageIndex: number\n  pageSize: number\n}\n\nexport type PaginationTableState = {\n  pagination: PaginationState\n}\n\nexport type PaginationInitialTableState = {\n  pagination?: Partial<PaginationState>\n}\n\nexport type PaginationOptions = {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport type PaginationDefaultOptions = {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport type PaginationInstance<TData extends RowData> = {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.min(Math.max(0, pageIndex), maxPageIndex)\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport type ColumnPinningState = {\n  left?: string[]\n  right?: string[]\n}\n\nexport type ColumnPinningTableState = {\n  columnPinning: ColumnPinningState\n}\n\nexport type ColumnPinningOptions = {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningDefaultOptions = {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport type ColumnPinningColumnDef = {\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningColumn = {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport type ColumnPinningRow<TData extends RowData> = {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport type ColumnPinningInstance<TData extends RowData> = {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport type RowSelectionTableState = {\n  rowSelection: RowSelectionState\n}\n\nexport type RowSelectionOptions<TData extends RowData> = {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport type RowSelectionRow = {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport type RowSelectionInstance<TData extends RowData> = {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows.some(\n              d => d.getIsSelected() || d.getIsSomeSelected()\n            )\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport type ColumnSort = {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport type SortingTableState = {\n  sorting: SortingState\n}\n\nexport type SortingFn<TData extends RowData> = {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport type SortingColumnDef<TData extends RowData> = {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport type SortingColumn<TData extends RowData> = {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\nexport type SortingOptions<TData extends RowData> = {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n} & (keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    })\n\nexport type SortingInstance<TData extends RowData> = {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport type VisibilityTableState = {\n  columnVisibility: VisibilityState\n}\n\nexport type VisibilityOptions = {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport type VisibilityDefaultOptions = {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport type VisibilityInstance<TData extends RowData> = {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport type VisibilityColumnDef = {\n  enableHiding?: boolean\n}\n\nexport type VisibilityRow<TData extends RowData> = {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport type VisibilityColumn = {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { flattenBy, functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  ColumnDefTemplate,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping, GroupingColumnDef } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport type TableFeature = {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport type CoreTableState = {}\n\nexport type CoreOptions<TData extends RowData> = {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport type CoreInstance<TData extends RowData> = {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown>\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`[Table] Column with id ${columnId} does not exist.`)\n        }\n        throw new Error()\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport type CellContext<TData extends RowData, TValue> = {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport type CoreCell<TData extends RowData, TValue> = {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n) {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport type CoreRow<TData extends RowData> = {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  _valuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[]\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    _valuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n","import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parent?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parent),\n              originalRows[i]!,\n              i,\n              depth\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      if (row.subRows?.length) {\n        const newRow = createRow(\n          table,\n          row.id,\n          row.original,\n          row.index,\n          row.depth\n        )\n        newRow.columnFilters = row.columnFilters\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        if (!newRow.subRows.length) {\n          continue\n        }\n        row = newRow\n      }\n\n      if (filterRow(row)) {\n        rows.push(row)\n        newFilteredRowsById[row.id] = row\n        newFilteredRowsById[i] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Table: Could not find a column to filter with columnId: ${d.id}`\n              )\n            }\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const value = facetedRowModel.flatRows[i]?.getValue(columnId)\n\n          if (facetedUniqueValues.has(value)) {\n            facetedUniqueValues.set(\n              value,\n              (facetedUniqueValues.get(value) ?? 0) + 1\n            )\n          } else {\n            facetedUniqueValues.set(value, 1)\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        const firstValue = facetedRowModel.flatRows[0]?.getValue(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const value = facetedRowModel.flatRows[i]!.getValue<number>(columnId)\n\n          if (value < facetedMinMaxValues[0]) {\n            facetedMinMaxValues[0] = value\n          } else if (value > facetedMinMaxValues[1]) {\n            facetedMinMaxValues[1] = value\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id).getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = rows.slice()\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (!row.subRows || row.subRows.length <= 1) {\n              return\n            }\n            row.subRows = sortData(row.subRows)\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1)\n              }\n\n              return row\n            })\n          }\n\n          const columnId = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0, '')\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      map.set(resKey, [...previous, row])\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","noop","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","deps","result","depTime","debug","Date","now","newDeps","depsChanged","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","defaultColumn","_getDefaultColumnDef","resolvedColumnDef","accessorKey","id","replace","undefined","header","accessorFn","includes","originalRow","split","Error","column","columns","getFlatColumns","flatMap","process","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","leafColumns","_features","reduce","obj","feature","Object","assign","createHeader","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","leftColumns","columnId","find","filter","Boolean","rightColumns","centerColumns","headerGroups","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","orderedLeafColumns","getRightHeaderGroups","getFooterGroups","reverse","getLeftFooterGroups","getCenterFooterGroups","getRightFooterGroups","getFlatHeaders","headers","getLeftFlatHeaders","getCenterFlatHeaders","getRightFlatHeaders","getCenterLeafHeaders","flatHeaders","getLeftLeafHeaders","getRightLeafHeaders","center","columnsToGroup","headerFamily","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","getDefaultColumnSizingInfoState","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_","rest","getCanResize","enableResizing","enableColumnResizing","getIsResizing","sum","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","updateOffset","eventType","clientXPos","newColumnSizing","setColumnSizingInfo","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","initialState","resetHeaderSizeInfo","getTotalSize","getLeftTotalSize","getCenterTotalSize","getRightTotalSize","passiveSupported","supported","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_queue","autoResetAll","autoResetExpanded","manualExpanding","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","getCanSomeRowsExpand","getRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getIsExpanded","getExpandedDepth","rowIds","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","exists","oldExpanded","rowId","getIsRowExpanded","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","search","toLowerCase","getValue","autoRemove","val","testFalsey","includesStringSensitive","equalsString","arrIncludes","arrIncludesAll","arrIncludesSome","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","globalFilterFn","getColumnCanGlobalFilter","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","Array","isArray","getFilterFn","getCanFilter","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","setFilterValue","setColumnFilters","previousfilter","newFilter","shouldAutoRemoveFilter","newFilterObj","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","getAllLeafColumns","updateFn","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","unique","from","Set","uniqueCount","_columnId","aggregationFns","Grouping","aggregatedCell","props","toString","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","getGroupedIndex","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","resetGrouping","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","_groupingValuesCache","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","groupingColumns","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","defaultPageIndex","defaultPageSize","getDefaultPaginationState","pageIndex","pageSize","Pagination","pagination","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","safeUpdater","newState","resetPagination","setPageIndex","maxPageIndex","pageCount","resetPageSize","setPageSize","topRowIndex","floor","setPageCount","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPrePaginationRowModel","getPaginationRowModel","_getPaginationRowModel","ceil","rows","getDefaultPinningState","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","getCanPin","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","cells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","pinningState","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","selection","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","alphanumeric","rowA","rowB","compareAlphanumeric","alphanumericCaseSensitive","text","compareBasic","textCaseSensitive","datetime","a","b","basic","aStr","bStr","aa","bb","an","parseInt","bn","combo","sort","sortingFns","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","newSorting","sortAction","nextDesc","getCanMultiSort","maxMultiSortColCount","getFirstSortDir","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","columnSort","getSortIndex","clearSorting","getToggleSortingHandler","canSort","resetSorting","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","defaultOptions","mergeOptions","coreInitialState","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","acc","warn","getRenderValue","renderFallbackValue","original","rowIndex","_valuesCache","hasOwnProperty","getLeafRows","createColumnHelper","accessor","display","group","data","accessRows","originalRows","getSubRows","originalSubRows","filterRows","filterRowImpl","filterRowModelFromLeafs","filterRowModelFromRoot","rowsToFilter","filterRow","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","pass","resolvedColumnFilters","resolvedGlobalFilters","filterableIds","globallyFilterableColumns","currentColumnFilter","currentGlobalFilter","j","filterMeta","__global__","filterRowsImpl","preRowModel","facetedRowModel","facetedUniqueValues","has","set","get","firstValue","facetedMinMaxValues","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","columnInfo","isDesc","aValue","bValue","aUndefined","bUndefined","sortInt","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","parentId","rowGroupsMap","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","aggregateFn","groupMap","resKey","previous","expandRows","expandedRows","handleRow","pageStart","pageEnd","paginatedRowModel"],"mappings":"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"}