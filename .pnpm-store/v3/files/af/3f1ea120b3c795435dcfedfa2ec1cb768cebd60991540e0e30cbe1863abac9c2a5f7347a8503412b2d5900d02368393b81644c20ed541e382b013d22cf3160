/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ConcentratedLiquidityPoolHelper,
  ConcentratedLiquidityPoolHelperInterface,
} from "../ConcentratedLiquidityPoolHelper";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IConcentratedLiquidityPool",
        name: "pool",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "tickCount",
        type: "uint24",
      },
    ],
    name: "getTickState",
    outputs: [
      {
        components: [
          {
            internalType: "int24",
            name: "index",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
        ],
        internalType: "struct ConcentratedLiquidityPoolHelper.SimpleTick[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610649806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063f01a1b6814610030575b600080fd5b61004361003e366004610385565b610059565b60405161005091906103c6565b60405180910390f35b606060008262ffffff1667ffffffffffffffff81111561007b5761007b61042a565b6040519080825280602002602001820160405280156100c057816020015b60408051808201909152600080825260208201528152602001906001900390816100995790505b506040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081018290529192507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276185b6101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618610488565b60020b8160020b14610248576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600282900b600482015273ffffffffffffffffffffffffffffffffffffffff88169063f30dba939060240160c060405180830381865afa1580156101ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101de9190610509565b925060405180604001604052808260020b815260200184604001516fffffffffffffffffffffffffffffffff1681525084838061021a906105c1565b945062ffffff1681518110610231576102316105e4565b602002602001018190525082602001519050610117565b6040517ff30dba93000000000000000000000000000000000000000000000000000000008152600282900b600482015273ffffffffffffffffffffffffffffffffffffffff88169063f30dba939060240160c060405180830381865afa1580156102b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102da9190610509565b925060405180604001604052807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761861031190610488565b60020b815260200184604001516fffffffffffffffffffffffffffffffff16815250848362ffffff168151811061034a5761034a6105e4565b6020908102919091010152509195945050505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461038257600080fd5b50565b6000806040838503121561039857600080fd5b82356103a381610360565b9150602083013562ffffff811681146103bb57600080fd5b809150509250929050565b602080825282518282018190526000919060409081850190868401855b8281101561041d578151805160020b85528601516fffffffffffffffffffffffffffffffff168685015292840192908501906001016103e3565b5091979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008114156104be576104be610459565b60000392915050565b8051600281900b81146104d957600080fd5b919050565b80516fffffffffffffffffffffffffffffffff811681146104d957600080fd5b80516104d981610360565b600060c0828403121561051b57600080fd5b60405160c0810181811067ffffffffffffffff82111715610565577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052610571836104c7565b815261057f602084016104c7565b6020820152610590604084016104de565b604082015260608301516060820152608083015160808201526105b560a084016104fe565b60a08201529392505050565b600062ffffff808316818114156105da576105da610459565b6001019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220a6a48cd5c8b0199d9f57ae6d2c4940b1124355f8730e0ab9d4ba6a430c759fba64736f6c634300080a0033";

type ConcentratedLiquidityPoolHelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConcentratedLiquidityPoolHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConcentratedLiquidityPoolHelper__factory extends ContractFactory {
  constructor(...args: ConcentratedLiquidityPoolHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ConcentratedLiquidityPoolHelper> {
    return super.deploy(
      overrides || {}
    ) as Promise<ConcentratedLiquidityPoolHelper>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ConcentratedLiquidityPoolHelper {
    return super.attach(address) as ConcentratedLiquidityPoolHelper;
  }
  connect(signer: Signer): ConcentratedLiquidityPoolHelper__factory {
    return super.connect(signer) as ConcentratedLiquidityPoolHelper__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConcentratedLiquidityPoolHelperInterface {
    return new utils.Interface(
      _abi
    ) as ConcentratedLiquidityPoolHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConcentratedLiquidityPoolHelper {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ConcentratedLiquidityPoolHelper;
  }
}
