/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IStrategyInterface extends ethers.utils.Interface {
  functions: {
    "exit(uint256)": FunctionFragment;
    "harvest(uint256,address)": FunctionFragment;
    "skim(uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "exit", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "skim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "skim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class IStrategy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IStrategyInterface;

  functions: {
    exit(
      balance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exit(uint256)"(
      balance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    harvest(
      balance: BigNumberish,
      sender: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "harvest(uint256,address)"(
      balance: BigNumberish,
      sender: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    skim(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "skim(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  exit(
    balance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exit(uint256)"(
    balance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  harvest(
    balance: BigNumberish,
    sender: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "harvest(uint256,address)"(
    balance: BigNumberish,
    sender: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  skim(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "skim(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    exit(balance: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "exit(uint256)"(
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvest(
      balance: BigNumberish,
      sender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "harvest(uint256,address)"(
      balance: BigNumberish,
      sender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    skim(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "skim(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    exit(balance: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "exit(uint256)"(
      balance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    harvest(
      balance: BigNumberish,
      sender: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "harvest(uint256,address)"(
      balance: BigNumberish,
      sender: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    skim(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "skim(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    exit(
      balance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exit(uint256)"(
      balance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    harvest(
      balance: BigNumberish,
      sender: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "harvest(uint256,address)"(
      balance: BigNumberish,
      sender: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    skim(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "skim(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
