{"version":3,"file":"temp-file.js","sourceRoot":"","sources":["../src/temp-file.ts"],"names":[],"mappings":";;;;;;AAAA,4CAAmB;AACnB,4CAAmB;AACnB,gDAAuB;AACvB,0EAAiD;AAEjD,MAAM,EAAE,MAAM,EAAE,GAAG,oBAAU,CAAA;AAE7B;;;;GAIG;AACH,SAAgB,QAAQ,CAAC,IAAY;IACnC,MAAM,QAAQ,GAAG,cAAI,CAAC,IAAI,CAAC,YAAE,CAAC,MAAM,EAAE,EAAE,MAAM,CAAC,UAAU,EAAE,CAAC,CAAA;IAC5D,YAAE,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAA;IAChC,OAAO;QACL,IAAI,EAAE,QAAQ;QACd,MAAM,EAAE,GAAG,EAAE,CAAC,YAAE,CAAC,UAAU,CAAC,QAAQ,CAAC;KACtC,CAAA;AACH,CAAC;AAPD,4BAOC","sourcesContent":["import fs from 'fs'\nimport os from 'os'\nimport path from 'path'\nimport primitives from '@edge-runtime/primitives'\n\nconst { crypto } = primitives\n\n/**\n * Creates a temporary file with the provided content and returns the\n * generated path and a function to remove the file once it has\n * been used. This allows to hide details.\n */\nexport function tempFile(code: string) {\n  const filepath = path.join(os.tmpdir(), crypto.randomUUID())\n  fs.writeFileSync(filepath, code)\n  return {\n    path: filepath,\n    remove: () => fs.unlinkSync(filepath),\n  }\n}\n"]}