/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MasterDeployerInterface extends utils.Interface {
  functions: {
    "addToWhitelist(address)": FunctionFragment;
    "barFee()": FunctionFragment;
    "barFeeTo()": FunctionFragment;
    "bento()": FunctionFragment;
    "deployPool(address,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pools(address)": FunctionFragment;
    "removeFromWhitelist(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBarFee(uint256)": FunctionFragment;
    "setBarFeeTo(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "whitelistedFactories(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "barFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "barFeeTo", values?: undefined): string;
  encodeFunctionData(functionFragment: "bento", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deployPool",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pools", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBarFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setBarFeeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedFactories",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "barFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "barFeeTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bento", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deployPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBarFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBarFeeTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedFactories",
    data: BytesLike
  ): Result;

  events: {
    "AddToWhitelist(address)": EventFragment;
    "BarFeeToUpdated(address)": EventFragment;
    "BarFeeUpdated(uint256)": EventFragment;
    "DeployPool(address,address,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveFromWhitelist(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddToWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BarFeeToUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BarFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveFromWhitelist"): EventFragment;
}

export type AddToWhitelistEvent = TypedEvent<[string], { factory: string }>;

export type AddToWhitelistEventFilter = TypedEventFilter<AddToWhitelistEvent>;

export type BarFeeToUpdatedEvent = TypedEvent<[string], { barFeeTo: string }>;

export type BarFeeToUpdatedEventFilter = TypedEventFilter<BarFeeToUpdatedEvent>;

export type BarFeeUpdatedEvent = TypedEvent<[BigNumber], { barFee: BigNumber }>;

export type BarFeeUpdatedEventFilter = TypedEventFilter<BarFeeUpdatedEvent>;

export type DeployPoolEvent = TypedEvent<
  [string, string, string],
  { factory: string; pool: string; deployData: string }
>;

export type DeployPoolEventFilter = TypedEventFilter<DeployPoolEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RemoveFromWhitelistEvent = TypedEvent<
  [string],
  { factory: string }
>;

export type RemoveFromWhitelistEventFilter =
  TypedEventFilter<RemoveFromWhitelistEvent>;

export interface MasterDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MasterDeployerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addToWhitelist(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    barFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    barFeeTo(overrides?: CallOverrides): Promise<[string]>;

    bento(overrides?: CallOverrides): Promise<[string]>;

    deployPool(
      _factory: string,
      _deployData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pools(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    removeFromWhitelist(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBarFee(
      _barFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBarFeeTo(
      _barFeeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistedFactories(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addToWhitelist(
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  barFee(overrides?: CallOverrides): Promise<BigNumber>;

  barFeeTo(overrides?: CallOverrides): Promise<string>;

  bento(overrides?: CallOverrides): Promise<string>;

  deployPool(
    _factory: string,
    _deployData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pools(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  removeFromWhitelist(
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBarFee(
    _barFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBarFeeTo(
    _barFeeTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistedFactories(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addToWhitelist(_factory: string, overrides?: CallOverrides): Promise<void>;

    barFee(overrides?: CallOverrides): Promise<BigNumber>;

    barFeeTo(overrides?: CallOverrides): Promise<string>;

    bento(overrides?: CallOverrides): Promise<string>;

    deployPool(
      _factory: string,
      _deployData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pools(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    removeFromWhitelist(
      _factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBarFee(_barFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setBarFeeTo(_barFeeTo: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistedFactories(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AddToWhitelist(address)"(
      factory?: string | null
    ): AddToWhitelistEventFilter;
    AddToWhitelist(factory?: string | null): AddToWhitelistEventFilter;

    "BarFeeToUpdated(address)"(
      barFeeTo?: string | null
    ): BarFeeToUpdatedEventFilter;
    BarFeeToUpdated(barFeeTo?: string | null): BarFeeToUpdatedEventFilter;

    "BarFeeUpdated(uint256)"(
      barFee?: BigNumberish | null
    ): BarFeeUpdatedEventFilter;
    BarFeeUpdated(barFee?: BigNumberish | null): BarFeeUpdatedEventFilter;

    "DeployPool(address,address,bytes)"(
      factory?: string | null,
      pool?: string | null,
      deployData?: null
    ): DeployPoolEventFilter;
    DeployPool(
      factory?: string | null,
      pool?: string | null,
      deployData?: null
    ): DeployPoolEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RemoveFromWhitelist(address)"(
      factory?: string | null
    ): RemoveFromWhitelistEventFilter;
    RemoveFromWhitelist(
      factory?: string | null
    ): RemoveFromWhitelistEventFilter;
  };

  estimateGas: {
    addToWhitelist(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    barFee(overrides?: CallOverrides): Promise<BigNumber>;

    barFeeTo(overrides?: CallOverrides): Promise<BigNumber>;

    bento(overrides?: CallOverrides): Promise<BigNumber>;

    deployPool(
      _factory: string,
      _deployData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pools(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeFromWhitelist(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBarFee(
      _barFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBarFeeTo(
      _barFeeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistedFactories(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToWhitelist(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    barFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    barFeeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bento(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployPool(
      _factory: string,
      _deployData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFromWhitelist(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBarFee(
      _barFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBarFeeTo(
      _barFeeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistedFactories(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
