import*as e from"fp-ts/Either";import{pipe as t,not as r,flow as o,absurd as a,identity as s}from"fp-ts/function";import{toNestError as n,validateFieldsNatively as p}from"@hookform/resolvers";import{TaggedUnionType as i,UnionType as m,IntersectionType as f}from"io-ts";import*as l from"fp-ts/ReadonlyArray";import*as c from"fp-ts/Option";import*as u from"fp-ts/Semigroup";import*as y from"fp-ts/ReadonlyRecord";function d(){return(d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o])}return e}).apply(this,arguments)}const g=r=>r.reduce((r,o,a)=>t(o,e.fold(e=>`${a>0?".":""}${e}`,e=>`[${e}]`),e=>`${r}${e}`),""),h=["path"],v=n=>{const p=t(u=n.context,l.filterMapWithIndex((e,t)=>{const r=e-1;return void 0===u[r]||u[r].type instanceof i||u[r].type instanceof m||u[r].type instanceof f?c.none:c.some(t)}),l.map(({key:e})=>e),l.map(o=>t(o,e=>parseInt(e,10),e.fromPredicate(r(Number.isNaN),()=>o))),l.toArray,g);var u;return{message:t(n.message,e.fromNullable(n.context),e.mapLeft(o(l.last,c.map(e=>`expected ${e.type.name} but got ${JSON.stringify(e.actual)}`),c.getOrElseW(()=>a("Error context is missing name")))),e.getOrElseW(s)),type:t(n.context,l.last,c.map(e=>e.type.name),c.getOrElse(()=>"unknown")),path:p}},O=e=>t(e,l.map(e=>({[e.path]:{type:e.type,message:e.message}})),e=>u.fold({concat:(e,t)=>Object.assign({},t,e)})({},e)),b={concat:(e,t)=>d({},t,{types:d({},e.types,{[e.type]:e.message,[t.type]:t.message})})},x=e=>t(y.fromFoldableMap(b,l.Foldable)(e,e=>[e.path,e]),y.map(e=>function(e,t){if(null==e)return{};var r,o,a={},s=Object.keys(e);for(o=0;o<s.length;o++)t.indexOf(r=s[o])>=0||(a[r]=e[r]);return a}(e,h))),N=r=>(o,a,s)=>{return t(o,r.decode,e.mapLeft((i=!s.shouldUseNativeValidation&&"all"===s.criteriaMode,e=>{const r=i?x:O;return t(e,l.map(v),r)})),e.mapLeft(e=>n(e,s)),e.fold(e=>({values:{},errors:e}),e=>(s.shouldUseNativeValidation&&p({},s),{values:e,errors:{}})));var i};export{N as ioTsResolver};
//# sourceMappingURL=io-ts.modern.js.map
