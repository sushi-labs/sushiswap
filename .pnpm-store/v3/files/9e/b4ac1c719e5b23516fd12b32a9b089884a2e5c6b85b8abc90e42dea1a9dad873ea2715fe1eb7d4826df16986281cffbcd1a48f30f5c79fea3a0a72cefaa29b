{"version":3,"file":"index.production.js","sources":["../../src/subscribable.ts","../../src/utils.ts","../../src/focusManager.ts","../../src/onlineManager.ts","../../src/retryer.ts","../../src/logger.ts","../../src/notifyManager.ts","../../src/removable.ts","../../src/query.ts","../../src/queryCache.ts","../../src/mutation.ts","../../src/mutationCache.ts","../../src/infiniteQueryBehavior.ts","../../src/queryObserver.ts","../../src/hydration.ts","../../src/infiniteQueryObserver.ts","../../src/mutationObserver.ts","../../src/queriesObserver.ts","../../src/queryClient.ts"],"sourcesContent":["type Listener = () => void\n\nexport class Subscribable<TListener extends Function = Listener> {\n  protected listeners: TListener[]\n\n  constructor() {\n    this.listeners = []\n    this.subscribe = this.subscribe.bind(this)\n  }\n\n  subscribe(listener: TListener): () => void {\n    this.listeners.push(listener as TListener)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners = this.listeners.filter((x) => x !== listener)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.length > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n","import type { Mutation } from './mutation'\nimport type { Query } from './query'\nimport type {\n  FetchStatus,\n  MutationFunction,\n  MutationKey,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryOptions,\n} from './types'\n\n// TYPES\n\nexport interface QueryFilters {\n  /**\n   * Filter to active queries, inactive queries or all queries\n   */\n  type?: QueryTypeFilter\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: QueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include queries matching their fetchStatus\n   */\n  fetchStatus?: FetchStatus\n}\n\nexport interface MutationFilters {\n  /**\n   * Match mutation key exactly\n   */\n  exact?: boolean\n  /**\n   * Include mutations matching this predicate function\n   */\n  predicate?: (mutation: Mutation<any, any, any>) => boolean\n  /**\n   * Include mutations matching this mutation key\n   */\n  mutationKey?: MutationKey\n  /**\n   * Include or exclude fetching mutations\n   */\n  fetching?: boolean\n}\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\nexport type QueryTypeFilter = 'all' | 'active' | 'inactive'\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined'\n\nexport function noop(): undefined {\n  return undefined\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput,\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: unknown): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function difference<T>(array1: T[], array2: T[]): T[] {\n  return array1.filter((x) => array2.indexOf(x) === -1)\n}\n\nexport function replaceAt<T>(array: T[], index: number, value: T): T[] {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function parseQueryArgs<\n  TOptions extends QueryOptions<any, any, any, TQueryKey>,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1: TQueryKey | TOptions,\n  arg2?: QueryFunction<any, TQueryKey> | TOptions,\n  arg3?: TOptions,\n): TOptions {\n  if (!isQueryKey(arg1)) {\n    return arg1 as TOptions\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3, queryKey: arg1, queryFn: arg2 } as TOptions\n  }\n\n  return { ...arg2, queryKey: arg1 } as TOptions\n}\n\nexport function parseMutationArgs<\n  TOptions extends MutationOptions<any, any, any, any>,\n>(\n  arg1: MutationKey | MutationFunction<any, any> | TOptions,\n  arg2?: MutationFunction<any, any> | TOptions,\n  arg3?: TOptions,\n): TOptions {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3, mutationKey: arg1, mutationFn: arg2 } as TOptions\n    }\n    return { ...arg2, mutationKey: arg1 } as TOptions\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2, mutationFn: arg1 } as TOptions\n  }\n\n  return { ...arg1 } as TOptions\n}\n\nexport function parseFilterArgs<\n  TFilters extends QueryFilters,\n  TOptions = unknown,\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions,\n): [TFilters, TOptions | undefined] {\n  return (\n    isQueryKey(arg1) ? [{ ...arg2, queryKey: arg1 }, arg3] : [arg1 || {}, arg2]\n  ) as [TFilters, TOptions]\n}\n\nexport function parseMutationFilterArgs<\n  TFilters extends MutationFilters,\n  TOptions = unknown,\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions,\n): [TFilters, TOptions | undefined] {\n  return (\n    isQueryKey(arg1)\n      ? [{ ...arg2, mutationKey: arg1 }, arg3]\n      : [arg1 || {}, arg2]\n  ) as [TFilters, TOptions]\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>,\n): boolean {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  if (type !== 'all') {\n    const isActive = query.isActive()\n    if (type === 'active' && !isActive) {\n      return false\n    }\n    if (type === 'inactive' && isActive) {\n      return false\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (\n    typeof fetchStatus !== 'undefined' &&\n    fetchStatus !== query.state.fetchStatus\n  ) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function matchMutation(\n  filters: MutationFilters,\n  mutation: Mutation<any, any>,\n): boolean {\n  const { exact, fetching, predicate, mutationKey } = filters\n  if (isQueryKey(mutationKey)) {\n    if (!mutation.options.mutationKey) {\n      return false\n    }\n    if (exact) {\n      if (\n        hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)\n      ) {\n        return false\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false\n    }\n  }\n\n  if (\n    typeof fetching === 'boolean' &&\n    (mutation.state.status === 'loading') !== fetching\n  ) {\n    return false\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hashQueryKeyByOptions<TQueryKey extends QueryKey = QueryKey>(\n  queryKey: TQueryKey,\n  options?: QueryOptions<any, any, any, TQueryKey>,\n): string {\n  const hashFn = options?.queryKeyHashFn || hashQueryKey\n  return hashFn(queryKey)\n}\n\n/**\n * Default query keys hash function.\n * Hashes the value into a stable hash.\n */\nexport function hashQueryKey(queryKey: QueryKey): string {\n  return JSON.stringify(queryKey, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val,\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean {\n  return partialDeepEqual(a, b)\n}\n\n/**\n * Checks if `b` partially matches with `a`.\n */\nexport function partialDeepEqual(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some((key) => !partialDeepEqual(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = isPlainArray(a) && isPlainArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\nexport function shallowEqualObjects<T>(a: T, b: T): boolean {\n  if ((a && !b) || (b && !a)) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function isPlainArray(value: unknown) {\n  return Array.isArray(value) && value.length === Object.keys(value).length\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isQueryKey(value: unknown): value is QueryKey {\n  return Array.isArray(value)\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeout)\n  })\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nexport function scheduleMicrotask(callback: () => void) {\n  sleep(0).then(callback)\n}\n\nexport function getAbortController(): AbortController | undefined {\n  if (typeof AbortController === 'function') {\n    return new AbortController()\n  }\n}\n\nexport function replaceData<\n  TData,\n  TOptions extends QueryOptions<any, any, any, any>,\n>(prevData: TData | undefined, data: TData, options: TOptions): TData {\n  // Use prev data if an isDataEqual function is defined and returns `true`\n  if (options.isDataEqual?.(prevData, data)) {\n    return prevData as TData\n  } else if (typeof options.structuralSharing === 'function') {\n    return options.structuralSharing(prevData, data)\n  } else if (options.structuralSharing !== false) {\n    // Structurally share data between prev and new data if needed\n    return replaceEqualDeep(prevData, data)\n  }\n  return data\n}\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setFocused: (focused?: boolean) => void,\n) => (() => void) | undefined\n\nexport class FocusManager extends Subscribable {\n  private focused?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = (onFocus) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus()\n        // Listen to visibillitychange and focus\n        window.addEventListener('visibilitychange', listener, false)\n        window.addEventListener('focus', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n          window.removeEventListener('focus', listener)\n        }\n      }\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup((focused) => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    this.focused = focused\n\n    if (focused) {\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    this.listeners.forEach((listener) => {\n      listener()\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.focused === 'boolean') {\n      return this.focused\n    }\n\n    // document global can be unavailable in react native\n    if (typeof document === 'undefined') {\n      return true\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(\n      document.visibilityState,\n    )\n  }\n}\n\nexport const focusManager = new FocusManager()\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setOnline: (online?: boolean) => void,\n) => (() => void) | undefined\n\nexport class OnlineManager extends Subscribable {\n  private online?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = (onOnline) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline()\n        // Listen to online\n        window.addEventListener('online', listener, false)\n        window.addEventListener('offline', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', listener)\n          window.removeEventListener('offline', listener)\n        }\n      }\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup((online?: boolean) => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online)\n      } else {\n        this.onOnline()\n      }\n    })\n  }\n\n  setOnline(online?: boolean): void {\n    this.online = online\n\n    if (online) {\n      this.onOnline()\n    }\n  }\n\n  onOnline(): void {\n    this.listeners.forEach((listener) => {\n      listener()\n    })\n  }\n\n  isOnline(): boolean {\n    if (typeof this.online === 'boolean') {\n      return this.online\n    }\n\n    if (\n      typeof navigator === 'undefined' ||\n      typeof navigator.onLine === 'undefined'\n    ) {\n      return true\n    }\n\n    return navigator.onLine\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n","import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { sleep } from './utils'\nimport { CancelOptions, NetworkMode } from './types'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = unknown> {\n  fn: () => TData | Promise<TData>\n  abort?: () => void\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n  networkMode: NetworkMode | undefined\n}\n\nexport interface Retryer<TData = unknown> {\n  promise: Promise<TData>\n  cancel: (cancelOptions?: CancelOptions) => void\n  continue: () => void\n  cancelRetry: () => void\n  continueRetry: () => void\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError> = (\n  failureCount: number,\n  error: TError,\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError,\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\nexport function canFetch(networkMode: NetworkMode | undefined): boolean {\n  return (networkMode ?? 'online') === 'online'\n    ? onlineManager.isOnline()\n    : true\n}\n\nexport class CancelledError {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function createRetryer<TData = unknown, TError = unknown>(\n  config: RetryerConfig<TData, TError>,\n): Retryer<TData> {\n  let isRetryCancelled = false\n  let failureCount = 0\n  let isResolved = false\n  let continueFn: ((value?: unknown) => void) | undefined\n  let promiseResolve: (data: TData) => void\n  let promiseReject: (error: TError) => void\n\n  const promise = new Promise<TData>((outerResolve, outerReject) => {\n    promiseResolve = outerResolve\n    promiseReject = outerReject\n  })\n\n  const cancel = (cancelOptions?: CancelOptions): void => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions))\n\n      config.abort?.()\n    }\n  }\n  const cancelRetry = () => {\n    isRetryCancelled = true\n  }\n\n  const continueRetry = () => {\n    isRetryCancelled = false\n  }\n\n  const shouldPause = () =>\n    !focusManager.isFocused() ||\n    (config.networkMode !== 'always' && !onlineManager.isOnline())\n\n  const resolve = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onSuccess?.(value)\n      continueFn?.()\n      promiseResolve(value)\n    }\n  }\n\n  const reject = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onError?.(value)\n      continueFn?.()\n      promiseReject(value)\n    }\n  }\n\n  const pause = () => {\n    return new Promise((continueResolve) => {\n      continueFn = (value) => {\n        if (isResolved || !shouldPause()) {\n          return continueResolve(value)\n        }\n      }\n      config.onPause?.()\n    }).then(() => {\n      continueFn = undefined\n      if (!isResolved) {\n        config.onContinue?.()\n      }\n    })\n  }\n\n  // Create loop function\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return\n    }\n\n    let promiseOrValue: any\n\n    // Execute query\n    try {\n      promiseOrValue = config.fn()\n    } catch (error) {\n      promiseOrValue = Promise.reject(error)\n    }\n\n    Promise.resolve(promiseOrValue)\n      .then(resolve)\n      .catch((error) => {\n        // Stop if the fetch is already resolved\n        if (isResolved) {\n          return\n        }\n\n        // Do we need to retry the request?\n        const retry = config.retry ?? 3\n        const retryDelay = config.retryDelay ?? defaultRetryDelay\n        const delay =\n          typeof retryDelay === 'function'\n            ? retryDelay(failureCount, error)\n            : retryDelay\n        const shouldRetry =\n          retry === true ||\n          (typeof retry === 'number' && failureCount < retry) ||\n          (typeof retry === 'function' && retry(failureCount, error))\n\n        if (isRetryCancelled || !shouldRetry) {\n          // We are done if the query does not need to be retried\n          reject(error)\n          return\n        }\n\n        failureCount++\n\n        // Notify on fail\n        config.onFail?.(failureCount, error)\n\n        // Delay\n        sleep(delay)\n          // Pause if the document is not visible or when the device is offline\n          .then(() => {\n            if (shouldPause()) {\n              return pause()\n            }\n          })\n          .then(() => {\n            if (isRetryCancelled) {\n              reject(error)\n            } else {\n              run()\n            }\n          })\n      })\n  }\n\n  // Start loop\n  if (canFetch(config.networkMode)) {\n    run()\n  } else {\n    pause().then(run)\n  }\n\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      continueFn?.()\n    },\n    cancelRetry,\n    continueRetry,\n  }\n}\n","export interface Logger {\n  log: LogFunction\n  warn: LogFunction\n  error: LogFunction\n}\n\ntype LogFunction = (...args: any[]) => void\n\nexport const defaultLogger: Logger = console\n","import { scheduleMicrotask } from './utils'\n\n// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\nexport function createNotifyManager() {\n  let queue: NotifyCallback[] = []\n  let transactions = 0\n  let notifyFn: NotifyFunction = (callback) => {\n    callback()\n  }\n  let batchNotifyFn: BatchNotifyFunction = (callback: () => void) => {\n    callback()\n  }\n\n  const batch = <T>(callback: () => T): T => {\n    let result\n    transactions++\n    try {\n      result = callback()\n    } finally {\n      transactions--\n      if (!transactions) {\n        flush()\n      }\n    }\n    return result\n  }\n\n  const schedule = (callback: NotifyCallback): void => {\n    if (transactions) {\n      queue.push(callback)\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback)\n      })\n    }\n  }\n\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  const batchCalls = <T extends Function>(callback: T): T => {\n    return ((...args: any[]) => {\n      schedule(() => {\n        callback(...args)\n      })\n    }) as any\n  }\n\n  const flush = (): void => {\n    const originalQueue = queue\n    queue = []\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach((callback) => {\n            notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  const setNotifyFunction = (fn: NotifyFunction) => {\n    notifyFn = fn\n  }\n\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  const setBatchNotifyFunction = (fn: BatchNotifyFunction) => {\n    batchNotifyFn = fn\n  }\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction,\n  } as const\n}\n\n// SINGLETON\nexport const notifyManager = createNotifyManager()\n","import { isServer, isValidTimeout } from './utils'\n\nexport abstract class Removable {\n  cacheTime!: number\n  private gcTimeout?: ReturnType<typeof setTimeout>\n\n  destroy(): void {\n    this.clearGcTimeout()\n  }\n\n  protected scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.cacheTime)\n    }\n  }\n\n  protected updateCacheTime(newCacheTime: number | undefined): void {\n    // Default to 5 minutes (Infinity for server-side) if no cache time is set\n    this.cacheTime = Math.max(\n      this.cacheTime || 0,\n      newCacheTime ?? (isServer ? Infinity : 5 * 60 * 1000),\n    )\n  }\n\n  protected clearGcTimeout() {\n    if (this.gcTimeout) {\n      clearTimeout(this.gcTimeout)\n      this.gcTimeout = undefined\n    }\n  }\n\n  protected abstract optionalRemove(): void\n}\n","import { getAbortController, noop, replaceData, timeUntilStale } from './utils'\nimport type {\n  InitialDataFunction,\n  QueryKey,\n  QueryOptions,\n  QueryStatus,\n  QueryFunctionContext,\n  QueryMeta,\n  CancelOptions,\n  SetDataOptions,\n  FetchStatus,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport { defaultLogger, Logger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Retryer, isCancelledError, canFetch, createRetryer } from './retryer'\nimport { Removable } from './removable'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  cache: QueryCache\n  queryKey: TQueryKey\n  queryHash: string\n  logger?: Logger\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n  meta: QueryMeta | undefined\n}\n\nexport interface QueryState<TData = unknown, TError = unknown> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchMeta: any\n  isInvalidated: boolean\n  status: QueryStatus\n  fetchStatus: FetchStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  signal?: AbortSignal\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  queryKey: TQueryKey\n  state: QueryState<TData, TError>\n  meta: QueryMeta | undefined\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n  ) => void\n}\n\nexport interface FetchOptions {\n  cancelRefetch?: boolean\n  meta?: any\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: any\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n  manual?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: QueryState<TData, TError>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Removable {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  initialState: QueryState<TData, TError>\n  revertState?: QueryState<TData, TError>\n  state: QueryState<TData, TError>\n  meta: QueryMeta | undefined\n  isFetchingOptimistic?: boolean\n\n  private cache: QueryCache\n  private logger: Logger\n  private promise?: Promise<TData>\n  private retryer?: Retryer<TData>\n  private observers: QueryObserver<any, any, any, any, any>[]\n  private defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  private abortSignalConsumed: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    super()\n\n    this.abortSignalConsumed = false\n    this.defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.cache = config.cache\n    this.logger = config.logger || defaultLogger\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.initialState = config.state || getDefaultState(this.options)\n    this.state = this.initialState\n    this.meta = config.meta\n  }\n\n  private setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    this.meta = options?.meta\n\n    this.updateCacheTime(this.options.cacheTime)\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.cache.remove(this)\n    }\n  }\n\n  setData(\n    newData: TData,\n    options?: SetDataOptions & { manual: boolean },\n  ): TData {\n    const data = replaceData(this.state.data, newData, this.options)\n\n    // Set data and mark it as cached\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual,\n    })\n\n    return data\n  }\n\n  setState(\n    state: QueryState<TData, TError>,\n    setStateOptions?: SetStateOptions,\n  ): void {\n    this.dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.promise\n    this.retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    super.destroy()\n\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some((observer) => observer.options.enabled !== false)\n  }\n\n  isDisabled(): boolean {\n    return this.getObserversCount() > 0 && !this.isActive()\n  }\n\n  isStale(): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      this.observers.some((observer) => observer.getCurrentResult().isStale)\n    )\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnWindowFocus())\n\n    if (observer) {\n      observer.refetch({ cancelRefetch: false })\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnReconnect())\n\n    if (observer) {\n      observer.refetch({ cancelRefetch: false })\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter((x) => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.abortSignalConsumed) {\n            this.retryer.cancel({ revert: true })\n          } else {\n            this.retryer.cancelRetry()\n          }\n        }\n\n        this.scheduleGc()\n      }\n\n      this.cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions,\n  ): Promise<TData> {\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.dataUpdatedAt && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({ silent: true })\n      } else if (this.promise) {\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        this.retryer?.continueRetry()\n        // Return current promise if we are already fetching\n        return this.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find((x) => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    if (!Array.isArray(this.options.queryKey)) {\n      if (process.env.NODE_ENV !== 'production') {\n        this.logger.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`,\n        )\n      }\n    }\n\n    const abortController = getAbortController()\n\n    // Create query function context\n    const queryFnContext: QueryFunctionContext<TQueryKey> = {\n      queryKey: this.queryKey,\n      pageParam: undefined,\n      meta: this.meta,\n    }\n\n    // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n    const addSignalProperty = (object: unknown) => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          if (abortController) {\n            this.abortSignalConsumed = true\n            return abortController.signal\n          }\n          return undefined\n        },\n      })\n    }\n\n    addSignalProperty(queryFnContext)\n\n    // Create fetch function\n    const fetchFn = () => {\n      if (!this.options.queryFn) {\n        return Promise.reject('Missing queryFn')\n      }\n      this.abortSignalConsumed = false\n      return this.options.queryFn(queryFnContext)\n    }\n\n    // Trigger behavior hook\n    const context: FetchContext<TQueryFnData, TError, TData, TQueryKey> = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn,\n      meta: this.meta,\n    }\n\n    addSignalProperty(context)\n\n    this.options.behavior?.onFetch(context)\n\n    // Store state in case the current fetch needs to be reverted\n    this.revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      this.state.fetchStatus === 'idle' ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    const onError = (error: TError | { silent?: boolean }) => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.dispatch({\n          type: 'error',\n          error: error as TError,\n        })\n      }\n\n      if (!isCancelledError(error)) {\n        // Notify cache callback\n        this.cache.config.onError?.(error, this as Query<any, any, any, any>)\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error)\n        }\n      }\n\n      if (!this.isFetchingOptimistic) {\n        // Schedule query gc after fetching\n        this.scheduleGc()\n      }\n      this.isFetchingOptimistic = false\n    }\n\n    // Try to fetch the data\n    this.retryer = createRetryer({\n      fn: context.fetchFn as () => TData,\n      abort: abortController?.abort.bind(abortController),\n      onSuccess: (data) => {\n        if (typeof data === 'undefined') {\n          onError(new Error('Query data cannot be undefined') as any)\n          return\n        }\n\n        this.setData(data as TData)\n\n        // Notify cache callback\n        this.cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n\n        if (!this.isFetchingOptimistic) {\n          // Schedule query gc after fetching\n          this.scheduleGc()\n        }\n        this.isFetchingOptimistic = false\n      },\n      onError,\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n    })\n\n    this.promise = this.retryer.promise\n\n    return this.promise\n  }\n\n  private dispatch(action: Action<TData, TError>): void {\n    const reducer = (\n      state: QueryState<TData, TError>,\n    ): QueryState<TData, TError> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            fetchFailureCount: state.fetchFailureCount + 1,\n          }\n        case 'pause':\n          return {\n            ...state,\n            fetchStatus: 'paused',\n          }\n        case 'continue':\n          return {\n            ...state,\n            fetchStatus: 'fetching',\n          }\n        case 'fetch':\n          return {\n            ...state,\n            fetchFailureCount: 0,\n            fetchMeta: action.meta ?? null,\n            fetchStatus: canFetch(this.options.networkMode)\n              ? 'fetching'\n              : 'paused',\n            ...(!state.dataUpdatedAt && {\n              error: null,\n              status: 'loading',\n            }),\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n            }),\n          }\n        case 'error':\n          const error = action.error as unknown\n\n          if (isCancelledError(error) && error.revert && this.revertState) {\n            return { ...this.revertState }\n          }\n\n          return {\n            ...state,\n            error: error as TError,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchStatus: 'idle',\n            status: 'error',\n          }\n        case 'invalidate':\n          return {\n            ...state,\n            isInvalidated: true,\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onQueryUpdate(action)\n      })\n\n      this.cache.notify({ query: this, type: 'updated', action })\n    })\n  }\n}\n\nfunction getDefaultState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): QueryState<TData, TError> {\n  const data =\n    typeof options.initialData === 'function'\n      ? (options.initialData as InitialDataFunction<TData>)()\n      : options.initialData\n\n  const hasInitialData = typeof options.initialData !== 'undefined'\n\n  const initialDataUpdatedAt = hasInitialData\n    ? typeof options.initialDataUpdatedAt === 'function'\n      ? (options.initialDataUpdatedAt as () => number | undefined)()\n      : options.initialDataUpdatedAt\n    : 0\n\n  const hasData = typeof data !== 'undefined'\n\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'loading',\n    fetchStatus: 'idle',\n  }\n}\n","import {\n  QueryFilters,\n  hashQueryKeyByOptions,\n  matchQuery,\n  parseFilterArgs,\n} from './utils'\nimport { Action, Query, QueryState } from './query'\nimport type { QueryKey, QueryOptions } from './types'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport { QueryObserver } from './queryObserver'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (error: unknown, query: Query<unknown, unknown, unknown>) => void\n  onSuccess?: (data: unknown, query: Query<unknown, unknown, unknown>) => void\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryAdded {\n  type: 'added'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryRemoved {\n  type: 'removed'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryUpdated {\n  type: 'updated'\n  query: Query<any, any, any, any>\n  action: Action<any, any>\n}\n\ninterface NotifyEventQueryObserverAdded {\n  type: 'observerAdded'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverRemoved {\n  type: 'observerRemoved'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverResultsUpdated {\n  type: 'observerResultsUpdated'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverOptionsUpdated {\n  type: 'observerOptionsUpdated'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ntype QueryCacheNotifyEvent =\n  | NotifyEventQueryAdded\n  | NotifyEventQueryRemoved\n  | NotifyEventQueryUpdated\n  | NotifyEventQueryObserverAdded\n  | NotifyEventQueryObserverRemoved\n  | NotifyEventQueryObserverResultsUpdated\n  | NotifyEventQueryObserverOptionsUpdated\n\ntype QueryCacheListener = (event: QueryCacheNotifyEvent) => void\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  config: QueryCacheConfig\n\n  private queries: Query<any, any, any, any>[]\n  private queriesMap: QueryHashMap\n\n  constructor(config?: QueryCacheConfig) {\n    super()\n    this.config = config || {}\n    this.queries = []\n    this.queriesMap = {}\n  }\n\n  build<TQueryFnData, TError, TData, TQueryKey extends QueryKey>(\n    client: QueryClient,\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    state?: QueryState<TData, TError>,\n  ): Query<TQueryFnData, TError, TData, TQueryKey> {\n    const queryKey = options.queryKey!\n    const queryHash =\n      options.queryHash ?? hashQueryKeyByOptions(queryKey, options)\n    let query = this.get<TQueryFnData, TError, TData, TQueryKey>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        logger: client.getLogger(),\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n        meta: options.meta,\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any, any, any>): void {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query\n      this.queries.push(query)\n      this.notify({\n        type: 'added',\n        query,\n      })\n    }\n  }\n\n  remove(query: Query<any, any, any, any>): void {\n    const queryInMap = this.queriesMap[query.queryHash]\n\n    if (queryInMap) {\n      query.destroy()\n\n      this.queries = this.queries.filter((x) => x !== query)\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash]\n      }\n\n      this.notify({ type: 'removed', query })\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach((query) => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueyKey extends QueryKey = QueryKey,\n  >(\n    queryHash: string,\n  ): Query<TQueryFnData, TError, TData, TQueyKey> | undefined {\n    return this.queriesMap[queryHash]\n  }\n\n  getAll(): Query[] {\n    return this.queries\n  }\n\n  find<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    arg1: QueryKey,\n    arg2?: QueryFilters,\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const [filters] = parseFilterArgs(arg1, arg2)\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.queries.find((query) => matchQuery(filters, query))\n  }\n\n  findAll(queryKey?: QueryKey, filters?: QueryFilters): Query[]\n  findAll(filters?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[] {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    return Object.keys(filters).length > 0\n      ? this.queries.filter((query) => matchQuery(filters, query))\n      : this.queries\n  }\n\n  notify(event: QueryCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach((query) => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach((query) => {\n        query.onOnline()\n      })\n    })\n  }\n}\n","import type { MutationOptions, MutationStatus, MutationMeta } from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport { defaultLogger, Logger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Removable } from './removable'\nimport { canFetch, Retryer, createRetryer } from './retryer'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  logger?: Logger\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n  meta?: MutationMeta\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface LoadingAction<TVariables, TContext> {\n  type: 'loading'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError, TVariables, TContext> {\n  type: 'setState'\n  state: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | LoadingAction<TVariables, TContext>\n  | PauseAction\n  | SetStateAction<TData, TError, TVariables, TContext>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Removable {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  mutationId: number\n  meta: MutationMeta | undefined\n\n  private observers: MutationObserver<TData, TError, TVariables, TContext>[]\n  private mutationCache: MutationCache\n  private logger: Logger\n  private retryer?: Retryer<TData>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    super()\n\n    this.options = {\n      ...config.defaultOptions,\n      ...config.options,\n    }\n    this.mutationId = config.mutationId\n    this.mutationCache = config.mutationCache\n    this.logger = config.logger || defaultLogger\n    this.observers = []\n    this.state = config.state || getDefaultState()\n    this.meta = config.meta\n\n    this.updateCacheTime(this.options.cacheTime)\n    this.scheduleGc()\n  }\n\n  setState(state: MutationState<TData, TError, TVariables, TContext>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the mutation from being garbage collected\n      this.clearGcTimeout()\n\n      this.mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer,\n      })\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.observers = this.observers.filter((x) => x !== observer)\n\n    this.scheduleGc()\n\n    this.mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer,\n    })\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.status === 'loading') {\n        this.scheduleGc()\n      } else {\n        this.mutationCache.remove(this)\n      }\n    }\n  }\n\n  continue(): Promise<TData> {\n    if (this.retryer) {\n      this.retryer.continue()\n      return this.retryer.promise\n    }\n    return this.execute()\n  }\n\n  async execute(): Promise<TData> {\n    const executeMutation = () => {\n      this.retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject('No mutationFn found')\n          }\n          return this.options.mutationFn(this.state.variables!)\n        },\n        onFail: () => {\n          this.dispatch({ type: 'failed' })\n        },\n        onPause: () => {\n          this.dispatch({ type: 'pause' })\n        },\n        onContinue: () => {\n          this.dispatch({ type: 'continue' })\n        },\n        retry: this.options.retry ?? 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode,\n      })\n\n      return this.retryer.promise\n    }\n\n    const restored = this.state.status === 'loading'\n    try {\n      if (!restored) {\n        this.dispatch({ type: 'loading', variables: this.options.variables! })\n        // Notify cache callback\n        this.mutationCache.config.onMutate?.(\n          this.state.variables,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n        const context = await this.options.onMutate?.(this.state.variables!)\n        if (context !== this.state.context) {\n          this.dispatch({\n            type: 'loading',\n            context,\n            variables: this.state.variables,\n          })\n        }\n      }\n      const data = await executeMutation()\n\n      // Notify cache callback\n      this.mutationCache.config.onSuccess?.(\n        data,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSuccess?.(\n        data,\n        this.state.variables!,\n        this.state.context!,\n      )\n\n      await this.options.onSettled?.(\n        data,\n        null,\n        this.state.variables!,\n        this.state.context,\n      )\n\n      this.dispatch({ type: 'success', data })\n      return data\n    } catch (error) {\n      try {\n        // Notify cache callback\n        this.mutationCache.config.onError?.(\n          error,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error)\n        }\n\n        await this.options.onError?.(\n          error as TError,\n          this.state.variables!,\n          this.state.context,\n        )\n\n        await this.options.onSettled?.(\n          undefined,\n          error as TError,\n          this.state.variables!,\n          this.state.context,\n        )\n        throw error\n      } finally {\n        this.dispatch({ type: 'error', error: error as TError })\n      }\n    }\n  }\n\n  private dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    const reducer = (\n      state: MutationState<TData, TError, TVariables, TContext>,\n    ): MutationState<TData, TError, TVariables, TContext> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: state.failureCount + 1,\n          }\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true,\n          }\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false,\n          }\n        case 'loading':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'loading',\n            variables: action.variables,\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            error: null,\n            status: 'success',\n            isPaused: false,\n          }\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            isPaused: false,\n            status: 'error',\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onMutationUpdate(action)\n      })\n      this.mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action,\n      })\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext,\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n  }\n}\n","import { MutationObserver } from './mutationObserver'\nimport type { MutationOptions } from './types'\nimport type { QueryClient } from './queryClient'\nimport { notifyManager } from './notifyManager'\nimport { Action, Mutation, MutationState } from './mutation'\nimport { matchMutation, MutationFilters, noop } from './utils'\nimport { Subscribable } from './subscribable'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => void\n  onSuccess?: (\n    data: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => void\n  onMutate?: (\n    variables: unknown,\n    mutation: Mutation<unknown, unknown, unknown, unknown>,\n  ) => void\n}\n\ninterface NotifyEventMutationAdded {\n  type: 'added'\n  mutation: Mutation<any, any, any, any>\n}\ninterface NotifyEventMutationRemoved {\n  type: 'removed'\n  mutation: Mutation<any, any, any, any>\n}\n\ninterface NotifyEventMutationObserverAdded {\n  type: 'observerAdded'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverRemoved {\n  type: 'observerRemoved'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverOptionsUpdated {\n  type: 'observerOptionsUpdated'\n  mutation?: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any, any>\n}\n\ninterface NotifyEventMutationUpdated {\n  type: 'updated'\n  mutation: Mutation<any, any, any, any>\n  action: Action<any, any, any, any>\n}\n\ntype MutationCacheNotifyEvent =\n  | NotifyEventMutationAdded\n  | NotifyEventMutationRemoved\n  | NotifyEventMutationObserverAdded\n  | NotifyEventMutationObserverRemoved\n  | NotifyEventMutationObserverOptionsUpdated\n  | NotifyEventMutationUpdated\n\ntype MutationCacheListener = (event: MutationCacheNotifyEvent) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  config: MutationCacheConfig\n\n  private mutations: Mutation<any, any, any, any>[]\n  private mutationId: number\n\n  constructor(config?: MutationCacheConfig) {\n    super()\n    this.config = config || {}\n    this.mutations = []\n    this.mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>,\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      logger: client.getLogger(),\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey\n        ? client.getMutationDefaults(options.mutationKey)\n        : undefined,\n      meta: options.meta,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.mutations.push(mutation)\n    this.notify({ type: 'added', mutation })\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    this.mutations = this.mutations.filter((x) => x !== mutation)\n    this.notify({ type: 'removed', mutation })\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.mutations.forEach((mutation) => {\n        this.remove(mutation)\n      })\n    })\n  }\n\n  getAll(): Mutation[] {\n    return this.mutations\n  }\n\n  find<TData = unknown, TError = unknown, TVariables = any, TContext = unknown>(\n    filters: MutationFilters,\n  ): Mutation<TData, TError, TVariables, TContext> | undefined {\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.mutations.find((mutation) => matchMutation(filters, mutation))\n  }\n\n  findAll(filters: MutationFilters): Mutation[] {\n    return this.mutations.filter((mutation) => matchMutation(filters, mutation))\n  }\n\n  notify(event: MutationCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event)\n      })\n    })\n  }\n\n  resumePausedMutations(): Promise<void> {\n    const pausedMutations = this.mutations.filter((x) => x.state.isPaused)\n    return notifyManager.batch(() =>\n      pausedMutations.reduce(\n        (promise, mutation) =>\n          promise.then(() => mutation.continue().catch(noop)),\n        Promise.resolve(),\n      ),\n    )\n  }\n}\n","import type { QueryBehavior } from './query'\n\nimport type {\n  InfiniteData,\n  QueryFunctionContext,\n  QueryOptions,\n  RefetchQueryFilters,\n} from './types'\n\nexport function infiniteQueryBehavior<\n  TQueryFnData,\n  TError,\n  TData,\n>(): QueryBehavior<TQueryFnData, TError, InfiniteData<TData>> {\n  return {\n    onFetch: (context) => {\n      context.fetchFn = () => {\n        const refetchPage: RefetchQueryFilters['refetchPage'] | undefined =\n          context.fetchOptions?.meta?.refetchPage\n        const fetchMore = context.fetchOptions?.meta?.fetchMore\n        const pageParam = fetchMore?.pageParam\n        const isFetchingNextPage = fetchMore?.direction === 'forward'\n        const isFetchingPreviousPage = fetchMore?.direction === 'backward'\n        const oldPages = context.state.data?.pages || []\n        const oldPageParams = context.state.data?.pageParams || []\n        let newPageParams = oldPageParams\n        let cancelled = false\n\n        const addSignalProperty = (object: unknown) => {\n          Object.defineProperty(object, 'signal', {\n            enumerable: true,\n            get: () => {\n              if (context.signal?.aborted) {\n                cancelled = true\n              } else {\n                context.signal?.addEventListener('abort', () => {\n                  cancelled = true\n                })\n              }\n              return context.signal\n            },\n          })\n        }\n\n        // Get query function\n        const queryFn =\n          context.options.queryFn || (() => Promise.reject('Missing queryFn'))\n\n        const buildNewPages = (\n          pages: unknown[],\n          param: unknown,\n          page: unknown,\n          previous?: boolean,\n        ) => {\n          newPageParams = previous\n            ? [param, ...newPageParams]\n            : [...newPageParams, param]\n          return previous ? [page, ...pages] : [...pages, page]\n        }\n\n        // Create function to fetch a page\n        const fetchPage = (\n          pages: unknown[],\n          manual?: boolean,\n          param?: unknown,\n          previous?: boolean,\n        ): Promise<unknown[]> => {\n          if (cancelled) {\n            return Promise.reject('Cancelled')\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages)\n          }\n\n          const queryFnContext: QueryFunctionContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n            meta: context.meta,\n          }\n\n          addSignalProperty(queryFnContext)\n\n          const queryFnResult = queryFn(queryFnContext)\n\n          const promise = Promise.resolve(queryFnResult).then((page) =>\n            buildNewPages(pages, param, page, previous),\n          )\n\n          return promise\n        }\n\n        let promise: Promise<unknown[]>\n\n        // Fetch first page?\n        if (!oldPages.length) {\n          promise = fetchPage([])\n        }\n\n        // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getNextPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param)\n        }\n\n        // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getPreviousPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param, true)\n        }\n\n        // Refetch pages\n        else {\n          newPageParams = []\n\n          const manual = typeof context.options.getNextPageParam === 'undefined'\n\n          const shouldFetchFirstPage =\n            refetchPage && oldPages[0]\n              ? refetchPage(oldPages[0], 0, oldPages)\n              : true\n\n          // Fetch first page\n          promise = shouldFetchFirstPage\n            ? fetchPage([], manual, oldPageParams[0])\n            : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0]))\n\n          // Fetch remaining pages\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then((pages) => {\n              const shouldFetchNextPage =\n                refetchPage && oldPages[i]\n                  ? refetchPage(oldPages[i], i, oldPages)\n                  : true\n\n              if (shouldFetchNextPage) {\n                const param = manual\n                  ? oldPageParams[i]\n                  : getNextPageParam(context.options, pages)\n                return fetchPage(pages, manual, param)\n              }\n              return Promise.resolve(\n                buildNewPages(pages, oldPageParams[i], oldPages[i]),\n              )\n            })\n          }\n        }\n\n        const finalPromise = promise.then((pages) => ({\n          pages,\n          pageParams: newPageParams,\n        }))\n\n        return finalPromise\n      }\n    },\n  }\n}\n\nexport function getNextPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[],\n): unknown | undefined {\n  return options.getNextPageParam?.(pages[pages.length - 1], pages)\n}\n\nexport function getPreviousPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[],\n): unknown | undefined {\n  return options.getPreviousPageParam?.(pages[0], pages)\n}\n\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasNextPage(\n  options: QueryOptions<any, any, any, any>,\n  pages?: unknown,\n): boolean | undefined {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages)\n    return (\n      typeof nextPageParam !== 'undefined' &&\n      nextPageParam !== null &&\n      nextPageParam !== false\n    )\n  }\n}\n\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasPreviousPage(\n  options: QueryOptions<any, any, any, any>,\n  pages?: unknown,\n): boolean | undefined {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages)\n    return (\n      typeof previousPageParam !== 'undefined' &&\n      previousPageParam !== null &&\n      previousPageParam !== false\n    )\n  }\n}\n","import { DefaultedQueryObserverOptions, RefetchPageFilters } from './types'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch, isCancelledError } from './retryer'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private selectError: TError | null\n  private selectFn?: (data: TQueryData) => TData\n  private selectResult?: TData\n  private staleTimeoutId?: ReturnType<typeof setTimeout>\n  private refetchIntervalId?: ReturnType<typeof setInterval>\n  private currentRefetchInterval?: number | false\n  private trackedProps!: Set<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = new Set()\n    this.selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryOptions(options)\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.currentQuery,\n        observer: this,\n      })\n    }\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.currentRefetchInterval)\n    ) {\n      this.updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.client.getQueryCache().build(this.client, options)\n\n    return this.createResult(query, options)\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch<TPageData>({\n    refetchPage,\n    ...options\n  }: RefetchOptions & RefetchPageFilters<TPageData> = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: { refetchPage },\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(this.client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime,\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private computeRefetchInterval() {\n    return typeof this.options.refetchInterval === 'function'\n      ? this.options.refetchInterval(this.currentResult.data, this.currentQuery)\n      : this.options.refetchInterval ?? false\n  }\n\n  private updateRefetchInterval(nextInterval: number | false): void {\n    this.clearRefetchInterval()\n\n    this.currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.currentRefetchInterval) ||\n      this.currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.currentRefetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval(this.computeRefetchInterval())\n  }\n\n  private clearStaleTimeout(): void {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId)\n      this.staleTimeoutId = undefined\n    }\n  }\n\n  private clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, fetchStatus, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdateCount &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.selectFn\n      ) {\n        data = this.selectResult\n      } else {\n        try {\n          this.selectFn = options.select\n          data = options.select(state.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.selectResult = data\n          this.selectError = null\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError)\n          }\n          this.selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = state.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            placeholderData = replaceData(\n              prevResult?.data,\n              placeholderData,\n              options,\n            )\n            this.selectError = null\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError)\n            }\n            this.selectError = selectError as TError\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = placeholderData as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError as any\n      data = this.selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching: isFetching,\n      isRefetching: isFetching && status !== 'loading',\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n\n      if (\n        notifyOnChangeProps === 'all' ||\n        (!notifyOnChangeProps && !this.trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(notifyOnChangeProps ?? this.trackedProps)\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client.getQueryCache().build(this.client, this.options)\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated',\n        })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: typeof options['refetchOnMount'] &\n    typeof options['refetchOnWindowFocus'] &\n    typeof options['refetchOnReconnect'],\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n","import type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type {\n  MutationKey,\n  MutationOptions,\n  QueryKey,\n  QueryOptions,\n} from './types'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\n\nexport interface DehydrateOptions {\n  dehydrateMutations?: boolean\n  dehydrateQueries?: boolean\n  shouldDehydrateMutation?: ShouldDehydrateMutationFunction\n  shouldDehydrateQuery?: ShouldDehydrateQueryFunction\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    queries?: QueryOptions\n    mutations?: MutationOptions\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n}\n\nexport interface DehydratedState {\n  mutations: DehydratedMutation[]\n  queries: DehydratedQuery[]\n}\n\nexport type ShouldDehydrateQueryFunction = (query: Query) => boolean\n\nexport type ShouldDehydrateMutationFunction = (mutation: Mutation) => boolean\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(query: Query): DehydratedQuery {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n  }\n}\n\nfunction defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nfunction defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options: DehydrateOptions = {},\n): DehydratedState {\n  const mutations: DehydratedMutation[] = []\n  const queries: DehydratedQuery[] = []\n\n  if (options.dehydrateMutations !== false) {\n    const shouldDehydrateMutation =\n      options.shouldDehydrateMutation || defaultShouldDehydrateMutation\n\n    client\n      .getMutationCache()\n      .getAll()\n      .forEach((mutation) => {\n        if (shouldDehydrateMutation(mutation)) {\n          mutations.push(dehydrateMutation(mutation))\n        }\n      })\n  }\n\n  if (options.dehydrateQueries !== false) {\n    const shouldDehydrateQuery =\n      options.shouldDehydrateQuery || defaultShouldDehydrateQuery\n\n    client\n      .getQueryCache()\n      .getAll()\n      .forEach((query) => {\n        if (shouldDehydrateQuery(query)) {\n          queries.push(dehydrateQuery(query))\n        }\n      })\n  }\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions,\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach((dehydratedMutation) => {\n    mutationCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.mutations,\n        mutationKey: dehydratedMutation.mutationKey,\n      },\n      dehydratedMutation.state,\n    )\n  })\n\n  queries.forEach((dehydratedQuery) => {\n    const query = queryCache.get(dehydratedQuery.queryHash)\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQuery.state.dataUpdatedAt) {\n        query.setState(dehydratedQuery.state)\n      }\n      return\n    }\n\n    // Restore query\n    queryCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.queries,\n        queryKey: dehydratedQuery.queryKey,\n        queryHash: dehydratedQuery.queryHash,\n      },\n      dehydratedQuery.state,\n    )\n  })\n}\n","import type {\n  DefaultedInfiniteQueryObserverOptions,\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n  QueryKey,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport {\n  NotifyOptions,\n  ObserverFetchOptions,\n  QueryObserver,\n} from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>,\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  InfiniteData<TData>,\n  InfiniteData<TQueryData>,\n  TQueryKey\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>,\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions: ObserverFetchOptions,\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    super.setOptions(\n      {\n        ...options,\n        behavior: infiniteQueryBehavior(),\n      },\n      notifyOptions,\n    )\n  }\n\n  getOptimisticResult(\n    options: DefaultedInfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage({ pageParam, ...options }: FetchNextPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'forward', pageParam },\n      },\n    })\n  }\n\n  fetchPreviousPage({\n    pageParam,\n    ...options\n  }: FetchPreviousPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'backward', pageParam },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, InfiniteData<TQueryData>, TQueryKey>,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const result = super.createResult(query, options)\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data?.pages),\n      hasPreviousPage: hasPreviousPage(options, state.data?.pages),\n      isFetchingNextPage:\n        state.fetchStatus === 'fetching' &&\n        state.fetchMeta?.fetchMore?.direction === 'forward',\n      isFetchingPreviousPage:\n        state.fetchStatus === 'fetching' &&\n        state.fetchMeta?.fetchMore?.direction === 'backward',\n    }\n  }\n}\n","import { Action, getDefaultState, Mutation } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\nimport { shallowEqualObjects } from './utils'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options\n    this.options = this.client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this,\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!,\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","import { difference, replaceAt } from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  QueryObserverOptions,\n  QueryObserverResult,\n  DefaultedQueryObserverOptions,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport { NotifyOptions, QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n  private observersMap: Record<string, QueryObserver>\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = []\n    this.result = []\n    this.observers = []\n    this.observersMap = {}\n\n    if (queries) {\n      this.setQueries(queries)\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: QueryObserverOptions[],\n    notifyOptions?: NotifyOptions,\n  ): void {\n    this.queries = queries\n\n    notifyManager.batch(() => {\n      const prevObservers = this.observers\n\n      const newObserverMatches = this.findMatchingObservers(this.queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newObserversMap = Object.fromEntries(\n        newObservers.map((observer) => [observer.options.queryHash, observer]),\n      )\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.observers = newObservers\n      this.observersMap = newObserversMap\n      this.result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.onUpdate(observer, result)\n        })\n      })\n\n      this.notify()\n    })\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  getOptimisticResult(queries: QueryObserverOptions[]): QueryObserverResult[] {\n    return this.findMatchingObservers(queries).map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n  }\n\n  private findMatchingObservers(\n    queries: QueryObserverOptions[],\n  ): QueryObserverMatch[] {\n    const prevObservers = this.observers\n    const defaultedQueryOptions = queries.map((options) =>\n      this.client.defaultQueryOptions(options),\n    )\n\n    const matchingObservers: QueryObserverMatch[] =\n      defaultedQueryOptions.flatMap((defaultedOptions) => {\n        const match = prevObservers.find(\n          (observer) =>\n            observer.options.queryHash === defaultedOptions.queryHash,\n        )\n        if (match != null) {\n          return [{ defaultedQueryOptions: defaultedOptions, observer: match }]\n        }\n        return []\n      })\n\n    const matchedQueryHashes = matchingObservers.map(\n      (match) => match.defaultedQueryOptions.queryHash,\n    )\n    const unmatchedQueries = defaultedQueryOptions.filter(\n      (defaultedOptions) =>\n        !matchedQueryHashes.includes(defaultedOptions.queryHash),\n    )\n\n    const unmatchedObservers = prevObservers.filter(\n      (prevObserver) =>\n        !matchingObservers.some((match) => match.observer === prevObserver),\n    )\n\n    const getObserver = (options: QueryObserverOptions): QueryObserver => {\n      const defaultedOptions = this.client.defaultQueryOptions(options)\n      const currentObserver = this.observersMap[defaultedOptions.queryHash!]\n      return currentObserver ?? new QueryObserver(this.client, defaultedOptions)\n    }\n\n    const newOrReusedObservers: QueryObserverMatch[] = unmatchedQueries.map(\n      (options, index) => {\n        if (options.keepPreviousData) {\n          // return previous data from one of the observers that no longer match\n          const previouslyUsedObserver = unmatchedObservers[index]\n          if (previouslyUsedObserver !== undefined) {\n            return {\n              defaultedQueryOptions: options,\n              observer: previouslyUsedObserver,\n            }\n          }\n        }\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options),\n        }\n      },\n    )\n\n    const sortMatchesByOrderOfQueries = (\n      a: QueryObserverMatch,\n      b: QueryObserverMatch,\n    ): number =>\n      defaultedQueryOptions.indexOf(a.defaultedQueryOptions) -\n      defaultedQueryOptions.indexOf(b.defaultedQueryOptions)\n\n    return matchingObservers\n      .concat(newOrReusedObservers)\n      .sort(sortMatchesByOrderOfQueries)\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result)\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(this.result)\n      })\n    })\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n","import {\n  QueryFilters,\n  Updater,\n  hashQueryKey,\n  noop,\n  parseFilterArgs,\n  parseQueryArgs,\n  partialMatchKey,\n  hashQueryKeyByOptions,\n  MutationFilters,\n  functionalUpdate,\n} from './utils'\nimport type {\n  QueryClientConfig,\n  DefaultOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  ResetQueryFilters,\n  SetDataOptions,\n} from './types'\nimport type { QueryState } from './query'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport { CancelOptions, DefaultedQueryObserverOptions } from './types'\nimport { defaultLogger, Logger } from './logger'\n\n// TYPES\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  private queryCache: QueryCache\n  private mutationCache: MutationCache\n  private logger: Logger\n  private defaultOptions: DefaultOptions\n  private queryDefaults: QueryDefaults[]\n  private mutationDefaults: MutationDefaults[]\n  private unsubscribeFocus?: () => void\n  private unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.queryCache = config.queryCache || new QueryCache()\n    this.mutationCache = config.mutationCache || new MutationCache()\n    this.logger = config.logger || defaultLogger\n    this.defaultOptions = config.defaultOptions || {}\n    this.queryDefaults = []\n    this.mutationDefaults = []\n  }\n\n  mount(): void {\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations()\n        this.queryCache.onFocus()\n      }\n    })\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations()\n        this.queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.unsubscribeFocus?.()\n    this.unsubscribeOnline?.()\n  }\n\n  isFetching(filters?: QueryFilters): number\n  isFetching(queryKey?: QueryKey, filters?: QueryFilters): number\n  isFetching(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): number {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    filters.fetchStatus = 'fetching'\n    return this.queryCache.findAll(filters).length\n  }\n\n  isMutating(filters?: MutationFilters): number {\n    return this.mutationCache.findAll({ ...filters, fetching: true }).length\n  }\n\n  getQueryData<TData = unknown>(\n    queryKey: QueryKey,\n    filters?: QueryFilters,\n  ): TData | undefined {\n    return this.queryCache.find<TData>(queryKey, filters)?.state.data\n  }\n\n  getQueriesData<TData = unknown>(queryKey: QueryKey): [QueryKey, TData][]\n  getQueriesData<TData = unknown>(filters: QueryFilters): [QueryKey, TData][]\n  getQueriesData<TData = unknown>(\n    queryKeyOrFilters: QueryKey | QueryFilters,\n  ): [QueryKey, TData][] {\n    return this.getQueryCache()\n      .findAll(queryKeyOrFilters)\n      .map(({ queryKey, state }) => {\n        const data = state.data as TData\n        return [queryKey, data]\n      })\n  }\n\n  setQueryData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: SetDataOptions,\n  ): TData | undefined {\n    const query = this.queryCache.find<TData>(queryKey)\n    const prevData = query?.state.data\n    const data = functionalUpdate(updater, prevData)\n\n    if (typeof data === 'undefined') {\n      return undefined\n    }\n\n    const parsedOptions = parseQueryArgs(queryKey)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n    return this.queryCache\n      .build(this, defaultedOptions)\n      .setData(data, { ...options, manual: true })\n  }\n\n  setQueriesData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: SetDataOptions,\n  ): [QueryKey, TData | undefined][]\n\n  setQueriesData<TData>(\n    filters: QueryFilters,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: SetDataOptions,\n  ): [QueryKey, TData | undefined][]\n\n  setQueriesData<TData>(\n    queryKeyOrFilters: QueryKey | QueryFilters,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: SetDataOptions,\n  ): [QueryKey, TData | undefined][] {\n    return notifyManager.batch(() =>\n      this.getQueryCache()\n        .findAll(queryKeyOrFilters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TData>(queryKey, updater, options),\n        ]),\n    )\n  }\n\n  getQueryState<TData = unknown, TError = undefined>(\n    queryKey: QueryKey,\n    filters?: QueryFilters,\n  ): QueryState<TData, TError> | undefined {\n    return this.queryCache.find<TData, TError>(queryKey, filters)?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void\n  removeQueries(queryKey?: QueryKey, filters?: QueryFilters): void\n  removeQueries(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): void {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    const queryCache = this.queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries<TPageData = unknown>(\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions,\n  ): Promise<void>\n  resetQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions,\n  ): Promise<void>\n  resetQueries(\n    arg1?: QueryKey | ResetQueryFilters,\n    arg2?: ResetQueryFilters | ResetOptions,\n    arg3?: ResetOptions,\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n    const queryCache = this.queryCache\n\n    const refetchFilters: RefetchQueryFilters = {\n      type: 'active',\n      ...filters,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(filters?: QueryFilters, options?: CancelOptions): Promise<void>\n  cancelQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: CancelOptions,\n  ): Promise<void>\n  cancelQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | CancelOptions,\n    arg3?: CancelOptions,\n  ): Promise<void> {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3)\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true\n    }\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache\n        .findAll(filters)\n        .map((query) => query.cancel(cancelOptions)),\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries<TPageData = unknown>(\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions,\n  ): Promise<void>\n  invalidateQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions,\n  ): Promise<void>\n  invalidateQueries(\n    arg1?: QueryKey | InvalidateQueryFilters,\n    arg2?: InvalidateQueryFilters | InvalidateOptions,\n    arg3?: InvalidateOptions,\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    return notifyManager.batch(() => {\n      this.queryCache.findAll(filters).forEach((query) => {\n        query.invalidate()\n      })\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve()\n      }\n      const refetchFilters: RefetchQueryFilters = {\n        ...filters,\n        type: filters.refetchType ?? filters.type ?? 'active',\n      }\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries<TPageData = unknown>(\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions,\n  ): Promise<void>\n  refetchQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions,\n  ): Promise<void>\n  refetchQueries(\n    arg1?: QueryKey | RefetchQueryFilters,\n    arg2?: RefetchQueryFilters | RefetchOptions,\n    arg3?: RefetchOptions,\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache\n        .findAll(filters)\n        .filter((query) => !query.isDisabled())\n        .map((query) =>\n          query.fetch(undefined, {\n            ...options,\n            cancelRefetch: options?.cancelRefetch ?? true,\n            meta: { refetchPage: filters.refetchPage },\n          }),\n        ),\n    )\n\n    let promise = Promise.all(promises).then(noop)\n\n    if (!options?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    parsedOptions.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData\n    >()\n    return this.fetchQuery(parsedOptions)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  resumePausedMutations(): Promise<void> {\n    return this.mutationCache.resumePausedMutations()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.mutationCache\n  }\n\n  getLogger(): Logger {\n    return this.logger\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: QueryObserverOptions<unknown, any, any, any>,\n  ): void {\n    const result = this.queryDefaults.find(\n      (x) => hashQueryKey(queryKey) === hashQueryKey(x.queryKey),\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.queryDefaults.push({ queryKey, defaultOptions: options })\n    }\n  }\n\n  getQueryDefaults(\n    queryKey?: QueryKey,\n  ): QueryObserverOptions<any, any, any, any, any> | undefined {\n    if (!queryKey) {\n      return undefined\n    }\n\n    // Get the first matching defaults\n    const firstMatchingDefaults = this.queryDefaults.find((x) =>\n      partialMatchKey(queryKey, x.queryKey),\n    )\n\n    // Additional checks and error in dev mode\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.queryDefaults.filter((x) =>\n        partialMatchKey(queryKey, x.queryKey),\n      )\n      // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\n          `[QueryClient] Several query defaults match with key '${JSON.stringify(\n            queryKey,\n          )}'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.`,\n        )\n      }\n    }\n\n    return firstMatchingDefaults?.defaultOptions\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: MutationObserverOptions<any, any, any, any>,\n  ): void {\n    const result = this.mutationDefaults.find(\n      (x) => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey),\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.mutationDefaults.push({ mutationKey, defaultOptions: options })\n    }\n  }\n\n  getMutationDefaults(\n    mutationKey?: MutationKey,\n  ): MutationObserverOptions<any, any, any, any> | undefined {\n    if (!mutationKey) {\n      return undefined\n    }\n\n    // Get the first matching defaults\n    const firstMatchingDefaults = this.mutationDefaults.find((x) =>\n      partialMatchKey(mutationKey, x.mutationKey),\n    )\n\n    // Additional checks and error in dev mode\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.mutationDefaults.filter((x) =>\n        partialMatchKey(mutationKey, x.mutationKey),\n      )\n      // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\n          `[QueryClient] Several mutation defaults match with key '${JSON.stringify(\n            mutationKey,\n          )}'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.`,\n        )\n      }\n    }\n\n    return firstMatchingDefaults?.defaultOptions\n  }\n\n  defaultQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey extends QueryKey,\n  >(\n    options?:\n      | QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>\n      | DefaultedQueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey\n        >,\n  ): DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  > {\n    if (options?._defaulted) {\n      return options as DefaultedQueryObserverOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryData,\n        TQueryKey\n      >\n    }\n\n    const defaultedOptions = {\n      ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options?.queryKey),\n      ...options,\n      _defaulted: true,\n    }\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions,\n      )\n    }\n\n    // dependent default values\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect =\n        defaultedOptions.networkMode !== 'always'\n    }\n    if (typeof defaultedOptions.useErrorBoundary === 'undefined') {\n      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense\n    }\n\n    return defaultedOptions as DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T,\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options?.mutationKey),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.queryCache.clear()\n    this.mutationCache.clear()\n  }\n}\n"],"names":["Subscribable","constructor","this","listeners","subscribe","bind","listener","push","onSubscribe","filter","x","onUnsubscribe","hasListeners","length","isServer","window","noop","isValidTimeout","value","Infinity","difference","array1","array2","indexOf","timeUntilStale","updatedAt","staleTime","Math","max","Date","now","parseQueryArgs","arg1","arg2","arg3","isQueryKey","queryKey","queryFn","parseFilterArgs","matchQuery","filters","query","type","exact","fetchStatus","predicate","stale","queryHash","hashQueryKeyByOptions","options","partialMatchKey","isActive","isStale","state","matchMutation","mutation","fetching","mutationKey","hashQueryKey","status","queryKeyHashFn","JSON","stringify","_","val","isPlainObject","Object","keys","sort","reduce","result","key","a","b","partialDeepEqual","some","replaceEqualDeep","array","isPlainArray","aSize","bItems","bSize","copy","equalItems","i","shallowEqualObjects","Array","isArray","o","hasObjectPrototype","ctor","prot","prototype","hasOwnProperty","toString","call","sleep","timeout","Promise","resolve","setTimeout","scheduleMicrotask","callback","then","replaceData","prevData","data","isDataEqual","structuralSharing","focusManager","super","setup","onFocus","addEventListener","removeEventListener","cleanup","setEventListener","_this$cleanup","undefined","_this$cleanup2","focused","setFocused","forEach","isFocused","document","includes","visibilityState","onlineManager","onOnline","online","setOnline","isOnline","navigator","onLine","defaultRetryDelay","failureCount","min","canFetch","networkMode","CancelledError","revert","silent","isCancelledError","createRetryer","config","continueFn","promiseResolve","promiseReject","isRetryCancelled","isResolved","promise","outerResolve","outerReject","shouldPause","onSuccess","reject","onError","pause","continueResolve","onPause","onContinue","run","promiseOrValue","fn","error","catch","_config$retry","_config$retryDelay","retry","retryDelay","delay","shouldRetry","onFail","cancel","cancelOptions","abort","continue","cancelRetry","continueRetry","defaultLogger","console","notifyManager","queue","transactions","notifyFn","batchNotifyFn","schedule","flush","originalQueue","batch","batchCalls","args","setNotifyFunction","setBatchNotifyFunction","createNotifyManager","Removable","destroy","clearGcTimeout","scheduleGc","cacheTime","gcTimeout","optionalRemove","updateCacheTime","newCacheTime","clearTimeout","Query","abortSignalConsumed","defaultOptions","setOptions","observers","cache","logger","initialState","initialData","initialDataUpdatedAt","hasData","dataUpdateCount","dataUpdatedAt","errorUpdateCount","errorUpdatedAt","fetchFailureCount","fetchMeta","isInvalidated","getDefaultState","meta","remove","setData","newData","dispatch","manual","setState","setStateOptions","_this$retryer","retryer","reset","observer","enabled","isDisabled","getObserversCount","getCurrentResult","isStaleByTime","_this$retryer2","find","shouldFetchOnWindowFocus","refetch","cancelRefetch","_this$retryer3","shouldFetchOnReconnect","addObserver","notify","removeObserver","invalidate","fetch","fetchOptions","_this$options$behavio","_context$fetchOptions","_this$retryer4","abortController","AbortController","getAbortController","queryFnContext","pageParam","addSignalProperty","object","defineProperty","enumerable","get","signal","context","fetchFn","_context$fetchOptions2","behavior","onFetch","revertState","_this$cache$config$on","_this$cache$config","isFetchingOptimistic","_this$cache$config$on2","_this$cache$config2","Error","action","_action$meta","_action$dataUpdatedAt","reducer","onQueryUpdate","QueryCache","queries","queriesMap","build","client","_options$queryHash","getLogger","defaultQueryOptions","getQueryDefaults","add","queryInMap","clear","getAll","findAll","event","Mutation","mutationId","mutationCache","execute","async","executeMutation","_this$options$retry","mutationFn","variables","restored","_this$mutationCache$c3","_this$mutationCache$c4","_this$options$onSucce","_this$options2","_this$options$onSettl","_this$options3","_this$mutationCache$c","_this$mutationCache$c2","_this$options$onMutat","_this$options","onMutate","onSettled","_this$mutationCache$c5","_this$mutationCache$c6","_this$options$onError","_this$options4","_this$options$onSettl2","_this$options5","isPaused","onMutationUpdate","MutationCache","mutations","defaultMutationOptions","getMutationDefaults","resumePausedMutations","pausedMutations","infiniteQueryBehavior","_context$fetchOptions3","_context$fetchOptions4","_context$state$data","_context$state$data2","refetchPage","fetchMore","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","pages","oldPageParams","pageParams","newPageParams","cancelled","buildNewPages","param","page","previous","fetchPage","_context$signal","_context$signal2","aborted","queryFnResult","getNextPageParam","getPreviousPageParam","hasNextPage","nextPageParam","hasPreviousPage","previousPageParam","QueryObserver","trackedProps","Set","selectError","bindMethods","currentQuery","shouldFetchOnMount","executeFetch","updateTimers","shouldFetchOn","refetchOnReconnect","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","notifyOptions","prevOptions","prevQuery","getQueryCache","updateQuery","mounted","shouldFetchOptionally","updateResult","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","createResult","currentResult","trackResult","trackedResult","configurable","getCurrentQuery","fetchOptimistic","defaultedOptions","_fetchOptions$cancelR","throwOnError","staleTimeoutId","_this$options$refetch","refetchInterval","nextInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","isPreviousData","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","keepPreviousData","isSuccess","select","selectFn","selectResult","placeholderData","isFetching","isLoading","isError","isFetched","isFetchedAfterMount","isRefetching","isLoadingError","isRefetchError","nextResult","defaultNotifyOptions","notifyOnChangeProps","size","includedProps","useErrorBoundary","typedKey","has","shouldNotifyListeners","retryOnMount","shouldLoadOnMount","refetchOnMount","field","suspense","defaultShouldDehydrateMutation","defaultShouldDehydrateQuery","fetchNextPage","fetchPreviousPage","_state$data","_state$data2","_state$fetchMeta","_state$fetchMeta$fetc","_state$fetchMeta2","_state$fetchMeta2$fet","mutate","getMutationCache","currentMutation","_this$currentMutation","mutateOptions","isIdle","_this$mutateOptions$o","_this$mutateOptions","_this$mutateOptions$o2","_this$mutateOptions2","_this$mutateOptions$o3","_this$mutateOptions3","_this$mutateOptions$o4","_this$mutateOptions4","observersMap","setQueries","onUpdate","prevObservers","newObserverMatches","findMatchingObservers","match","defaultedQueryOptions","newObservers","map","newObserversMap","fromEntries","newResult","hasIndexChange","index","matchingObservers","flatMap","matchedQueryHashes","unmatchedQueries","unmatchedObservers","prevObserver","getObserver","currentObserver","newOrReusedObservers","previouslyUsedObserver","concat","slice","replaceAt","queryCache","queryDefaults","mutationDefaults","mount","unsubscribeFocus","unsubscribeOnline","unmount","_this$unsubscribeFocu","_this$unsubscribeOnli","isMutating","getQueryData","_this$queryCache$find","getQueriesData","queryKeyOrFilters","setQueryData","updater","input","functionalUpdate","parsedOptions","setQueriesData","getQueryState","_this$queryCache$find2","removeQueries","resetQueries","refetchFilters","refetchQueries","cancelQueries","promises","all","invalidateQueries","_ref","_filters$refetchType","refetchType","_options$cancelRefetc","fetchQuery","prefetchQuery","fetchInfiniteQuery","prefetchInfiniteQuery","getDefaultOptions","setDefaultOptions","setQueryDefaults","firstMatchingDefaults","setMutationDefaults","_defaulted","dehydrateMutations","shouldDehydrateMutation","dehydrateMutation","dehydrateQueries","shouldDehydrateQuery","dehydrateQuery","dehydratedState","dehydratedMutation","_options$defaultOptio","dehydratedQuery","_options$defaultOptio2"],"mappings":"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"}