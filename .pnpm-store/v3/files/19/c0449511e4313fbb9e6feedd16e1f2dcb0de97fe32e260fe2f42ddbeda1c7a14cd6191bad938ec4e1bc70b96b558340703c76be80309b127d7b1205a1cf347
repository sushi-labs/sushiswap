import { RequiredKeys } from '../utils';
import { Updater, TableOptionsResolved, TableState, TableInstance, Renderable, TableGenerics, InitialTableState, Row, Column, RowModel, ColumnDef } from '../types';
export declare type TableFeature = {
    getDefaultOptions?: (instance: any) => any;
    getInitialState?: (initialState?: InitialTableState) => any;
    createInstance?: (instance: any) => any;
    getDefaultColumnDef?: () => any;
    createColumn?: (column: any, instance: any) => any;
    createHeader?: (column: any, instance: any) => any;
    createCell?: (cell: any, column: any, row: any, instance: any) => any;
    createRow?: (row: any, instance: any) => any;
};
export declare type CoreTableState = {};
export declare type CoreOptions<TGenerics extends TableGenerics> = {
    data: TGenerics['Row'][];
    state: Partial<TableState>;
    onStateChange: (updater: Updater<TableState>) => void;
    render: TGenerics['Renderer'];
    debugAll?: boolean;
    debugTable?: boolean;
    debugHeaders?: boolean;
    debugColumns?: boolean;
    debugRows?: boolean;
    initialState?: InitialTableState;
    autoResetAll?: boolean;
    mergeOptions?: <T>(defaultOptions: T, options: Partial<T>) => T;
    meta?: TGenerics['TableMeta'];
    getCoreRowModel: (instance: TableInstance<TGenerics>) => () => RowModel<TGenerics>;
    getSubRows?: (originalRow: TGenerics['Row'], index: number) => undefined | TGenerics['Row'][];
    getRowId?: (originalRow: TGenerics['Row'], index: number, parent?: Row<TGenerics>) => string;
    columns: ColumnDef<TGenerics>[];
    defaultColumn?: Partial<ColumnDef<TGenerics>>;
};
export declare type CoreInstance<TGenerics extends TableGenerics> = {
    initialState: TableState;
    reset: () => void;
    options: RequiredKeys<TableOptionsResolved<TGenerics>, 'state'>;
    setOptions: (newOptions: Updater<TableOptionsResolved<TGenerics>>) => void;
    getState: () => TableState;
    setState: (updater: Updater<TableState>) => void;
    _features: readonly TableFeature[];
    _queue: (cb: () => void) => void;
    _render: <TProps>(template: Renderable<TGenerics, TProps>, props: TProps) => string | null | TGenerics['Rendered'];
    _getRowId: (_: TGenerics['Row'], index: number, parent?: Row<TGenerics>) => string;
    getCoreRowModel: () => RowModel<TGenerics>;
    _getCoreRowModel?: () => RowModel<TGenerics>;
    getRowModel: () => RowModel<TGenerics>;
    getRow: (id: string) => Row<TGenerics>;
    _getDefaultColumnDef: () => Partial<ColumnDef<TGenerics>>;
    _getColumnDefs: () => ColumnDef<TGenerics>[];
    _getAllFlatColumnsById: () => Record<string, Column<TGenerics>>;
    getAllColumns: () => Column<TGenerics>[];
    getAllFlatColumns: () => Column<TGenerics>[];
    getAllLeafColumns: () => Column<TGenerics>[];
    getColumn: (columnId: string) => Column<TGenerics>;
};
export declare function createTableInstance<TGenerics extends TableGenerics>(options: TableOptionsResolved<TGenerics>): TableInstance<TGenerics>;
