{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/cli/index.ts"],"names":[],"mappings":";;;;;;AAEA,qCAAuC;AACvC,kDAA6C;AAC7C,+BAAgC;AAChC,2BAAiC;AACjC,sCAAqC;AACrC,kEAAwC;AACxC,0DAAgC;AAChC,8CAAqB;AACrB,gDAAuB;AAEvB,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,IAAA,aAAG,EAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;IACxD,OAAO,EAAE;QACP,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE;QAClB,MAAM,EAAE,KAAK;QACb,IAAI,EAAE,IAAI;QACV,IAAI,EAAE,KAAK;KACZ;CACF,CAAC,CAAA;AAEF,KAAK,UAAU,IAAI;IACjB,MAAM,MAAM,GAAG,IAAA,qBAAY,GAAE,CAAA;IAE7B;;OAEG;IACH,MAAM,CAAC,UAAU,CAAC,GAAG,KAAK,CAAA;IAE1B,IAAI,CAAC,UAAU,EAAE;QACf,MAAM,QAAQ,GAAG,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,SAAS,CAAC,CAAA;QACnD,OAAO,IAAA,gBAAS,EAAC,uBAAY,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE;YAClE,KAAK,EAAE,SAAS;SACjB,CAAC,CAAA;KACH;IAED,MAAM,WAAW,GAAG,IAAA,iBAAY,EAC9B,cAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,UAAU,CAAC,EACvC,OAAO,CACR,CAAA;IACD,MAAM,OAAO,GAAG,IAAI,0BAAW,CAAC,EAAE,WAAW,EAAE,CAAC,CAAA;IAChD,IAAI,CAAC,KAAK,CAAC,MAAM;QAAE,OAAO,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAA;IAE9C,MAAM,CAAC,KAAK,CACV,IAAI,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,OAAO,CAAC,eAC/C,OAAO,CAAC,OACV,EAAE,CACH,CAAA;IAED;;OAEG;IACH,MAAM,MAAM,GAAG,MAAM,IAAA,kBAAS,EAAC;QAC7B,MAAM,EAAE,MAAM;QACd,IAAI,EAAE,KAAK,CAAC,IAAI;QAChB,OAAO;KACR,CAAC,CAAA;IAEF,IAAA,mBAAQ,EAAC,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAA;IAC9B,MAAM,CAAC,gCAAgC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;AACrE,CAAC;AAED,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,GAAY,EAAE,EAAE;IAC5B,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IAClB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AACjB,CAAC,CAAC,CAAA","sourcesContent":["#!/usr/bin/env node\n\nimport { createLogger } from './logger'\nimport { EdgeRuntime } from '../edge-runtime'\nimport { promisify } from 'util'\nimport { readFileSync } from 'fs'\nimport { runServer } from '../server'\nimport childProcess from 'child_process'\nimport exitHook from 'exit-hook'\nimport mri from 'mri'\nimport path from 'path'\n\nconst { _: input, ...flags } = mri(process.argv.slice(2), {\n  default: {\n    cwd: process.cwd(),\n    listen: false,\n    port: 3000,\n    repl: false,\n  },\n})\n\nasync function main() {\n  const logger = createLogger()\n\n  /**\n   * If there is no script path to run a server, the CLI will start a REPL.\n   */\n  const [scriptPath] = input\n\n  if (!scriptPath) {\n    const replPath = path.resolve(__dirname, 'repl.js')\n    return promisify(childProcess.spawn).call(null, 'node', [replPath], {\n      stdio: 'inherit',\n    })\n  }\n\n  const initialCode = readFileSync(\n    path.resolve(process.cwd(), scriptPath),\n    'utf-8'\n  )\n  const runtime = new EdgeRuntime({ initialCode })\n  if (!flags.listen) return runtime.evaluate('')\n\n  logger.debug(\n    `v${String(require('../../package.json').version)} at Node.js ${\n      process.version\n    }`\n  )\n\n  /**\n   * Start a server with the script provided in the file path.\n   */\n  const server = await runServer({\n    logger: logger,\n    port: flags.port,\n    runtime,\n  })\n\n  exitHook(() => server.close())\n  logger(`Waiting incoming requests at ${logger.quotes(server.url)}`)\n}\n\nmain().catch((err: unknown) => {\n  console.error(err)\n  process.exit(1)\n})\n"]}