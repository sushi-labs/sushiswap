/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PositionStruct = {
  pool: string;
  liquidity: BigNumberish;
  lower: BigNumberish;
  upper: BigNumberish;
  latestAddition: BigNumberish;
  feeGrowthInside0: BigNumberish;
  feeGrowthInside1: BigNumberish;
};

export type PositionStructOutput = [
  string,
  BigNumber,
  number,
  number,
  number,
  BigNumber,
  BigNumber
] & {
  pool: string;
  liquidity: BigNumber;
  lower: number;
  upper: number;
  latestAddition: number;
  feeGrowthInside0: BigNumber;
  feeGrowthInside1: BigNumber;
};

export interface IConcentratedLiquidityPoolManagerInterface
  extends utils.Interface {
  functions: {
    "bento()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "positions(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bento", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bento", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;

  events: {};
}

export interface IConcentratedLiquidityPoolManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IConcentratedLiquidityPoolManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bento(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    positions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[PositionStructOutput]>;
  };

  bento(overrides?: CallOverrides): Promise<string>;

  ownerOf(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  positions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<PositionStructOutput>;

  callStatic: {
    bento(overrides?: CallOverrides): Promise<string>;

    ownerOf(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    positions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PositionStructOutput>;
  };

  filters: {};

  estimateGas: {
    bento(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    positions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bento(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
