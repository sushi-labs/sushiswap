{"version":3,"file":"index.js","sources":["../dist-src/index.js"],"sourcesContent":["export function oauthAuthorizationUrl(options) {\n    const clientType = options.clientType || \"oauth-app\";\n    const baseUrl = options.baseUrl || \"https://github.com\";\n    const result = {\n        clientType,\n        allowSignup: options.allowSignup === false ? false : true,\n        clientId: options.clientId,\n        login: options.login || null,\n        redirectUrl: options.redirectUrl || null,\n        state: options.state || Math.random().toString(36).substr(2),\n        url: \"\",\n    };\n    if (clientType === \"oauth-app\") {\n        const scopes = \"scopes\" in options ? options.scopes : [];\n        result.scopes =\n            typeof scopes === \"string\"\n                ? scopes.split(/[,\\s]+/).filter(Boolean)\n                : scopes;\n    }\n    result.url = urlBuilderAuthorize(`${baseUrl}/login/oauth/authorize`, result);\n    return result;\n}\nfunction urlBuilderAuthorize(base, options) {\n    const map = {\n        allowSignup: \"allow_signup\",\n        clientId: \"client_id\",\n        login: \"login\",\n        redirectUrl: \"redirect_uri\",\n        scopes: \"scope\",\n        state: \"state\",\n    };\n    let url = base;\n    Object.keys(map)\n        // Filter out keys that are null and remove the url key\n        .filter((k) => options[k] !== null)\n        // Filter out empty scopes array\n        .filter((k) => {\n        if (k !== \"scopes\")\n            return true;\n        if (options.clientType === \"github-app\")\n            return false;\n        return !Array.isArray(options[k]) || options[k].length > 0;\n    })\n        // Map Array with the proper URL parameter names and change the value to a string using template strings\n        // @ts-ignore\n        .map((key) => [map[key], `${options[key]}`])\n        // Finally, build the URL\n        .forEach(([key, value], index) => {\n        url += index === 0 ? `?` : \"&\";\n        url += `${key}=${encodeURIComponent(value)}`;\n    });\n    return url;\n}\n"],"names":[],"mappings":"AAAO,SAAS,qBAAqB,CAAC,OAAO,EAAE;AAC/C,IAAI,MAAM,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,WAAW,CAAC;AACzD,IAAI,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,oBAAoB,CAAC;AAC5D,IAAI,MAAM,MAAM,GAAG;AACnB,QAAQ,UAAU;AAClB,QAAQ,WAAW,EAAE,OAAO,CAAC,WAAW,KAAK,KAAK,GAAG,KAAK,GAAG,IAAI;AACjE,QAAQ,QAAQ,EAAE,OAAO,CAAC,QAAQ;AAClC,QAAQ,KAAK,EAAE,OAAO,CAAC,KAAK,IAAI,IAAI;AACpC,QAAQ,WAAW,EAAE,OAAO,CAAC,WAAW,IAAI,IAAI;AAChD,QAAQ,KAAK,EAAE,OAAO,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;AACpE,QAAQ,GAAG,EAAE,EAAE;AACf,KAAK,CAAC;AACN,IAAI,IAAI,UAAU,KAAK,WAAW,EAAE;AACpC,QAAQ,MAAM,MAAM,GAAG,QAAQ,IAAI,OAAO,GAAG,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC;AACjE,QAAQ,MAAM,CAAC,MAAM;AACrB,YAAY,OAAO,MAAM,KAAK,QAAQ;AACtC,kBAAkB,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC;AACxD,kBAAkB,MAAM,CAAC;AACzB,KAAK;AACL,IAAI,MAAM,CAAC,GAAG,GAAG,mBAAmB,CAAC,CAAC,EAAE,OAAO,CAAC,sBAAsB,CAAC,EAAE,MAAM,CAAC,CAAC;AACjF,IAAI,OAAO,MAAM,CAAC;AAClB,CAAC;AACD,SAAS,mBAAmB,CAAC,IAAI,EAAE,OAAO,EAAE;AAC5C,IAAI,MAAM,GAAG,GAAG;AAChB,QAAQ,WAAW,EAAE,cAAc;AACnC,QAAQ,QAAQ,EAAE,WAAW;AAC7B,QAAQ,KAAK,EAAE,OAAO;AACtB,QAAQ,WAAW,EAAE,cAAc;AACnC,QAAQ,MAAM,EAAE,OAAO;AACvB,QAAQ,KAAK,EAAE,OAAO;AACtB,KAAK,CAAC;AACN,IAAI,IAAI,GAAG,GAAG,IAAI,CAAC;AACnB,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;AACpB;AACA,SAAS,MAAM,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC;AAC3C;AACA,SAAS,MAAM,CAAC,CAAC,CAAC,KAAK;AACvB,QAAQ,IAAI,CAAC,KAAK,QAAQ;AAC1B,YAAY,OAAO,IAAI,CAAC;AACxB,QAAQ,IAAI,OAAO,CAAC,UAAU,KAAK,YAAY;AAC/C,YAAY,OAAO,KAAK,CAAC;AACzB,QAAQ,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;AACnE,KAAK,CAAC;AACN;AACA;AACA,SAAS,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD;AACA,SAAS,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,KAAK,KAAK;AAC1C,QAAQ,GAAG,IAAI,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;AACvC,QAAQ,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACrD,KAAK,CAAC,CAAC;AACP,IAAI,OAAO,GAAG,CAAC;AACf;;;;"}