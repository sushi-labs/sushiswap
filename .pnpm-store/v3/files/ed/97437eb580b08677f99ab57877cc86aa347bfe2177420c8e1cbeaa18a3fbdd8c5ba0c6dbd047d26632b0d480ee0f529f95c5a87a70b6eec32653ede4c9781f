{"id":"9e0772ef61d1de3cd59c0faca3eca24f","_format":"hh-sol-build-info-1","solcVersion":"0.6.12","solcLongVersion":"0.6.12+commit.27d51765","input":{"language":"Solidity","sources":{"contracts/flat/BentoBoxV1Flat.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n// The BentoBox\n\n//  ▄▄▄▄· ▄▄▄ . ▐ ▄ ▄▄▄▄▄      ▄▄▄▄·       ▐▄• ▄\n//  ▐█ ▀█▪▀▄.▀·█▌▐█•██  ▪     ▐█ ▀█▪▪      █▌█▌▪\n//  ▐█▀▀█▄▐▀▀▪▄▐█▐▐▌ ▐█.▪ ▄█▀▄ ▐█▀▀█▄ ▄█▀▄  ·██·\n//  ██▄▪▐█▐█▄▄▌██▐█▌ ▐█▌·▐█▌.▐▌██▄▪▐█▐█▌.▐▌▪▐█·█▌\n//  ·▀▀▀▀  ▀▀▀ ▀▀ █▪ ▀▀▀  ▀█▄▀▪·▀▀▀▀  ▀█▄▀▪•▀▀ ▀▀\n\n// This contract stores funds, handles their transfers, supports flash loans and strategies.\n\n// Copyright (c) 2021 BoringCrypto - All rights reserved\n// Twitter: @Boring_Crypto\n\n// Special thanks to Keno for all his hard work and support\n\n// Version 22-Mar-2021\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\n// solhint-disable avoid-low-level-calls\n// solhint-disable not-rely-on-time\n// solhint-disable no-inline-assembly\n\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\n// License-Identifier: MIT\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice EIP 2612\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function decimals() external view returns (uint256);\n}\n\n// File contracts/interfaces/IFlashLoan.sol\n// License-Identifier: MIT\n\ninterface IFlashBorrower {\n    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\n    /// @param sender The address of the invoker of this flashloan.\n    /// @param token The address of the token that is loaned.\n    /// @param amount of the `token` that is loaned.\n    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\n    /// @param data Additional data that was passed to the flashloan function.\n    function onFlashLoan(\n        address sender,\n        IERC20 token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) external;\n}\n\ninterface IBatchFlashBorrower {\n    /// @notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\n    /// @param sender The address of the invoker of this flashloan.\n    /// @param tokens Array of addresses for ERC-20 tokens that is loaned.\n    /// @param amounts A one-to-one map to `tokens` that is loaned.\n    /// @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\n    /// @param data Additional data that was passed to the flashloan function.\n    function onBatchFlashLoan(\n        address sender,\n        IERC20[] calldata tokens,\n        uint256[] calldata amounts,\n        uint256[] calldata fees,\n        bytes calldata data\n    ) external;\n}\n\n// File contracts/interfaces/IWETH.sol\n// License-Identifier: MIT\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n}\n\n// File contracts/interfaces/IStrategy.sol\n// License-Identifier: MIT\n\ninterface IStrategy {\n    /// @notice Send the assets to the Strategy and call skim to invest them.\n    /// @param amount The amount of tokens to invest.\n    function skim(uint256 amount) external;\n\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\n    /// @param balance The amount of tokens the caller thinks it has invested.\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\n\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\n    /// @dev The `actualAmount` should be very close to the amount.\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\n    /// @param amount The requested amount the caller wants to withdraw.\n    /// @return actualAmount The real amount that is withdrawn.\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\n\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\n    /// @param balance The amount of tokens the caller thinks it has invested.\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\n    function exit(uint256 balance) external returns (int256 amountAdded);\n}\n\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\n// License-Identifier: MIT\n\nlibrary BoringERC20 {\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\n\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\n    /// Reverts on a failed transfer.\n    /// @param token The address of the ERC-20 token.\n    /// @param to Transfer tokens to.\n    /// @param amount The token amount.\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: Transfer failed\");\n    }\n\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\n    /// Reverts on a failed transfer.\n    /// @param token The address of the ERC-20 token.\n    /// @param from Transfer tokens from.\n    /// @param to Transfer tokens to.\n    /// @param amount The token amount.\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: TransferFrom failed\");\n    }\n}\n\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\n// License-Identifier: MIT\n\n/// @notice A library for performing overflow-/underflow-safe math,\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\nlibrary BoringMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        require(b == 0 || (c = a * b) / b == a, \"BoringMath: Mul Overflow\");\n    }\n\n    function to128(uint256 a) internal pure returns (uint128 c) {\n        require(a <= uint128(-1), \"BoringMath: uint128 Overflow\");\n        c = uint128(a);\n    }\n\n    function to64(uint256 a) internal pure returns (uint64 c) {\n        require(a <= uint64(-1), \"BoringMath: uint64 Overflow\");\n        c = uint64(a);\n    }\n\n    function to32(uint256 a) internal pure returns (uint32 c) {\n        require(a <= uint32(-1), \"BoringMath: uint32 Overflow\");\n        c = uint32(a);\n    }\n}\n\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\nlibrary BoringMath128 {\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\n    }\n\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\n    }\n}\n\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\nlibrary BoringMath64 {\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\n    }\n\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\n    }\n}\n\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\nlibrary BoringMath32 {\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\n    }\n\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\n    }\n}\n\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol@v1.2.0\n// License-Identifier: MIT\n\nstruct Rebase {\n    uint128 elastic;\n    uint128 base;\n}\n\n/// @notice A rebasing library using overflow-/underflow-safe math.\nlibrary RebaseLibrary {\n    using BoringMath for uint256;\n    using BoringMath128 for uint128;\n\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\n    function toBase(\n        Rebase memory total,\n        uint256 elastic,\n        bool roundUp\n    ) internal pure returns (uint256 base) {\n        if (total.elastic == 0) {\n            base = elastic;\n        } else {\n            base = elastic.mul(total.base) / total.elastic;\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\n                base = base.add(1);\n            }\n        }\n    }\n\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\n    function toElastic(\n        Rebase memory total,\n        uint256 base,\n        bool roundUp\n    ) internal pure returns (uint256 elastic) {\n        if (total.base == 0) {\n            elastic = base;\n        } else {\n            elastic = base.mul(total.elastic) / total.base;\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\n                elastic = elastic.add(1);\n            }\n        }\n    }\n\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\n    /// @return (Rebase) The new total.\n    /// @return base in relationship to `elastic`.\n    function add(\n        Rebase memory total,\n        uint256 elastic,\n        bool roundUp\n    ) internal pure returns (Rebase memory, uint256 base) {\n        base = toBase(total, elastic, roundUp);\n        total.elastic = total.elastic.add(elastic.to128());\n        total.base = total.base.add(base.to128());\n        return (total, base);\n    }\n\n    /// @notice Sub `base` from `total` and update `total.elastic`.\n    /// @return (Rebase) The new total.\n    /// @return elastic in relationship to `base`.\n    function sub(\n        Rebase memory total,\n        uint256 base,\n        bool roundUp\n    ) internal pure returns (Rebase memory, uint256 elastic) {\n        elastic = toElastic(total, base, roundUp);\n        total.elastic = total.elastic.sub(elastic.to128());\n        total.base = total.base.sub(base.to128());\n        return (total, elastic);\n    }\n\n    /// @notice Add `elastic` and `base` to `total`.\n    function add(\n        Rebase memory total,\n        uint256 elastic,\n        uint256 base\n    ) internal pure returns (Rebase memory) {\n        total.elastic = total.elastic.add(elastic.to128());\n        total.base = total.base.add(base.to128());\n        return total;\n    }\n\n    /// @notice Subtract `elastic` and `base` to `total`.\n    function sub(\n        Rebase memory total,\n        uint256 elastic,\n        uint256 base\n    ) internal pure returns (Rebase memory) {\n        total.elastic = total.elastic.sub(elastic.to128());\n        total.base = total.base.sub(base.to128());\n        return total;\n    }\n\n    /// @notice Add `elastic` to `total` and update storage.\n    /// @return newElastic Returns updated `elastic`.\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\n        newElastic = total.elastic = total.elastic.add(elastic.to128());\n    }\n\n    /// @notice Subtract `elastic` from `total` and update storage.\n    /// @return newElastic Returns updated `elastic`.\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\n        newElastic = total.elastic = total.elastic.sub(elastic.to128());\n    }\n}\n\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\n// License-Identifier: MIT\n\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\n// Edited by BoringCrypto\n\ncontract BoringOwnableData {\n    address public owner;\n    address public pendingOwner;\n}\n\ncontract BoringOwnable is BoringOwnableData {\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @notice `owner` defaults to msg.sender on construction.\n    constructor() public {\n        owner = msg.sender;\n        emit OwnershipTransferred(address(0), msg.sender);\n    }\n\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\n    /// Can only be invoked by the current `owner`.\n    /// @param newOwner Address of the new owner.\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\n    function transferOwnership(\n        address newOwner,\n        bool direct,\n        bool renounce\n    ) public onlyOwner {\n        if (direct) {\n            // Checks\n            require(newOwner != address(0) || renounce, \"Ownable: zero address\");\n\n            // Effects\n            emit OwnershipTransferred(owner, newOwner);\n            owner = newOwner;\n            pendingOwner = address(0);\n        } else {\n            // Effects\n            pendingOwner = newOwner;\n        }\n    }\n\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\n    function claimOwnership() public {\n        address _pendingOwner = pendingOwner;\n\n        // Checks\n        require(msg.sender == _pendingOwner, \"Ownable: caller != pending owner\");\n\n        // Effects\n        emit OwnershipTransferred(owner, _pendingOwner);\n        owner = _pendingOwner;\n        pendingOwner = address(0);\n    }\n\n    /// @notice Only allows the `owner` to execute the function.\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n}\n\n// File @boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol@v1.2.0\n// License-Identifier: MIT\n\ninterface IMasterContract {\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\n    /// Also kown as the constructor for cloned contracts.\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\n    /// @param data Can be abi encoded arguments or anything else.\n    function init(bytes calldata data) external payable;\n}\n\n// File @boringcrypto/boring-solidity/contracts/BoringFactory.sol@v1.2.0\n// License-Identifier: MIT\n\ncontract BoringFactory {\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\n\n    /// @notice Mapping from clone contracts to their masterContract.\n    mapping(address => address) public masterContractOf;\n\n    /// @notice Deploys a given master Contract as a clone.\n    /// Any ETH transferred with this call is forwarded to the new clone.\n    /// Emits `LogDeploy`.\n    /// @param masterContract The address of the contract to clone.\n    /// @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\n    /// @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\n    /// @return cloneAddress Address of the created clone contract.\n    function deploy(\n        address masterContract,\n        bytes calldata data,\n        bool useCreate2\n    ) public payable returns (address cloneAddress) {\n        require(masterContract != address(0), \"BoringFactory: No masterContract\");\n        bytes20 targetBytes = bytes20(masterContract); // Takes the first 20 bytes of the masterContract's address\n\n        if (useCreate2) {\n            // each masterContract has different code already. So clones are distinguished by their data only.\n            bytes32 salt = keccak256(data);\n\n            // Creates clone, more info here: https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\n            assembly {\n                let clone := mload(0x40)\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n                mstore(add(clone, 0x14), targetBytes)\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n                cloneAddress := create2(0, clone, 0x37, salt)\n            }\n        } else {\n            assembly {\n                let clone := mload(0x40)\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n                mstore(add(clone, 0x14), targetBytes)\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n                cloneAddress := create(0, clone, 0x37)\n            }\n        }\n        masterContractOf[cloneAddress] = masterContract;\n\n        IMasterContract(cloneAddress).init{value: msg.value}(data);\n\n        emit LogDeploy(masterContract, data, cloneAddress);\n    }\n}\n\n// File contracts/MasterContractManager.sol\n// License-Identifier: UNLICENSED\n\ncontract MasterContractManager is BoringOwnable, BoringFactory {\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\n    event LogRegisterProtocol(address indexed protocol);\n\n    /// @notice masterContract to user to approval state\n    mapping(address => mapping(address => bool)) public masterContractApproved;\n    /// @notice masterContract to whitelisted state for approval without signed message\n    mapping(address => bool) public whitelistedMasterContracts;\n    /// @notice user nonces for masterContract approvals\n    mapping(address => uint256) public nonces;\n\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH =\n        keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n    // See https://eips.ethereum.org/EIPS/eip-191\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \"\\x19\\x01\";\n    bytes32 private constant APPROVAL_SIGNATURE_HASH =\n        keccak256(\"SetMasterContractApproval(string warning,address user,address masterContract,bool approved,uint256 nonce)\");\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private immutable _DOMAIN_SEPARATOR;\n    // solhint-disable-next-line var-name-mixedcase\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\n\n    constructor() public {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\n    }\n\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, keccak256(\"BentoBox V1\"), chainId, address(this)));\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\n    }\n\n    /// @notice Other contracts need to register with this master contract so that users can approve them for the BentoBox.\n    function registerProtocol() public {\n        masterContractOf[msg.sender] = msg.sender;\n        emit LogRegisterProtocol(msg.sender);\n    }\n\n    /// @notice Enables or disables a contract for approval without signed message.\n    function whitelistMasterContract(address masterContract, bool approved) public onlyOwner {\n        // Checks\n        require(masterContract != address(0), \"MasterCMgr: Cannot approve 0\");\n\n        // Effects\n        whitelistedMasterContracts[masterContract] = approved;\n        emit LogWhiteListMasterContract(masterContract, approved);\n    }\n\n    /// @notice Approves or revokes a `masterContract` access to `user` funds.\n    /// @param user The address of the user that approves or revokes access.\n    /// @param masterContract The address who gains or loses access.\n    /// @param approved If True approves access. If False revokes access.\n    /// @param v Part of the signature. (See EIP-191)\n    /// @param r Part of the signature. (See EIP-191)\n    /// @param s Part of the signature. (See EIP-191)\n    // F4 - Check behaviour for all function arguments when wrong or extreme\n    // F4: Don't allow masterContract 0 to be approved. Unknown contracts will have a masterContract of 0.\n    // F4: User can't be 0 for signed approvals because the recoveredAddress will be 0 if ecrecover fails\n    function setMasterContractApproval(\n        address user,\n        address masterContract,\n        bool approved,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public {\n        // Checks\n        require(masterContract != address(0), \"MasterCMgr: masterC not set\"); // Important for security\n\n        // If no signature is provided, the fallback is executed\n        if (r == 0 && s == 0 && v == 0) {\n            require(user == msg.sender, \"MasterCMgr: user not sender\");\n            require(masterContractOf[user] == address(0), \"MasterCMgr: user is clone\");\n            require(whitelistedMasterContracts[masterContract], \"MasterCMgr: not whitelisted\");\n        } else {\n            // Important for security - any address without masterContract has address(0) as masterContract\n            // So approving address(0) would approve every address, leading to full loss of funds\n            // Also, ecrecover returns address(0) on failure. So we check this:\n            require(user != address(0), \"MasterCMgr: User cannot be 0\");\n\n            // C10 - Protect signatures against replay, use nonce and chainId (SWC-121)\n            // C10: nonce + chainId are used to prevent replays\n            // C11 - All signatures strictly EIP-712 (SWC-117 SWC-122)\n            // C11: signature is EIP-712 compliant\n            // C12 - abi.encodePacked can't contain variable length user input (SWC-133)\n            // C12: abi.encodePacked has fixed length parameters\n            bytes32 digest = keccak256(\n                abi.encodePacked(\n                    EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA,\n                    DOMAIN_SEPARATOR(),\n                    keccak256(\n                        abi.encode(\n                            APPROVAL_SIGNATURE_HASH,\n                            approved\n                                ? keccak256(\"Give FULL access to funds in (and approved to) BentoBox?\")\n                                : keccak256(\"Revoke access to BentoBox?\"),\n                            user,\n                            masterContract,\n                            approved,\n                            nonces[user]++\n                        )\n                    )\n                )\n            );\n            address recoveredAddress = ecrecover(digest, v, r, s);\n            require(recoveredAddress == user, \"MasterCMgr: Invalid Signature\");\n        }\n\n        // Effects\n        masterContractApproved[masterContract][user] = approved;\n        emit LogSetMasterContractApproval(masterContract, user, approved);\n    }\n}\n\n// File @boringcrypto/boring-solidity/contracts/BoringBatchable.sol@v1.2.0\n// License-Identifier: MIT\n\ncontract BaseBoringBatchable {\n    /// @dev Helper function to extract a useful revert message from a failed call.\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\n        if (_returnData.length < 68) return \"Transaction reverted silently\";\n\n        assembly {\n            // Slice the sighash.\n            _returnData := add(_returnData, 0x04)\n        }\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\n    }\n\n    /// @notice Allows batched call to self (this contract).\n    /// @param calls An array of inputs for each call.\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\n    /// @return successes An array indicating the success of a call, mapped one-to-one to `calls`.\n    /// @return results An array with the returned data of each function call, mapped one-to-one to `calls`.\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\n    // C3: The length of the loop is fully under user control, so can't be exploited\n    // C7: Delegatecall is only used on the same contract, so it's safe\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results) {\n        successes = new bool[](calls.length);\n        results = new bytes[](calls.length);\n        for (uint256 i = 0; i < calls.length; i++) {\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\n            require(success || !revertOnFail, _getRevertMsg(result));\n            successes[i] = success;\n            results[i] = result;\n        }\n    }\n}\n\ncontract BoringBatchable is BaseBoringBatchable {\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\n    /// Lookup `IERC20.permit`.\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\n    function permitToken(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public {\n        token.permit(from, to, amount, deadline, v, r, s);\n    }\n}\n\n// File contracts/BentoBox.sol\n// License-Identifier: UNLICENSED\n\n/// @title BentoBox\n/// @author BoringCrypto, Keno\n/// @notice The BentoBox is a vault for tokens. The stored tokens can be flash loaned and used in strategies.\n/// Yield from this will go to the token depositors.\n/// Rebasing tokens ARE NOT supported and WILL cause loss of funds.\n/// Any funds transfered directly onto the BentoBox will be lost, use the deposit function instead.\ncontract BentoBoxV1 is MasterContractManager, BoringBatchable {\n    using BoringMath for uint256;\n    using BoringMath128 for uint128;\n    using BoringERC20 for IERC20;\n    using RebaseLibrary for Rebase;\n\n    // ************** //\n    // *** EVENTS *** //\n    // ************** //\n\n    event LogDeposit(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\n    event LogWithdraw(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\n    event LogTransfer(IERC20 indexed token, address indexed from, address indexed to, uint256 share);\n\n    event LogFlashLoan(address indexed borrower, IERC20 indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\n\n    event LogStrategyTargetPercentage(IERC20 indexed token, uint256 targetPercentage);\n    event LogStrategyQueued(IERC20 indexed token, IStrategy indexed strategy);\n    event LogStrategySet(IERC20 indexed token, IStrategy indexed strategy);\n    event LogStrategyInvest(IERC20 indexed token, uint256 amount);\n    event LogStrategyDivest(IERC20 indexed token, uint256 amount);\n    event LogStrategyProfit(IERC20 indexed token, uint256 amount);\n    event LogStrategyLoss(IERC20 indexed token, uint256 amount);\n\n    // *************** //\n    // *** STRUCTS *** //\n    // *************** //\n\n    struct StrategyData {\n        uint64 strategyStartDate;\n        uint64 targetPercentage;\n        uint128 balance; // the balance of the strategy that BentoBox thinks is in there\n    }\n\n    // ******************************** //\n    // *** CONSTANTS AND IMMUTABLES *** //\n    // ******************************** //\n\n    // V2 - Can they be private?\n    // V2: Private to save gas, to verify it's correct, check the constructor arguments\n    IERC20 private immutable wethToken;\n\n    IERC20 private constant USE_ETHEREUM = IERC20(0);\n    uint256 private constant FLASH_LOAN_FEE = 50; // 0.05%\n    uint256 private constant FLASH_LOAN_FEE_PRECISION = 1e5;\n    uint256 private constant STRATEGY_DELAY = 0 weeks;\n    uint256 private constant MAX_TARGET_PERCENTAGE = 95; // 95%\n    uint256 private constant MINIMUM_SHARE_BALANCE = 1000; // To prevent the ratio going off\n\n    // ***************** //\n    // *** VARIABLES *** //\n    // ***************** //\n\n    // Balance per token per address/contract in shares\n    mapping(IERC20 => mapping(address => uint256)) public balanceOf;\n\n    // Rebase from amount to share\n    mapping(IERC20 => Rebase) public totals;\n\n    mapping(IERC20 => IStrategy) public strategy;\n    mapping(IERC20 => IStrategy) public pendingStrategy;\n    mapping(IERC20 => StrategyData) public strategyData;\n\n    // ******************* //\n    // *** CONSTRUCTOR *** //\n    // ******************* //\n\n    constructor(IERC20 wethToken_) public {\n        wethToken = wethToken_;\n    }\n\n    // Just for testing purposes!!! Don't deploy this contract on production!!\n    function setTokenTotal(\n        IERC20 token,\n        uint128 elastic,\n        uint128 base\n    ) public {\n        Rebase memory total;\n        total.elastic = elastic;\n        total.base = base;\n        totals[token] = total;\n    }\n\n    // ***************** //\n    // *** MODIFIERS *** //\n    // ***************** //\n\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\n    /// If 'from' is msg.sender, it's allowed.\n    /// If 'from' is the BentoBox itself, it's allowed. Any ETH, token balances (above the known balances) or BentoBox balances\n    /// can be taken by anyone.\n    /// This is to enable skimming, not just for deposits, but also for withdrawals or transfers, enabling better composability.\n    /// If 'from' is a clone of a masterContract AND the 'from' address has approved that masterContract, it's allowed.\n    modifier allowed(address from) {\n        if (from != msg.sender && from != address(this)) {\n            // From is sender or you are skimming\n            address masterContract = masterContractOf[msg.sender];\n            require(masterContract != address(0), \"BentoBox: no masterContract\");\n            require(masterContractApproved[masterContract][from], \"BentoBox: Transfer not approved\");\n        }\n        _;\n    }\n\n    // ************************** //\n    // *** INTERNAL FUNCTIONS *** //\n    // ************************** //\n\n    /// @dev Returns the total balance of `token` this contracts holds,\n    /// plus the total amount this contract thinks the strategy holds.\n    function _tokenBalanceOf(IERC20 token) internal view returns (uint256 amount) {\n        amount = token.balanceOf(address(this)).add(strategyData[token].balance);\n    }\n\n    // ************************ //\n    // *** PUBLIC FUNCTIONS *** //\n    // ************************ //\n\n    /// @dev Helper function to represent an `amount` of `token` in shares.\n    /// @param token The ERC-20 token.\n    /// @param amount The `token` amount.\n    /// @param roundUp If the result `share` should be rounded up.\n    /// @return share The token amount represented in shares.\n    function toShare(\n        IERC20 token,\n        uint256 amount,\n        bool roundUp\n    ) external view returns (uint256 share) {\n        share = totals[token].toBase(amount, roundUp);\n    }\n\n    /// @dev Helper function represent shares back into the `token` amount.\n    /// @param token The ERC-20 token.\n    /// @param share The amount of shares.\n    /// @param roundUp If the result should be rounded up.\n    /// @return amount The share amount back into native representation.\n    function toAmount(\n        IERC20 token,\n        uint256 share,\n        bool roundUp\n    ) external view returns (uint256 amount) {\n        amount = totals[token].toElastic(share, roundUp);\n    }\n\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\n    /// @param token_ The ERC-20 token to deposit.\n    /// @param from which account to pull the tokens.\n    /// @param to which account to push the tokens.\n    /// @param amount Token amount in native representation to deposit.\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\n    /// @return amountOut The amount deposited.\n    /// @return shareOut The deposited amount represented in shares.\n    function deposit(\n        IERC20 token_,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) public payable allowed(from) returns (uint256 amountOut, uint256 shareOut) {\n        // Checks\n        require(to != address(0), \"BentoBox: to not set\"); // To avoid a bad UI from burning funds\n\n        // Effects\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\n        Rebase memory total = totals[token];\n\n        // If a new token gets added, the tokenSupply call checks that this is a deployed contract. Needed for security.\n        require(total.elastic != 0 || token.totalSupply() > 0, \"BentoBox: No tokens\");\n        if (share == 0) {\n            // value of the share may be lower than the amount due to rounding, that's ok\n            share = total.toBase(amount, false);\n            // Any deposit should lead to at least the minimum share balance, otherwise it's ignored (no amount taken)\n            if (total.base.add(share.to128()) < MINIMUM_SHARE_BALANCE) {\n                return (0, 0);\n            }\n        } else {\n            // amount may be lower than the value of share due to rounding, in that case, add 1 to amount (Always round up)\n            amount = total.toElastic(share, true);\n        }\n\n        // In case of skimming, check that only the skimmable amount is taken.\n        // For ETH, the full balance is available, so no need to check.\n        // During flashloans the _tokenBalanceOf is lower than 'reality', so skimming deposits will mostly fail during a flashloan.\n        require(\n            from != address(this) || token_ == USE_ETHEREUM || amount <= _tokenBalanceOf(token).sub(total.elastic),\n            \"BentoBox: Skim too much\"\n        );\n\n        balanceOf[token][to] = balanceOf[token][to].add(share);\n        total.base = total.base.add(share.to128());\n        total.elastic = total.elastic.add(amount.to128());\n        totals[token] = total;\n\n        // Interactions\n        // During the first deposit, we check that this token is 'real'\n        if (token_ == USE_ETHEREUM) {\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\n            // X2: If the WETH implementation is faulty or malicious, it will block adding ETH (but we know the WETH implementation)\n            IWETH(address(wethToken)).deposit{value: amount}();\n        } else if (from != address(this)) {\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\n            // X2: If the token implementation is faulty or malicious, it may block adding tokens. Good.\n            token.safeTransferFrom(from, address(this), amount);\n        }\n        emit LogDeposit(token, from, to, amount, share);\n        amountOut = amount;\n        shareOut = share;\n    }\n\n    /// @notice Withdraws an amount of `token` from a user account.\n    /// @param token_ The ERC-20 token to withdraw.\n    /// @param from which user to pull the tokens.\n    /// @param to which user to push the tokens.\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\n    /// @param share Like above, but `share` takes precedence over `amount`.\n    function withdraw(\n        IERC20 token_,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) public allowed(from) returns (uint256 amountOut, uint256 shareOut) {\n        // Checks\n        require(to != address(0), \"BentoBox: to not set\"); // To avoid a bad UI from burning funds\n\n        // Effects\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\n        Rebase memory total = totals[token];\n        if (share == 0) {\n            // value of the share paid could be lower than the amount paid due to rounding, in that case, add a share (Always round up)\n            share = total.toBase(amount, true);\n        } else {\n            // amount may be lower than the value of share due to rounding, that's ok\n            amount = total.toElastic(share, false);\n        }\n\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\n        total.elastic = total.elastic.sub(amount.to128());\n        total.base = total.base.sub(share.to128());\n        // There have to be at least 1000 shares left to prevent reseting the share/amount ratio (unless it's fully emptied)\n        require(total.base >= MINIMUM_SHARE_BALANCE || total.base == 0, \"BentoBox: cannot empty\");\n        totals[token] = total;\n\n        // Interactions\n        if (token_ == USE_ETHEREUM) {\n            // X2, X3: A revert or big gas usage in the WETH contract could block withdrawals, but WETH9 is fine.\n            IWETH(address(wethToken)).withdraw(amount);\n            // X2, X3: A revert or big gas usage could block, however, the to address is under control of the caller.\n            (bool success, ) = to.call{value: amount}(\"\");\n            require(success, \"BentoBox: ETH transfer failed\");\n        } else {\n            // X2, X3: A malicious token could block withdrawal of just THAT token.\n            //         masterContracts may want to take care not to rely on withdraw always succeeding.\n            token.safeTransfer(to, amount);\n        }\n        emit LogWithdraw(token, from, to, amount, share);\n        amountOut = amount;\n        shareOut = share;\n    }\n\n    /// @notice Transfer shares from a user account to another one.\n    /// @param token The ERC-20 token to transfer.\n    /// @param from which user to pull the tokens.\n    /// @param to which user to push the tokens.\n    /// @param share The amount of `token` in shares.\n    // Clones of master contracts can transfer from any account that has approved them\n    // F3 - Can it be combined with another similar function?\n    // F3: This isn't combined with transferMultiple for gas optimization\n    function transfer(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 share\n    ) public allowed(from) {\n        // Checks\n        require(to != address(0), \"BentoBox: to not set\"); // To avoid a bad UI from burning funds\n\n        // Effects\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\n        balanceOf[token][to] = balanceOf[token][to].add(share);\n\n        emit LogTransfer(token, from, to, share);\n    }\n\n    /// @notice Transfer shares from a user account to multiple other ones.\n    /// @param token The ERC-20 token to transfer.\n    /// @param from which user to pull the tokens.\n    /// @param tos The receivers of the tokens.\n    /// @param shares The amount of `token` in shares for each receiver in `tos`.\n    // F3 - Can it be combined with another similar function?\n    // F3: This isn't combined with transfer for gas optimization\n    function transferMultiple(\n        IERC20 token,\n        address from,\n        address[] calldata tos,\n        uint256[] calldata shares\n    ) public allowed(from) {\n        // Checks\n        require(tos[0] != address(0), \"BentoBox: to[0] not set\"); // To avoid a bad UI from burning funds\n\n        // Effects\n        uint256 totalAmount;\n        uint256 len = tos.length;\n        for (uint256 i = 0; i < len; i++) {\n            address to = tos[i];\n            balanceOf[token][to] = balanceOf[token][to].add(shares[i]);\n            totalAmount = totalAmount.add(shares[i]);\n            emit LogTransfer(token, from, to, shares[i]);\n        }\n        balanceOf[token][from] = balanceOf[token][from].sub(totalAmount);\n    }\n\n    /// @notice Flashloan ability.\n    /// @param borrower The address of the contract that implements and conforms to `IFlashBorrower` and handles the flashloan.\n    /// @param receiver Address of the token receiver.\n    /// @param token The address of the token to receive.\n    /// @param amount of the tokens to receive.\n    /// @param data The calldata to pass to the `borrower` contract.\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\n    // F5: Not possible to follow this here, reentrancy has been reviewed\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\n    function flashLoan(\n        IFlashBorrower borrower,\n        address receiver,\n        IERC20 token,\n        uint256 amount,\n        bytes calldata data\n    ) public {\n        uint256 fee = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\n        token.safeTransfer(receiver, amount);\n\n        borrower.onFlashLoan(msg.sender, token, amount, fee, data);\n\n        require(_tokenBalanceOf(token) >= totals[token].addElastic(fee.to128()), \"BentoBox: Wrong amount\");\n        emit LogFlashLoan(address(borrower), token, amount, fee, receiver);\n    }\n\n    /// @notice Support for batched flashloans. Useful to request multiple different `tokens` in a single transaction.\n    /// @param borrower The address of the contract that implements and conforms to `IBatchFlashBorrower` and handles the flashloan.\n    /// @param receivers An array of the token receivers. A one-to-one mapping with `tokens` and `amounts`.\n    /// @param tokens The addresses of the tokens.\n    /// @param amounts of the tokens for each receiver.\n    /// @param data The calldata to pass to the `borrower` contract.\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\n    // F5: Not possible to follow this here, reentrancy has been reviewed\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\n    function batchFlashLoan(\n        IBatchFlashBorrower borrower,\n        address[] calldata receivers,\n        IERC20[] calldata tokens,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public {\n        uint256[] memory fees = new uint256[](tokens.length);\n\n        uint256 len = tokens.length;\n        for (uint256 i = 0; i < len; i++) {\n            uint256 amount = amounts[i];\n            fees[i] = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\n\n            tokens[i].safeTransfer(receivers[i], amounts[i]);\n        }\n\n        borrower.onBatchFlashLoan(msg.sender, tokens, amounts, fees, data);\n\n        for (uint256 i = 0; i < len; i++) {\n            IERC20 token = tokens[i];\n            require(_tokenBalanceOf(token) >= totals[token].addElastic(fees[i].to128()), \"BentoBox: Wrong amount\");\n            emit LogFlashLoan(address(borrower), token, amounts[i], fees[i], receivers[i]);\n        }\n    }\n\n    /// @notice Sets the target percentage of the strategy for `token`.\n    /// @dev Only the owner of this contract is allowed to change this.\n    /// @param token The address of the token that maps to a strategy to change.\n    /// @param targetPercentage_ The new target in percent. Must be lesser or equal to `MAX_TARGET_PERCENTAGE`.\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) public onlyOwner {\n        // Checks\n        require(targetPercentage_ <= MAX_TARGET_PERCENTAGE, \"StrategyManager: Target too high\");\n\n        // Effects\n        strategyData[token].targetPercentage = targetPercentage_;\n        emit LogStrategyTargetPercentage(token, targetPercentage_);\n    }\n\n    /// @notice Sets the contract address of a new strategy that conforms to `IStrategy` for `token`.\n    /// Must be called twice with the same arguments.\n    /// A new strategy becomes pending first and can be activated once `STRATEGY_DELAY` is over.\n    /// @dev Only the owner of this contract is allowed to change this.\n    /// @param token The address of the token that maps to a strategy to change.\n    /// @param newStrategy The address of the contract that conforms to `IStrategy`.\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\n    // C4 - Use block.timestamp only for long intervals (SWC-116)\n    // C4: block.timestamp is used for a period of 2 weeks, which is long enough\n    function setStrategy(IERC20 token, IStrategy newStrategy) public onlyOwner {\n        StrategyData memory data = strategyData[token];\n        IStrategy pending = pendingStrategy[token];\n        if (data.strategyStartDate == 0 || pending != newStrategy) {\n            pendingStrategy[token] = newStrategy;\n            // C1 - All math done through BoringMath (SWC-101)\n            // C1: Our sun will swallow the earth well before this overflows\n            data.strategyStartDate = (block.timestamp + STRATEGY_DELAY).to64();\n            emit LogStrategyQueued(token, newStrategy);\n        } else {\n            require(data.strategyStartDate != 0 && block.timestamp >= data.strategyStartDate, \"StrategyManager: Too early\");\n            if (address(strategy[token]) != address(0)) {\n                int256 balanceChange = strategy[token].exit(data.balance);\n                // Effects\n                if (balanceChange > 0) {\n                    uint256 add = uint256(balanceChange);\n                    totals[token].addElastic(add);\n                    emit LogStrategyProfit(token, add);\n                } else if (balanceChange < 0) {\n                    uint256 sub = uint256(-balanceChange);\n                    totals[token].subElastic(sub);\n                    emit LogStrategyLoss(token, sub);\n                }\n\n                emit LogStrategyDivest(token, data.balance);\n            }\n            strategy[token] = pending;\n            data.strategyStartDate = 0;\n            data.balance = 0;\n            pendingStrategy[token] = IStrategy(0);\n            emit LogStrategySet(token, newStrategy);\n        }\n        strategyData[token] = data;\n    }\n\n    /// @notice The actual process of yield farming. Executes the strategy of `token`.\n    /// Optionally does housekeeping if `balance` is true.\n    /// `maxChangeAmount` is relevant for skimming or withdrawing if `balance` is true.\n    /// @param token The address of the token for which a strategy is deployed.\n    /// @param balance True if housekeeping should be done.\n    /// @param maxChangeAmount The maximum amount for either pulling or pushing from/to the `IStrategy` contract.\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\n    // F5: Not followed to prevent reentrancy issues with flashloans and BentoBox skims?\n    function harvest(\n        IERC20 token,\n        bool balance,\n        uint256 maxChangeAmount\n    ) public {\n        StrategyData memory data = strategyData[token];\n        IStrategy _strategy = strategy[token];\n        int256 balanceChange = _strategy.harvest(data.balance, msg.sender);\n        if (balanceChange == 0 && !balance) {\n            return;\n        }\n\n        uint256 totalElastic = totals[token].elastic;\n\n        if (balanceChange > 0) {\n            uint256 add = uint256(balanceChange);\n            totalElastic = totalElastic.add(add);\n            totals[token].elastic = totalElastic.to128();\n            emit LogStrategyProfit(token, add);\n        } else if (balanceChange < 0) {\n            // C1 - All math done through BoringMath (SWC-101)\n            // C1: balanceChange could overflow if it's max negative int128.\n            // But tokens with balances that large are not supported by the BentoBox.\n            uint256 sub = uint256(-balanceChange);\n            totalElastic = totalElastic.sub(sub);\n            totals[token].elastic = totalElastic.to128();\n            data.balance = data.balance.sub(sub.to128());\n            emit LogStrategyLoss(token, sub);\n        }\n\n        if (balance) {\n            uint256 targetBalance = totalElastic.mul(data.targetPercentage) / 100;\n            // if data.balance == targetBalance there is nothing to update\n            if (data.balance < targetBalance) {\n                uint256 amountOut = targetBalance.sub(data.balance);\n                if (maxChangeAmount != 0 && amountOut > maxChangeAmount) {\n                    amountOut = maxChangeAmount;\n                }\n                token.safeTransfer(address(_strategy), amountOut);\n                data.balance = data.balance.add(amountOut.to128());\n                _strategy.skim(amountOut);\n                emit LogStrategyInvest(token, amountOut);\n            } else if (data.balance > targetBalance) {\n                uint256 amountIn = data.balance.sub(targetBalance.to128());\n                if (maxChangeAmount != 0 && amountIn > maxChangeAmount) {\n                    amountIn = maxChangeAmount;\n                }\n\n                uint256 actualAmountIn = _strategy.withdraw(amountIn);\n\n                data.balance = data.balance.sub(actualAmountIn.to128());\n                emit LogStrategyDivest(token, actualAmountIn);\n            }\n        }\n\n        strategyData[token] = data;\n    }\n\n    // Contract should be able to receive ETH deposits to support deposit & skim\n    // solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":999999},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates","devdoc","userdoc"],"":["ast"]}},"metadata":{"useLiteralContent":true},"libraries":{"":{"__CACHE_BREAKER__":"0x00000000d41867734bbee4c6863d9255b2b06ac1"}}}},"output":{"sources":{"contracts/flat/BentoBoxV1Flat.sol":{"ast":{"absolutePath":"contracts/flat/BentoBoxV1Flat.sol","exportedSymbols":{"BaseBoringBatchable":[1530],"BentoBoxV1":[3137],"BoringBatchable":[1566],"BoringERC20":[260],"BoringFactory":[1116],"BoringMath":[412],"BoringMath128":[458],"BoringMath32":[550],"BoringMath64":[504],"BoringOwnable":[1031],"BoringOwnableData":[908],"IBatchFlashBorrower":[105],"IERC20":[72],"IFlashBorrower":[87],"IMasterContract":[1038],"IStrategy":[147],"IWETH":[114],"MasterContractManager":[1421],"Rebase":[555],"RebaseLibrary":[903]},"id":3138,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","0.6",".12"],"nodeType":"PragmaDirective","src":"891:23:0"},{"id":2,"literals":["experimental","ABIEncoderV2"],"nodeType":"PragmaDirective","src":"915:33:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":null,"fullyImplemented":false,"id":72,"linearizedBaseContracts":[72],"name":"IERC20","nodeType":"ContractDefinition","nodes":[{"body":null,"documentation":null,"functionSelector":"18160ddd","id":7,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":3,"nodeType":"ParameterList","parameters":[],"src":"1214:2:0"},"returnParameters":{"id":6,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":7,"src":"1240:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4,"name":"uint256","nodeType":"ElementaryTypeName","src":"1240:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1239:9:0"},"scope":72,"src":"1194:55:0","stateMutability":"view","virtual":false,"visibility":"external"},{"body":null,"documentation":null,"functionSelector":"70a08231","id":14,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":10,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"mutability":"mutable","name":"account","nodeType":"VariableDeclaration","overrides":null,"scope":14,"src":"1274:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8,"name":"address","nodeType":"ElementaryTypeName","src":"1274:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"1273:17:0"},"returnParameters":{"id":13,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":14,"src":"1314:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":11,"name":"uint256","nodeType":"ElementaryTypeName","src":"1314:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1313:9:0"},"scope":72,"src":"1255:68:0","stateMutability":"view","virtual":false,"visibility":"external"},{"body":null,"documentation":null,"functionSelector":"dd62ed3e","id":23,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":19,"nodeType":"ParameterList","parameters":[{"constant":false,"id":16,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","overrides":null,"scope":23,"src":"1348:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":15,"name":"address","nodeType":"ElementaryTypeName","src":"1348:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":18,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","overrides":null,"scope":23,"src":"1363:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":17,"name":"address","nodeType":"ElementaryTypeName","src":"1363:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"1347:32:0"},"returnParameters":{"id":22,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":23,"src":"1403:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":20,"name":"uint256","nodeType":"ElementaryTypeName","src":"1403:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1402:9:0"},"scope":72,"src":"1329:83:0","stateMutability":"view","virtual":false,"visibility":"external"},{"body":null,"documentation":null,"functionSelector":"095ea7b3","id":32,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":25,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","overrides":null,"scope":32,"src":"1435:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":24,"name":"address","nodeType":"ElementaryTypeName","src":"1435:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":27,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":32,"src":"1452:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":26,"name":"uint256","nodeType":"ElementaryTypeName","src":"1452:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1434:33:0"},"returnParameters":{"id":31,"nodeType":"ParameterList","parameters":[{"constant":false,"id":30,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":32,"src":"1486:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":29,"name":"bool","nodeType":"ElementaryTypeName","src":"1486:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"1485:6:0"},"scope":72,"src":"1418:74:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":null,"id":40,"name":"Transfer","nodeType":"EventDefinition","parameters":{"id":39,"nodeType":"ParameterList","parameters":[{"constant":false,"id":34,"indexed":true,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","overrides":null,"scope":40,"src":"1513:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":33,"name":"address","nodeType":"ElementaryTypeName","src":"1513:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":36,"indexed":true,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","overrides":null,"scope":40,"src":"1535:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":35,"name":"address","nodeType":"ElementaryTypeName","src":"1535:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":38,"indexed":false,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","overrides":null,"scope":40,"src":"1555:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":37,"name":"uint256","nodeType":"ElementaryTypeName","src":"1555:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1512:57:0"},"src":"1498:72:0"},{"anonymous":false,"documentation":null,"id":48,"name":"Approval","nodeType":"EventDefinition","parameters":{"id":47,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42,"indexed":true,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","overrides":null,"scope":48,"src":"1590:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":41,"name":"address","nodeType":"ElementaryTypeName","src":"1590:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":44,"indexed":true,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","overrides":null,"scope":48,"src":"1613:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":43,"name":"address","nodeType":"ElementaryTypeName","src":"1613:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":46,"indexed":false,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","overrides":null,"scope":48,"src":"1638:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":45,"name":"uint256","nodeType":"ElementaryTypeName","src":"1638:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1589:63:0"},"src":"1575:78:0"},{"body":null,"documentation":{"id":49,"nodeType":"StructuredDocumentation","src":"1659:20:0","text":"@notice EIP 2612"},"functionSelector":"d505accf","id":66,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":64,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","overrides":null,"scope":66,"src":"1709:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":50,"name":"address","nodeType":"ElementaryTypeName","src":"1709:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":53,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","overrides":null,"scope":66,"src":"1732:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":52,"name":"address","nodeType":"ElementaryTypeName","src":"1732:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":55,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","overrides":null,"scope":66,"src":"1757:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":54,"name":"uint256","nodeType":"ElementaryTypeName","src":"1757:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":57,"mutability":"mutable","name":"deadline","nodeType":"VariableDeclaration","overrides":null,"scope":66,"src":"1780:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":56,"name":"uint256","nodeType":"ElementaryTypeName","src":"1780:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":59,"mutability":"mutable","name":"v","nodeType":"VariableDeclaration","overrides":null,"scope":66,"src":"1806:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":58,"name":"uint8","nodeType":"ElementaryTypeName","src":"1806:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":null,"visibility":"internal"},{"constant":false,"id":61,"mutability":"mutable","name":"r","nodeType":"VariableDeclaration","overrides":null,"scope":66,"src":"1823:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":60,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1823:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"},{"constant":false,"id":63,"mutability":"mutable","name":"s","nodeType":"VariableDeclaration","overrides":null,"scope":66,"src":"1842:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":62,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1842:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"src":"1699:158:0"},"returnParameters":{"id":65,"nodeType":"ParameterList","parameters":[],"src":"1866:0:0"},"scope":72,"src":"1684:183:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":null,"documentation":null,"functionSelector":"313ce567","id":71,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":67,"nodeType":"ParameterList","parameters":[],"src":"1890:2:0"},"returnParameters":{"id":70,"nodeType":"ParameterList","parameters":[{"constant":false,"id":69,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":71,"src":"1916:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":68,"name":"uint256","nodeType":"ElementaryTypeName","src":"1916:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1915:9:0"},"scope":72,"src":"1873:52:0","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3138,"src":"1171:756:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":null,"fullyImplemented":false,"id":87,"linearizedBaseContracts":[87],"name":"IFlashBorrower","nodeType":"ContractDefinition","nodes":[{"body":null,"documentation":{"id":73,"nodeType":"StructuredDocumentation","src":"2032:475:0","text":"@notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\n @param sender The address of the invoker of this flashloan.\n @param token The address of the token that is loaned.\n @param amount of the `token` that is loaned.\n @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\n @param data Additional data that was passed to the flashloan function."},"functionSelector":"23e30c8b","id":86,"implemented":false,"kind":"function","modifiers":[],"name":"onFlashLoan","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":84,"nodeType":"ParameterList","parameters":[{"constant":false,"id":75,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","overrides":null,"scope":86,"src":"2542:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":74,"name":"address","nodeType":"ElementaryTypeName","src":"2542:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":77,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":86,"src":"2566:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":76,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"2566:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":79,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":86,"src":"2588:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":78,"name":"uint256","nodeType":"ElementaryTypeName","src":"2588:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":81,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","overrides":null,"scope":86,"src":"2612:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":80,"name":"uint256","nodeType":"ElementaryTypeName","src":"2612:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":83,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","overrides":null,"scope":86,"src":"2633:19:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":82,"name":"bytes","nodeType":"ElementaryTypeName","src":"2633:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"2532:126:0"},"returnParameters":{"id":85,"nodeType":"ParameterList","parameters":[],"src":"2667:0:0"},"scope":87,"src":"2512:156:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3138,"src":"2001:669:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":null,"fullyImplemented":false,"id":105,"linearizedBaseContracts":[105],"name":"IBatchFlashBorrower","nodeType":"ContractDefinition","nodes":[{"body":null,"documentation":{"id":88,"nodeType":"StructuredDocumentation","src":"2708:535:0","text":"@notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\n @param sender The address of the invoker of this flashloan.\n @param tokens Array of addresses for ERC-20 tokens that is loaned.\n @param amounts A one-to-one map to `tokens` that is loaned.\n @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\n @param data Additional data that was passed to the flashloan function."},"functionSelector":"d9d17623","id":104,"implemented":false,"kind":"function","modifiers":[],"name":"onBatchFlashLoan","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":90,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","overrides":null,"scope":104,"src":"3283:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":89,"name":"address","nodeType":"ElementaryTypeName","src":"3283:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":93,"mutability":"mutable","name":"tokens","nodeType":"VariableDeclaration","overrides":null,"scope":104,"src":"3307:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$72_$dyn_calldata_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"contractScope":null,"id":91,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"3307:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"id":92,"length":null,"nodeType":"ArrayTypeName","src":"3307:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$72_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"value":null,"visibility":"internal"},{"constant":false,"id":96,"mutability":"mutable","name":"amounts","nodeType":"VariableDeclaration","overrides":null,"scope":104,"src":"3341:26:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":94,"name":"uint256","nodeType":"ElementaryTypeName","src":"3341:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":95,"length":null,"nodeType":"ArrayTypeName","src":"3341:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"value":null,"visibility":"internal"},{"constant":false,"id":99,"mutability":"mutable","name":"fees","nodeType":"VariableDeclaration","overrides":null,"scope":104,"src":"3377:23:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":97,"name":"uint256","nodeType":"ElementaryTypeName","src":"3377:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":98,"length":null,"nodeType":"ArrayTypeName","src":"3377:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"value":null,"visibility":"internal"},{"constant":false,"id":101,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","overrides":null,"scope":104,"src":"3410:19:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":100,"name":"bytes","nodeType":"ElementaryTypeName","src":"3410:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"3273:162:0"},"returnParameters":{"id":103,"nodeType":"ParameterList","parameters":[],"src":"3444:0:0"},"scope":105,"src":"3248:197:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3138,"src":"2672:775:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":null,"fullyImplemented":false,"id":114,"linearizedBaseContracts":[114],"name":"IWETH","nodeType":"ContractDefinition","nodes":[{"body":null,"documentation":null,"functionSelector":"d0e30db0","id":108,"implemented":false,"kind":"function","modifiers":[],"name":"deposit","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":106,"nodeType":"ParameterList","parameters":[],"src":"3554:2:0"},"returnParameters":{"id":107,"nodeType":"ParameterList","parameters":[],"src":"3573:0:0"},"scope":114,"src":"3538:36:0","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":null,"documentation":null,"functionSelector":"2e1a7d4d","id":113,"implemented":false,"kind":"function","modifiers":[],"name":"withdraw","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":110,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":113,"src":"3598:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":109,"name":"uint256","nodeType":"ElementaryTypeName","src":"3598:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3597:9:0"},"returnParameters":{"id":112,"nodeType":"ParameterList","parameters":[],"src":"3615:0:0"},"scope":114,"src":"3580:36:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3138,"src":"3516:102:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":null,"fullyImplemented":false,"id":147,"linearizedBaseContracts":[147],"name":"IStrategy","nodeType":"ContractDefinition","nodes":[{"body":null,"documentation":{"id":115,"nodeType":"StructuredDocumentation","src":"3717:127:0","text":"@notice Send the assets to the Strategy and call skim to invest them.\n @param amount The amount of tokens to invest."},"functionSelector":"6939aaf5","id":120,"implemented":false,"kind":"function","modifiers":[],"name":"skim","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":117,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":120,"src":"3863:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":116,"name":"uint256","nodeType":"ElementaryTypeName","src":"3863:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3862:16:0"},"returnParameters":{"id":119,"nodeType":"ParameterList","parameters":[],"src":"3887:0:0"},"scope":147,"src":"3849:39:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":null,"documentation":{"id":121,"nodeType":"StructuredDocumentation","src":"3894:372:0","text":"@notice Harvest any profits made converted to the asset and pass them to the caller.\n @param balance The amount of tokens the caller thinks it has invested.\n @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\n @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`."},"functionSelector":"18fccc76","id":130,"implemented":false,"kind":"function","modifiers":[],"name":"harvest","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":123,"mutability":"mutable","name":"balance","nodeType":"VariableDeclaration","overrides":null,"scope":130,"src":"4288:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":122,"name":"uint256","nodeType":"ElementaryTypeName","src":"4288:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":125,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","overrides":null,"scope":130,"src":"4305:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":124,"name":"address","nodeType":"ElementaryTypeName","src":"4305:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"4287:33:0"},"returnParameters":{"id":129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":128,"mutability":"mutable","name":"amountAdded","nodeType":"VariableDeclaration","overrides":null,"scope":130,"src":"4339:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":127,"name":"int256","nodeType":"ElementaryTypeName","src":"4339:6:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":null,"visibility":"internal"}],"src":"4338:20:0"},"scope":147,"src":"4271:88:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":null,"documentation":{"id":131,"nodeType":"StructuredDocumentation","src":"4365:395:0","text":"@notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\n @dev The `actualAmount` should be very close to the amount.\n The difference should NOT be used to report a loss. That's what harvest is for.\n @param amount The requested amount the caller wants to withdraw.\n @return actualAmount The real amount that is withdrawn."},"functionSelector":"2e1a7d4d","id":138,"implemented":false,"kind":"function","modifiers":[],"name":"withdraw","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":133,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":138,"src":"4783:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":132,"name":"uint256","nodeType":"ElementaryTypeName","src":"4783:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"4782:16:0"},"returnParameters":{"id":137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":136,"mutability":"mutable","name":"actualAmount","nodeType":"VariableDeclaration","overrides":null,"scope":138,"src":"4817:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":135,"name":"uint256","nodeType":"ElementaryTypeName","src":"4817:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"4816:22:0"},"scope":147,"src":"4765:74:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":null,"documentation":{"id":139,"nodeType":"StructuredDocumentation","src":"4845:255:0","text":"@notice Withdraw all assets in the safest way possible. This shouldn't fail.\n @param balance The amount of tokens the caller thinks it has invested.\n @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`."},"functionSelector":"7f8661a1","id":146,"implemented":false,"kind":"function","modifiers":[],"name":"exit","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":141,"mutability":"mutable","name":"balance","nodeType":"VariableDeclaration","overrides":null,"scope":146,"src":"5119:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":140,"name":"uint256","nodeType":"ElementaryTypeName","src":"5119:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"5118:17:0"},"returnParameters":{"id":145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":144,"mutability":"mutable","name":"amountAdded","nodeType":"VariableDeclaration","overrides":null,"scope":146,"src":"5154:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":143,"name":"int256","nodeType":"ElementaryTypeName","src":"5154:6:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":null,"visibility":"internal"}],"src":"5153:20:0"},"scope":147,"src":"5105:69:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3138,"src":"3691:1485:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":null,"fullyImplemented":true,"id":260,"linearizedBaseContracts":[260],"name":"BoringERC20","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":150,"mutability":"constant","name":"SIG_SYMBOL","nodeType":"VariableDeclaration","overrides":null,"scope":260,"src":"5313:47:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":148,"name":"bytes4","nodeType":"ElementaryTypeName","src":"5313:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"argumentTypes":null,"hexValue":"30783935643839623431","id":149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5350:10:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2514000705_by_1","typeString":"int_const 2514000705"},"value":"0x95d89b41"},"visibility":"private"},{"constant":true,"id":153,"mutability":"constant","name":"SIG_NAME","nodeType":"VariableDeclaration","overrides":null,"scope":260,"src":"5378:45:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":151,"name":"bytes4","nodeType":"ElementaryTypeName","src":"5378:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"argumentTypes":null,"hexValue":"30783036666464653033","id":152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5413:10:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_117300739_by_1","typeString":"int_const 117300739"},"value":"0x06fdde03"},"visibility":"private"},{"constant":true,"id":156,"mutability":"constant","name":"SIG_DECIMALS","nodeType":"VariableDeclaration","overrides":null,"scope":260,"src":"5439:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":154,"name":"bytes4","nodeType":"ElementaryTypeName","src":"5439:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"argumentTypes":null,"hexValue":"30783331336365353637","id":155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5478:10:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_826074471_by_1","typeString":"int_const 826074471"},"value":"0x313ce567"},"visibility":"private"},{"constant":true,"id":159,"mutability":"constant","name":"SIG_TRANSFER","nodeType":"VariableDeclaration","overrides":null,"scope":260,"src":"5508:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":157,"name":"bytes4","nodeType":"ElementaryTypeName","src":"5508:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"argumentTypes":null,"hexValue":"30786139303539636262","id":158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5547:10:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2835717307_by_1","typeString":"int_const 2835717307"},"value":"0xa9059cbb"},"visibility":"private"},{"constant":true,"id":162,"mutability":"constant","name":"SIG_TRANSFER_FROM","nodeType":"VariableDeclaration","overrides":null,"scope":260,"src":"5592:54:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":160,"name":"bytes4","nodeType":"ElementaryTypeName","src":"5592:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"argumentTypes":null,"hexValue":"30783233623837326464","id":161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5636:10:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_599290589_by_1","typeString":"int_const 599290589"},"value":"0x23b872dd"},"visibility":"private"},{"body":{"id":208,"nodeType":"Block","src":"6060:230:0","statements":[{"assignments":[173,175],"declarations":[{"constant":false,"id":173,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","overrides":null,"scope":208,"src":"6071:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":172,"name":"bool","nodeType":"ElementaryTypeName","src":"6071:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},{"constant":false,"id":175,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","overrides":null,"scope":208,"src":"6085:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":174,"name":"bytes","nodeType":"ElementaryTypeName","src":"6085:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"id":188,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":183,"name":"SIG_TRANSFER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":159,"src":"6149:12:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"argumentTypes":null,"id":184,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"6163:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":185,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"6167:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":181,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6126:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":182,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","referencedDeclaration":null,"src":"6126:22:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6126:48:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":178,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":165,"src":"6114:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}],"id":177,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6106:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":176,"name":"address","nodeType":"ElementaryTypeName","src":"6106:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6106:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","referencedDeclaration":null,"src":"6106:19:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6106:69:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6070:105:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":190,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173,"src":"6193:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":191,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":175,"src":"6205:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","referencedDeclaration":null,"src":"6205:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6220:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6205:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":197,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":175,"src":"6236:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"argumentTypes":null,"components":[{"argumentTypes":null,"id":199,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6243:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":198,"name":"bool","nodeType":"ElementaryTypeName","src":"6243:4:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}}],"id":200,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6242:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"argumentTypes":null,"id":195,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6225:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":196,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","referencedDeclaration":null,"src":"6225:10:0","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6225:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6205:44:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":203,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6204:46:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6193:57:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e6745524332303a205472616e73666572206661696c6564","id":205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6252:30:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_1a3f0851ddc9e157ae96e52ed9dfd71a8cb4b1cf2a73b26b9f3f9e0aa9469d27","typeString":"literal_string \"BoringERC20: Transfer failed\""},"value":"BoringERC20: Transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1a3f0851ddc9e157ae96e52ed9dfd71a8cb4b1cf2a73b26b9f3f9e0aa9469d27","typeString":"literal_string \"BoringERC20: Transfer failed\""}],"id":189,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6185:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6185:98:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":207,"nodeType":"ExpressionStatement","src":"6185:98:0"}]},"documentation":{"id":163,"nodeType":"StructuredDocumentation","src":"5694:258:0","text":"@notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\n Reverts on a failed transfer.\n @param token The address of the ERC-20 token.\n @param to Transfer tokens to.\n @param amount The token amount."},"id":209,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":165,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":209,"src":"5988:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":164,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"5988:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":167,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","overrides":null,"scope":209,"src":"6010:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":166,"name":"address","nodeType":"ElementaryTypeName","src":"6010:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":169,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":209,"src":"6030:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":168,"name":"uint256","nodeType":"ElementaryTypeName","src":"6030:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"5978:72:0"},"returnParameters":{"id":171,"nodeType":"ParameterList","parameters":[],"src":"6060:0:0"},"scope":260,"src":"5957:333:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":258,"nodeType":"Block","src":"6734:245:0","statements":[{"assignments":[222,224],"declarations":[{"constant":false,"id":222,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","overrides":null,"scope":258,"src":"6745:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":221,"name":"bool","nodeType":"ElementaryTypeName","src":"6745:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},{"constant":false,"id":224,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","overrides":null,"scope":258,"src":"6759:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":223,"name":"bytes","nodeType":"ElementaryTypeName","src":"6759:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"id":238,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":232,"name":"SIG_TRANSFER_FROM","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"6823:17:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"argumentTypes":null,"id":233,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"6842:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":234,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"6848:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":235,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"6852:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":230,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6800:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":231,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","referencedDeclaration":null,"src":"6800:22:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6800:59:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":227,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"6788:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}],"id":226,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6780:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":225,"name":"address","nodeType":"ElementaryTypeName","src":"6780:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6780:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","referencedDeclaration":null,"src":"6780:19:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6780:80:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6744:116:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":240,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"6878:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":241,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":224,"src":"6890:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","referencedDeclaration":null,"src":"6890:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6905:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6890:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":247,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":224,"src":"6921:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"argumentTypes":null,"components":[{"argumentTypes":null,"id":249,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6928:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":248,"name":"bool","nodeType":"ElementaryTypeName","src":"6928:4:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}}],"id":250,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6927:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"argumentTypes":null,"id":245,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6910:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":246,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","referencedDeclaration":null,"src":"6910:10:0","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6910:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6890:44:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":253,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6889:46:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6878:57:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e6745524332303a205472616e7366657246726f6d206661696c6564","id":255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6937:34:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_dffd2f381f9235cb5927387124071d63a91c90f587c3edae76629d7dc4794f26","typeString":"literal_string \"BoringERC20: TransferFrom failed\""},"value":"BoringERC20: TransferFrom failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_dffd2f381f9235cb5927387124071d63a91c90f587c3edae76629d7dc4794f26","typeString":"literal_string \"BoringERC20: TransferFrom failed\""}],"id":239,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6870:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6870:102:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":257,"nodeType":"ExpressionStatement","src":"6870:102:0"}]},"documentation":{"id":210,"nodeType":"StructuredDocumentation","src":"6296:304:0","text":"@notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\n Reverts on a failed transfer.\n @param token The address of the ERC-20 token.\n @param from Transfer tokens from.\n @param to Transfer tokens to.\n @param amount The token amount."},"id":259,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":212,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":259,"src":"6640:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":211,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"6640:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":214,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","overrides":null,"scope":259,"src":"6662:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":213,"name":"address","nodeType":"ElementaryTypeName","src":"6662:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":216,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","overrides":null,"scope":259,"src":"6684:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":215,"name":"address","nodeType":"ElementaryTypeName","src":"6684:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":218,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":259,"src":"6704:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":217,"name":"uint256","nodeType":"ElementaryTypeName","src":"6704:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6630:94:0"},"returnParameters":{"id":220,"nodeType":"ParameterList","parameters":[],"src":"6734:0:0"},"scope":260,"src":"6605:374:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":3138,"src":"5287:1694:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":261,"nodeType":"StructuredDocumentation","src":"7091:151:0","text":"@notice A library for performing overflow-/underflow-safe math,\n updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math)."},"fullyImplemented":true,"id":412,"linearizedBaseContracts":[412],"name":"BoringMath","nodeType":"ContractDefinition","nodes":[{"body":{"id":282,"nodeType":"Block","src":"7336:70:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":271,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":268,"src":"7355:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":272,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":263,"src":"7359:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"id":273,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":265,"src":"7363:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7359:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7355:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":276,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7354:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"id":277,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":265,"src":"7369:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7354:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e674d6174683a20416464204f766572666c6f77","id":279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7372:26:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_77ffeda554f4c047bf45dac1a596ee270f922490aa5e98c6ba2b9599856e6fdf","typeString":"literal_string \"BoringMath: Add Overflow\""},"value":"BoringMath: Add Overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_77ffeda554f4c047bf45dac1a596ee270f922490aa5e98c6ba2b9599856e6fdf","typeString":"literal_string \"BoringMath: Add Overflow\""}],"id":270,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7346:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7346:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":281,"nodeType":"ExpressionStatement","src":"7346:53:0"}]},"documentation":null,"id":283,"implemented":true,"kind":"function","modifiers":[],"name":"add","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":263,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":283,"src":"7280:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":262,"name":"uint256","nodeType":"ElementaryTypeName","src":"7280:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":265,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":283,"src":"7291:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":264,"name":"uint256","nodeType":"ElementaryTypeName","src":"7291:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7279:22:0"},"returnParameters":{"id":269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":268,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":283,"src":"7325:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":267,"name":"uint256","nodeType":"ElementaryTypeName","src":"7325:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7324:11:0"},"scope":412,"src":"7267:139:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":304,"nodeType":"Block","src":"7481:67:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":293,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":290,"src":"7500:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":294,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"7504:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"id":295,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":287,"src":"7508:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7504:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7500:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":298,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7499:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"id":299,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"7514:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7499:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e674d6174683a20556e646572666c6f77","id":301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7517:23:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_00354eeca4367367797d07bf5ab6743c0cc453fe689bbb72132c3c4e2b5612aa","typeString":"literal_string \"BoringMath: Underflow\""},"value":"BoringMath: Underflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_00354eeca4367367797d07bf5ab6743c0cc453fe689bbb72132c3c4e2b5612aa","typeString":"literal_string \"BoringMath: Underflow\""}],"id":292,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7491:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7491:50:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":303,"nodeType":"ExpressionStatement","src":"7491:50:0"}]},"documentation":null,"id":305,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":285,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":305,"src":"7425:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":284,"name":"uint256","nodeType":"ElementaryTypeName","src":"7425:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":287,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":305,"src":"7436:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":286,"name":"uint256","nodeType":"ElementaryTypeName","src":"7436:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7424:22:0"},"returnParameters":{"id":291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":290,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":305,"src":"7470:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":289,"name":"uint256","nodeType":"ElementaryTypeName","src":"7470:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7469:11:0"},"scope":412,"src":"7412:136:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":332,"nodeType":"Block","src":"7623:84:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":315,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"7641:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7646:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7641:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":318,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"7652:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":319,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"7656:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"argumentTypes":null,"id":320,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"7660:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7656:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7652:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":323,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7651:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":324,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"7665:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7651:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":326,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"7670:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7651:20:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7641:30:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e674d6174683a204d756c204f766572666c6f77","id":329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7673:26:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_efa2024ddfa13946089ac6325359d421926f574cb871587fa659a82734fa675e","typeString":"literal_string \"BoringMath: Mul Overflow\""},"value":"BoringMath: Mul Overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_efa2024ddfa13946089ac6325359d421926f574cb871587fa659a82734fa675e","typeString":"literal_string \"BoringMath: Mul Overflow\""}],"id":314,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7633:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7633:67:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":331,"nodeType":"ExpressionStatement","src":"7633:67:0"}]},"documentation":null,"id":333,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":307,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":333,"src":"7567:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":306,"name":"uint256","nodeType":"ElementaryTypeName","src":"7567:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":309,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":333,"src":"7578:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":308,"name":"uint256","nodeType":"ElementaryTypeName","src":"7578:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7566:22:0"},"returnParameters":{"id":313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":312,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":333,"src":"7612:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":311,"name":"uint256","nodeType":"ElementaryTypeName","src":"7612:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7611:11:0"},"scope":412,"src":"7554:153:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":358,"nodeType":"Block","src":"7773:98:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":341,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"7791:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":345,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"7804:2:0","subExpression":{"argumentTypes":null,"hexValue":"31","id":344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7805:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}],"id":343,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7796:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":342,"name":"uint128","nodeType":"ElementaryTypeName","src":"7796:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7796:11:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"7791:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e674d6174683a2075696e74313238204f766572666c6f77","id":348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7809:30:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_64196137e15a5be4f7488ecfa918cfa26a6c2051ae3fb739c5de9bf8431fe9a5","typeString":"literal_string \"BoringMath: uint128 Overflow\""},"value":"BoringMath: uint128 Overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_64196137e15a5be4f7488ecfa918cfa26a6c2051ae3fb739c5de9bf8431fe9a5","typeString":"literal_string \"BoringMath: uint128 Overflow\""}],"id":340,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7783:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7783:57:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":350,"nodeType":"ExpressionStatement","src":"7783:57:0"},{"expression":{"argumentTypes":null,"id":356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":351,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"7850:1:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":354,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"7862:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":353,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7854:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":352,"name":"uint128","nodeType":"ElementaryTypeName","src":"7854:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7854:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"7850:14:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":357,"nodeType":"ExpressionStatement","src":"7850:14:0"}]},"documentation":null,"id":359,"implemented":true,"kind":"function","modifiers":[],"name":"to128","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":335,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":359,"src":"7728:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":334,"name":"uint256","nodeType":"ElementaryTypeName","src":"7728:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7727:11:0"},"returnParameters":{"id":339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":338,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":359,"src":"7762:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":337,"name":"uint128","nodeType":"ElementaryTypeName","src":"7762:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"value":null,"visibility":"internal"}],"src":"7761:11:0"},"scope":412,"src":"7713:158:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":384,"nodeType":"Block","src":"7935:95:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":367,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":361,"src":"7953:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":371,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"7965:2:0","subExpression":{"argumentTypes":null,"hexValue":"31","id":370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7966:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}],"id":369,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7958:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":368,"name":"uint64","nodeType":"ElementaryTypeName","src":"7958:6:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7958:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"7953:15:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e674d6174683a2075696e743634204f766572666c6f77","id":374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7970:29:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_b3c33265b589f76cafa7df00c0a28addc9a2c2003a13a1e0e4b875f58eb08764","typeString":"literal_string \"BoringMath: uint64 Overflow\""},"value":"BoringMath: uint64 Overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b3c33265b589f76cafa7df00c0a28addc9a2c2003a13a1e0e4b875f58eb08764","typeString":"literal_string \"BoringMath: uint64 Overflow\""}],"id":366,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7945:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":375,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7945:55:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":376,"nodeType":"ExpressionStatement","src":"7945:55:0"},{"expression":{"argumentTypes":null,"id":382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":377,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"8010:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":380,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":361,"src":"8021:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":379,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8014:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":378,"name":"uint64","nodeType":"ElementaryTypeName","src":"8014:6:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8014:9:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"8010:13:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":383,"nodeType":"ExpressionStatement","src":"8010:13:0"}]},"documentation":null,"id":385,"implemented":true,"kind":"function","modifiers":[],"name":"to64","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":361,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":385,"src":"7891:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":360,"name":"uint256","nodeType":"ElementaryTypeName","src":"7891:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7890:11:0"},"returnParameters":{"id":365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":364,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":385,"src":"7925:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":363,"name":"uint64","nodeType":"ElementaryTypeName","src":"7925:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":null,"visibility":"internal"}],"src":"7924:10:0"},"scope":412,"src":"7877:153:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":410,"nodeType":"Block","src":"8094:95:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":393,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"8112:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":397,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"8124:2:0","subExpression":{"argumentTypes":null,"hexValue":"31","id":396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8125:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}],"id":395,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8117:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":394,"name":"uint32","nodeType":"ElementaryTypeName","src":"8117:6:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8117:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"8112:15:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e674d6174683a2075696e743332204f766572666c6f77","id":400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8129:29:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_d8918cd18a3e78dc3bd01c63d310640381efda31e2d3ce751014519bc65013fc","typeString":"literal_string \"BoringMath: uint32 Overflow\""},"value":"BoringMath: uint32 Overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d8918cd18a3e78dc3bd01c63d310640381efda31e2d3ce751014519bc65013fc","typeString":"literal_string \"BoringMath: uint32 Overflow\""}],"id":392,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8104:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8104:55:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":402,"nodeType":"ExpressionStatement","src":"8104:55:0"},{"expression":{"argumentTypes":null,"id":408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":403,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"8169:1:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":406,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"8180:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":405,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8173:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":404,"name":"uint32","nodeType":"ElementaryTypeName","src":"8173:6:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8173:9:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"8169:13:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":409,"nodeType":"ExpressionStatement","src":"8169:13:0"}]},"documentation":null,"id":411,"implemented":true,"kind":"function","modifiers":[],"name":"to32","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":387,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":411,"src":"8050:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":386,"name":"uint256","nodeType":"ElementaryTypeName","src":"8050:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"8049:11:0"},"returnParameters":{"id":391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":390,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":411,"src":"8084:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":389,"name":"uint32","nodeType":"ElementaryTypeName","src":"8084:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":null,"visibility":"internal"}],"src":"8083:10:0"},"scope":412,"src":"8036:153:0","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3138,"src":"7242:949:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":413,"nodeType":"StructuredDocumentation","src":"8193:99:0","text":"@notice A library for performing overflow-/underflow-safe addition and subtraction on uint128."},"fullyImplemented":true,"id":458,"linearizedBaseContracts":[458],"name":"BoringMath128","nodeType":"ContractDefinition","nodes":[{"body":{"id":434,"nodeType":"Block","src":"8389:70:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":423,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":420,"src":"8408:1:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":424,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"8412:1:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"id":425,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":417,"src":"8416:1:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"8412:5:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"8408:9:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"id":428,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8407:11:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"id":429,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":417,"src":"8422:1:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"8407:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e674d6174683a20416464204f766572666c6f77","id":431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8425:26:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_77ffeda554f4c047bf45dac1a596ee270f922490aa5e98c6ba2b9599856e6fdf","typeString":"literal_string \"BoringMath: Add Overflow\""},"value":"BoringMath: Add Overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_77ffeda554f4c047bf45dac1a596ee270f922490aa5e98c6ba2b9599856e6fdf","typeString":"literal_string \"BoringMath: Add Overflow\""}],"id":422,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8399:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8399:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":433,"nodeType":"ExpressionStatement","src":"8399:53:0"}]},"documentation":null,"id":435,"implemented":true,"kind":"function","modifiers":[],"name":"add","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":415,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":435,"src":"8333:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":414,"name":"uint128","nodeType":"ElementaryTypeName","src":"8333:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"value":null,"visibility":"internal"},{"constant":false,"id":417,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":435,"src":"8344:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":416,"name":"uint128","nodeType":"ElementaryTypeName","src":"8344:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"value":null,"visibility":"internal"}],"src":"8332:22:0"},"returnParameters":{"id":421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":420,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":435,"src":"8378:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":419,"name":"uint128","nodeType":"ElementaryTypeName","src":"8378:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"value":null,"visibility":"internal"}],"src":"8377:11:0"},"scope":458,"src":"8320:139:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":456,"nodeType":"Block","src":"8534:67:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":445,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":442,"src":"8553:1:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":446,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":437,"src":"8557:1:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"id":447,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"8561:1:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"8557:5:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"8553:9:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"id":450,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8552:11:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"id":451,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":437,"src":"8567:1:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"8552:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e674d6174683a20556e646572666c6f77","id":453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8570:23:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_00354eeca4367367797d07bf5ab6743c0cc453fe689bbb72132c3c4e2b5612aa","typeString":"literal_string \"BoringMath: Underflow\""},"value":"BoringMath: Underflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_00354eeca4367367797d07bf5ab6743c0cc453fe689bbb72132c3c4e2b5612aa","typeString":"literal_string \"BoringMath: Underflow\""}],"id":444,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8544:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8544:50:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":455,"nodeType":"ExpressionStatement","src":"8544:50:0"}]},"documentation":null,"id":457,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":437,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":457,"src":"8478:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":436,"name":"uint128","nodeType":"ElementaryTypeName","src":"8478:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"value":null,"visibility":"internal"},{"constant":false,"id":439,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":457,"src":"8489:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":438,"name":"uint128","nodeType":"ElementaryTypeName","src":"8489:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"value":null,"visibility":"internal"}],"src":"8477:22:0"},"returnParameters":{"id":443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":442,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":457,"src":"8523:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":441,"name":"uint128","nodeType":"ElementaryTypeName","src":"8523:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"value":null,"visibility":"internal"}],"src":"8522:11:0"},"scope":458,"src":"8465:136:0","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3138,"src":"8292:311:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":459,"nodeType":"StructuredDocumentation","src":"8605:98:0","text":"@notice A library for performing overflow-/underflow-safe addition and subtraction on uint64."},"fullyImplemented":true,"id":504,"linearizedBaseContracts":[504],"name":"BoringMath64","nodeType":"ContractDefinition","nodes":[{"body":{"id":480,"nodeType":"Block","src":"8796:70:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":469,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"8815:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":470,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"8819:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"id":471,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"8823:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"8819:5:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"8815:9:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"id":474,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8814:11:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"id":475,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"8829:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"8814:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e674d6174683a20416464204f766572666c6f77","id":477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8832:26:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_77ffeda554f4c047bf45dac1a596ee270f922490aa5e98c6ba2b9599856e6fdf","typeString":"literal_string \"BoringMath: Add Overflow\""},"value":"BoringMath: Add Overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_77ffeda554f4c047bf45dac1a596ee270f922490aa5e98c6ba2b9599856e6fdf","typeString":"literal_string \"BoringMath: Add Overflow\""}],"id":468,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8806:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8806:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":479,"nodeType":"ExpressionStatement","src":"8806:53:0"}]},"documentation":null,"id":481,"implemented":true,"kind":"function","modifiers":[],"name":"add","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":461,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":481,"src":"8743:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":460,"name":"uint64","nodeType":"ElementaryTypeName","src":"8743:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":null,"visibility":"internal"},{"constant":false,"id":463,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":481,"src":"8753:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":462,"name":"uint64","nodeType":"ElementaryTypeName","src":"8753:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":null,"visibility":"internal"}],"src":"8742:20:0"},"returnParameters":{"id":467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":466,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":481,"src":"8786:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":465,"name":"uint64","nodeType":"ElementaryTypeName","src":"8786:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":null,"visibility":"internal"}],"src":"8785:10:0"},"scope":504,"src":"8730:136:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":502,"nodeType":"Block","src":"8938:67:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":491,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":488,"src":"8957:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":492,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":483,"src":"8961:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"id":493,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"8965:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"8961:5:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"8957:9:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"id":496,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8956:11:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"id":497,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":483,"src":"8971:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"8956:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e674d6174683a20556e646572666c6f77","id":499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8974:23:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_00354eeca4367367797d07bf5ab6743c0cc453fe689bbb72132c3c4e2b5612aa","typeString":"literal_string \"BoringMath: Underflow\""},"value":"BoringMath: Underflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_00354eeca4367367797d07bf5ab6743c0cc453fe689bbb72132c3c4e2b5612aa","typeString":"literal_string \"BoringMath: Underflow\""}],"id":490,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8948:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8948:50:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":501,"nodeType":"ExpressionStatement","src":"8948:50:0"}]},"documentation":null,"id":503,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":483,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":503,"src":"8885:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":482,"name":"uint64","nodeType":"ElementaryTypeName","src":"8885:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":null,"visibility":"internal"},{"constant":false,"id":485,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":503,"src":"8895:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":484,"name":"uint64","nodeType":"ElementaryTypeName","src":"8895:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":null,"visibility":"internal"}],"src":"8884:20:0"},"returnParameters":{"id":489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":488,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":503,"src":"8928:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":487,"name":"uint64","nodeType":"ElementaryTypeName","src":"8928:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":null,"visibility":"internal"}],"src":"8927:10:0"},"scope":504,"src":"8872:133:0","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3138,"src":"8703:304:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":505,"nodeType":"StructuredDocumentation","src":"9009:98:0","text":"@notice A library for performing overflow-/underflow-safe addition and subtraction on uint32."},"fullyImplemented":true,"id":550,"linearizedBaseContracts":[550],"name":"BoringMath32","nodeType":"ContractDefinition","nodes":[{"body":{"id":526,"nodeType":"Block","src":"9200:70:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":515,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":512,"src":"9219:1:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":516,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":507,"src":"9223:1:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"id":517,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":509,"src":"9227:1:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"9223:5:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"9219:9:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"id":520,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9218:11:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"id":521,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":509,"src":"9233:1:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"9218:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e674d6174683a20416464204f766572666c6f77","id":523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9236:26:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_77ffeda554f4c047bf45dac1a596ee270f922490aa5e98c6ba2b9599856e6fdf","typeString":"literal_string \"BoringMath: Add Overflow\""},"value":"BoringMath: Add Overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_77ffeda554f4c047bf45dac1a596ee270f922490aa5e98c6ba2b9599856e6fdf","typeString":"literal_string \"BoringMath: Add Overflow\""}],"id":514,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9210:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9210:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":525,"nodeType":"ExpressionStatement","src":"9210:53:0"}]},"documentation":null,"id":527,"implemented":true,"kind":"function","modifiers":[],"name":"add","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":510,"nodeType":"ParameterList","parameters":[{"constant":false,"id":507,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":527,"src":"9147:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":506,"name":"uint32","nodeType":"ElementaryTypeName","src":"9147:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":null,"visibility":"internal"},{"constant":false,"id":509,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":527,"src":"9157:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":508,"name":"uint32","nodeType":"ElementaryTypeName","src":"9157:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":null,"visibility":"internal"}],"src":"9146:20:0"},"returnParameters":{"id":513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":512,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":527,"src":"9190:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":511,"name":"uint32","nodeType":"ElementaryTypeName","src":"9190:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":null,"visibility":"internal"}],"src":"9189:10:0"},"scope":550,"src":"9134:136:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":548,"nodeType":"Block","src":"9342:67:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":537,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":534,"src":"9361:1:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":538,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"9365:1:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"id":539,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"9369:1:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"9365:5:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"9361:9:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"id":542,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9360:11:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"id":543,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"9375:1:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"9360:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e674d6174683a20556e646572666c6f77","id":545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9378:23:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_00354eeca4367367797d07bf5ab6743c0cc453fe689bbb72132c3c4e2b5612aa","typeString":"literal_string \"BoringMath: Underflow\""},"value":"BoringMath: Underflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_00354eeca4367367797d07bf5ab6743c0cc453fe689bbb72132c3c4e2b5612aa","typeString":"literal_string \"BoringMath: Underflow\""}],"id":536,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9352:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9352:50:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":547,"nodeType":"ExpressionStatement","src":"9352:50:0"}]},"documentation":null,"id":549,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":529,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":549,"src":"9289:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":528,"name":"uint32","nodeType":"ElementaryTypeName","src":"9289:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":null,"visibility":"internal"},{"constant":false,"id":531,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":549,"src":"9299:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":530,"name":"uint32","nodeType":"ElementaryTypeName","src":"9299:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":null,"visibility":"internal"}],"src":"9288:20:0"},"returnParameters":{"id":535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":534,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":549,"src":"9332:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":533,"name":"uint32","nodeType":"ElementaryTypeName","src":"9332:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":null,"visibility":"internal"}],"src":"9331:10:0"},"scope":550,"src":"9276:133:0","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3138,"src":"9107:304:0"},{"canonicalName":"Rebase","id":555,"members":[{"constant":false,"id":552,"mutability":"mutable","name":"elastic","nodeType":"VariableDeclaration","overrides":null,"scope":555,"src":"9543:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":551,"name":"uint128","nodeType":"ElementaryTypeName","src":"9543:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"value":null,"visibility":"internal"},{"constant":false,"id":554,"mutability":"mutable","name":"base","nodeType":"VariableDeclaration","overrides":null,"scope":555,"src":"9564:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":553,"name":"uint128","nodeType":"ElementaryTypeName","src":"9564:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"value":null,"visibility":"internal"}],"name":"Rebase","nodeType":"StructDefinition","scope":3138,"src":"9523:56:0","visibility":"public"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":556,"nodeType":"StructuredDocumentation","src":"9581:68:0","text":"@notice A rebasing library using overflow-/underflow-safe math."},"fullyImplemented":true,"id":903,"linearizedBaseContracts":[903],"name":"RebaseLibrary","nodeType":"ContractDefinition","nodes":[{"id":559,"libraryName":{"contractScope":null,"id":557,"name":"BoringMath","nodeType":"UserDefinedTypeName","referencedDeclaration":412,"src":"9683:10:0","typeDescriptions":{"typeIdentifier":"t_contract$_BoringMath_$412","typeString":"library BoringMath"}},"nodeType":"UsingForDirective","src":"9677:29:0","typeName":{"id":558,"name":"uint256","nodeType":"ElementaryTypeName","src":"9698:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"id":562,"libraryName":{"contractScope":null,"id":560,"name":"BoringMath128","nodeType":"UserDefinedTypeName","referencedDeclaration":458,"src":"9717:13:0","typeDescriptions":{"typeIdentifier":"t_contract$_BoringMath128_$458","typeString":"library BoringMath128"}},"nodeType":"UsingForDirective","src":"9711:32:0","typeName":{"id":561,"name":"uint128","nodeType":"ElementaryTypeName","src":"9735:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}},{"body":{"id":617,"nodeType":"Block","src":"9968:283:0","statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":574,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"9982:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":575,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"elastic","nodeType":"MemberAccess","referencedDeclaration":552,"src":"9982:13:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9999:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9982:18:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":615,"nodeType":"Block","src":"10047:198:0","statements":[{"expression":{"argumentTypes":null,"id":592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":583,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"10061:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":586,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"10080:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":587,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"base","nodeType":"MemberAccess","referencedDeclaration":554,"src":"10080:10:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"id":584,"name":"elastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"10068:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":333,"src":"10068:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10068:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":589,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"10094:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":590,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"elastic","nodeType":"MemberAccess","referencedDeclaration":552,"src":"10094:13:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"10068:39:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10061:46:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":593,"nodeType":"ExpressionStatement","src":"10061:46:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":594,"name":"roundUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":569,"src":"10125:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":597,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"10145:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":598,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"elastic","nodeType":"MemberAccess","referencedDeclaration":552,"src":"10145:13:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"id":595,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"10136:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":333,"src":"10136:8:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10136:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":600,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"10162:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":601,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"base","nodeType":"MemberAccess","referencedDeclaration":554,"src":"10162:10:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"10136:36:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"argumentTypes":null,"id":603,"name":"elastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"10175:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10136:46:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10125:57:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":614,"nodeType":"IfStatement","src":"10121:114:0","trueBody":{"id":613,"nodeType":"Block","src":"10184:51:0","statements":[{"expression":{"argumentTypes":null,"id":611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":606,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"10202:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"31","id":609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10218:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"argumentTypes":null,"id":607,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"10209:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":283,"src":"10209:8:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10209:11:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10202:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":612,"nodeType":"ExpressionStatement","src":"10202:18:0"}]}}]},"id":616,"nodeType":"IfStatement","src":"9978:267:0","trueBody":{"id":582,"nodeType":"Block","src":"10002:39:0","statements":[{"expression":{"argumentTypes":null,"id":580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":578,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"10016:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":579,"name":"elastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"10023:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10016:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":581,"nodeType":"ExpressionStatement","src":"10016:14:0"}]}}]},"documentation":{"id":563,"nodeType":"StructuredDocumentation","src":"9749:79:0","text":"@notice Calculates the base value in relationship to `elastic` and `total`."},"id":618,"implemented":true,"kind":"function","modifiers":[],"name":"toBase","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":565,"mutability":"mutable","name":"total","nodeType":"VariableDeclaration","overrides":null,"scope":618,"src":"9858:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase"},"typeName":{"contractScope":null,"id":564,"name":"Rebase","nodeType":"UserDefinedTypeName","referencedDeclaration":555,"src":"9858:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage_ptr","typeString":"struct Rebase"}},"value":null,"visibility":"internal"},{"constant":false,"id":567,"mutability":"mutable","name":"elastic","nodeType":"VariableDeclaration","overrides":null,"scope":618,"src":"9887:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":566,"name":"uint256","nodeType":"ElementaryTypeName","src":"9887:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":569,"mutability":"mutable","name":"roundUp","nodeType":"VariableDeclaration","overrides":null,"scope":618,"src":"9912:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":568,"name":"bool","nodeType":"ElementaryTypeName","src":"9912:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"9848:82:0"},"returnParameters":{"id":573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":572,"mutability":"mutable","name":"base","nodeType":"VariableDeclaration","overrides":null,"scope":618,"src":"9954:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":571,"name":"uint256","nodeType":"ElementaryTypeName","src":"9954:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"9953:14:0"},"scope":903,"src":"9833:418:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":673,"nodeType":"Block","src":"10479:286:0","statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":630,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"10493:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":631,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"base","nodeType":"MemberAccess","referencedDeclaration":554,"src":"10493:10:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10507:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10493:15:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":671,"nodeType":"Block","src":"10555:204:0","statements":[{"expression":{"argumentTypes":null,"id":648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":639,"name":"elastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"10569:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":642,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"10588:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":643,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"elastic","nodeType":"MemberAccess","referencedDeclaration":552,"src":"10588:13:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"id":640,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":623,"src":"10579:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":333,"src":"10579:8:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":644,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10579:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":645,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"10605:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":646,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"base","nodeType":"MemberAccess","referencedDeclaration":554,"src":"10605:10:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"10579:36:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10569:46:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":649,"nodeType":"ExpressionStatement","src":"10569:46:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":650,"name":"roundUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"10633:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":653,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"10656:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":654,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"base","nodeType":"MemberAccess","referencedDeclaration":554,"src":"10656:10:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"id":651,"name":"elastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"10644:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":333,"src":"10644:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10644:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":656,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"10670:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":657,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"elastic","nodeType":"MemberAccess","referencedDeclaration":552,"src":"10670:13:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"10644:39:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"argumentTypes":null,"id":659,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":623,"src":"10686:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10644:46:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10633:57:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":670,"nodeType":"IfStatement","src":"10629:120:0","trueBody":{"id":669,"nodeType":"Block","src":"10692:57:0","statements":[{"expression":{"argumentTypes":null,"id":667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":662,"name":"elastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"10710:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"31","id":665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10732:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"argumentTypes":null,"id":663,"name":"elastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"10720:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":283,"src":"10720:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10720:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10710:24:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":668,"nodeType":"ExpressionStatement","src":"10710:24:0"}]}}]},"id":672,"nodeType":"IfStatement","src":"10489:270:0","trueBody":{"id":638,"nodeType":"Block","src":"10510:39:0","statements":[{"expression":{"argumentTypes":null,"id":636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":634,"name":"elastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"10524:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":635,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":623,"src":"10534:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":637,"nodeType":"ExpressionStatement","src":"10524:14:0"}]}}]},"documentation":{"id":619,"nodeType":"StructuredDocumentation","src":"10257:79:0","text":"@notice Calculates the elastic value in relationship to `base` and `total`."},"id":674,"implemented":true,"kind":"function","modifiers":[],"name":"toElastic","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":621,"mutability":"mutable","name":"total","nodeType":"VariableDeclaration","overrides":null,"scope":674,"src":"10369:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase"},"typeName":{"contractScope":null,"id":620,"name":"Rebase","nodeType":"UserDefinedTypeName","referencedDeclaration":555,"src":"10369:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage_ptr","typeString":"struct Rebase"}},"value":null,"visibility":"internal"},{"constant":false,"id":623,"mutability":"mutable","name":"base","nodeType":"VariableDeclaration","overrides":null,"scope":674,"src":"10398:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":622,"name":"uint256","nodeType":"ElementaryTypeName","src":"10398:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":625,"mutability":"mutable","name":"roundUp","nodeType":"VariableDeclaration","overrides":null,"scope":674,"src":"10420:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":624,"name":"bool","nodeType":"ElementaryTypeName","src":"10420:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"10359:79:0"},"returnParameters":{"id":629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":628,"mutability":"mutable","name":"elastic","nodeType":"VariableDeclaration","overrides":null,"scope":674,"src":"10462:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":627,"name":"uint256","nodeType":"ElementaryTypeName","src":"10462:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"10461:17:0"},"scope":903,"src":"10341:424:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":724,"nodeType":"Block","src":"11076:196:0","statements":[{"expression":{"argumentTypes":null,"id":694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":688,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"11086:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":690,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"11100:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},{"argumentTypes":null,"id":691,"name":"elastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"11107:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":692,"name":"roundUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":681,"src":"11116:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":689,"name":"toBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"11093:6:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Rebase_$555_memory_ptr_$_t_uint256_$_t_bool_$returns$_t_uint256_$","typeString":"function (struct Rebase memory,uint256,bool) pure returns (uint256)"}},"id":693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11093:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11086:38:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":695,"nodeType":"ExpressionStatement","src":"11086:38:0"},{"expression":{"argumentTypes":null,"id":706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":696,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"11134:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":698,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"elastic","nodeType":"MemberAccess","referencedDeclaration":552,"src":"11134:13:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":702,"name":"elastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"11168:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"to128","nodeType":"MemberAccess","referencedDeclaration":359,"src":"11168:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint128_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint128)"}},"id":704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11168:15:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":699,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"11150:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":700,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"elastic","nodeType":"MemberAccess","referencedDeclaration":552,"src":"11150:13:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":435,"src":"11150:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint128_$_t_uint128_$returns$_t_uint128_$bound_to$_t_uint128_$","typeString":"function (uint128,uint128) pure returns (uint128)"}},"id":705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11150:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"11134:50:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":707,"nodeType":"ExpressionStatement","src":"11134:50:0"},{"expression":{"argumentTypes":null,"id":718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":708,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"11194:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":710,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"base","nodeType":"MemberAccess","referencedDeclaration":554,"src":"11194:10:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":714,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"11222:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"to128","nodeType":"MemberAccess","referencedDeclaration":359,"src":"11222:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint128_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint128)"}},"id":716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11222:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":711,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"11207:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":712,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"base","nodeType":"MemberAccess","referencedDeclaration":554,"src":"11207:10:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":435,"src":"11207:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint128_$_t_uint128_$returns$_t_uint128_$bound_to$_t_uint128_$","typeString":"function (uint128,uint128) pure returns (uint128)"}},"id":717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11207:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"11194:41:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":719,"nodeType":"ExpressionStatement","src":"11194:41:0"},{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":720,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"11253:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},{"argumentTypes":null,"id":721,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"11260:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":722,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11252:13:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_struct$_Rebase_$555_memory_ptr_$_t_uint256_$","typeString":"tuple(struct Rebase memory,uint256)"}},"functionReturnParameters":687,"id":723,"nodeType":"Return","src":"11245:20:0"}]},"documentation":{"id":675,"nodeType":"StructuredDocumentation","src":"10771:153:0","text":"@notice Add `elastic` to `total` and doubles `total.base`.\n @return (Rebase) The new total.\n @return base in relationship to `elastic`."},"id":725,"implemented":true,"kind":"function","modifiers":[],"name":"add","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":677,"mutability":"mutable","name":"total","nodeType":"VariableDeclaration","overrides":null,"scope":725,"src":"10951:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase"},"typeName":{"contractScope":null,"id":676,"name":"Rebase","nodeType":"UserDefinedTypeName","referencedDeclaration":555,"src":"10951:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage_ptr","typeString":"struct Rebase"}},"value":null,"visibility":"internal"},{"constant":false,"id":679,"mutability":"mutable","name":"elastic","nodeType":"VariableDeclaration","overrides":null,"scope":725,"src":"10980:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":678,"name":"uint256","nodeType":"ElementaryTypeName","src":"10980:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":681,"mutability":"mutable","name":"roundUp","nodeType":"VariableDeclaration","overrides":null,"scope":725,"src":"11005:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":680,"name":"bool","nodeType":"ElementaryTypeName","src":"11005:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"10941:82:0"},"returnParameters":{"id":687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":684,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":725,"src":"11047:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase"},"typeName":{"contractScope":null,"id":683,"name":"Rebase","nodeType":"UserDefinedTypeName","referencedDeclaration":555,"src":"11047:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage_ptr","typeString":"struct Rebase"}},"value":null,"visibility":"internal"},{"constant":false,"id":686,"mutability":"mutable","name":"base","nodeType":"VariableDeclaration","overrides":null,"scope":725,"src":"11062:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":685,"name":"uint256","nodeType":"ElementaryTypeName","src":"11062:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"11046:29:0"},"scope":903,"src":"10929:343:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":775,"nodeType":"Block","src":"11584:202:0","statements":[{"expression":{"argumentTypes":null,"id":745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":739,"name":"elastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"11594:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":741,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":728,"src":"11614:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},{"argumentTypes":null,"id":742,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"11621:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":743,"name":"roundUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":732,"src":"11627:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":740,"name":"toElastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":674,"src":"11604:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Rebase_$555_memory_ptr_$_t_uint256_$_t_bool_$returns$_t_uint256_$","typeString":"function (struct Rebase memory,uint256,bool) pure returns (uint256)"}},"id":744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11604:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11594:41:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":746,"nodeType":"ExpressionStatement","src":"11594:41:0"},{"expression":{"argumentTypes":null,"id":757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":747,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":728,"src":"11645:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":749,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"elastic","nodeType":"MemberAccess","referencedDeclaration":552,"src":"11645:13:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":753,"name":"elastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"11679:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"to128","nodeType":"MemberAccess","referencedDeclaration":359,"src":"11679:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint128_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint128)"}},"id":755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11679:15:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":750,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":728,"src":"11661:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":751,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"elastic","nodeType":"MemberAccess","referencedDeclaration":552,"src":"11661:13:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":457,"src":"11661:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint128_$_t_uint128_$returns$_t_uint128_$bound_to$_t_uint128_$","typeString":"function (uint128,uint128) pure returns (uint128)"}},"id":756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11661:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"11645:50:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":758,"nodeType":"ExpressionStatement","src":"11645:50:0"},{"expression":{"argumentTypes":null,"id":769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":759,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":728,"src":"11705:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":761,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"base","nodeType":"MemberAccess","referencedDeclaration":554,"src":"11705:10:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":765,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"11733:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"to128","nodeType":"MemberAccess","referencedDeclaration":359,"src":"11733:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint128_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint128)"}},"id":767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11733:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":762,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":728,"src":"11718:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":763,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"base","nodeType":"MemberAccess","referencedDeclaration":554,"src":"11718:10:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":457,"src":"11718:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint128_$_t_uint128_$returns$_t_uint128_$bound_to$_t_uint128_$","typeString":"function (uint128,uint128) pure returns (uint128)"}},"id":768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11718:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"11705:41:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":770,"nodeType":"ExpressionStatement","src":"11705:41:0"},{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":771,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":728,"src":"11764:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},{"argumentTypes":null,"id":772,"name":"elastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"11771:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":773,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11763:16:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_struct$_Rebase_$555_memory_ptr_$_t_uint256_$","typeString":"tuple(struct Rebase memory,uint256)"}},"functionReturnParameters":738,"id":774,"nodeType":"Return","src":"11756:23:0"}]},"documentation":{"id":726,"nodeType":"StructuredDocumentation","src":"11278:154:0","text":"@notice Sub `base` from `total` and update `total.elastic`.\n @return (Rebase) The new total.\n @return elastic in relationship to `base`."},"id":776,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":728,"mutability":"mutable","name":"total","nodeType":"VariableDeclaration","overrides":null,"scope":776,"src":"11459:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase"},"typeName":{"contractScope":null,"id":727,"name":"Rebase","nodeType":"UserDefinedTypeName","referencedDeclaration":555,"src":"11459:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage_ptr","typeString":"struct Rebase"}},"value":null,"visibility":"internal"},{"constant":false,"id":730,"mutability":"mutable","name":"base","nodeType":"VariableDeclaration","overrides":null,"scope":776,"src":"11488:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":729,"name":"uint256","nodeType":"ElementaryTypeName","src":"11488:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":732,"mutability":"mutable","name":"roundUp","nodeType":"VariableDeclaration","overrides":null,"scope":776,"src":"11510:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":731,"name":"bool","nodeType":"ElementaryTypeName","src":"11510:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"11449:79:0"},"returnParameters":{"id":738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":735,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":776,"src":"11552:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase"},"typeName":{"contractScope":null,"id":734,"name":"Rebase","nodeType":"UserDefinedTypeName","referencedDeclaration":555,"src":"11552:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage_ptr","typeString":"struct Rebase"}},"value":null,"visibility":"internal"},{"constant":false,"id":737,"mutability":"mutable","name":"elastic","nodeType":"VariableDeclaration","overrides":null,"scope":776,"src":"11567:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":736,"name":"uint256","nodeType":"ElementaryTypeName","src":"11567:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"11551:32:0"},"scope":903,"src":"11437:349:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":814,"nodeType":"Block","src":"11978:140:0","statements":[{"expression":{"argumentTypes":null,"id":798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":788,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"11988:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":790,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"elastic","nodeType":"MemberAccess","referencedDeclaration":552,"src":"11988:13:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":794,"name":"elastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":781,"src":"12022:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"to128","nodeType":"MemberAccess","referencedDeclaration":359,"src":"12022:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint128_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint128)"}},"id":796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12022:15:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":791,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"12004:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":792,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"elastic","nodeType":"MemberAccess","referencedDeclaration":552,"src":"12004:13:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":435,"src":"12004:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint128_$_t_uint128_$returns$_t_uint128_$bound_to$_t_uint128_$","typeString":"function (uint128,uint128) pure returns (uint128)"}},"id":797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12004:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"11988:50:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":799,"nodeType":"ExpressionStatement","src":"11988:50:0"},{"expression":{"argumentTypes":null,"id":810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":800,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"12048:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":802,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"base","nodeType":"MemberAccess","referencedDeclaration":554,"src":"12048:10:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":806,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"12076:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"to128","nodeType":"MemberAccess","referencedDeclaration":359,"src":"12076:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint128_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint128)"}},"id":808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12076:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":803,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"12061:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":804,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"base","nodeType":"MemberAccess","referencedDeclaration":554,"src":"12061:10:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":435,"src":"12061:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint128_$_t_uint128_$returns$_t_uint128_$bound_to$_t_uint128_$","typeString":"function (uint128,uint128) pure returns (uint128)"}},"id":809,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12061:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"12048:41:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":811,"nodeType":"ExpressionStatement","src":"12048:41:0"},{"expression":{"argumentTypes":null,"id":812,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"12106:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"functionReturnParameters":787,"id":813,"nodeType":"Return","src":"12099:12:0"}]},"documentation":{"id":777,"nodeType":"StructuredDocumentation","src":"11792:48:0","text":"@notice Add `elastic` and `base` to `total`."},"id":815,"implemented":true,"kind":"function","modifiers":[],"name":"add","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":779,"mutability":"mutable","name":"total","nodeType":"VariableDeclaration","overrides":null,"scope":815,"src":"11867:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase"},"typeName":{"contractScope":null,"id":778,"name":"Rebase","nodeType":"UserDefinedTypeName","referencedDeclaration":555,"src":"11867:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage_ptr","typeString":"struct Rebase"}},"value":null,"visibility":"internal"},{"constant":false,"id":781,"mutability":"mutable","name":"elastic","nodeType":"VariableDeclaration","overrides":null,"scope":815,"src":"11896:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":780,"name":"uint256","nodeType":"ElementaryTypeName","src":"11896:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":783,"mutability":"mutable","name":"base","nodeType":"VariableDeclaration","overrides":null,"scope":815,"src":"11921:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":782,"name":"uint256","nodeType":"ElementaryTypeName","src":"11921:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"11857:82:0"},"returnParameters":{"id":787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":786,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":815,"src":"11963:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase"},"typeName":{"contractScope":null,"id":785,"name":"Rebase","nodeType":"UserDefinedTypeName","referencedDeclaration":555,"src":"11963:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage_ptr","typeString":"struct Rebase"}},"value":null,"visibility":"internal"}],"src":"11962:15:0"},"scope":903,"src":"11845:273:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":853,"nodeType":"Block","src":"12315:140:0","statements":[{"expression":{"argumentTypes":null,"id":837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":827,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"12325:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":829,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"elastic","nodeType":"MemberAccess","referencedDeclaration":552,"src":"12325:13:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":833,"name":"elastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"12359:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"to128","nodeType":"MemberAccess","referencedDeclaration":359,"src":"12359:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint128_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint128)"}},"id":835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12359:15:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":830,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"12341:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":831,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"elastic","nodeType":"MemberAccess","referencedDeclaration":552,"src":"12341:13:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":457,"src":"12341:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint128_$_t_uint128_$returns$_t_uint128_$bound_to$_t_uint128_$","typeString":"function (uint128,uint128) pure returns (uint128)"}},"id":836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12341:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"12325:50:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":838,"nodeType":"ExpressionStatement","src":"12325:50:0"},{"expression":{"argumentTypes":null,"id":849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":839,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"12385:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":841,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"base","nodeType":"MemberAccess","referencedDeclaration":554,"src":"12385:10:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":845,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"12413:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"to128","nodeType":"MemberAccess","referencedDeclaration":359,"src":"12413:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint128_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint128)"}},"id":847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12413:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":842,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"12398:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":843,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"base","nodeType":"MemberAccess","referencedDeclaration":554,"src":"12398:10:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":457,"src":"12398:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint128_$_t_uint128_$returns$_t_uint128_$bound_to$_t_uint128_$","typeString":"function (uint128,uint128) pure returns (uint128)"}},"id":848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12398:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"12385:41:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":850,"nodeType":"ExpressionStatement","src":"12385:41:0"},{"expression":{"argumentTypes":null,"id":851,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"12443:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"functionReturnParameters":826,"id":852,"nodeType":"Return","src":"12436:12:0"}]},"documentation":{"id":816,"nodeType":"StructuredDocumentation","src":"12124:53:0","text":"@notice Subtract `elastic` and `base` to `total`."},"id":854,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":818,"mutability":"mutable","name":"total","nodeType":"VariableDeclaration","overrides":null,"scope":854,"src":"12204:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase"},"typeName":{"contractScope":null,"id":817,"name":"Rebase","nodeType":"UserDefinedTypeName","referencedDeclaration":555,"src":"12204:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage_ptr","typeString":"struct Rebase"}},"value":null,"visibility":"internal"},{"constant":false,"id":820,"mutability":"mutable","name":"elastic","nodeType":"VariableDeclaration","overrides":null,"scope":854,"src":"12233:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":819,"name":"uint256","nodeType":"ElementaryTypeName","src":"12233:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":822,"mutability":"mutable","name":"base","nodeType":"VariableDeclaration","overrides":null,"scope":854,"src":"12258:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":821,"name":"uint256","nodeType":"ElementaryTypeName","src":"12258:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"12194:82:0"},"returnParameters":{"id":826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":825,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":854,"src":"12300:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase"},"typeName":{"contractScope":null,"id":824,"name":"Rebase","nodeType":"UserDefinedTypeName","referencedDeclaration":555,"src":"12300:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage_ptr","typeString":"struct Rebase"}},"value":null,"visibility":"internal"}],"src":"12299:15:0"},"scope":903,"src":"12182:273:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":877,"nodeType":"Block","src":"12673:80:0","statements":[{"expression":{"argumentTypes":null,"id":875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":864,"name":"newElastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"12683:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":865,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"12696:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage_ptr","typeString":"struct Rebase storage pointer"}},"id":866,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"elastic","nodeType":"MemberAccess","referencedDeclaration":552,"src":"12696:13:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":870,"name":"elastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":859,"src":"12730:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"to128","nodeType":"MemberAccess","referencedDeclaration":359,"src":"12730:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint128_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint128)"}},"id":872,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12730:15:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":867,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"12712:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage_ptr","typeString":"struct Rebase storage pointer"}},"id":868,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"elastic","nodeType":"MemberAccess","referencedDeclaration":552,"src":"12712:13:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":435,"src":"12712:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint128_$_t_uint128_$returns$_t_uint128_$bound_to$_t_uint128_$","typeString":"function (uint128,uint128) pure returns (uint128)"}},"id":873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12712:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"12696:50:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"12683:63:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":876,"nodeType":"ExpressionStatement","src":"12683:63:0"}]},"documentation":{"id":855,"nodeType":"StructuredDocumentation","src":"12461:110:0","text":"@notice Add `elastic` to `total` and update storage.\n @return newElastic Returns updated `elastic`."},"id":878,"implemented":true,"kind":"function","modifiers":[],"name":"addElastic","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":857,"mutability":"mutable","name":"total","nodeType":"VariableDeclaration","overrides":null,"scope":878,"src":"12596:20:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage_ptr","typeString":"struct Rebase"},"typeName":{"contractScope":null,"id":856,"name":"Rebase","nodeType":"UserDefinedTypeName","referencedDeclaration":555,"src":"12596:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage_ptr","typeString":"struct Rebase"}},"value":null,"visibility":"internal"},{"constant":false,"id":859,"mutability":"mutable","name":"elastic","nodeType":"VariableDeclaration","overrides":null,"scope":878,"src":"12618:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":858,"name":"uint256","nodeType":"ElementaryTypeName","src":"12618:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"12595:39:0"},"returnParameters":{"id":863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":862,"mutability":"mutable","name":"newElastic","nodeType":"VariableDeclaration","overrides":null,"scope":878,"src":"12653:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":861,"name":"uint256","nodeType":"ElementaryTypeName","src":"12653:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"12652:20:0"},"scope":903,"src":"12576:177:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":901,"nodeType":"Block","src":"12978:80:0","statements":[{"expression":{"argumentTypes":null,"id":899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":888,"name":"newElastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":886,"src":"12988:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":889,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":881,"src":"13001:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage_ptr","typeString":"struct Rebase storage pointer"}},"id":890,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"elastic","nodeType":"MemberAccess","referencedDeclaration":552,"src":"13001:13:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":894,"name":"elastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"13035:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"to128","nodeType":"MemberAccess","referencedDeclaration":359,"src":"13035:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint128_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint128)"}},"id":896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13035:15:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":891,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":881,"src":"13017:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage_ptr","typeString":"struct Rebase storage pointer"}},"id":892,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"elastic","nodeType":"MemberAccess","referencedDeclaration":552,"src":"13017:13:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":457,"src":"13017:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint128_$_t_uint128_$returns$_t_uint128_$bound_to$_t_uint128_$","typeString":"function (uint128,uint128) pure returns (uint128)"}},"id":897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13017:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"13001:50:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"12988:63:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":900,"nodeType":"ExpressionStatement","src":"12988:63:0"}]},"documentation":{"id":879,"nodeType":"StructuredDocumentation","src":"12759:117:0","text":"@notice Subtract `elastic` from `total` and update storage.\n @return newElastic Returns updated `elastic`."},"id":902,"implemented":true,"kind":"function","modifiers":[],"name":"subElastic","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":881,"mutability":"mutable","name":"total","nodeType":"VariableDeclaration","overrides":null,"scope":902,"src":"12901:20:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage_ptr","typeString":"struct Rebase"},"typeName":{"contractScope":null,"id":880,"name":"Rebase","nodeType":"UserDefinedTypeName","referencedDeclaration":555,"src":"12901:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage_ptr","typeString":"struct Rebase"}},"value":null,"visibility":"internal"},{"constant":false,"id":883,"mutability":"mutable","name":"elastic","nodeType":"VariableDeclaration","overrides":null,"scope":902,"src":"12923:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":882,"name":"uint256","nodeType":"ElementaryTypeName","src":"12923:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"12900:39:0"},"returnParameters":{"id":887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":886,"mutability":"mutable","name":"newElastic","nodeType":"VariableDeclaration","overrides":null,"scope":902,"src":"12958:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":885,"name":"uint256","nodeType":"ElementaryTypeName","src":"12958:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"12957:20:0"},"scope":903,"src":"12881:177:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":3138,"src":"9649:3411:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":null,"fullyImplemented":true,"id":908,"linearizedBaseContracts":[908],"name":"BoringOwnableData","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"8da5cb5b","id":905,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","overrides":null,"scope":908,"src":"13346:20:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":904,"name":"address","nodeType":"ElementaryTypeName","src":"13346:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"public"},{"constant":false,"functionSelector":"e30c3978","id":907,"mutability":"mutable","name":"pendingOwner","nodeType":"VariableDeclaration","overrides":null,"scope":908,"src":"13372:27:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":906,"name":"address","nodeType":"ElementaryTypeName","src":"13372:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"public"}],"scope":3138,"src":"13313:89:0"},{"abstract":false,"baseContracts":[{"arguments":null,"baseName":{"contractScope":null,"id":909,"name":"BoringOwnableData","nodeType":"UserDefinedTypeName","referencedDeclaration":908,"src":"13430:17:0","typeDescriptions":{"typeIdentifier":"t_contract$_BoringOwnableData_$908","typeString":"contract BoringOwnableData"}},"id":910,"nodeType":"InheritanceSpecifier","src":"13430:17:0"}],"contractDependencies":[908],"contractKind":"contract","documentation":null,"fullyImplemented":true,"id":1031,"linearizedBaseContracts":[1031,908],"name":"BoringOwnable","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":null,"id":916,"name":"OwnershipTransferred","nodeType":"EventDefinition","parameters":{"id":915,"nodeType":"ParameterList","parameters":[{"constant":false,"id":912,"indexed":true,"mutability":"mutable","name":"previousOwner","nodeType":"VariableDeclaration","overrides":null,"scope":916,"src":"13481:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":911,"name":"address","nodeType":"ElementaryTypeName","src":"13481:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":914,"indexed":true,"mutability":"mutable","name":"newOwner","nodeType":"VariableDeclaration","overrides":null,"scope":916,"src":"13512:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":913,"name":"address","nodeType":"ElementaryTypeName","src":"13512:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"13480:57:0"},"src":"13454:84:0"},{"body":{"id":934,"nodeType":"Block","src":"13629:94:0","statements":[{"expression":{"argumentTypes":null,"id":923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":920,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":905,"src":"13639:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":921,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"13647:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"13647:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"13639:18:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":924,"nodeType":"ExpressionStatement","src":"13639:18:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13701:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":927,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13693:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":926,"name":"address","nodeType":"ElementaryTypeName","src":"13693:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13693:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":930,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"13705:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"13705:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":925,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"13672:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13672:44:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":933,"nodeType":"EmitStatement","src":"13667:49:0"}]},"documentation":{"id":917,"nodeType":"StructuredDocumentation","src":"13544:59:0","text":"@notice `owner` defaults to msg.sender on construction."},"id":935,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":918,"nodeType":"ParameterList","parameters":[],"src":"13619:2:0"},"returnParameters":{"id":919,"nodeType":"ParameterList","parameters":[],"src":"13629:0:0"},"scope":1031,"src":"13608:115:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":983,"nodeType":"Block","src":"14302:369:0","statements":[{"condition":{"argumentTypes":null,"id":947,"name":"direct","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"14316:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":981,"nodeType":"Block","src":"14594:71:0","statements":[{"expression":{"argumentTypes":null,"id":979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":977,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"14631:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":978,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"14646:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14631:23:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":980,"nodeType":"ExpressionStatement","src":"14631:23:0"}]},"id":982,"nodeType":"IfStatement","src":"14312:353:0","trueBody":{"id":976,"nodeType":"Block","src":"14324:264:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":949,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"14368:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14388:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":951,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14380:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":950,"name":"address","nodeType":"ElementaryTypeName","src":"14380:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14380:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"14368:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"argumentTypes":null,"id":955,"name":"renounce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":942,"src":"14394:8:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14368:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4f776e61626c653a207a65726f2061646472657373","id":957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14404:23:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_4bea69941b0d0257b3e89326ac37d51764d80d2e6e1a44e2d90b6a6f85f1b830","typeString":"literal_string \"Ownable: zero address\""},"value":"Ownable: zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4bea69941b0d0257b3e89326ac37d51764d80d2e6e1a44e2d90b6a6f85f1b830","typeString":"literal_string \"Ownable: zero address\""}],"id":948,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"14360:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14360:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":959,"nodeType":"ExpressionStatement","src":"14360:68:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":961,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":905,"src":"14492:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":962,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"14499:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":960,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"14471:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14471:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":964,"nodeType":"EmitStatement","src":"14466:42:0"},{"expression":{"argumentTypes":null,"id":967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":965,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":905,"src":"14522:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":966,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"14530:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14522:16:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":968,"nodeType":"ExpressionStatement","src":"14522:16:0"},{"expression":{"argumentTypes":null,"id":974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":969,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"14552:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14575:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":971,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14567:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":970,"name":"address","nodeType":"ElementaryTypeName","src":"14567:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14567:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"14552:25:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":975,"nodeType":"ExpressionStatement","src":"14552:25:0"}]}}]},"documentation":{"id":936,"nodeType":"StructuredDocumentation","src":"13729:448:0","text":"@notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\n Can only be invoked by the current `owner`.\n @param newOwner Address of the new owner.\n @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\n @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."},"functionSelector":"078dfbe7","id":984,"implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":945,"modifierName":{"argumentTypes":null,"id":944,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"14292:9:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"14292:9:0"}],"name":"transferOwnership","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":938,"mutability":"mutable","name":"newOwner","nodeType":"VariableDeclaration","overrides":null,"scope":984,"src":"14218:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":937,"name":"address","nodeType":"ElementaryTypeName","src":"14218:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":940,"mutability":"mutable","name":"direct","nodeType":"VariableDeclaration","overrides":null,"scope":984,"src":"14244:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":939,"name":"bool","nodeType":"ElementaryTypeName","src":"14244:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},{"constant":false,"id":942,"mutability":"mutable","name":"renounce","nodeType":"VariableDeclaration","overrides":null,"scope":984,"src":"14265:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":941,"name":"bool","nodeType":"ElementaryTypeName","src":"14265:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"14208:76:0"},"returnParameters":{"id":946,"nodeType":"ParameterList","parameters":[],"src":"14302:0:0"},"scope":1031,"src":"14182:489:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1016,"nodeType":"Block","src":"14783:297:0","statements":[{"assignments":[989],"declarations":[{"constant":false,"id":989,"mutability":"mutable","name":"_pendingOwner","nodeType":"VariableDeclaration","overrides":null,"scope":1016,"src":"14793:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":988,"name":"address","nodeType":"ElementaryTypeName","src":"14793:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"id":991,"initialValue":{"argumentTypes":null,"id":990,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"14817:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"14793:36:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":993,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"14866:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"14866:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":995,"name":"_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"14880:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14866:27:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572","id":997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14895:34:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_a7ec3208bb4c778bbdbdd3fdfe92b1d315d85dd01a9131ea9f648f906ac7a6b8","typeString":"literal_string \"Ownable: caller != pending owner\""},"value":"Ownable: caller != pending owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a7ec3208bb4c778bbdbdd3fdfe92b1d315d85dd01a9131ea9f648f906ac7a6b8","typeString":"literal_string \"Ownable: caller != pending owner\""}],"id":992,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"14858:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14858:72:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":999,"nodeType":"ExpressionStatement","src":"14858:72:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1001,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":905,"src":"14986:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1002,"name":"_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"14993:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1000,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"14965:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":1003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14965:42:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1004,"nodeType":"EmitStatement","src":"14960:47:0"},{"expression":{"argumentTypes":null,"id":1007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1005,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":905,"src":"15017:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1006,"name":"_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"15025:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15017:21:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1008,"nodeType":"ExpressionStatement","src":"15017:21:0"},{"expression":{"argumentTypes":null,"id":1014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1009,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"15048:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":1012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15071:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1011,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15063:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1010,"name":"address","nodeType":"ElementaryTypeName","src":"15063:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15063:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"15048:25:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1015,"nodeType":"ExpressionStatement","src":"15048:25:0"}]},"documentation":{"id":985,"nodeType":"StructuredDocumentation","src":"14677:68:0","text":"@notice Needs to be called by `pendingOwner` to claim ownership."},"functionSelector":"4e71e0c8","id":1017,"implemented":true,"kind":"function","modifiers":[],"name":"claimOwnership","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":986,"nodeType":"ParameterList","parameters":[],"src":"14773:2:0"},"returnParameters":{"id":987,"nodeType":"ParameterList","parameters":[],"src":"14783:0:0"},"scope":1031,"src":"14750:330:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1029,"nodeType":"Block","src":"15172:92:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1021,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"15190:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"15190:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":1023,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":905,"src":"15204:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15190:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":1025,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15211:34:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":1020,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"15182:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15182:64:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1027,"nodeType":"ExpressionStatement","src":"15182:64:0"},{"id":1028,"nodeType":"PlaceholderStatement","src":"15256:1:0"}]},"documentation":{"id":1018,"nodeType":"StructuredDocumentation","src":"15086:60:0","text":"@notice Only allows the `owner` to execute the function."},"id":1030,"name":"onlyOwner","nodeType":"ModifierDefinition","overrides":null,"parameters":{"id":1019,"nodeType":"ParameterList","parameters":[],"src":"15169:2:0"},"src":"15151:113:0","virtual":false,"visibility":"internal"}],"scope":3138,"src":"13404:1862:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":null,"fullyImplemented":false,"id":1038,"linearizedBaseContracts":[1038],"name":"IMasterContract","nodeType":"ContractDefinition","nodes":[{"body":null,"documentation":{"id":1032,"nodeType":"StructuredDocumentation","src":"15414:258:0","text":"@notice Init function that gets called from `BoringFactory.deploy`.\n Also kown as the constructor for cloned contracts.\n Any ETH send to `BoringFactory.deploy` ends up here.\n @param data Can be abi encoded arguments or anything else."},"functionSelector":"4ddf47d4","id":1037,"implemented":false,"kind":"function","modifiers":[],"name":"init","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1034,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","overrides":null,"scope":1037,"src":"15691:19:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1033,"name":"bytes","nodeType":"ElementaryTypeName","src":"15691:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"15690:21:0"},"returnParameters":{"id":1036,"nodeType":"ParameterList","parameters":[],"src":"15728:0:0"},"scope":1038,"src":"15677:52:0","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":3138,"src":"15382:349:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":null,"fullyImplemented":true,"id":1116,"linearizedBaseContracts":[1116],"name":"BoringFactory","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":null,"id":1046,"name":"LogDeploy","nodeType":"EventDefinition","parameters":{"id":1045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1040,"indexed":true,"mutability":"mutable","name":"masterContract","nodeType":"VariableDeclaration","overrides":null,"scope":1046,"src":"15879:30:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1039,"name":"address","nodeType":"ElementaryTypeName","src":"15879:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1042,"indexed":false,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","overrides":null,"scope":1046,"src":"15911:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1041,"name":"bytes","nodeType":"ElementaryTypeName","src":"15911:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"},{"constant":false,"id":1044,"indexed":true,"mutability":"mutable","name":"cloneAddress","nodeType":"VariableDeclaration","overrides":null,"scope":1046,"src":"15923:28:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1043,"name":"address","nodeType":"ElementaryTypeName","src":"15923:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"15878:74:0"},"src":"15863:90:0"},{"constant":false,"documentation":{"id":1047,"nodeType":"StructuredDocumentation","src":"15959:65:0","text":"@notice Mapping from clone contracts to their masterContract."},"functionSelector":"bafe4f14","id":1051,"mutability":"mutable","name":"masterContractOf","nodeType":"VariableDeclaration","overrides":null,"scope":1116,"src":"16029:51:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"typeName":{"id":1050,"keyType":{"id":1048,"name":"address","nodeType":"ElementaryTypeName","src":"16037:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"16029:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"valueType":{"id":1049,"name":"address","nodeType":"ElementaryTypeName","src":"16048:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"value":null,"visibility":"public"},{"body":{"id":1114,"nodeType":"Block","src":"16765:1516:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1064,"name":"masterContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"16783:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":1067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16809:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1066,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16801:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1065,"name":"address","nodeType":"ElementaryTypeName","src":"16801:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16801:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"16783:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e67466163746f72793a204e6f206d6173746572436f6e7472616374","id":1070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16813:34:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_ca263bb3a1d34921c755bbb7d563d78653106aed124fb087e2484c54b7a9af02","typeString":"literal_string \"BoringFactory: No masterContract\""},"value":"BoringFactory: No masterContract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ca263bb3a1d34921c755bbb7d563d78653106aed124fb087e2484c54b7a9af02","typeString":"literal_string \"BoringFactory: No masterContract\""}],"id":1063,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"16775:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16775:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1072,"nodeType":"ExpressionStatement","src":"16775:73:0"},{"assignments":[1074],"declarations":[{"constant":false,"id":1074,"mutability":"mutable","name":"targetBytes","nodeType":"VariableDeclaration","overrides":null,"scope":1114,"src":"16858:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":1073,"name":"bytes20","nodeType":"ElementaryTypeName","src":"16858:7:0","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"value":null,"visibility":"internal"}],"id":1079,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1077,"name":"masterContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"16888:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1076,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16880:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes20_$","typeString":"type(bytes20)"},"typeName":{"id":1075,"name":"bytes20","nodeType":"ElementaryTypeName","src":"16880:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1078,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16880:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"nodeType":"VariableDeclarationStatement","src":"16858:45:0"},{"condition":{"argumentTypes":null,"id":1080,"name":"useCreate2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1058,"src":"16978:10:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1090,"nodeType":"Block","src":"17683:405:0","statements":[{"AST":{"nodeType":"YulBlock","src":"17706:372:0","statements":[{"nodeType":"YulVariableDeclaration","src":"17724:24:0","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17743:4:0","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17737:5:0"},"nodeType":"YulFunctionCall","src":"17737:11:0"},"variables":[{"name":"clone","nodeType":"YulTypedName","src":"17728:5:0","type":""}]},{"expression":{"arguments":[{"name":"clone","nodeType":"YulIdentifier","src":"17772:5:0"},{"kind":"number","nodeType":"YulLiteral","src":"17779:66:0","type":"","value":"0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17765:6:0"},"nodeType":"YulFunctionCall","src":"17765:81:0"},"nodeType":"YulExpressionStatement","src":"17765:81:0"},{"expression":{"arguments":[{"arguments":[{"name":"clone","nodeType":"YulIdentifier","src":"17874:5:0"},{"kind":"number","nodeType":"YulLiteral","src":"17881:4:0","type":"","value":"0x14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17870:3:0"},"nodeType":"YulFunctionCall","src":"17870:16:0"},{"name":"targetBytes","nodeType":"YulIdentifier","src":"17888:11:0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17863:6:0"},"nodeType":"YulFunctionCall","src":"17863:37:0"},"nodeType":"YulExpressionStatement","src":"17863:37:0"},{"expression":{"arguments":[{"arguments":[{"name":"clone","nodeType":"YulIdentifier","src":"17928:5:0"},{"kind":"number","nodeType":"YulLiteral","src":"17935:4:0","type":"","value":"0x28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17924:3:0"},"nodeType":"YulFunctionCall","src":"17924:16:0"},{"kind":"number","nodeType":"YulLiteral","src":"17942:66:0","type":"","value":"0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17917:6:0"},"nodeType":"YulFunctionCall","src":"17917:92:0"},"nodeType":"YulExpressionStatement","src":"17917:92:0"},{"nodeType":"YulAssignment","src":"18026:38:0","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18049:1:0","type":"","value":"0"},{"name":"clone","nodeType":"YulIdentifier","src":"18052:5:0"},{"kind":"number","nodeType":"YulLiteral","src":"18059:4:0","type":"","value":"0x37"}],"functionName":{"name":"create","nodeType":"YulIdentifier","src":"18042:6:0"},"nodeType":"YulFunctionCall","src":"18042:22:0"},"variableNames":[{"name":"cloneAddress","nodeType":"YulIdentifier","src":"18026:12:0"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":1061,"isOffset":false,"isSlot":false,"src":"18026:12:0","valueSize":1},{"declaration":1074,"isOffset":false,"isSlot":false,"src":"17888:11:0","valueSize":1}],"id":1089,"nodeType":"InlineAssembly","src":"17697:381:0"}]},"id":1091,"nodeType":"IfStatement","src":"16974:1114:0","trueBody":{"id":1088,"nodeType":"Block","src":"16990:687:0","statements":[{"assignments":[1082],"declarations":[{"constant":false,"id":1082,"mutability":"mutable","name":"salt","nodeType":"VariableDeclaration","overrides":null,"scope":1088,"src":"17115:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1081,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17115:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"id":1086,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1084,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"17140:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1083,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"17130:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17130:15:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"17115:30:0"},{"AST":{"nodeType":"YulBlock","src":"17288:379:0","statements":[{"nodeType":"YulVariableDeclaration","src":"17306:24:0","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17325:4:0","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17319:5:0"},"nodeType":"YulFunctionCall","src":"17319:11:0"},"variables":[{"name":"clone","nodeType":"YulTypedName","src":"17310:5:0","type":""}]},{"expression":{"arguments":[{"name":"clone","nodeType":"YulIdentifier","src":"17354:5:0"},{"kind":"number","nodeType":"YulLiteral","src":"17361:66:0","type":"","value":"0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17347:6:0"},"nodeType":"YulFunctionCall","src":"17347:81:0"},"nodeType":"YulExpressionStatement","src":"17347:81:0"},{"expression":{"arguments":[{"arguments":[{"name":"clone","nodeType":"YulIdentifier","src":"17456:5:0"},{"kind":"number","nodeType":"YulLiteral","src":"17463:4:0","type":"","value":"0x14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17452:3:0"},"nodeType":"YulFunctionCall","src":"17452:16:0"},{"name":"targetBytes","nodeType":"YulIdentifier","src":"17470:11:0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17445:6:0"},"nodeType":"YulFunctionCall","src":"17445:37:0"},"nodeType":"YulExpressionStatement","src":"17445:37:0"},{"expression":{"arguments":[{"arguments":[{"name":"clone","nodeType":"YulIdentifier","src":"17510:5:0"},{"kind":"number","nodeType":"YulLiteral","src":"17517:4:0","type":"","value":"0x28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17506:3:0"},"nodeType":"YulFunctionCall","src":"17506:16:0"},{"kind":"number","nodeType":"YulLiteral","src":"17524:66:0","type":"","value":"0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17499:6:0"},"nodeType":"YulFunctionCall","src":"17499:92:0"},"nodeType":"YulExpressionStatement","src":"17499:92:0"},{"nodeType":"YulAssignment","src":"17608:45:0","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17632:1:0","type":"","value":"0"},{"name":"clone","nodeType":"YulIdentifier","src":"17635:5:0"},{"kind":"number","nodeType":"YulLiteral","src":"17642:4:0","type":"","value":"0x37"},{"name":"salt","nodeType":"YulIdentifier","src":"17648:4:0"}],"functionName":{"name":"create2","nodeType":"YulIdentifier","src":"17624:7:0"},"nodeType":"YulFunctionCall","src":"17624:29:0"},"variableNames":[{"name":"cloneAddress","nodeType":"YulIdentifier","src":"17608:12:0"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":1061,"isOffset":false,"isSlot":false,"src":"17608:12:0","valueSize":1},{"declaration":1082,"isOffset":false,"isSlot":false,"src":"17648:4:0","valueSize":1},{"declaration":1074,"isOffset":false,"isSlot":false,"src":"17470:11:0","valueSize":1}],"id":1087,"nodeType":"InlineAssembly","src":"17279:388:0"}]}},{"expression":{"argumentTypes":null,"id":1096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1092,"name":"masterContractOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"18097:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1094,"indexExpression":{"argumentTypes":null,"id":1093,"name":"cloneAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1061,"src":"18114:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"18097:30:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1095,"name":"masterContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"18130:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"18097:47:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1097,"nodeType":"ExpressionStatement","src":"18097:47:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1105,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"18208:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1099,"name":"cloneAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1061,"src":"18171:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1098,"name":"IMasterContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"18155:15:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMasterContract_$1038_$","typeString":"type(contract IMasterContract)"}},"id":1100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18155:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMasterContract_$1038","typeString":"contract IMasterContract"}},"id":1101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"init","nodeType":"MemberAccess","referencedDeclaration":1037,"src":"18155:34:0","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) payable external"}},"id":1104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1102,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"18197:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","referencedDeclaration":null,"src":"18197:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"18155:52:0","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_bytes_memory_ptr_$returns$__$value","typeString":"function (bytes memory) payable external"}},"id":1106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18155:58:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1107,"nodeType":"ExpressionStatement","src":"18155:58:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1109,"name":"masterContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"18239:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1110,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"18255:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"argumentTypes":null,"id":1111,"name":"cloneAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1061,"src":"18261:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1108,"name":"LogDeploy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"18229:9:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_address_$returns$__$","typeString":"function (address,bytes memory,address)"}},"id":1112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18229:45:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1113,"nodeType":"EmitStatement","src":"18224:50:0"}]},"documentation":{"id":1052,"nodeType":"StructuredDocumentation","src":"16087:519:0","text":"@notice Deploys a given master Contract as a clone.\n Any ETH transferred with this call is forwarded to the new clone.\n Emits `LogDeploy`.\n @param masterContract The address of the contract to clone.\n @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\n @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\n @return cloneAddress Address of the created clone contract."},"functionSelector":"1f54245b","id":1115,"implemented":true,"kind":"function","modifiers":[],"name":"deploy","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1059,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1054,"mutability":"mutable","name":"masterContract","nodeType":"VariableDeclaration","overrides":null,"scope":1115,"src":"16636:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1053,"name":"address","nodeType":"ElementaryTypeName","src":"16636:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1056,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","overrides":null,"scope":1115,"src":"16668:19:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1055,"name":"bytes","nodeType":"ElementaryTypeName","src":"16668:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"},{"constant":false,"id":1058,"mutability":"mutable","name":"useCreate2","nodeType":"VariableDeclaration","overrides":null,"scope":1115,"src":"16697:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1057,"name":"bool","nodeType":"ElementaryTypeName","src":"16697:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"16626:92:0"},"returnParameters":{"id":1062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1061,"mutability":"mutable","name":"cloneAddress","nodeType":"VariableDeclaration","overrides":null,"scope":1115,"src":"16743:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1060,"name":"address","nodeType":"ElementaryTypeName","src":"16743:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"16742:22:0"},"scope":1116,"src":"16611:1670:0","stateMutability":"payable","virtual":false,"visibility":"public"}],"scope":3138,"src":"15834:2449:0"},{"abstract":false,"baseContracts":[{"arguments":null,"baseName":{"contractScope":null,"id":1117,"name":"BoringOwnable","nodeType":"UserDefinedTypeName","referencedDeclaration":1031,"src":"18398:13:0","typeDescriptions":{"typeIdentifier":"t_contract$_BoringOwnable_$1031","typeString":"contract BoringOwnable"}},"id":1118,"nodeType":"InheritanceSpecifier","src":"18398:13:0"},{"arguments":null,"baseName":{"contractScope":null,"id":1119,"name":"BoringFactory","nodeType":"UserDefinedTypeName","referencedDeclaration":1116,"src":"18413:13:0","typeDescriptions":{"typeIdentifier":"t_contract$_BoringFactory_$1116","typeString":"contract BoringFactory"}},"id":1120,"nodeType":"InheritanceSpecifier","src":"18413:13:0"}],"contractDependencies":[908,1031,1116],"contractKind":"contract","documentation":null,"fullyImplemented":true,"id":1421,"linearizedBaseContracts":[1421,1116,1031,908],"name":"MasterContractManager","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":null,"id":1126,"name":"LogWhiteListMasterContract","nodeType":"EventDefinition","parameters":{"id":1125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1122,"indexed":true,"mutability":"mutable","name":"masterContract","nodeType":"VariableDeclaration","overrides":null,"scope":1126,"src":"18466:30:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1121,"name":"address","nodeType":"ElementaryTypeName","src":"18466:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1124,"indexed":false,"mutability":"mutable","name":"approved","nodeType":"VariableDeclaration","overrides":null,"scope":1126,"src":"18498:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1123,"name":"bool","nodeType":"ElementaryTypeName","src":"18498:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"18465:47:0"},"src":"18433:80:0"},{"anonymous":false,"documentation":null,"id":1134,"name":"LogSetMasterContractApproval","nodeType":"EventDefinition","parameters":{"id":1133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1128,"indexed":true,"mutability":"mutable","name":"masterContract","nodeType":"VariableDeclaration","overrides":null,"scope":1134,"src":"18553:30:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1127,"name":"address","nodeType":"ElementaryTypeName","src":"18553:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1130,"indexed":true,"mutability":"mutable","name":"user","nodeType":"VariableDeclaration","overrides":null,"scope":1134,"src":"18585:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1129,"name":"address","nodeType":"ElementaryTypeName","src":"18585:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1132,"indexed":false,"mutability":"mutable","name":"approved","nodeType":"VariableDeclaration","overrides":null,"scope":1134,"src":"18607:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1131,"name":"bool","nodeType":"ElementaryTypeName","src":"18607:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"18552:69:0"},"src":"18518:104:0"},{"anonymous":false,"documentation":null,"id":1138,"name":"LogRegisterProtocol","nodeType":"EventDefinition","parameters":{"id":1137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1136,"indexed":true,"mutability":"mutable","name":"protocol","nodeType":"VariableDeclaration","overrides":null,"scope":1138,"src":"18653:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1135,"name":"address","nodeType":"ElementaryTypeName","src":"18653:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"18652:26:0"},"src":"18627:52:0"},{"constant":false,"documentation":{"id":1139,"nodeType":"StructuredDocumentation","src":"18685:52:0","text":"@notice masterContract to user to approval state"},"functionSelector":"91e0eab5","id":1145,"mutability":"mutable","name":"masterContractApproved","nodeType":"VariableDeclaration","overrides":null,"scope":1421,"src":"18742:74:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":1144,"keyType":{"id":1140,"name":"address","nodeType":"ElementaryTypeName","src":"18750:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"18742:44:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueType":{"id":1143,"keyType":{"id":1141,"name":"address","nodeType":"ElementaryTypeName","src":"18769:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"18761:24:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":1142,"name":"bool","nodeType":"ElementaryTypeName","src":"18780:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"value":null,"visibility":"public"},{"constant":false,"documentation":{"id":1146,"nodeType":"StructuredDocumentation","src":"18822:83:0","text":"@notice masterContract to whitelisted state for approval without signed message"},"functionSelector":"12a90c8a","id":1150,"mutability":"mutable","name":"whitelistedMasterContracts","nodeType":"VariableDeclaration","overrides":null,"scope":1421,"src":"18910:58:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":1149,"keyType":{"id":1147,"name":"address","nodeType":"ElementaryTypeName","src":"18918:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"18910:24:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":1148,"name":"bool","nodeType":"ElementaryTypeName","src":"18929:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"value":null,"visibility":"public"},{"constant":false,"documentation":{"id":1151,"nodeType":"StructuredDocumentation","src":"18974:52:0","text":"@notice user nonces for masterContract approvals"},"functionSelector":"7ecebe00","id":1155,"mutability":"mutable","name":"nonces","nodeType":"VariableDeclaration","overrides":null,"scope":1421,"src":"19031:41:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1154,"keyType":{"id":1152,"name":"address","nodeType":"ElementaryTypeName","src":"19039:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"19031:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":1153,"name":"uint256","nodeType":"ElementaryTypeName","src":"19050:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"value":null,"visibility":"public"},{"constant":true,"id":1160,"mutability":"constant","name":"DOMAIN_SEPARATOR_SIGNATURE_HASH","nodeType":"VariableDeclaration","overrides":null,"scope":1421,"src":"19079:147:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1156,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19079:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"454950373132446f6d61696e28737472696e67206e616d652c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429","id":1158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"19156:69:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866","typeString":"literal_string \"EIP712Domain(string name,uint256 chainId,address verifyingContract)\""},"value":"EIP712Domain(string name,uint256 chainId,address verifyingContract)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866","typeString":"literal_string \"EIP712Domain(string name,uint256 chainId,address verifyingContract)\""}],"id":1157,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"19146:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19146:80:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":true,"id":1163,"mutability":"constant","name":"EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA","nodeType":"VariableDeclaration","overrides":null,"scope":1421,"src":"19282:77:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1161,"name":"string","nodeType":"ElementaryTypeName","src":"19282:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"argumentTypes":null,"hexValue":"1901","id":1162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"19349:10:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string \"\u0019\u0001\""},"value":"\u0019\u0001"},"visibility":"private"},{"constant":true,"id":1168,"mutability":"constant","name":"APPROVAL_SIGNATURE_HASH","nodeType":"VariableDeclaration","overrides":null,"scope":1421,"src":"19365:177:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1164,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19365:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"5365744d6173746572436f6e7472616374417070726f76616c28737472696e67207761726e696e672c6164647265737320757365722c61646472657373206d6173746572436f6e74726163742c626f6f6c20617070726f7665642c75696e74323536206e6f6e636529","id":1166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"19434:107:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_1962bc9f5484cb7a998701b81090e966ee1fce5771af884cceee7c081b14ade2","typeString":"literal_string \"SetMasterContractApproval(string warning,address user,address masterContract,bool approved,uint256 nonce)\""},"value":"SetMasterContractApproval(string warning,address user,address masterContract,bool approved,uint256 nonce)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1962bc9f5484cb7a998701b81090e966ee1fce5771af884cceee7c081b14ade2","typeString":"literal_string \"SetMasterContractApproval(string warning,address user,address masterContract,bool approved,uint256 nonce)\""}],"id":1165,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"19424:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19424:118:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":1170,"mutability":"immutable","name":"_DOMAIN_SEPARATOR","nodeType":"VariableDeclaration","overrides":null,"scope":1421,"src":"19601:43:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1169,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19601:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"private"},{"constant":false,"id":1172,"mutability":"immutable","name":"DOMAIN_SEPARATOR_CHAIN_ID","nodeType":"VariableDeclaration","overrides":null,"scope":1421,"src":"19702:51:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1171,"name":"uint256","nodeType":"ElementaryTypeName","src":"19702:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"private"},{"body":{"id":1187,"nodeType":"Block","src":"19781:186:0","statements":[{"assignments":[1176],"declarations":[{"constant":false,"id":1176,"mutability":"mutable","name":"chainId","nodeType":"VariableDeclaration","overrides":null,"scope":1187,"src":"19791:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1175,"name":"uint256","nodeType":"ElementaryTypeName","src":"19791:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1177,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"19791:15:0"},{"AST":{"nodeType":"YulBlock","src":"19825:44:0","statements":[{"nodeType":"YulAssignment","src":"19839:20:0","value":{"arguments":[],"functionName":{"name":"chainid","nodeType":"YulIdentifier","src":"19850:7:0"},"nodeType":"YulFunctionCall","src":"19850:9:0"},"variableNames":[{"name":"chainId","nodeType":"YulIdentifier","src":"19839:7:0"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":1176,"isOffset":false,"isSlot":false,"src":"19839:7:0","valueSize":1}],"id":1178,"nodeType":"InlineAssembly","src":"19816:53:0"},{"expression":{"argumentTypes":null,"id":1185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1179,"name":"_DOMAIN_SEPARATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1170,"src":"19878:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1181,"name":"DOMAIN_SEPARATOR_CHAIN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1172,"src":"19924:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1182,"name":"chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1176,"src":"19952:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19924:35:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1180,"name":"_calculateDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"19898:25:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bytes32_$","typeString":"function (uint256) view returns (bytes32)"}},"id":1184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19898:62:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"19878:82:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1186,"nodeType":"ExpressionStatement","src":"19878:82:0"}]},"documentation":null,"id":1188,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1173,"nodeType":"ParameterList","parameters":[],"src":"19771:2:0"},"returnParameters":{"id":1174,"nodeType":"ParameterList","parameters":[],"src":"19781:0:0"},"scope":1421,"src":"19760:207:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1210,"nodeType":"Block","src":"20056:128:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1198,"name":"DOMAIN_SEPARATOR_SIGNATURE_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"20094:31:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"42656e746f426f78205631","id":1200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"20137:13:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_d7df266aff736d415a9dc14b4158201d612e70d75b9c7f4e375ccfd20aa5166f","typeString":"literal_string \"BentoBox V1\""},"value":"BentoBox V1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_d7df266aff736d415a9dc14b4158201d612e70d75b9c7f4e375ccfd20aa5166f","typeString":"literal_string \"BentoBox V1\""}],"id":1199,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"20127:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20127:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":1202,"name":"chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"20153:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1205,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"20170:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_MasterContractManager_$1421","typeString":"contract MasterContractManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_MasterContractManager_$1421","typeString":"contract MasterContractManager"}],"id":1204,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20162:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1203,"name":"address","nodeType":"ElementaryTypeName","src":"20162:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20162:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"argumentTypes":null,"id":1196,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"20083:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1197,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","referencedDeclaration":null,"src":"20083:10:0","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20083:93:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1195,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"20073:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20073:104:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1194,"id":1209,"nodeType":"Return","src":"20066:111:0"}]},"documentation":null,"id":1211,"implemented":true,"kind":"function","modifiers":[],"name":"_calculateDomainSeparator","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1190,"mutability":"mutable","name":"chainId","nodeType":"VariableDeclaration","overrides":null,"scope":1211,"src":"20008:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1189,"name":"uint256","nodeType":"ElementaryTypeName","src":"20008:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"20007:17:0"},"returnParameters":{"id":1194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1193,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1211,"src":"20047:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1192,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20047:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"src":"20046:9:0"},"scope":1421,"src":"19973:211:0","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":1229,"nodeType":"Block","src":"20301:204:0","statements":[{"assignments":[1217],"declarations":[{"constant":false,"id":1217,"mutability":"mutable","name":"chainId","nodeType":"VariableDeclaration","overrides":null,"scope":1229,"src":"20311:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1216,"name":"uint256","nodeType":"ElementaryTypeName","src":"20311:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1218,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"20311:15:0"},{"AST":{"nodeType":"YulBlock","src":"20345:44:0","statements":[{"nodeType":"YulAssignment","src":"20359:20:0","value":{"arguments":[],"functionName":{"name":"chainid","nodeType":"YulIdentifier","src":"20370:7:0"},"nodeType":"YulFunctionCall","src":"20370:9:0"},"variableNames":[{"name":"chainId","nodeType":"YulIdentifier","src":"20359:7:0"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":1217,"isOffset":false,"isSlot":false,"src":"20359:7:0","valueSize":1}],"id":1219,"nodeType":"InlineAssembly","src":"20336:53:0"},{"expression":{"argumentTypes":null,"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1220,"name":"chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"20405:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":1221,"name":"DOMAIN_SEPARATOR_CHAIN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1172,"src":"20416:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20405:36:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1225,"name":"chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"20490:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1224,"name":"_calculateDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"20464:25:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bytes32_$","typeString":"function (uint256) view returns (bytes32)"}},"id":1226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20464:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"20405:93:0","trueExpression":{"argumentTypes":null,"id":1223,"name":"_DOMAIN_SEPARATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1170,"src":"20444:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1215,"id":1228,"nodeType":"Return","src":"20398:100:0"}]},"documentation":null,"functionSelector":"3644e515","id":1230,"implemented":true,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1212,"nodeType":"ParameterList","parameters":[],"src":"20268:2:0"},"returnParameters":{"id":1215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1214,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1230,"src":"20292:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1213,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20292:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"src":"20291:9:0"},"scope":1421,"src":"20243:262:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1247,"nodeType":"Block","src":"20670:104:0","statements":[{"expression":{"argumentTypes":null,"id":1240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1234,"name":"masterContractOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"20680:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1237,"indexExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1235,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"20697:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"20697:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"20680:28:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1238,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"20711:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"20711:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"20680:41:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1241,"nodeType":"ExpressionStatement","src":"20680:41:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1243,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"20756:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"20756:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":1242,"name":"LogRegisterProtocol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"20736:19:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20736:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1246,"nodeType":"EmitStatement","src":"20731:36:0"}]},"documentation":{"id":1231,"nodeType":"StructuredDocumentation","src":"20511:119:0","text":"@notice Other contracts need to register with this master contract so that users can approve them for the BentoBox."},"functionSelector":"aee4d1b2","id":1248,"implemented":true,"kind":"function","modifiers":[],"name":"registerProtocol","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1232,"nodeType":"ParameterList","parameters":[],"src":"20660:2:0"},"returnParameters":{"id":1233,"nodeType":"ParameterList","parameters":[],"src":"20670:0:0"},"scope":1421,"src":"20635:139:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1279,"nodeType":"Block","src":"20953:254:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1259,"name":"masterContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1251,"src":"20989:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":1262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21015:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1261,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21007:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1260,"name":"address","nodeType":"ElementaryTypeName","src":"21007:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21007:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"20989:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4d6173746572434d67723a2043616e6e6f7420617070726f76652030","id":1265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"21019:30:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_05c987dd69d78c1ee4fa739315e61a9b7045038ace711c67e7c473d70978b7b6","typeString":"literal_string \"MasterCMgr: Cannot approve 0\""},"value":"MasterCMgr: Cannot approve 0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_05c987dd69d78c1ee4fa739315e61a9b7045038ace711c67e7c473d70978b7b6","typeString":"literal_string \"MasterCMgr: Cannot approve 0\""}],"id":1258,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"20981:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20981:69:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1267,"nodeType":"ExpressionStatement","src":"20981:69:0"},{"expression":{"argumentTypes":null,"id":1272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1268,"name":"whitelistedMasterContracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"21080:26:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1270,"indexExpression":{"argumentTypes":null,"id":1269,"name":"masterContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1251,"src":"21107:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"21080:42:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1271,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1253,"src":"21125:8:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"21080:53:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1273,"nodeType":"ExpressionStatement","src":"21080:53:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1275,"name":"masterContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1251,"src":"21175:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1276,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1253,"src":"21191:8:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1274,"name":"LogWhiteListMasterContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"21148:26:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bool_$returns$__$","typeString":"function (address,bool)"}},"id":1277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21148:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1278,"nodeType":"EmitStatement","src":"21143:57:0"}]},"documentation":{"id":1249,"nodeType":"StructuredDocumentation","src":"20780:79:0","text":"@notice Enables or disables a contract for approval without signed message."},"functionSelector":"733a9d7c","id":1280,"implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":1256,"modifierName":{"argumentTypes":null,"id":1255,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"20943:9:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"20943:9:0"}],"name":"whitelistMasterContract","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1251,"mutability":"mutable","name":"masterContract","nodeType":"VariableDeclaration","overrides":null,"scope":1280,"src":"20897:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1250,"name":"address","nodeType":"ElementaryTypeName","src":"20897:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1253,"mutability":"mutable","name":"approved","nodeType":"VariableDeclaration","overrides":null,"scope":1280,"src":"20921:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1252,"name":"bool","nodeType":"ElementaryTypeName","src":"20921:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"20896:39:0"},"returnParameters":{"id":1257,"nodeType":"ParameterList","parameters":[],"src":"20953:0:0"},"scope":1421,"src":"20864:343:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1419,"nodeType":"Block","src":"22144:2367:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1297,"name":"masterContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1285,"src":"22180:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":1300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22206:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1299,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22198:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1298,"name":"address","nodeType":"ElementaryTypeName","src":"22198:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22198:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"22180:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4d6173746572434d67723a206d617374657243206e6f7420736574","id":1303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"22210:29:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_d4554bcb32b147c03c1d615ec7e7aaa89c0d578be297eb1b9cec8a89c9a18519","typeString":"literal_string \"MasterCMgr: masterC not set\""},"value":"MasterCMgr: masterC not set"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d4554bcb32b147c03c1d615ec7e7aaa89c0d578be297eb1b9cec8a89c9a18519","typeString":"literal_string \"MasterCMgr: masterC not set\""}],"id":1296,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"22172:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22172:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1305,"nodeType":"ExpressionStatement","src":"22172:68:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1306,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1291,"src":"22346:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":1307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22351:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"22346:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1309,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"22356:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":1310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22361:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"22356:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"22346:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1313,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"22366:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":1314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22371:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"22366:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"22346:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1403,"nodeType":"Block","src":"22647:1698:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1346,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1283,"src":"22955:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":1349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22971:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1348,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22963:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1347,"name":"address","nodeType":"ElementaryTypeName","src":"22963:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22963:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"22955:18:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4d6173746572434d67723a20557365722063616e6e6f742062652030","id":1352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"22975:30:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_e11d9be4a5cd0528cd92f4bcd22421ed87d25e253facc7a8c78e74337e439653","typeString":"literal_string \"MasterCMgr: User cannot be 0\""},"value":"MasterCMgr: User cannot be 0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11d9be4a5cd0528cd92f4bcd22421ed87d25e253facc7a8c78e74337e439653","typeString":"literal_string \"MasterCMgr: User cannot be 0\""}],"id":1345,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"22947:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22947:59:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1354,"nodeType":"ExpressionStatement","src":"22947:59:0"},{"assignments":[1356],"declarations":[{"constant":false,"id":1356,"mutability":"mutable","name":"digest","nodeType":"VariableDeclaration","overrides":null,"scope":1403,"src":"23449:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1355,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23449:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"id":1386,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1360,"name":"EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"23531:40:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1361,"name":"DOMAIN_SEPARATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1230,"src":"23593:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":1362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23593:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1366,"name":"APPROVAL_SIGNATURE_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"23708:23:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"condition":{"argumentTypes":null,"id":1367,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1287,"src":"23761:8:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"5265766f6b652061636365737320746f2042656e746f426f783f","id":1372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"23918:28:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_b426802f1f7dc850a7b6b38805edea2442f3992878a9ab985abfe8091d95d0b1","typeString":"literal_string \"Revoke access to BentoBox?\""},"value":"Revoke access to BentoBox?"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_b426802f1f7dc850a7b6b38805edea2442f3992878a9ab985abfe8091d95d0b1","typeString":"literal_string \"Revoke access to BentoBox?\""}],"id":1371,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"23908:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23908:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23761:186:0","trueExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"476976652046554c4c2061636365737320746f2066756e647320696e2028616e6420617070726f76656420746f292042656e746f426f783f","id":1369,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"23814:58:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_422ac5323fe049241dee67716229a1cc1bc7b313b23dfe3ef6d42ab177a3b284","typeString":"literal_string \"Give FULL access to funds in (and approved to) BentoBox?\""},"value":"Give FULL access to funds in (and approved to) BentoBox?"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_422ac5323fe049241dee67716229a1cc1bc7b313b23dfe3ef6d42ab177a3b284","typeString":"literal_string \"Give FULL access to funds in (and approved to) BentoBox?\""}],"id":1368,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"23804:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23804:69:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":1375,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1283,"src":"23977:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1376,"name":"masterContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1285,"src":"24011:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1377,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1287,"src":"24055:8:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"id":1381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"24093:14:0","subExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1378,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1155,"src":"24093:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1380,"indexExpression":{"argumentTypes":null,"id":1379,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1283,"src":"24100:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"24093:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":1364,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"23668:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1365,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","referencedDeclaration":null,"src":"23668:10:0","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23668:465:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1363,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"23633:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23633:522:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"argumentTypes":null,"id":1358,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"23493:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1359,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","referencedDeclaration":null,"src":"23493:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23493:680:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1357,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"23466:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23466:721:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"23449:738:0"},{"assignments":[1388],"declarations":[{"constant":false,"id":1388,"mutability":"mutable","name":"recoveredAddress","nodeType":"VariableDeclaration","overrides":null,"scope":1403,"src":"24201:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1387,"name":"address","nodeType":"ElementaryTypeName","src":"24201:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"id":1395,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1390,"name":"digest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1356,"src":"24238:6:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":1391,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"24246:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"argumentTypes":null,"id":1392,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1291,"src":"24249:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":1393,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"24252:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1389,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"24228:9:0","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":1394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"24228:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"24201:53:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1397,"name":"recoveredAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1388,"src":"24276:16:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":1398,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1283,"src":"24296:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"24276:24:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4d6173746572434d67723a20496e76616c6964205369676e6174757265","id":1400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"24302:31:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_bf29b6546a289d23beadf6fcacd96d99c5c43e7a6d531456b5ee498c67360ed0","typeString":"literal_string \"MasterCMgr: Invalid Signature\""},"value":"MasterCMgr: Invalid Signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_bf29b6546a289d23beadf6fcacd96d99c5c43e7a6d531456b5ee498c67360ed0","typeString":"literal_string \"MasterCMgr: Invalid Signature\""}],"id":1396,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"24268:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"24268:66:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1402,"nodeType":"ExpressionStatement","src":"24268:66:0"}]},"id":1404,"nodeType":"IfStatement","src":"22342:2003:0","trueBody":{"id":1344,"nodeType":"Block","src":"22374:267:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1318,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1283,"src":"22396:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1319,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"22404:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"22404:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"22396:18:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4d6173746572434d67723a2075736572206e6f742073656e646572","id":1322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"22416:29:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_177835414c26a024f7683801887c34467408a8af9c50feec8be133c91db9fc86","typeString":"literal_string \"MasterCMgr: user not sender\""},"value":"MasterCMgr: user not sender"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_177835414c26a024f7683801887c34467408a8af9c50feec8be133c91db9fc86","typeString":"literal_string \"MasterCMgr: user not sender\""}],"id":1317,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"22388:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22388:58:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1324,"nodeType":"ExpressionStatement","src":"22388:58:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1326,"name":"masterContractOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"22468:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1328,"indexExpression":{"argumentTypes":null,"id":1327,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1283,"src":"22485:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22468:22:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":1331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22502:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1330,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22494:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1329,"name":"address","nodeType":"ElementaryTypeName","src":"22494:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22494:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"22468:36:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4d6173746572434d67723a207573657220697320636c6f6e65","id":1334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"22506:27:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_b76e42eaf41acf747fdf8c8aa63b693ddacd062ef356c3e1753f737e4ed2909b","typeString":"literal_string \"MasterCMgr: user is clone\""},"value":"MasterCMgr: user is clone"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b76e42eaf41acf747fdf8c8aa63b693ddacd062ef356c3e1753f737e4ed2909b","typeString":"literal_string \"MasterCMgr: user is clone\""}],"id":1325,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"22460:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22460:74:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1336,"nodeType":"ExpressionStatement","src":"22460:74:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1338,"name":"whitelistedMasterContracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"22556:26:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1340,"indexExpression":{"argumentTypes":null,"id":1339,"name":"masterContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1285,"src":"22583:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22556:42:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4d6173746572434d67723a206e6f742077686974656c6973746564","id":1341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"22600:29:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_ece38d90da69b99e086237a3317fc903e256ad7789d025fcb6c7961c4f89f66b","typeString":"literal_string \"MasterCMgr: not whitelisted\""},"value":"MasterCMgr: not whitelisted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ece38d90da69b99e086237a3317fc903e256ad7789d025fcb6c7961c4f89f66b","typeString":"literal_string \"MasterCMgr: not whitelisted\""}],"id":1337,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"22548:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22548:82:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1343,"nodeType":"ExpressionStatement","src":"22548:82:0"}]}},{"expression":{"argumentTypes":null,"id":1411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1405,"name":"masterContractApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"24374:22:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1408,"indexExpression":{"argumentTypes":null,"id":1406,"name":"masterContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1285,"src":"24397:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24374:38:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1409,"indexExpression":{"argumentTypes":null,"id":1407,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1283,"src":"24413:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"24374:44:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1410,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1287,"src":"24421:8:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"24374:55:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1412,"nodeType":"ExpressionStatement","src":"24374:55:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1414,"name":"masterContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1285,"src":"24473:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1415,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1283,"src":"24489:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1416,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1287,"src":"24495:8:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1413,"name":"LogSetMasterContractApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1134,"src":"24444:28:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"24444:60:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1418,"nodeType":"EmitStatement","src":"24439:65:0"}]},"documentation":{"id":1281,"nodeType":"StructuredDocumentation","src":"21213:456:0","text":"@notice Approves or revokes a `masterContract` access to `user` funds.\n @param user The address of the user that approves or revokes access.\n @param masterContract The address who gains or loses access.\n @param approved If True approves access. If False revokes access.\n @param v Part of the signature. (See EIP-191)\n @param r Part of the signature. (See EIP-191)\n @param s Part of the signature. (See EIP-191)"},"functionSelector":"c0a47c93","id":1420,"implemented":true,"kind":"function","modifiers":[],"name":"setMasterContractApproval","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1283,"mutability":"mutable","name":"user","nodeType":"VariableDeclaration","overrides":null,"scope":1420,"src":"22008:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1282,"name":"address","nodeType":"ElementaryTypeName","src":"22008:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1285,"mutability":"mutable","name":"masterContract","nodeType":"VariableDeclaration","overrides":null,"scope":1420,"src":"22030:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1284,"name":"address","nodeType":"ElementaryTypeName","src":"22030:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1287,"mutability":"mutable","name":"approved","nodeType":"VariableDeclaration","overrides":null,"scope":1420,"src":"22062:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1286,"name":"bool","nodeType":"ElementaryTypeName","src":"22062:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},{"constant":false,"id":1289,"mutability":"mutable","name":"v","nodeType":"VariableDeclaration","overrides":null,"scope":1420,"src":"22085:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1288,"name":"uint8","nodeType":"ElementaryTypeName","src":"22085:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":null,"visibility":"internal"},{"constant":false,"id":1291,"mutability":"mutable","name":"r","nodeType":"VariableDeclaration","overrides":null,"scope":1420,"src":"22102:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1290,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22102:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"},{"constant":false,"id":1293,"mutability":"mutable","name":"s","nodeType":"VariableDeclaration","overrides":null,"scope":1420,"src":"22121:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1292,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22121:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"src":"21998:138:0"},"returnParameters":{"id":1295,"nodeType":"ParameterList","parameters":[],"src":"22144:0:0"},"scope":1421,"src":"21964:2547:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":3138,"src":"18364:6149:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":null,"fullyImplemented":true,"id":1530,"linearizedBaseContracts":[1530],"name":"BaseBoringBatchable","nodeType":"ContractDefinition","nodes":[{"body":{"id":1445,"nodeType":"Block","src":"24927:400:0","statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1429,"name":"_returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"25052:11:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","referencedDeclaration":null,"src":"25052:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"argumentTypes":null,"hexValue":"3638","id":1431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25073:2:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_68_by_1","typeString":"int_const 68"},"value":"68"},"src":"25052:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1435,"nodeType":"IfStatement","src":"25048:67:0","trueBody":{"expression":{"argumentTypes":null,"hexValue":"5472616e73616374696f6e2072657665727465642073696c656e746c79","id":1433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"25084:31:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_d0b1e7612ebe87924453e5d4581b9067879655587bae8a2dfee438433699b890","typeString":"literal_string \"Transaction reverted silently\""},"value":"Transaction reverted silently"},"functionReturnParameters":1428,"id":1434,"nodeType":"Return","src":"25077:38:0"}},{"AST":{"nodeType":"YulBlock","src":"25135:95:0","statements":[{"nodeType":"YulAssignment","src":"25183:37:0","value":{"arguments":[{"name":"_returnData","nodeType":"YulIdentifier","src":"25202:11:0"},{"kind":"number","nodeType":"YulLiteral","src":"25215:4:0","type":"","value":"0x04"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25198:3:0"},"nodeType":"YulFunctionCall","src":"25198:22:0"},"variableNames":[{"name":"_returnData","nodeType":"YulIdentifier","src":"25183:11:0"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":1424,"isOffset":false,"isSlot":false,"src":"25183:11:0","valueSize":1},{"declaration":1424,"isOffset":false,"isSlot":false,"src":"25202:11:0","valueSize":1}],"id":1436,"nodeType":"InlineAssembly","src":"25126:104:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1439,"name":"_returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"25257:11:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"argumentTypes":null,"components":[{"argumentTypes":null,"id":1441,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25271:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1440,"name":"string","nodeType":"ElementaryTypeName","src":"25271:6:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}}],"id":1442,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"25270:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"}],"expression":{"argumentTypes":null,"id":1437,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"25246:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1438,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","referencedDeclaration":null,"src":"25246:10:0","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25246:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1428,"id":1444,"nodeType":"Return","src":"25239:40:0"}]},"documentation":{"id":1422,"nodeType":"StructuredDocumentation","src":"24653:182:0","text":"@dev Helper function to extract a useful revert message from a failed call.\n If the returned data is malformed or not correctly abi encoded then this call can fail itself."},"id":1446,"implemented":true,"kind":"function","modifiers":[],"name":"_getRevertMsg","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1424,"mutability":"mutable","name":"_returnData","nodeType":"VariableDeclaration","overrides":null,"scope":1446,"src":"24863:24:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1423,"name":"bytes","nodeType":"ElementaryTypeName","src":"24863:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"24862:26:0"},"returnParameters":{"id":1428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1427,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":1446,"src":"24912:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1426,"name":"string","nodeType":"ElementaryTypeName","src":"24912:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"24911:15:0"},"scope":1530,"src":"24840:487:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1528,"nodeType":"Block","src":"26289:388:0","statements":[{"expression":{"argumentTypes":null,"id":1468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1461,"name":"successes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1456,"src":"26299:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1465,"name":"calls","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"26322:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},"id":1466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","referencedDeclaration":null,"src":"26322:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1464,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"26311:10:0","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bool_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bool[] memory)"},"typeName":{"baseType":{"id":1462,"name":"bool","nodeType":"ElementaryTypeName","src":"26315:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1463,"length":null,"nodeType":"ArrayTypeName","src":"26315:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}}},"id":1467,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26311:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"src":"26299:36:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":1469,"nodeType":"ExpressionStatement","src":"26299:36:0"},{"expression":{"argumentTypes":null,"id":1477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1470,"name":"results","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1459,"src":"26345:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1474,"name":"calls","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"26367:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},"id":1475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","referencedDeclaration":null,"src":"26367:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1473,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"26355:11:0","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory[] memory)"},"typeName":{"baseType":{"id":1471,"name":"bytes","nodeType":"ElementaryTypeName","src":"26359:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":1472,"length":null,"nodeType":"ArrayTypeName","src":"26359:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}}},"id":1476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26355:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"src":"26345:35:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1478,"nodeType":"ExpressionStatement","src":"26345:35:0"},{"body":{"id":1526,"nodeType":"Block","src":"26433:238:0","statements":[{"assignments":[1491,1493],"declarations":[{"constant":false,"id":1491,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","overrides":null,"scope":1526,"src":"26448:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1490,"name":"bool","nodeType":"ElementaryTypeName","src":"26448:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},{"constant":false,"id":1493,"mutability":"mutable","name":"result","nodeType":"VariableDeclaration","overrides":null,"scope":1526,"src":"26462:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1492,"name":"bytes","nodeType":"ElementaryTypeName","src":"26462:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"id":1503,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1499,"name":"calls","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"26512:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},"id":1501,"indexExpression":{"argumentTypes":null,"id":1500,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1480,"src":"26518:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"26512:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1496,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"26493:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_BaseBoringBatchable_$1530","typeString":"contract BaseBoringBatchable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BaseBoringBatchable_$1530","typeString":"contract BaseBoringBatchable"}],"id":1495,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26485:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1494,"name":"address","nodeType":"ElementaryTypeName","src":"26485:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26485:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"delegatecall","nodeType":"MemberAccess","referencedDeclaration":null,"src":"26485:26:0","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26485:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"26447:74:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1505,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"26543:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"argumentTypes":null,"id":1507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"26554:13:0","subExpression":{"argumentTypes":null,"id":1506,"name":"revertOnFail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1452,"src":"26555:12:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"26543:24:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1510,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1493,"src":"26583:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1509,"name":"_getRevertMsg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1446,"src":"26569:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) pure returns (string memory)"}},"id":1511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26569:21:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1504,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"26535:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26535:56:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1513,"nodeType":"ExpressionStatement","src":"26535:56:0"},{"expression":{"argumentTypes":null,"id":1518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1514,"name":"successes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1456,"src":"26605:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":1516,"indexExpression":{"argumentTypes":null,"id":1515,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1480,"src":"26615:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"26605:12:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1517,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"26620:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"26605:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1519,"nodeType":"ExpressionStatement","src":"26605:22:0"},{"expression":{"argumentTypes":null,"id":1524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1520,"name":"results","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1459,"src":"26641:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1522,"indexExpression":{"argumentTypes":null,"id":1521,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1480,"src":"26649:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"26641:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1523,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1493,"src":"26654:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"26641:19:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1525,"nodeType":"ExpressionStatement","src":"26641:19:0"}]},"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1483,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1480,"src":"26410:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1484,"name":"calls","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"26414:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},"id":1485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","referencedDeclaration":null,"src":"26414:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26410:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1527,"initializationExpression":{"assignments":[1480],"declarations":[{"constant":false,"id":1480,"mutability":"mutable","name":"i","nodeType":"VariableDeclaration","overrides":null,"scope":1527,"src":"26395:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1479,"name":"uint256","nodeType":"ElementaryTypeName","src":"26395:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1482,"initialValue":{"argumentTypes":null,"hexValue":"30","id":1481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26407:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"26395:13:0"},"loopExpression":{"expression":{"argumentTypes":null,"id":1488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"26428:3:0","subExpression":{"argumentTypes":null,"id":1487,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1480,"src":"26428:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1489,"nodeType":"ExpressionStatement","src":"26428:3:0"},"nodeType":"ForStatement","src":"26390:281:0"}]},"documentation":{"id":1447,"nodeType":"StructuredDocumentation","src":"25333:419:0","text":"@notice Allows batched call to self (this contract).\n @param calls An array of inputs for each call.\n @param revertOnFail If True then reverts after a failed call and stops doing further calls.\n @return successes An array indicating the success of a call, mapped one-to-one to `calls`.\n @return results An array with the returned data of each function call, mapped one-to-one to `calls`."},"functionSelector":"d2423b51","id":1529,"implemented":true,"kind":"function","modifiers":[],"name":"batch","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1450,"mutability":"mutable","name":"calls","nodeType":"VariableDeclaration","overrides":null,"scope":1529,"src":"26171:22:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":1448,"name":"bytes","nodeType":"ElementaryTypeName","src":"26171:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":1449,"length":null,"nodeType":"ArrayTypeName","src":"26171:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"value":null,"visibility":"internal"},{"constant":false,"id":1452,"mutability":"mutable","name":"revertOnFail","nodeType":"VariableDeclaration","overrides":null,"scope":1529,"src":"26195:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1451,"name":"bool","nodeType":"ElementaryTypeName","src":"26195:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"26170:43:0"},"returnParameters":{"id":1460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1456,"mutability":"mutable","name":"successes","nodeType":"VariableDeclaration","overrides":null,"scope":1529,"src":"26240:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1454,"name":"bool","nodeType":"ElementaryTypeName","src":"26240:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1455,"length":null,"nodeType":"ArrayTypeName","src":"26240:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"value":null,"visibility":"internal"},{"constant":false,"id":1459,"mutability":"mutable","name":"results","nodeType":"VariableDeclaration","overrides":null,"scope":1529,"src":"26265:22:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":1457,"name":"bytes","nodeType":"ElementaryTypeName","src":"26265:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":1458,"length":null,"nodeType":"ArrayTypeName","src":"26265:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"value":null,"visibility":"internal"}],"src":"26239:49:0"},"scope":1530,"src":"26156:521:0","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":3138,"src":"24618:2061:0"},{"abstract":false,"baseContracts":[{"arguments":null,"baseName":{"contractScope":null,"id":1531,"name":"BaseBoringBatchable","nodeType":"UserDefinedTypeName","referencedDeclaration":1530,"src":"26709:19:0","typeDescriptions":{"typeIdentifier":"t_contract$_BaseBoringBatchable_$1530","typeString":"contract BaseBoringBatchable"}},"id":1532,"nodeType":"InheritanceSpecifier","src":"26709:19:0"}],"contractDependencies":[1530],"contractKind":"contract","documentation":null,"fullyImplemented":true,"id":1566,"linearizedBaseContracts":[1566,1530],"name":"BoringBatchable","nodeType":"ContractDefinition","nodes":[{"body":{"id":1564,"nodeType":"Block","src":"27266:66:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1555,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"27289:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1556,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1539,"src":"27295:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1557,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1541,"src":"27299:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1558,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1543,"src":"27307:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1559,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1545,"src":"27317:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"argumentTypes":null,"id":1560,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1547,"src":"27320:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"argumentTypes":null,"id":1561,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1549,"src":"27323:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"argumentTypes":null,"id":1552,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1535,"src":"27276:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"id":1554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":66,"src":"27276:12:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":1562,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"27276:49:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1563,"nodeType":"ExpressionStatement","src":"27276:49:0"}]},"documentation":{"id":1533,"nodeType":"StructuredDocumentation","src":"26735:97:0","text":"@notice Call wrapper that performs `ERC20.permit` on `token`.\n Lookup `IERC20.permit`."},"functionSelector":"7c516e94","id":1565,"implemented":true,"kind":"function","modifiers":[],"name":"permitToken","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1535,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":1565,"src":"27093:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":1534,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"27093:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":1537,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","overrides":null,"scope":1565,"src":"27115:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1536,"name":"address","nodeType":"ElementaryTypeName","src":"27115:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1539,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","overrides":null,"scope":1565,"src":"27137:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1538,"name":"address","nodeType":"ElementaryTypeName","src":"27137:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1541,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":1565,"src":"27157:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1540,"name":"uint256","nodeType":"ElementaryTypeName","src":"27157:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1543,"mutability":"mutable","name":"deadline","nodeType":"VariableDeclaration","overrides":null,"scope":1565,"src":"27181:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1542,"name":"uint256","nodeType":"ElementaryTypeName","src":"27181:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1545,"mutability":"mutable","name":"v","nodeType":"VariableDeclaration","overrides":null,"scope":1565,"src":"27207:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1544,"name":"uint8","nodeType":"ElementaryTypeName","src":"27207:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":null,"visibility":"internal"},{"constant":false,"id":1547,"mutability":"mutable","name":"r","nodeType":"VariableDeclaration","overrides":null,"scope":1565,"src":"27224:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1546,"name":"bytes32","nodeType":"ElementaryTypeName","src":"27224:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"},{"constant":false,"id":1549,"mutability":"mutable","name":"s","nodeType":"VariableDeclaration","overrides":null,"scope":1565,"src":"27243:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1548,"name":"bytes32","nodeType":"ElementaryTypeName","src":"27243:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"src":"27083:175:0"},"returnParameters":{"id":1551,"nodeType":"ParameterList","parameters":[],"src":"27266:0:0"},"scope":1566,"src":"27063:269:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":3138,"src":"26681:653:0"},{"abstract":false,"baseContracts":[{"arguments":null,"baseName":{"contractScope":null,"id":1568,"name":"MasterContractManager","nodeType":"UserDefinedTypeName","referencedDeclaration":1421,"src":"27807:21:0","typeDescriptions":{"typeIdentifier":"t_contract$_MasterContractManager_$1421","typeString":"contract MasterContractManager"}},"id":1569,"nodeType":"InheritanceSpecifier","src":"27807:21:0"},{"arguments":null,"baseName":{"contractScope":null,"id":1570,"name":"BoringBatchable","nodeType":"UserDefinedTypeName","referencedDeclaration":1566,"src":"27830:15:0","typeDescriptions":{"typeIdentifier":"t_contract$_BoringBatchable_$1566","typeString":"contract BoringBatchable"}},"id":1571,"nodeType":"InheritanceSpecifier","src":"27830:15:0"}],"contractDependencies":[908,1031,1116,1421,1530,1566],"contractKind":"contract","documentation":{"id":1567,"nodeType":"StructuredDocumentation","src":"27402:382:0","text":"@title BentoBox\n @author BoringCrypto, Keno\n @notice The BentoBox is a vault for tokens. The stored tokens can be flash loaned and used in strategies.\n Yield from this will go to the token depositors.\n Rebasing tokens ARE NOT supported and WILL cause loss of funds.\n Any funds transfered directly onto the BentoBox will be lost, use the deposit function instead."},"fullyImplemented":true,"id":3137,"linearizedBaseContracts":[3137,1566,1530,1421,1116,1031,908],"name":"BentoBoxV1","nodeType":"ContractDefinition","nodes":[{"id":1574,"libraryName":{"contractScope":null,"id":1572,"name":"BoringMath","nodeType":"UserDefinedTypeName","referencedDeclaration":412,"src":"27858:10:0","typeDescriptions":{"typeIdentifier":"t_contract$_BoringMath_$412","typeString":"library BoringMath"}},"nodeType":"UsingForDirective","src":"27852:29:0","typeName":{"id":1573,"name":"uint256","nodeType":"ElementaryTypeName","src":"27873:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"id":1577,"libraryName":{"contractScope":null,"id":1575,"name":"BoringMath128","nodeType":"UserDefinedTypeName","referencedDeclaration":458,"src":"27892:13:0","typeDescriptions":{"typeIdentifier":"t_contract$_BoringMath128_$458","typeString":"library BoringMath128"}},"nodeType":"UsingForDirective","src":"27886:32:0","typeName":{"id":1576,"name":"uint128","nodeType":"ElementaryTypeName","src":"27910:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}},{"id":1580,"libraryName":{"contractScope":null,"id":1578,"name":"BoringERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":260,"src":"27929:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_BoringERC20_$260","typeString":"library BoringERC20"}},"nodeType":"UsingForDirective","src":"27923:29:0","typeName":{"contractScope":null,"id":1579,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"27945:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}}},{"id":1583,"libraryName":{"contractScope":null,"id":1581,"name":"RebaseLibrary","nodeType":"UserDefinedTypeName","referencedDeclaration":903,"src":"27963:13:0","typeDescriptions":{"typeIdentifier":"t_contract$_RebaseLibrary_$903","typeString":"library RebaseLibrary"}},"nodeType":"UsingForDirective","src":"27957:31:0","typeName":{"contractScope":null,"id":1582,"name":"Rebase","nodeType":"UserDefinedTypeName","referencedDeclaration":555,"src":"27981:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage_ptr","typeString":"struct Rebase"}}},{"anonymous":false,"documentation":null,"id":1595,"name":"LogDeposit","nodeType":"EventDefinition","parameters":{"id":1594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1585,"indexed":true,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":1595,"src":"28087:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":1584,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"28087:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":1587,"indexed":true,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","overrides":null,"scope":1595,"src":"28109:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1586,"name":"address","nodeType":"ElementaryTypeName","src":"28109:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1589,"indexed":true,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","overrides":null,"scope":1595,"src":"28131:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1588,"name":"address","nodeType":"ElementaryTypeName","src":"28131:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1591,"indexed":false,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":1595,"src":"28151:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1590,"name":"uint256","nodeType":"ElementaryTypeName","src":"28151:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1593,"indexed":false,"mutability":"mutable","name":"share","nodeType":"VariableDeclaration","overrides":null,"scope":1595,"src":"28167:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1592,"name":"uint256","nodeType":"ElementaryTypeName","src":"28167:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"28086:95:0"},"src":"28070:112:0"},{"anonymous":false,"documentation":null,"id":1607,"name":"LogWithdraw","nodeType":"EventDefinition","parameters":{"id":1606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1597,"indexed":true,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":1607,"src":"28205:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":1596,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"28205:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":1599,"indexed":true,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","overrides":null,"scope":1607,"src":"28227:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1598,"name":"address","nodeType":"ElementaryTypeName","src":"28227:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1601,"indexed":true,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","overrides":null,"scope":1607,"src":"28249:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1600,"name":"address","nodeType":"ElementaryTypeName","src":"28249:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1603,"indexed":false,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":1607,"src":"28269:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1602,"name":"uint256","nodeType":"ElementaryTypeName","src":"28269:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1605,"indexed":false,"mutability":"mutable","name":"share","nodeType":"VariableDeclaration","overrides":null,"scope":1607,"src":"28285:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1604,"name":"uint256","nodeType":"ElementaryTypeName","src":"28285:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"28204:95:0"},"src":"28187:113:0"},{"anonymous":false,"documentation":null,"id":1617,"name":"LogTransfer","nodeType":"EventDefinition","parameters":{"id":1616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1609,"indexed":true,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":1617,"src":"28323:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":1608,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"28323:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":1611,"indexed":true,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","overrides":null,"scope":1617,"src":"28345:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1610,"name":"address","nodeType":"ElementaryTypeName","src":"28345:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1613,"indexed":true,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","overrides":null,"scope":1617,"src":"28367:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1612,"name":"address","nodeType":"ElementaryTypeName","src":"28367:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1615,"indexed":false,"mutability":"mutable","name":"share","nodeType":"VariableDeclaration","overrides":null,"scope":1617,"src":"28387:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1614,"name":"uint256","nodeType":"ElementaryTypeName","src":"28387:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"28322:79:0"},"src":"28305:97:0"},{"anonymous":false,"documentation":null,"id":1629,"name":"LogFlashLoan","nodeType":"EventDefinition","parameters":{"id":1628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1619,"indexed":true,"mutability":"mutable","name":"borrower","nodeType":"VariableDeclaration","overrides":null,"scope":1629,"src":"28427:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1618,"name":"address","nodeType":"ElementaryTypeName","src":"28427:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1621,"indexed":true,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":1629,"src":"28453:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":1620,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"28453:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":1623,"indexed":false,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":1629,"src":"28475:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1622,"name":"uint256","nodeType":"ElementaryTypeName","src":"28475:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1625,"indexed":false,"mutability":"mutable","name":"feeAmount","nodeType":"VariableDeclaration","overrides":null,"scope":1629,"src":"28491:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1624,"name":"uint256","nodeType":"ElementaryTypeName","src":"28491:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1627,"indexed":true,"mutability":"mutable","name":"receiver","nodeType":"VariableDeclaration","overrides":null,"scope":1629,"src":"28510:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1626,"name":"address","nodeType":"ElementaryTypeName","src":"28510:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"28426:109:0"},"src":"28408:128:0"},{"anonymous":false,"documentation":null,"id":1635,"name":"LogStrategyTargetPercentage","nodeType":"EventDefinition","parameters":{"id":1634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1631,"indexed":true,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":1635,"src":"28576:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":1630,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"28576:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":1633,"indexed":false,"mutability":"mutable","name":"targetPercentage","nodeType":"VariableDeclaration","overrides":null,"scope":1635,"src":"28598:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1632,"name":"uint256","nodeType":"ElementaryTypeName","src":"28598:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"28575:48:0"},"src":"28542:82:0"},{"anonymous":false,"documentation":null,"id":1641,"name":"LogStrategyQueued","nodeType":"EventDefinition","parameters":{"id":1640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1637,"indexed":true,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":1641,"src":"28653:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":1636,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"28653:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":1639,"indexed":true,"mutability":"mutable","name":"strategy","nodeType":"VariableDeclaration","overrides":null,"scope":1641,"src":"28675:26:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"},"typeName":{"contractScope":null,"id":1638,"name":"IStrategy","nodeType":"UserDefinedTypeName","referencedDeclaration":147,"src":"28675:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}},"value":null,"visibility":"internal"}],"src":"28652:50:0"},"src":"28629:74:0"},{"anonymous":false,"documentation":null,"id":1647,"name":"LogStrategySet","nodeType":"EventDefinition","parameters":{"id":1646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1643,"indexed":true,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":1647,"src":"28729:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":1642,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"28729:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":1645,"indexed":true,"mutability":"mutable","name":"strategy","nodeType":"VariableDeclaration","overrides":null,"scope":1647,"src":"28751:26:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"},"typeName":{"contractScope":null,"id":1644,"name":"IStrategy","nodeType":"UserDefinedTypeName","referencedDeclaration":147,"src":"28751:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}},"value":null,"visibility":"internal"}],"src":"28728:50:0"},"src":"28708:71:0"},{"anonymous":false,"documentation":null,"id":1653,"name":"LogStrategyInvest","nodeType":"EventDefinition","parameters":{"id":1652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1649,"indexed":true,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":1653,"src":"28808:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":1648,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"28808:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":1651,"indexed":false,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":1653,"src":"28830:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1650,"name":"uint256","nodeType":"ElementaryTypeName","src":"28830:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"28807:38:0"},"src":"28784:62:0"},{"anonymous":false,"documentation":null,"id":1659,"name":"LogStrategyDivest","nodeType":"EventDefinition","parameters":{"id":1658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1655,"indexed":true,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":1659,"src":"28875:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":1654,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"28875:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":1657,"indexed":false,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":1659,"src":"28897:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1656,"name":"uint256","nodeType":"ElementaryTypeName","src":"28897:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"28874:38:0"},"src":"28851:62:0"},{"anonymous":false,"documentation":null,"id":1665,"name":"LogStrategyProfit","nodeType":"EventDefinition","parameters":{"id":1664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1661,"indexed":true,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":1665,"src":"28942:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":1660,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"28942:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":1663,"indexed":false,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":1665,"src":"28964:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1662,"name":"uint256","nodeType":"ElementaryTypeName","src":"28964:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"28941:38:0"},"src":"28918:62:0"},{"anonymous":false,"documentation":null,"id":1671,"name":"LogStrategyLoss","nodeType":"EventDefinition","parameters":{"id":1670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1667,"indexed":true,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":1671,"src":"29007:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":1666,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"29007:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":1669,"indexed":false,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":1671,"src":"29029:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1668,"name":"uint256","nodeType":"ElementaryTypeName","src":"29029:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"29006:38:0"},"src":"28985:60:0"},{"canonicalName":"BentoBoxV1.StrategyData","id":1678,"members":[{"constant":false,"id":1673,"mutability":"mutable","name":"strategyStartDate","nodeType":"VariableDeclaration","overrides":null,"scope":1678,"src":"29160:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1672,"name":"uint64","nodeType":"ElementaryTypeName","src":"29160:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":null,"visibility":"internal"},{"constant":false,"id":1675,"mutability":"mutable","name":"targetPercentage","nodeType":"VariableDeclaration","overrides":null,"scope":1678,"src":"29194:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1674,"name":"uint64","nodeType":"ElementaryTypeName","src":"29194:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":null,"visibility":"internal"},{"constant":false,"id":1677,"mutability":"mutable","name":"balance","nodeType":"VariableDeclaration","overrides":null,"scope":1678,"src":"29227:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1676,"name":"uint128","nodeType":"ElementaryTypeName","src":"29227:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"value":null,"visibility":"internal"}],"name":"StrategyData","nodeType":"StructDefinition","scope":3137,"src":"29130:183:0","visibility":"public"},{"constant":false,"id":1680,"mutability":"immutable","name":"wethToken","nodeType":"VariableDeclaration","overrides":null,"scope":3137,"src":"29570:34:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":1679,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"29570:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"private"},{"constant":true,"id":1685,"mutability":"constant","name":"USE_ETHEREUM","nodeType":"VariableDeclaration","overrides":null,"scope":3137,"src":"29611:48:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":1681,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"29611:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":1683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29657:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1682,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":72,"src":"29650:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$72_$","typeString":"type(contract IERC20)"}},"id":1684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"29650:9:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"visibility":"private"},{"constant":true,"id":1688,"mutability":"constant","name":"FLASH_LOAN_FEE","nodeType":"VariableDeclaration","overrides":null,"scope":3137,"src":"29665:44:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1686,"name":"uint256","nodeType":"ElementaryTypeName","src":"29665:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"argumentTypes":null,"hexValue":"3530","id":1687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29707:2:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"visibility":"private"},{"constant":true,"id":1691,"mutability":"constant","name":"FLASH_LOAN_FEE_PRECISION","nodeType":"VariableDeclaration","overrides":null,"scope":3137,"src":"29724:55:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1689,"name":"uint256","nodeType":"ElementaryTypeName","src":"29724:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"argumentTypes":null,"hexValue":"316535","id":1690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29776:3:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_100000_by_1","typeString":"int_const 100000"},"value":"1e5"},"visibility":"private"},{"constant":true,"id":1694,"mutability":"constant","name":"STRATEGY_DELAY","nodeType":"VariableDeclaration","overrides":null,"scope":3137,"src":"29785:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1692,"name":"uint256","nodeType":"ElementaryTypeName","src":"29785:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"argumentTypes":null,"hexValue":"30","id":1693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29827:7:0","subdenomination":"weeks","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"private"},{"constant":true,"id":1697,"mutability":"constant","name":"MAX_TARGET_PERCENTAGE","nodeType":"VariableDeclaration","overrides":null,"scope":3137,"src":"29840:51:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1695,"name":"uint256","nodeType":"ElementaryTypeName","src":"29840:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"argumentTypes":null,"hexValue":"3935","id":1696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29889:2:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_95_by_1","typeString":"int_const 95"},"value":"95"},"visibility":"private"},{"constant":true,"id":1700,"mutability":"constant","name":"MINIMUM_SHARE_BALANCE","nodeType":"VariableDeclaration","overrides":null,"scope":3137,"src":"29904:53:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1698,"name":"uint256","nodeType":"ElementaryTypeName","src":"29904:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"argumentTypes":null,"hexValue":"31303030","id":1699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29953:4:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"},"value":"1000"},"visibility":"private"},{"constant":false,"functionSelector":"f7888aec","id":1706,"mutability":"mutable","name":"balanceOf","nodeType":"VariableDeclaration","overrides":null,"scope":3137,"src":"30139:63:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"},"typeName":{"id":1705,"keyType":{"contractScope":null,"id":1701,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"30147:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"nodeType":"Mapping","src":"30139:46:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"},"valueType":{"id":1704,"keyType":{"id":1702,"name":"address","nodeType":"ElementaryTypeName","src":"30165:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"30157:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":1703,"name":"uint256","nodeType":"ElementaryTypeName","src":"30176:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"value":null,"visibility":"public"},{"constant":false,"functionSelector":"4ffe34db","id":1710,"mutability":"mutable","name":"totals","nodeType":"VariableDeclaration","overrides":null,"scope":3137,"src":"30244:39:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_struct$_Rebase_$555_storage_$","typeString":"mapping(contract IERC20 => struct Rebase)"},"typeName":{"id":1709,"keyType":{"contractScope":null,"id":1707,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"30252:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"nodeType":"Mapping","src":"30244:25:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_struct$_Rebase_$555_storage_$","typeString":"mapping(contract IERC20 => struct Rebase)"},"valueType":{"contractScope":null,"id":1708,"name":"Rebase","nodeType":"UserDefinedTypeName","referencedDeclaration":555,"src":"30262:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage_ptr","typeString":"struct Rebase"}}},"value":null,"visibility":"public"},{"constant":false,"functionSelector":"228bfd9f","id":1714,"mutability":"mutable","name":"strategy","nodeType":"VariableDeclaration","overrides":null,"scope":3137,"src":"30290:44:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_contract$_IStrategy_$147_$","typeString":"mapping(contract IERC20 => contract IStrategy)"},"typeName":{"id":1713,"keyType":{"contractScope":null,"id":1711,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"30298:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"nodeType":"Mapping","src":"30290:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_contract$_IStrategy_$147_$","typeString":"mapping(contract IERC20 => contract IStrategy)"},"valueType":{"contractScope":null,"id":1712,"name":"IStrategy","nodeType":"UserDefinedTypeName","referencedDeclaration":147,"src":"30308:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}}},"value":null,"visibility":"public"},{"constant":false,"functionSelector":"5108a558","id":1718,"mutability":"mutable","name":"pendingStrategy","nodeType":"VariableDeclaration","overrides":null,"scope":3137,"src":"30340:51:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_contract$_IStrategy_$147_$","typeString":"mapping(contract IERC20 => contract IStrategy)"},"typeName":{"id":1717,"keyType":{"contractScope":null,"id":1715,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"30348:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"nodeType":"Mapping","src":"30340:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_contract$_IStrategy_$147_$","typeString":"mapping(contract IERC20 => contract IStrategy)"},"valueType":{"contractScope":null,"id":1716,"name":"IStrategy","nodeType":"UserDefinedTypeName","referencedDeclaration":147,"src":"30358:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}}},"value":null,"visibility":"public"},{"constant":false,"functionSelector":"df23b45b","id":1722,"mutability":"mutable","name":"strategyData","nodeType":"VariableDeclaration","overrides":null,"scope":3137,"src":"30397:51:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_struct$_StrategyData_$1678_storage_$","typeString":"mapping(contract IERC20 => struct BentoBoxV1.StrategyData)"},"typeName":{"id":1721,"keyType":{"contractScope":null,"id":1719,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"30405:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"nodeType":"Mapping","src":"30397:31:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_struct$_StrategyData_$1678_storage_$","typeString":"mapping(contract IERC20 => struct BentoBoxV1.StrategyData)"},"valueType":{"contractScope":null,"id":1720,"name":"StrategyData","nodeType":"UserDefinedTypeName","referencedDeclaration":1678,"src":"30415:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_storage_ptr","typeString":"struct BentoBoxV1.StrategyData"}}},"value":null,"visibility":"public"},{"body":{"id":1731,"nodeType":"Block","src":"30584:39:0","statements":[{"expression":{"argumentTypes":null,"id":1729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1727,"name":"wethToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1680,"src":"30594:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1728,"name":"wethToken_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"30606:10:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"src":"30594:22:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"id":1730,"nodeType":"ExpressionStatement","src":"30594:22:0"}]},"documentation":null,"id":1732,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1724,"mutability":"mutable","name":"wethToken_","nodeType":"VariableDeclaration","overrides":null,"scope":1732,"src":"30558:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":1723,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"30558:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"}],"src":"30557:19:0"},"returnParameters":{"id":1726,"nodeType":"ParameterList","parameters":[],"src":"30584:0:0"},"scope":3137,"src":"30546:77:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1762,"nodeType":"Block","src":"30813:127:0","statements":[{"assignments":[1742],"declarations":[{"constant":false,"id":1742,"mutability":"mutable","name":"total","nodeType":"VariableDeclaration","overrides":null,"scope":1762,"src":"30823:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase"},"typeName":{"contractScope":null,"id":1741,"name":"Rebase","nodeType":"UserDefinedTypeName","referencedDeclaration":555,"src":"30823:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage_ptr","typeString":"struct Rebase"}},"value":null,"visibility":"internal"}],"id":1743,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"30823:19:0"},{"expression":{"argumentTypes":null,"id":1748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1744,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1742,"src":"30852:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":1746,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"elastic","nodeType":"MemberAccess","referencedDeclaration":552,"src":"30852:13:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1747,"name":"elastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"30868:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"30852:23:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":1749,"nodeType":"ExpressionStatement","src":"30852:23:0"},{"expression":{"argumentTypes":null,"id":1754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1750,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1742,"src":"30885:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":1752,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"base","nodeType":"MemberAccess","referencedDeclaration":554,"src":"30885:10:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1753,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"30898:4:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"30885:17:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":1755,"nodeType":"ExpressionStatement","src":"30885:17:0"},{"expression":{"argumentTypes":null,"id":1760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1756,"name":"totals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"30912:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_struct$_Rebase_$555_storage_$","typeString":"mapping(contract IERC20 => struct Rebase storage ref)"}},"id":1758,"indexExpression":{"argumentTypes":null,"id":1757,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1734,"src":"30919:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"30912:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage","typeString":"struct Rebase storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1759,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1742,"src":"30928:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"src":"30912:21:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage","typeString":"struct Rebase storage ref"}},"id":1761,"nodeType":"ExpressionStatement","src":"30912:21:0"}]},"documentation":null,"functionSelector":"98d1c8f4","id":1763,"implemented":true,"kind":"function","modifiers":[],"name":"setTokenTotal","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1734,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":1763,"src":"30740:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":1733,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"30740:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":1736,"mutability":"mutable","name":"elastic","nodeType":"VariableDeclaration","overrides":null,"scope":1763,"src":"30762:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1735,"name":"uint128","nodeType":"ElementaryTypeName","src":"30762:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"value":null,"visibility":"internal"},{"constant":false,"id":1738,"mutability":"mutable","name":"base","nodeType":"VariableDeclaration","overrides":null,"scope":1763,"src":"30787:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1737,"name":"uint128","nodeType":"ElementaryTypeName","src":"30787:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"value":null,"visibility":"internal"}],"src":"30730:75:0"},"returnParameters":{"id":1740,"nodeType":"ParameterList","parameters":[],"src":"30813:0:0"},"scope":3137,"src":"30708:232:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1808,"nodeType":"Block","src":"31619:388:0","statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1768,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1766,"src":"31633:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1769,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"31641:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"31641:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"31633:18:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1772,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1766,"src":"31655:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1775,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"31671:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_BentoBoxV1_$3137","typeString":"contract BentoBoxV1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BentoBoxV1_$3137","typeString":"contract BentoBoxV1"}],"id":1774,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31663:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1773,"name":"address","nodeType":"ElementaryTypeName","src":"31663:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"31663:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"31655:21:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"31633:43:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1806,"nodeType":"IfStatement","src":"31629:361:0","trueBody":{"id":1805,"nodeType":"Block","src":"31678:312:0","statements":[{"assignments":[1780],"declarations":[{"constant":false,"id":1780,"mutability":"mutable","name":"masterContract","nodeType":"VariableDeclaration","overrides":null,"scope":1805,"src":"31742:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1779,"name":"address","nodeType":"ElementaryTypeName","src":"31742:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"id":1785,"initialValue":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1781,"name":"masterContractOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"31767:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1784,"indexExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1782,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"31784:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"31784:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"31767:28:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"31742:53:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1787,"name":"masterContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"31817:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":1790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31843:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1789,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31835:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1788,"name":"address","nodeType":"ElementaryTypeName","src":"31835:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"31835:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"31817:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"42656e746f426f783a206e6f206d6173746572436f6e7472616374","id":1793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"31847:29:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_d7d14096df5afc631fdc9eae262be0c2759632108b3c050dfdb6c6addefce167","typeString":"literal_string \"BentoBox: no masterContract\""},"value":"BentoBox: no masterContract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d7d14096df5afc631fdc9eae262be0c2759632108b3c050dfdb6c6addefce167","typeString":"literal_string \"BentoBox: no masterContract\""}],"id":1786,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"31809:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"31809:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1795,"nodeType":"ExpressionStatement","src":"31809:68:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1797,"name":"masterContractApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"31899:22:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1799,"indexExpression":{"argumentTypes":null,"id":1798,"name":"masterContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"31922:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"31899:38:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1801,"indexExpression":{"argumentTypes":null,"id":1800,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1766,"src":"31938:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"31899:44:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"42656e746f426f783a205472616e73666572206e6f7420617070726f766564","id":1802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"31945:33:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_a5886c03122dc256fde2b6d013592d60118b2df18772ec3172671a4b2bcdd8ac","typeString":"literal_string \"BentoBox: Transfer not approved\""},"value":"BentoBox: Transfer not approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a5886c03122dc256fde2b6d013592d60118b2df18772ec3172671a4b2bcdd8ac","typeString":"literal_string \"BentoBox: Transfer not approved\""}],"id":1796,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"31891:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"31891:88:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1804,"nodeType":"ExpressionStatement","src":"31891:88:0"}]}},{"id":1807,"nodeType":"PlaceholderStatement","src":"31999:1:0"}]},"documentation":{"id":1764,"nodeType":"StructuredDocumentation","src":"31031:552:0","text":"Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\n If 'from' is msg.sender, it's allowed.\n If 'from' is the BentoBox itself, it's allowed. Any ETH, token balances (above the known balances) or BentoBox balances\n can be taken by anyone.\n This is to enable skimming, not just for deposits, but also for withdrawals or transfers, enabling better composability.\n If 'from' is a clone of a masterContract AND the 'from' address has approved that masterContract, it's allowed."},"id":1809,"name":"allowed","nodeType":"ModifierDefinition","overrides":null,"parameters":{"id":1767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1766,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","overrides":null,"scope":1809,"src":"31605:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1765,"name":"address","nodeType":"ElementaryTypeName","src":"31605:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"31604:14:0"},"src":"31588:419:0","virtual":false,"visibility":"internal"},{"body":{"id":1833,"nodeType":"Block","src":"32346:89:0","statements":[{"expression":{"argumentTypes":null,"id":1831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1817,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1815,"src":"32356:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1826,"name":"strategyData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"32400:12:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_struct$_StrategyData_$1678_storage_$","typeString":"mapping(contract IERC20 => struct BentoBoxV1.StrategyData storage ref)"}},"id":1828,"indexExpression":{"argumentTypes":null,"id":1827,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"32413:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"32400:19:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_storage","typeString":"struct BentoBoxV1.StrategyData storage ref"}},"id":1829,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"32400:27:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1822,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"32389:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_BentoBoxV1_$3137","typeString":"contract BentoBoxV1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BentoBoxV1_$3137","typeString":"contract BentoBoxV1"}],"id":1821,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32381:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1820,"name":"address","nodeType":"ElementaryTypeName","src":"32381:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32381:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"argumentTypes":null,"id":1818,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"32365:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"id":1819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":14,"src":"32365:15:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32365:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":283,"src":"32365:34:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1830,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32365:63:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"32356:72:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1832,"nodeType":"ExpressionStatement","src":"32356:72:0"}]},"documentation":{"id":1810,"nodeType":"StructuredDocumentation","src":"32125:138:0","text":"@dev Returns the total balance of `token` this contracts holds,\n plus the total amount this contract thinks the strategy holds."},"id":1834,"implemented":true,"kind":"function","modifiers":[],"name":"_tokenBalanceOf","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1812,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":1834,"src":"32293:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":1811,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"32293:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"}],"src":"32292:14:0"},"returnParameters":{"id":1816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1815,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":1834,"src":"32330:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1814,"name":"uint256","nodeType":"ElementaryTypeName","src":"32330:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"32329:16:0"},"scope":3137,"src":"32268:167:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1856,"nodeType":"Block","src":"32962:62:0","statements":[{"expression":{"argumentTypes":null,"id":1854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1846,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1844,"src":"32972:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1851,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"33001:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1852,"name":"roundUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1841,"src":"33009:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1847,"name":"totals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"32980:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_struct$_Rebase_$555_storage_$","typeString":"mapping(contract IERC20 => struct Rebase storage ref)"}},"id":1849,"indexExpression":{"argumentTypes":null,"id":1848,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1837,"src":"32987:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"32980:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage","typeString":"struct Rebase storage ref"}},"id":1850,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"toBase","nodeType":"MemberAccess","referencedDeclaration":618,"src":"32980:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Rebase_$555_memory_ptr_$_t_uint256_$_t_bool_$returns$_t_uint256_$bound_to$_t_struct$_Rebase_$555_memory_ptr_$","typeString":"function (struct Rebase memory,uint256,bool) pure returns (uint256)"}},"id":1853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32980:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"32972:45:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1855,"nodeType":"ExpressionStatement","src":"32972:45:0"}]},"documentation":{"id":1835,"nodeType":"StructuredDocumentation","src":"32547:281:0","text":"@dev Helper function to represent an `amount` of `token` in shares.\n @param token The ERC-20 token.\n @param amount The `token` amount.\n @param roundUp If the result `share` should be rounded up.\n @return share The token amount represented in shares."},"functionSelector":"da5139ca","id":1857,"implemented":true,"kind":"function","modifiers":[],"name":"toShare","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1837,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":1857,"src":"32859:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":1836,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"32859:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":1839,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":1857,"src":"32881:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1838,"name":"uint256","nodeType":"ElementaryTypeName","src":"32881:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1841,"mutability":"mutable","name":"roundUp","nodeType":"VariableDeclaration","overrides":null,"scope":1857,"src":"32905:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1840,"name":"bool","nodeType":"ElementaryTypeName","src":"32905:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"32849:74:0"},"returnParameters":{"id":1845,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1844,"mutability":"mutable","name":"share","nodeType":"VariableDeclaration","overrides":null,"scope":1857,"src":"32947:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1843,"name":"uint256","nodeType":"ElementaryTypeName","src":"32947:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"32946:15:0"},"scope":3137,"src":"32833:191:0","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":1879,"nodeType":"Block","src":"33450:65:0","statements":[{"expression":{"argumentTypes":null,"id":1877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1869,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1867,"src":"33460:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1874,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"33493:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1875,"name":"roundUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"33500:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1870,"name":"totals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"33469:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_struct$_Rebase_$555_storage_$","typeString":"mapping(contract IERC20 => struct Rebase storage ref)"}},"id":1872,"indexExpression":{"argumentTypes":null,"id":1871,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1860,"src":"33476:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"33469:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage","typeString":"struct Rebase storage ref"}},"id":1873,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"toElastic","nodeType":"MemberAccess","referencedDeclaration":674,"src":"33469:23:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Rebase_$555_memory_ptr_$_t_uint256_$_t_bool_$returns$_t_uint256_$bound_to$_t_struct$_Rebase_$555_memory_ptr_$","typeString":"function (struct Rebase memory,uint256,bool) pure returns (uint256)"}},"id":1876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33469:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"33460:48:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1878,"nodeType":"ExpressionStatement","src":"33460:48:0"}]},"documentation":{"id":1858,"nodeType":"StructuredDocumentation","src":"33030:285:0","text":"@dev Helper function represent shares back into the `token` amount.\n @param token The ERC-20 token.\n @param share The amount of shares.\n @param roundUp If the result should be rounded up.\n @return amount The share amount back into native representation."},"functionSelector":"56623118","id":1880,"implemented":true,"kind":"function","modifiers":[],"name":"toAmount","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1860,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":1880,"src":"33347:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":1859,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"33347:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":1862,"mutability":"mutable","name":"share","nodeType":"VariableDeclaration","overrides":null,"scope":1880,"src":"33369:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1861,"name":"uint256","nodeType":"ElementaryTypeName","src":"33369:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1864,"mutability":"mutable","name":"roundUp","nodeType":"VariableDeclaration","overrides":null,"scope":1880,"src":"33392:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1863,"name":"bool","nodeType":"ElementaryTypeName","src":"33392:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"33337:73:0"},"returnParameters":{"id":1868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1867,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":1880,"src":"33434:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1866,"name":"uint256","nodeType":"ElementaryTypeName","src":"33434:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"33433:16:0"},"scope":3137,"src":"33320:195:0","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2097,"nodeType":"Block","src":"34265:2620:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1902,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1887,"src":"34301:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":1905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"34315:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1904,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34307:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1903,"name":"address","nodeType":"ElementaryTypeName","src":"34307:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34307:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"34301:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"42656e746f426f783a20746f206e6f7420736574","id":1908,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"34319:22:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_8fe0a0ebc94ce87b7060385c1233e1d905bbe8354ad627a6edf6dbd8f627ab3c","typeString":"literal_string \"BentoBox: to not set\""},"value":"BentoBox: to not set"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8fe0a0ebc94ce87b7060385c1233e1d905bbe8354ad627a6edf6dbd8f627ab3c","typeString":"literal_string \"BentoBox: to not set\""}],"id":1901,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"34293:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34293:49:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1910,"nodeType":"ExpressionStatement","src":"34293:49:0"},{"assignments":[1912],"declarations":[{"constant":false,"id":1912,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":2097,"src":"34412:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":1911,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"34412:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"}],"id":1919,"initialValue":{"argumentTypes":null,"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"id":1915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1913,"name":"token_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"34427:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":1914,"name":"USE_ETHEREUM","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"34437:12:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"src":"34427:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"argumentTypes":null,"id":1917,"name":"token_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"34464:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"id":1918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"34427:43:0","trueExpression":{"argumentTypes":null,"id":1916,"name":"wethToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1680,"src":"34452:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"nodeType":"VariableDeclarationStatement","src":"34412:58:0"},{"assignments":[1921],"declarations":[{"constant":false,"id":1921,"mutability":"mutable","name":"total","nodeType":"VariableDeclaration","overrides":null,"scope":2097,"src":"34480:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase"},"typeName":{"contractScope":null,"id":1920,"name":"Rebase","nodeType":"UserDefinedTypeName","referencedDeclaration":555,"src":"34480:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage_ptr","typeString":"struct Rebase"}},"value":null,"visibility":"internal"}],"id":1925,"initialValue":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1922,"name":"totals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"34502:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_struct$_Rebase_$555_storage_$","typeString":"mapping(contract IERC20 => struct Rebase storage ref)"}},"id":1924,"indexExpression":{"argumentTypes":null,"id":1923,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"34509:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"34502:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage","typeString":"struct Rebase storage ref"}},"nodeType":"VariableDeclarationStatement","src":"34480:35:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":1930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1927,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1921,"src":"34655:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":1928,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"elastic","nodeType":"MemberAccess","referencedDeclaration":552,"src":"34655:13:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"30","id":1929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"34672:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"34655:18:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":1931,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"34677:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"id":1932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"totalSupply","nodeType":"MemberAccess","referencedDeclaration":7,"src":"34677:17:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":1933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34677:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"hexValue":"30","id":1934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"34699:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"34677:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"34655:45:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"42656e746f426f783a204e6f20746f6b656e73","id":1937,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"34702:21:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_4e9af363c0eb225433acce27bef4ffc78237802324193bedd0cef86db26aa88a","typeString":"literal_string \"BentoBox: No tokens\""},"value":"BentoBox: No tokens"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4e9af363c0eb225433acce27bef4ffc78237802324193bedd0cef86db26aa88a","typeString":"literal_string \"BentoBox: No tokens\""}],"id":1926,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"34647:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34647:77:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1939,"nodeType":"ExpressionStatement","src":"34647:77:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1940,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"34738:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":1941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"34747:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"34738:10:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1975,"nodeType":"Block","src":"35143:186:0","statements":[{"expression":{"argumentTypes":null,"id":1973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1967,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"35281:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1970,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"35306:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"74727565","id":1971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"35313:4:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"argumentTypes":null,"id":1968,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1921,"src":"35290:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":1969,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"toElastic","nodeType":"MemberAccess","referencedDeclaration":674,"src":"35290:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Rebase_$555_memory_ptr_$_t_uint256_$_t_bool_$returns$_t_uint256_$bound_to$_t_struct$_Rebase_$555_memory_ptr_$","typeString":"function (struct Rebase memory,uint256,bool) pure returns (uint256)"}},"id":1972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35290:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"35281:37:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1974,"nodeType":"ExpressionStatement","src":"35281:37:0"}]},"id":1976,"nodeType":"IfStatement","src":"34734:595:0","trueBody":{"id":1966,"nodeType":"Block","src":"34750:387:0","statements":[{"expression":{"argumentTypes":null,"id":1949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1943,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"34854:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1946,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"34875:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"66616c7365","id":1947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"34883:5:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"argumentTypes":null,"id":1944,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1921,"src":"34862:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":1945,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"toBase","nodeType":"MemberAccess","referencedDeclaration":618,"src":"34862:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Rebase_$555_memory_ptr_$_t_uint256_$_t_bool_$returns$_t_uint256_$bound_to$_t_struct$_Rebase_$555_memory_ptr_$","typeString":"function (struct Rebase memory,uint256,bool) pure returns (uint256)"}},"id":1948,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34862:27:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"34854:35:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1950,"nodeType":"ExpressionStatement","src":"34854:35:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":1954,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"35041:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"to128","nodeType":"MemberAccess","referencedDeclaration":359,"src":"35041:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint128_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint128)"}},"id":1956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35041:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1951,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1921,"src":"35026:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":1952,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"base","nodeType":"MemberAccess","referencedDeclaration":554,"src":"35026:10:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":1953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":435,"src":"35026:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint128_$_t_uint128_$returns$_t_uint128_$bound_to$_t_uint128_$","typeString":"function (uint128,uint128) pure returns (uint128)"}},"id":1957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35026:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"argumentTypes":null,"id":1958,"name":"MINIMUM_SHARE_BALANCE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"35058:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"35026:53:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1965,"nodeType":"IfStatement","src":"35022:105:0","trueBody":{"id":1964,"nodeType":"Block","src":"35081:46:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"hexValue":"30","id":1960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"35107:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"argumentTypes":null,"hexValue":"30","id":1961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"35110:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1962,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"35106:6:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_rational_0_by_1_$_t_rational_0_by_1_$","typeString":"tuple(int_const 0,int_const 0)"}},"functionReturnParameters":1900,"id":1963,"nodeType":"Return","src":"35099:13:0"}]}}]}},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1978,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"35643:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1981,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"35659:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_BentoBoxV1_$3137","typeString":"contract BentoBoxV1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BentoBoxV1_$3137","typeString":"contract BentoBoxV1"}],"id":1980,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"35651:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1979,"name":"address","nodeType":"ElementaryTypeName","src":"35651:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35651:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"35643:21:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"id":1986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1984,"name":"token_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"35668:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":1985,"name":"USE_ETHEREUM","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"35678:12:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"src":"35668:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"35643:47:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1988,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"35694:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1993,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1921,"src":"35731:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":1994,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"elastic","nodeType":"MemberAccess","referencedDeclaration":552,"src":"35731:13:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1990,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"35720:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}],"id":1989,"name":"_tokenBalanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1834,"src":"35704:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_contract$_IERC20_$72_$returns$_t_uint256_$","typeString":"function (contract IERC20) view returns (uint256)"}},"id":1991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35704:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":305,"src":"35704:26:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35704:41:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"35694:51:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"35643:102:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"42656e746f426f783a20536b696d20746f6f206d756368","id":1998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"35759:25:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_0437eaa0205ada0dd3e2cbc945bdbd0a3aa39c5f7ba00e766d7a75280e66e4de","typeString":"literal_string \"BentoBox: Skim too much\""},"value":"BentoBox: Skim too much"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0437eaa0205ada0dd3e2cbc945bdbd0a3aa39c5f7ba00e766d7a75280e66e4de","typeString":"literal_string \"BentoBox: Skim too much\""}],"id":1977,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"35622:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35622:172:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2000,"nodeType":"ExpressionStatement","src":"35622:172:0"},{"expression":{"argumentTypes":null,"id":2014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2001,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1706,"src":"35805:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":2004,"indexExpression":{"argumentTypes":null,"id":2002,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"35815:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"35805:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2005,"indexExpression":{"argumentTypes":null,"id":2003,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1887,"src":"35822:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"35805:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2012,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"35853:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2006,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1706,"src":"35828:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":2008,"indexExpression":{"argumentTypes":null,"id":2007,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"35838:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"35828:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2010,"indexExpression":{"argumentTypes":null,"id":2009,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1887,"src":"35845:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"35828:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":283,"src":"35828:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35828:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"35805:54:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2015,"nodeType":"ExpressionStatement","src":"35805:54:0"},{"expression":{"argumentTypes":null,"id":2026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2016,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1921,"src":"35869:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":2018,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"base","nodeType":"MemberAccess","referencedDeclaration":554,"src":"35869:10:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":2022,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"35897:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"to128","nodeType":"MemberAccess","referencedDeclaration":359,"src":"35897:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint128_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint128)"}},"id":2024,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35897:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2019,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1921,"src":"35882:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":2020,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"base","nodeType":"MemberAccess","referencedDeclaration":554,"src":"35882:10:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":2021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":435,"src":"35882:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint128_$_t_uint128_$returns$_t_uint128_$bound_to$_t_uint128_$","typeString":"function (uint128,uint128) pure returns (uint128)"}},"id":2025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35882:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"35869:42:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":2027,"nodeType":"ExpressionStatement","src":"35869:42:0"},{"expression":{"argumentTypes":null,"id":2038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2028,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1921,"src":"35921:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":2030,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"elastic","nodeType":"MemberAccess","referencedDeclaration":552,"src":"35921:13:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":2034,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"35955:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"to128","nodeType":"MemberAccess","referencedDeclaration":359,"src":"35955:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint128_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint128)"}},"id":2036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35955:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2031,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1921,"src":"35937:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":2032,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"elastic","nodeType":"MemberAccess","referencedDeclaration":552,"src":"35937:13:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":2033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":435,"src":"35937:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint128_$_t_uint128_$returns$_t_uint128_$bound_to$_t_uint128_$","typeString":"function (uint128,uint128) pure returns (uint128)"}},"id":2037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35937:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"35921:49:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":2039,"nodeType":"ExpressionStatement","src":"35921:49:0"},{"expression":{"argumentTypes":null,"id":2044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2040,"name":"totals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"35980:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_struct$_Rebase_$555_storage_$","typeString":"mapping(contract IERC20 => struct Rebase storage ref)"}},"id":2042,"indexExpression":{"argumentTypes":null,"id":2041,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"35987:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"35980:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage","typeString":"struct Rebase storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":2043,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1921,"src":"35996:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"src":"35980:21:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage","typeString":"struct Rebase storage ref"}},"id":2045,"nodeType":"ExpressionStatement","src":"35980:21:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"id":2048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2046,"name":"token_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"36112:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":2047,"name":"USE_ETHEREUM","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"36122:12:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"src":"36112:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2061,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"36459:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2064,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"36475:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_BentoBoxV1_$3137","typeString":"contract BentoBoxV1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BentoBoxV1_$3137","typeString":"contract BentoBoxV1"}],"id":2063,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"36467:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2062,"name":"address","nodeType":"ElementaryTypeName","src":"36467:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":2065,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36467:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"36459:21:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2079,"nodeType":"IfStatement","src":"36455:313:0","trueBody":{"id":2078,"nodeType":"Block","src":"36482:286:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2070,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"36729:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2073,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"36743:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_BentoBoxV1_$3137","typeString":"contract BentoBoxV1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BentoBoxV1_$3137","typeString":"contract BentoBoxV1"}],"id":2072,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"36735:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2071,"name":"address","nodeType":"ElementaryTypeName","src":"36735:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":2074,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36735:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"id":2075,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"36750:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":2067,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"36706:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"id":2069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":259,"src":"36706:22:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$72_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$72_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":2076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36706:51:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2077,"nodeType":"ExpressionStatement","src":"36706:51:0"}]}},"id":2080,"nodeType":"IfStatement","src":"36108:660:0","trueBody":{"id":2060,"nodeType":"Block","src":"36136:313:0","statements":[{"expression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2052,"name":"wethToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1680,"src":"36402:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}],"id":2051,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"36394:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2050,"name":"address","nodeType":"ElementaryTypeName","src":"36394:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":2053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36394:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2049,"name":"IWETH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":114,"src":"36388:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IWETH_$114_$","typeString":"type(contract IWETH)"}},"id":2054,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36388:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IWETH_$114","typeString":"contract IWETH"}},"id":2055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"deposit","nodeType":"MemberAccess","referencedDeclaration":108,"src":"36388:33:0","typeDescriptions":{"typeIdentifier":"t_function_external_payable$__$returns$__$","typeString":"function () payable external"}},"id":2057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"argumentTypes":null,"id":2056,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"36429:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"36388:48:0","typeDescriptions":{"typeIdentifier":"t_function_external_payable$__$returns$__$value","typeString":"function () payable external"}},"id":2058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36388:50:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2059,"nodeType":"ExpressionStatement","src":"36388:50:0"}]}},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2082,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"36793:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},{"argumentTypes":null,"id":2083,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"36800:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2084,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1887,"src":"36806:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2085,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"36810:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":2086,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"36818:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2081,"name":"LogDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1595,"src":"36782:10:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$72_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,address,uint256,uint256)"}},"id":2087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36782:42:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2088,"nodeType":"EmitStatement","src":"36777:47:0"},{"expression":{"argumentTypes":null,"id":2091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":2089,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1897,"src":"36834:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":2090,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"36846:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"36834:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2092,"nodeType":"ExpressionStatement","src":"36834:18:0"},{"expression":{"argumentTypes":null,"id":2095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":2093,"name":"shareOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1899,"src":"36862:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":2094,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"36873:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"36862:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2096,"nodeType":"ExpressionStatement","src":"36862:16:0"}]},"documentation":{"id":1881,"nodeType":"StructuredDocumentation","src":"33521:529:0","text":"@notice Deposit an amount of `token` represented in either `amount` or `share`.\n @param token_ The ERC-20 token to deposit.\n @param from which account to pull the tokens.\n @param to which account to push the tokens.\n @param amount Token amount in native representation to deposit.\n @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\n @return amountOut The amount deposited.\n @return shareOut The deposited amount represented in shares."},"functionSelector":"02b9446c","id":2098,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"argumentTypes":null,"id":1894,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"34213:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":1895,"modifierName":{"argumentTypes":null,"id":1893,"name":"allowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1809,"src":"34205:7:0","typeDescriptions":{"typeIdentifier":"t_modifier$_t_address_$","typeString":"modifier (address)"}},"nodeType":"ModifierInvocation","src":"34205:13:0"}],"name":"deposit","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":1892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1883,"mutability":"mutable","name":"token_","nodeType":"VariableDeclaration","overrides":null,"scope":2098,"src":"34081:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":1882,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"34081:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":1885,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","overrides":null,"scope":2098,"src":"34104:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1884,"name":"address","nodeType":"ElementaryTypeName","src":"34104:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1887,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","overrides":null,"scope":2098,"src":"34126:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1886,"name":"address","nodeType":"ElementaryTypeName","src":"34126:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1889,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":2098,"src":"34146:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1888,"name":"uint256","nodeType":"ElementaryTypeName","src":"34146:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1891,"mutability":"mutable","name":"share","nodeType":"VariableDeclaration","overrides":null,"scope":2098,"src":"34170:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1890,"name":"uint256","nodeType":"ElementaryTypeName","src":"34170:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"34071:118:0"},"returnParameters":{"id":1900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1897,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","overrides":null,"scope":2098,"src":"34228:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1896,"name":"uint256","nodeType":"ElementaryTypeName","src":"34228:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1899,"mutability":"mutable","name":"shareOut","nodeType":"VariableDeclaration","overrides":null,"scope":2098,"src":"34247:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1898,"name":"uint256","nodeType":"ElementaryTypeName","src":"34247:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"34227:37:0"},"scope":3137,"src":"34055:2830:0","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":2277,"nodeType":"Block","src":"37480:1911:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2120,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"37516:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":2123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"37530:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2122,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"37522:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2121,"name":"address","nodeType":"ElementaryTypeName","src":"37522:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":2124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"37522:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"37516:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"42656e746f426f783a20746f206e6f7420736574","id":2126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"37534:22:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_8fe0a0ebc94ce87b7060385c1233e1d905bbe8354ad627a6edf6dbd8f627ab3c","typeString":"literal_string \"BentoBox: to not set\""},"value":"BentoBox: to not set"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8fe0a0ebc94ce87b7060385c1233e1d905bbe8354ad627a6edf6dbd8f627ab3c","typeString":"literal_string \"BentoBox: to not set\""}],"id":2119,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"37508:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"37508:49:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2128,"nodeType":"ExpressionStatement","src":"37508:49:0"},{"assignments":[2130],"declarations":[{"constant":false,"id":2130,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":2277,"src":"37627:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":2129,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"37627:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"}],"id":2137,"initialValue":{"argumentTypes":null,"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"id":2133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2131,"name":"token_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"37642:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":2132,"name":"USE_ETHEREUM","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"37652:12:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"src":"37642:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"argumentTypes":null,"id":2135,"name":"token_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"37679:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"id":2136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"37642:43:0","trueExpression":{"argumentTypes":null,"id":2134,"name":"wethToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1680,"src":"37667:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"nodeType":"VariableDeclarationStatement","src":"37627:58:0"},{"assignments":[2139],"declarations":[{"constant":false,"id":2139,"mutability":"mutable","name":"total","nodeType":"VariableDeclaration","overrides":null,"scope":2277,"src":"37695:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase"},"typeName":{"contractScope":null,"id":2138,"name":"Rebase","nodeType":"UserDefinedTypeName","referencedDeclaration":555,"src":"37695:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage_ptr","typeString":"struct Rebase"}},"value":null,"visibility":"internal"}],"id":2143,"initialValue":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2140,"name":"totals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"37717:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_struct$_Rebase_$555_storage_$","typeString":"mapping(contract IERC20 => struct Rebase storage ref)"}},"id":2142,"indexExpression":{"argumentTypes":null,"id":2141,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"37724:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"37717:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage","typeString":"struct Rebase storage ref"}},"nodeType":"VariableDeclarationStatement","src":"37695:35:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2144,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"37744:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":2145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"37753:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"37744:10:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2164,"nodeType":"Block","src":"37957:149:0","statements":[{"expression":{"argumentTypes":null,"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":2156,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2107,"src":"38057:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2159,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"38082:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"66616c7365","id":2160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"38089:5:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"argumentTypes":null,"id":2157,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"38066:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":2158,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"toElastic","nodeType":"MemberAccess","referencedDeclaration":674,"src":"38066:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Rebase_$555_memory_ptr_$_t_uint256_$_t_bool_$returns$_t_uint256_$bound_to$_t_struct$_Rebase_$555_memory_ptr_$","typeString":"function (struct Rebase memory,uint256,bool) pure returns (uint256)"}},"id":2161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38066:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"38057:38:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2163,"nodeType":"ExpressionStatement","src":"38057:38:0"}]},"id":2165,"nodeType":"IfStatement","src":"37740:366:0","trueBody":{"id":2155,"nodeType":"Block","src":"37756:195:0","statements":[{"expression":{"argumentTypes":null,"id":2153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":2147,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"37906:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2150,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2107,"src":"37927:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"74727565","id":2151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"37935:4:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"argumentTypes":null,"id":2148,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"37914:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":2149,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"toBase","nodeType":"MemberAccess","referencedDeclaration":618,"src":"37914:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Rebase_$555_memory_ptr_$_t_uint256_$_t_bool_$returns$_t_uint256_$bound_to$_t_struct$_Rebase_$555_memory_ptr_$","typeString":"function (struct Rebase memory,uint256,bool) pure returns (uint256)"}},"id":2152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"37914:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"37906:34:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2154,"nodeType":"ExpressionStatement","src":"37906:34:0"}]}},{"expression":{"argumentTypes":null,"id":2179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2166,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1706,"src":"38116:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":2169,"indexExpression":{"argumentTypes":null,"id":2167,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"38126:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"38116:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2170,"indexExpression":{"argumentTypes":null,"id":2168,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"38133:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"38116:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2177,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"38168:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2171,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1706,"src":"38141:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":2173,"indexExpression":{"argumentTypes":null,"id":2172,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"38151:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"38141:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2175,"indexExpression":{"argumentTypes":null,"id":2174,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"38158:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"38141:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":305,"src":"38141:26:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38141:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"38116:58:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2180,"nodeType":"ExpressionStatement","src":"38116:58:0"},{"expression":{"argumentTypes":null,"id":2191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2181,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"38184:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":2183,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"elastic","nodeType":"MemberAccess","referencedDeclaration":552,"src":"38184:13:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":2187,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2107,"src":"38218:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"to128","nodeType":"MemberAccess","referencedDeclaration":359,"src":"38218:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint128_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint128)"}},"id":2189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38218:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2184,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"38200:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":2185,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"elastic","nodeType":"MemberAccess","referencedDeclaration":552,"src":"38200:13:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":2186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":457,"src":"38200:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint128_$_t_uint128_$returns$_t_uint128_$bound_to$_t_uint128_$","typeString":"function (uint128,uint128) pure returns (uint128)"}},"id":2190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38200:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"38184:49:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":2192,"nodeType":"ExpressionStatement","src":"38184:49:0"},{"expression":{"argumentTypes":null,"id":2203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2193,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"38243:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":2195,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"base","nodeType":"MemberAccess","referencedDeclaration":554,"src":"38243:10:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":2199,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"38271:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"to128","nodeType":"MemberAccess","referencedDeclaration":359,"src":"38271:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint128_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint128)"}},"id":2201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38271:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2196,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"38256:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":2197,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"base","nodeType":"MemberAccess","referencedDeclaration":554,"src":"38256:10:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":457,"src":"38256:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint128_$_t_uint128_$returns$_t_uint128_$bound_to$_t_uint128_$","typeString":"function (uint128,uint128) pure returns (uint128)"}},"id":2202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38256:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"38243:42:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":2204,"nodeType":"ExpressionStatement","src":"38243:42:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2206,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"38428:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":2207,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"base","nodeType":"MemberAccess","referencedDeclaration":554,"src":"38428:10:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"id":2208,"name":"MINIMUM_SHARE_BALANCE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"38442:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"38428:35:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":2213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2210,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"38467:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"id":2211,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"base","nodeType":"MemberAccess","referencedDeclaration":554,"src":"38467:10:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":2212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"38481:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"38467:15:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"38428:54:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"42656e746f426f783a2063616e6e6f7420656d707479","id":2215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"38484:24:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_3a09419fc78523f3366d766a341e48736ccec3b7137bd25440cf4f43d1a0ccc0","typeString":"literal_string \"BentoBox: cannot empty\""},"value":"BentoBox: cannot empty"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3a09419fc78523f3366d766a341e48736ccec3b7137bd25440cf4f43d1a0ccc0","typeString":"literal_string \"BentoBox: cannot empty\""}],"id":2205,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"38420:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38420:89:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2217,"nodeType":"ExpressionStatement","src":"38420:89:0"},{"expression":{"argumentTypes":null,"id":2222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2218,"name":"totals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"38519:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_struct$_Rebase_$555_storage_$","typeString":"mapping(contract IERC20 => struct Rebase storage ref)"}},"id":2220,"indexExpression":{"argumentTypes":null,"id":2219,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"38526:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"38519:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage","typeString":"struct Rebase storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":2221,"name":"total","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"38535:5:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_memory_ptr","typeString":"struct Rebase memory"}},"src":"38519:21:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage","typeString":"struct Rebase storage ref"}},"id":2223,"nodeType":"ExpressionStatement","src":"38519:21:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"id":2226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2224,"name":"token_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"38579:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":2225,"name":"USE_ETHEREUM","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"38589:12:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"src":"38579:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2259,"nodeType":"Block","src":"39030:243:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2255,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"39251:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2256,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2107,"src":"39255:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":2252,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"39232:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"id":2254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":209,"src":"39232:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$72_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$72_$","typeString":"function (contract IERC20,address,uint256)"}},"id":2257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"39232:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2258,"nodeType":"ExpressionStatement","src":"39232:30:0"}]},"id":2260,"nodeType":"IfStatement","src":"38575:698:0","trueBody":{"id":2251,"nodeType":"Block","src":"38603:421:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2234,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2107,"src":"38766:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2230,"name":"wethToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1680,"src":"38745:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}],"id":2229,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"38737:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2228,"name":"address","nodeType":"ElementaryTypeName","src":"38737:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":2231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38737:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2227,"name":"IWETH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":114,"src":"38731:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IWETH_$114_$","typeString":"type(contract IWETH)"}},"id":2232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38731:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IWETH_$114","typeString":"contract IWETH"}},"id":2233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"withdraw","nodeType":"MemberAccess","referencedDeclaration":113,"src":"38731:34:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256) external"}},"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38731:42:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2236,"nodeType":"ExpressionStatement","src":"38731:42:0"},{"assignments":[2238,null],"declarations":[{"constant":false,"id":2238,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","overrides":null,"scope":2251,"src":"38906:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2237,"name":"bool","nodeType":"ElementaryTypeName","src":"38906:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},null],"id":2245,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"","id":2243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"38947:2:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":null,"id":2239,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"38924:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","referencedDeclaration":null,"src":"38924:7:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"argumentTypes":null,"id":2241,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2107,"src":"38939:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"38924:22:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38924:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"38905:45:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2247,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"38972:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"42656e746f426f783a20455448207472616e73666572206661696c6564","id":2248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"38981:31:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_ed75230845a0b3ad13f9a81669264ef413cffb7c9fdcdf7ecdf90a793a31b639","typeString":"literal_string \"BentoBox: ETH transfer failed\""},"value":"BentoBox: ETH transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ed75230845a0b3ad13f9a81669264ef413cffb7c9fdcdf7ecdf90a793a31b639","typeString":"literal_string \"BentoBox: ETH transfer failed\""}],"id":2246,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"38964:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38964:49:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2250,"nodeType":"ExpressionStatement","src":"38964:49:0"}]}},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2262,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"39299:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},{"argumentTypes":null,"id":2263,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"39306:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2264,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"39312:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2265,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2107,"src":"39316:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":2266,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"39324:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2261,"name":"LogWithdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1607,"src":"39287:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$72_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,address,uint256,uint256)"}},"id":2267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"39287:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2268,"nodeType":"EmitStatement","src":"39282:48:0"},{"expression":{"argumentTypes":null,"id":2271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":2269,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"39340:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":2270,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2107,"src":"39352:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"39340:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2272,"nodeType":"ExpressionStatement","src":"39340:18:0"},{"expression":{"argumentTypes":null,"id":2275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":2273,"name":"shareOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2117,"src":"39368:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":2274,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"39379:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"39368:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2276,"nodeType":"ExpressionStatement","src":"39368:16:0"}]},"documentation":{"id":2099,"nodeType":"StructuredDocumentation","src":"36891:381:0","text":"@notice Withdraws an amount of `token` from a user account.\n @param token_ The ERC-20 token to withdraw.\n @param from which user to pull the tokens.\n @param to which user to push the tokens.\n @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\n @param share Like above, but `share` takes precedence over `amount`."},"functionSelector":"97da6d30","id":2278,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"argumentTypes":null,"id":2112,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"37428:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2113,"modifierName":{"argumentTypes":null,"id":2111,"name":"allowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1809,"src":"37420:7:0","typeDescriptions":{"typeIdentifier":"t_modifier$_t_address_$","typeString":"modifier (address)"}},"nodeType":"ModifierInvocation","src":"37420:13:0"}],"name":"withdraw","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2101,"mutability":"mutable","name":"token_","nodeType":"VariableDeclaration","overrides":null,"scope":2278,"src":"37304:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":2100,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"37304:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":2103,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","overrides":null,"scope":2278,"src":"37327:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2102,"name":"address","nodeType":"ElementaryTypeName","src":"37327:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2105,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","overrides":null,"scope":2278,"src":"37349:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2104,"name":"address","nodeType":"ElementaryTypeName","src":"37349:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2107,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":2278,"src":"37369:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2106,"name":"uint256","nodeType":"ElementaryTypeName","src":"37369:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":2109,"mutability":"mutable","name":"share","nodeType":"VariableDeclaration","overrides":null,"scope":2278,"src":"37393:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2108,"name":"uint256","nodeType":"ElementaryTypeName","src":"37393:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"37294:118:0"},"returnParameters":{"id":2118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2115,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","overrides":null,"scope":2278,"src":"37443:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2114,"name":"uint256","nodeType":"ElementaryTypeName","src":"37443:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":2117,"mutability":"mutable","name":"shareOut","nodeType":"VariableDeclaration","overrides":null,"scope":2278,"src":"37462:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2116,"name":"uint256","nodeType":"ElementaryTypeName","src":"37462:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"37442:37:0"},"scope":3137,"src":"37277:2114:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2340,"nodeType":"Block","src":"40025:327:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2294,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2285,"src":"40061:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":2297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"40075:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2296,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"40067:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2295,"name":"address","nodeType":"ElementaryTypeName","src":"40067:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":2298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40067:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"40061:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"42656e746f426f783a20746f206e6f7420736574","id":2300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"40079:22:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_8fe0a0ebc94ce87b7060385c1233e1d905bbe8354ad627a6edf6dbd8f627ab3c","typeString":"literal_string \"BentoBox: to not set\""},"value":"BentoBox: to not set"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8fe0a0ebc94ce87b7060385c1233e1d905bbe8354ad627a6edf6dbd8f627ab3c","typeString":"literal_string \"BentoBox: to not set\""}],"id":2293,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"40053:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40053:49:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2302,"nodeType":"ExpressionStatement","src":"40053:49:0"},{"expression":{"argumentTypes":null,"id":2316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2303,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1706,"src":"40172:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":2306,"indexExpression":{"argumentTypes":null,"id":2304,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"40182:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"40172:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2307,"indexExpression":{"argumentTypes":null,"id":2305,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2283,"src":"40189:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"40172:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2314,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2287,"src":"40224:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2308,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1706,"src":"40197:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":2310,"indexExpression":{"argumentTypes":null,"id":2309,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"40207:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"40197:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2312,"indexExpression":{"argumentTypes":null,"id":2311,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2283,"src":"40214:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"40197:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":305,"src":"40197:26:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40197:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"40172:58:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2317,"nodeType":"ExpressionStatement","src":"40172:58:0"},{"expression":{"argumentTypes":null,"id":2331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2318,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1706,"src":"40240:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":2321,"indexExpression":{"argumentTypes":null,"id":2319,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"40250:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"40240:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2322,"indexExpression":{"argumentTypes":null,"id":2320,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2285,"src":"40257:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"40240:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2329,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2287,"src":"40288:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2323,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1706,"src":"40263:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":2325,"indexExpression":{"argumentTypes":null,"id":2324,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"40273:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"40263:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2327,"indexExpression":{"argumentTypes":null,"id":2326,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2285,"src":"40280:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"40263:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":283,"src":"40263:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40263:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"40240:54:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2332,"nodeType":"ExpressionStatement","src":"40240:54:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2334,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"40322:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},{"argumentTypes":null,"id":2335,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2283,"src":"40329:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2336,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2285,"src":"40335:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2337,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2287,"src":"40339:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2333,"name":"LogTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"40310:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$72_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":2338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40310:35:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2339,"nodeType":"EmitStatement","src":"40305:40:0"}]},"documentation":{"id":2279,"nodeType":"StructuredDocumentation","src":"39397:268:0","text":"@notice Transfer shares from a user account to another one.\n @param token The ERC-20 token to transfer.\n @param from which user to pull the tokens.\n @param to which user to push the tokens.\n @param share The amount of `token` in shares."},"functionSelector":"f18d03cc","id":2341,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"argumentTypes":null,"id":2290,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2283,"src":"40019:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2291,"modifierName":{"argumentTypes":null,"id":2289,"name":"allowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1809,"src":"40011:7:0","typeDescriptions":{"typeIdentifier":"t_modifier$_t_address_$","typeString":"modifier (address)"}},"nodeType":"ModifierInvocation","src":"40011:13:0"}],"name":"transfer","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2281,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":2341,"src":"39920:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":2280,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"39920:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":2283,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","overrides":null,"scope":2341,"src":"39942:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2282,"name":"address","nodeType":"ElementaryTypeName","src":"39942:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2285,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","overrides":null,"scope":2341,"src":"39964:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2284,"name":"address","nodeType":"ElementaryTypeName","src":"39964:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2287,"mutability":"mutable","name":"share","nodeType":"VariableDeclaration","overrides":null,"scope":2341,"src":"39984:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2286,"name":"uint256","nodeType":"ElementaryTypeName","src":"39984:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"39910:93:0"},"returnParameters":{"id":2292,"nodeType":"ParameterList","parameters":[],"src":"40025:0:0"},"scope":3137,"src":"39893:459:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2446,"nodeType":"Block","src":"40958:559:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2359,"name":"tos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2349,"src":"40994:3:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2361,"indexExpression":{"argumentTypes":null,"hexValue":"30","id":2360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"40998:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"40994:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":2364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"41012:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2363,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"41004:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2362,"name":"address","nodeType":"ElementaryTypeName","src":"41004:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":2365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"41004:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"40994:20:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"42656e746f426f783a20746f5b305d206e6f7420736574","id":2367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"41016:25:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_86e38d8947702dc88c8a2cb40de95cb4c5aa30b612f692f9ec7fe577d43db136","typeString":"literal_string \"BentoBox: to[0] not set\""},"value":"BentoBox: to[0] not set"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_86e38d8947702dc88c8a2cb40de95cb4c5aa30b612f692f9ec7fe577d43db136","typeString":"literal_string \"BentoBox: to[0] not set\""}],"id":2358,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"40986:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40986:56:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2369,"nodeType":"ExpressionStatement","src":"40986:56:0"},{"assignments":[2371],"declarations":[{"constant":false,"id":2371,"mutability":"mutable","name":"totalAmount","nodeType":"VariableDeclaration","overrides":null,"scope":2446,"src":"41112:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2370,"name":"uint256","nodeType":"ElementaryTypeName","src":"41112:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2372,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"41112:19:0"},{"assignments":[2374],"declarations":[{"constant":false,"id":2374,"mutability":"mutable","name":"len","nodeType":"VariableDeclaration","overrides":null,"scope":2446,"src":"41141:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2373,"name":"uint256","nodeType":"ElementaryTypeName","src":"41141:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2377,"initialValue":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2375,"name":"tos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2349,"src":"41155:3:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","referencedDeclaration":null,"src":"41155:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"41141:24:0"},{"body":{"id":2429,"nodeType":"Block","src":"41209:228:0","statements":[{"assignments":[2389],"declarations":[{"constant":false,"id":2389,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","overrides":null,"scope":2429,"src":"41223:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2388,"name":"address","nodeType":"ElementaryTypeName","src":"41223:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"id":2393,"initialValue":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2390,"name":"tos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2349,"src":"41236:3:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2392,"indexExpression":{"argumentTypes":null,"id":2391,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"41240:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"41236:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"41223:19:0"},{"expression":{"argumentTypes":null,"id":2409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2394,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1706,"src":"41256:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":2397,"indexExpression":{"argumentTypes":null,"id":2395,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2344,"src":"41266:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"41256:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2398,"indexExpression":{"argumentTypes":null,"id":2396,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2389,"src":"41273:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"41256:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2405,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2352,"src":"41304:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2407,"indexExpression":{"argumentTypes":null,"id":2406,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"41311:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"41304:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2399,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1706,"src":"41279:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":2401,"indexExpression":{"argumentTypes":null,"id":2400,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2344,"src":"41289:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"41279:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2403,"indexExpression":{"argumentTypes":null,"id":2402,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2389,"src":"41296:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"41279:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":283,"src":"41279:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"41279:35:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"41256:58:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2410,"nodeType":"ExpressionStatement","src":"41256:58:0"},{"expression":{"argumentTypes":null,"id":2418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":2411,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2371,"src":"41328:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2414,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2352,"src":"41358:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2416,"indexExpression":{"argumentTypes":null,"id":2415,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"41365:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"41358:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":2412,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2371,"src":"41342:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":283,"src":"41342:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"41342:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"41328:40:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2419,"nodeType":"ExpressionStatement","src":"41328:40:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2421,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2344,"src":"41399:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},{"argumentTypes":null,"id":2422,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2346,"src":"41406:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2423,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2389,"src":"41412:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2424,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2352,"src":"41416:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2426,"indexExpression":{"argumentTypes":null,"id":2425,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"41423:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"41416:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2420,"name":"LogTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"41387:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$72_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":2427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"41387:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2428,"nodeType":"EmitStatement","src":"41382:44:0"}]},"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2382,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"41195:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"argumentTypes":null,"id":2383,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"41199:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"41195:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2430,"initializationExpression":{"assignments":[2379],"declarations":[{"constant":false,"id":2379,"mutability":"mutable","name":"i","nodeType":"VariableDeclaration","overrides":null,"scope":2430,"src":"41180:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2378,"name":"uint256","nodeType":"ElementaryTypeName","src":"41180:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2381,"initialValue":{"argumentTypes":null,"hexValue":"30","id":2380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"41192:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"41180:13:0"},"loopExpression":{"expression":{"argumentTypes":null,"id":2386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"41204:3:0","subExpression":{"argumentTypes":null,"id":2385,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"41204:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2387,"nodeType":"ExpressionStatement","src":"41204:3:0"},"nodeType":"ForStatement","src":"41175:262:0"},{"expression":{"argumentTypes":null,"id":2444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2431,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1706,"src":"41446:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":2434,"indexExpression":{"argumentTypes":null,"id":2432,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2344,"src":"41456:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"41446:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2435,"indexExpression":{"argumentTypes":null,"id":2433,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2346,"src":"41463:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"41446:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2442,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2371,"src":"41498:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2436,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1706,"src":"41471:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(contract IERC20 => mapping(address => uint256))"}},"id":2438,"indexExpression":{"argumentTypes":null,"id":2437,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2344,"src":"41481:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"41471:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2440,"indexExpression":{"argumentTypes":null,"id":2439,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2346,"src":"41488:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"41471:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":305,"src":"41471:26:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"41471:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"41446:64:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2445,"nodeType":"ExpressionStatement","src":"41446:64:0"}]},"documentation":{"id":2342,"nodeType":"StructuredDocumentation","src":"40358:303:0","text":"@notice Transfer shares from a user account to multiple other ones.\n @param token The ERC-20 token to transfer.\n @param from which user to pull the tokens.\n @param tos The receivers of the tokens.\n @param shares The amount of `token` in shares for each receiver in `tos`."},"functionSelector":"0fca8843","id":2447,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"argumentTypes":null,"id":2355,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2346,"src":"40952:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2356,"modifierName":{"argumentTypes":null,"id":2354,"name":"allowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1809,"src":"40944:7:0","typeDescriptions":{"typeIdentifier":"t_modifier$_t_address_$","typeString":"modifier (address)"}},"nodeType":"ModifierInvocation","src":"40944:13:0"}],"name":"transferMultiple","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2344,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":2447,"src":"40829:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":2343,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"40829:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":2346,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","overrides":null,"scope":2447,"src":"40851:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2345,"name":"address","nodeType":"ElementaryTypeName","src":"40851:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2349,"mutability":"mutable","name":"tos","nodeType":"VariableDeclaration","overrides":null,"scope":2447,"src":"40873:22:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2347,"name":"address","nodeType":"ElementaryTypeName","src":"40873:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2348,"length":null,"nodeType":"ArrayTypeName","src":"40873:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"value":null,"visibility":"internal"},{"constant":false,"id":2352,"mutability":"mutable","name":"shares","nodeType":"VariableDeclaration","overrides":null,"scope":2447,"src":"40905:25:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2350,"name":"uint256","nodeType":"ElementaryTypeName","src":"40905:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2351,"length":null,"nodeType":"ArrayTypeName","src":"40905:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"value":null,"visibility":"internal"}],"src":"40819:117:0"},"returnParameters":{"id":2357,"nodeType":"ParameterList","parameters":[],"src":"40958:0:0"},"scope":3137,"src":"40794:723:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2515,"nodeType":"Block","src":"42435:384:0","statements":[{"assignments":[2462],"declarations":[{"constant":false,"id":2462,"mutability":"mutable","name":"fee","nodeType":"VariableDeclaration","overrides":null,"scope":2515,"src":"42445:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2461,"name":"uint256","nodeType":"ElementaryTypeName","src":"42445:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2469,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2465,"name":"FLASH_LOAN_FEE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"42470:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":2463,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2456,"src":"42459:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":333,"src":"42459:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"42459:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":2467,"name":"FLASH_LOAN_FEE_PRECISION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"42488:24:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"42459:53:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"42445:67:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2473,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2452,"src":"42541:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2474,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2456,"src":"42551:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":2470,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2454,"src":"42522:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"id":2472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":209,"src":"42522:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$72_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$72_$","typeString":"function (contract IERC20,address,uint256)"}},"id":2475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"42522:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2476,"nodeType":"ExpressionStatement","src":"42522:36:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2480,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"42590:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"42590:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"id":2482,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2454,"src":"42602:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},{"argumentTypes":null,"id":2483,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2456,"src":"42609:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":2484,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"42617:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":2485,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"42622:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"argumentTypes":null,"id":2477,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2450,"src":"42569:8:0","typeDescriptions":{"typeIdentifier":"t_contract$_IFlashBorrower_$87","typeString":"contract IFlashBorrower"}},"id":2479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"onFlashLoan","nodeType":"MemberAccess","referencedDeclaration":86,"src":"42569:20:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_contract$_IERC20_$72_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,contract IERC20,uint256,uint256,bytes memory) external"}},"id":2486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"42569:58:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2487,"nodeType":"ExpressionStatement","src":"42569:58:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2490,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2454,"src":"42662:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}],"id":2489,"name":"_tokenBalanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1834,"src":"42646:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_contract$_IERC20_$72_$returns$_t_uint256_$","typeString":"function (contract IERC20) view returns (uint256)"}},"id":2491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"42646:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":2496,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"42697:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"to128","nodeType":"MemberAccess","referencedDeclaration":359,"src":"42697:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint128_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint128)"}},"id":2498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"42697:11:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2492,"name":"totals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"42672:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_struct$_Rebase_$555_storage_$","typeString":"mapping(contract IERC20 => struct Rebase storage ref)"}},"id":2494,"indexExpression":{"argumentTypes":null,"id":2493,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2454,"src":"42679:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"42672:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage","typeString":"struct Rebase storage ref"}},"id":2495,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"addElastic","nodeType":"MemberAccess","referencedDeclaration":878,"src":"42672:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Rebase_$555_storage_ptr_$_t_uint256_$returns$_t_uint256_$bound_to$_t_struct$_Rebase_$555_storage_ptr_$","typeString":"function (struct Rebase storage pointer,uint256) returns (uint256)"}},"id":2499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"42672:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"42646:63:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"42656e746f426f783a2057726f6e6720616d6f756e74","id":2501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"42711:24:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_ec29ab2461bde73dbbafac2abefcdcf48be19dab993d25b4afd49bb37dc19396","typeString":"literal_string \"BentoBox: Wrong amount\""},"value":"BentoBox: Wrong amount"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ec29ab2461bde73dbbafac2abefcdcf48be19dab993d25b4afd49bb37dc19396","typeString":"literal_string \"BentoBox: Wrong amount\""}],"id":2488,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"42638:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"42638:98:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2503,"nodeType":"ExpressionStatement","src":"42638:98:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2507,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2450,"src":"42772:8:0","typeDescriptions":{"typeIdentifier":"t_contract$_IFlashBorrower_$87","typeString":"contract IFlashBorrower"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IFlashBorrower_$87","typeString":"contract IFlashBorrower"}],"id":2506,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"42764:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2505,"name":"address","nodeType":"ElementaryTypeName","src":"42764:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":2508,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"42764:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2509,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2454,"src":"42783:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},{"argumentTypes":null,"id":2510,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2456,"src":"42790:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":2511,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"42798:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":2512,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2452,"src":"42803:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2504,"name":"LogFlashLoan","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"42751:12:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_contract$_IERC20_$72_$_t_uint256_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,contract IERC20,uint256,uint256,address)"}},"id":2513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"42751:61:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2514,"nodeType":"EmitStatement","src":"42746:66:0"}]},"documentation":{"id":2448,"nodeType":"StructuredDocumentation","src":"41523:388:0","text":"@notice Flashloan ability.\n @param borrower The address of the contract that implements and conforms to `IFlashBorrower` and handles the flashloan.\n @param receiver Address of the token receiver.\n @param token The address of the token to receive.\n @param amount of the tokens to receive.\n @param data The calldata to pass to the `borrower` contract."},"functionSelector":"f1676d37","id":2516,"implemented":true,"kind":"function","modifiers":[],"name":"flashLoan","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2450,"mutability":"mutable","name":"borrower","nodeType":"VariableDeclaration","overrides":null,"scope":2516,"src":"42297:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IFlashBorrower_$87","typeString":"contract IFlashBorrower"},"typeName":{"contractScope":null,"id":2449,"name":"IFlashBorrower","nodeType":"UserDefinedTypeName","referencedDeclaration":87,"src":"42297:14:0","typeDescriptions":{"typeIdentifier":"t_contract$_IFlashBorrower_$87","typeString":"contract IFlashBorrower"}},"value":null,"visibility":"internal"},{"constant":false,"id":2452,"mutability":"mutable","name":"receiver","nodeType":"VariableDeclaration","overrides":null,"scope":2516,"src":"42330:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2451,"name":"address","nodeType":"ElementaryTypeName","src":"42330:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2454,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":2516,"src":"42356:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":2453,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"42356:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":2456,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":2516,"src":"42378:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2455,"name":"uint256","nodeType":"ElementaryTypeName","src":"42378:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":2458,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","overrides":null,"scope":2516,"src":"42402:19:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2457,"name":"bytes","nodeType":"ElementaryTypeName","src":"42402:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"42287:140:0"},"returnParameters":{"id":2460,"nodeType":"ParameterList","parameters":[],"src":"42435:0:0"},"scope":3137,"src":"42269:550:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2655,"nodeType":"Block","src":"43926:720:0","statements":[{"assignments":[2537],"declarations":[{"constant":false,"id":2537,"mutability":"mutable","name":"fees","nodeType":"VariableDeclaration","overrides":null,"scope":2655,"src":"43936:21:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2535,"name":"uint256","nodeType":"ElementaryTypeName","src":"43936:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2536,"length":null,"nodeType":"ArrayTypeName","src":"43936:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"value":null,"visibility":"internal"}],"id":2544,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2541,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"43974:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$72_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},"id":2542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","referencedDeclaration":null,"src":"43974:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2540,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"43960:13:0","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":2538,"name":"uint256","nodeType":"ElementaryTypeName","src":"43964:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2539,"length":null,"nodeType":"ArrayTypeName","src":"43964:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":2543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"43960:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"43936:52:0"},{"assignments":[2546],"declarations":[{"constant":false,"id":2546,"mutability":"mutable","name":"len","nodeType":"VariableDeclaration","overrides":null,"scope":2655,"src":"43999:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2545,"name":"uint256","nodeType":"ElementaryTypeName","src":"43999:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2549,"initialValue":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2547,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"44013:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$72_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},"id":2548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","referencedDeclaration":null,"src":"44013:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"43999:27:0"},{"body":{"id":2589,"nodeType":"Block","src":"44070:192:0","statements":[{"assignments":[2561],"declarations":[{"constant":false,"id":2561,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":2589,"src":"44084:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2560,"name":"uint256","nodeType":"ElementaryTypeName","src":"44084:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2565,"initialValue":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2562,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"44101:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2564,"indexExpression":{"argumentTypes":null,"id":2563,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"44109:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"44101:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"44084:27:0"},{"expression":{"argumentTypes":null,"id":2575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2566,"name":"fees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2537,"src":"44125:4:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2568,"indexExpression":{"argumentTypes":null,"id":2567,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"44130:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"44125:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2571,"name":"FLASH_LOAN_FEE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"44146:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":2569,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2561,"src":"44135:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":333,"src":"44135:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"44135:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":2573,"name":"FLASH_LOAN_FEE_PRECISION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"44164:24:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"44135:53:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"44125:63:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2576,"nodeType":"ExpressionStatement","src":"44125:63:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2581,"name":"receivers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2522,"src":"44226:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2583,"indexExpression":{"argumentTypes":null,"id":2582,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"44236:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"44226:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2584,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"44240:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2586,"indexExpression":{"argumentTypes":null,"id":2585,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"44248:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"44240:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2577,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"44203:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$72_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},"id":2579,"indexExpression":{"argumentTypes":null,"id":2578,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"44210:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"44203:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"id":2580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":209,"src":"44203:22:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$72_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$72_$","typeString":"function (contract IERC20,address,uint256)"}},"id":2587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"44203:48:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2588,"nodeType":"ExpressionStatement","src":"44203:48:0"}]},"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2554,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"44056:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"argumentTypes":null,"id":2555,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2546,"src":"44060:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"44056:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2590,"initializationExpression":{"assignments":[2551],"declarations":[{"constant":false,"id":2551,"mutability":"mutable","name":"i","nodeType":"VariableDeclaration","overrides":null,"scope":2590,"src":"44041:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2550,"name":"uint256","nodeType":"ElementaryTypeName","src":"44041:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2553,"initialValue":{"argumentTypes":null,"hexValue":"30","id":2552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"44053:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"44041:13:0"},"loopExpression":{"expression":{"argumentTypes":null,"id":2558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"44065:3:0","subExpression":{"argumentTypes":null,"id":2557,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"44065:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2559,"nodeType":"ExpressionStatement","src":"44065:3:0"},"nodeType":"ForStatement","src":"44036:226:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2594,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"44298:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"44298:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"id":2596,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"44310:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$72_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},{"argumentTypes":null,"id":2597,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"44318:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"argumentTypes":null,"id":2598,"name":"fees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2537,"src":"44327:4:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"argumentTypes":null,"id":2599,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2530,"src":"44333:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_array$_t_contract$_IERC20_$72_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"argumentTypes":null,"id":2591,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2519,"src":"44272:8:0","typeDescriptions":{"typeIdentifier":"t_contract$_IBatchFlashBorrower_$105","typeString":"contract IBatchFlashBorrower"}},"id":2593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"onBatchFlashLoan","nodeType":"MemberAccess","referencedDeclaration":104,"src":"44272:25:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_array$_t_contract$_IERC20_$72_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,contract IERC20[] memory,uint256[] memory,uint256[] memory,bytes memory) external"}},"id":2600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"44272:66:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2601,"nodeType":"ExpressionStatement","src":"44272:66:0"},{"body":{"id":2653,"nodeType":"Block","src":"44383:257:0","statements":[{"assignments":[2613],"declarations":[{"constant":false,"id":2613,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":2653,"src":"44397:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":2612,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"44397:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"}],"id":2617,"initialValue":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2614,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"44412:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$72_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},"id":2616,"indexExpression":{"argumentTypes":null,"id":2615,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"44419:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"44412:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"nodeType":"VariableDeclarationStatement","src":"44397:24:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2620,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"44459:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}],"id":2619,"name":"_tokenBalanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1834,"src":"44443:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_contract$_IERC20_$72_$returns$_t_uint256_$","typeString":"function (contract IERC20) view returns (uint256)"}},"id":2621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"44443:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2626,"name":"fees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2537,"src":"44494:4:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2628,"indexExpression":{"argumentTypes":null,"id":2627,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"44499:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"44494:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"to128","nodeType":"MemberAccess","referencedDeclaration":359,"src":"44494:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint128_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint128)"}},"id":2630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"44494:15:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2622,"name":"totals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"44469:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_struct$_Rebase_$555_storage_$","typeString":"mapping(contract IERC20 => struct Rebase storage ref)"}},"id":2624,"indexExpression":{"argumentTypes":null,"id":2623,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"44476:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"44469:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage","typeString":"struct Rebase storage ref"}},"id":2625,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"addElastic","nodeType":"MemberAccess","referencedDeclaration":878,"src":"44469:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Rebase_$555_storage_ptr_$_t_uint256_$returns$_t_uint256_$bound_to$_t_struct$_Rebase_$555_storage_ptr_$","typeString":"function (struct Rebase storage pointer,uint256) returns (uint256)"}},"id":2631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"44469:41:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"44443:67:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"42656e746f426f783a2057726f6e6720616d6f756e74","id":2633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"44512:24:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_ec29ab2461bde73dbbafac2abefcdcf48be19dab993d25b4afd49bb37dc19396","typeString":"literal_string \"BentoBox: Wrong amount\""},"value":"BentoBox: Wrong amount"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ec29ab2461bde73dbbafac2abefcdcf48be19dab993d25b4afd49bb37dc19396","typeString":"literal_string \"BentoBox: Wrong amount\""}],"id":2618,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"44435:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2634,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"44435:102:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2635,"nodeType":"ExpressionStatement","src":"44435:102:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2639,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2519,"src":"44577:8:0","typeDescriptions":{"typeIdentifier":"t_contract$_IBatchFlashBorrower_$105","typeString":"contract IBatchFlashBorrower"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IBatchFlashBorrower_$105","typeString":"contract IBatchFlashBorrower"}],"id":2638,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"44569:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2637,"name":"address","nodeType":"ElementaryTypeName","src":"44569:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":2640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"44569:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2641,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"44588:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2642,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"44595:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2644,"indexExpression":{"argumentTypes":null,"id":2643,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"44603:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"44595:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2645,"name":"fees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2537,"src":"44607:4:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2647,"indexExpression":{"argumentTypes":null,"id":2646,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"44612:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"44607:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2648,"name":"receivers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2522,"src":"44616:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2650,"indexExpression":{"argumentTypes":null,"id":2649,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"44626:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"44616:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2636,"name":"LogFlashLoan","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"44556:12:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_contract$_IERC20_$72_$_t_uint256_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,contract IERC20,uint256,uint256,address)"}},"id":2651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"44556:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2652,"nodeType":"EmitStatement","src":"44551:78:0"}]},"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2606,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"44369:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"argumentTypes":null,"id":2607,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2546,"src":"44373:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"44369:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2654,"initializationExpression":{"assignments":[2603],"declarations":[{"constant":false,"id":2603,"mutability":"mutable","name":"i","nodeType":"VariableDeclaration","overrides":null,"scope":2654,"src":"44354:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2602,"name":"uint256","nodeType":"ElementaryTypeName","src":"44354:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2605,"initialValue":{"argumentTypes":null,"hexValue":"30","id":2604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"44366:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"44354:13:0"},"loopExpression":{"expression":{"argumentTypes":null,"id":2610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"44378:3:0","subExpression":{"argumentTypes":null,"id":2609,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"44378:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2611,"nodeType":"ExpressionStatement","src":"44378:3:0"},"nodeType":"ForStatement","src":"44349:291:0"}]},"documentation":{"id":2517,"nodeType":"StructuredDocumentation","src":"42825:531:0","text":"@notice Support for batched flashloans. Useful to request multiple different `tokens` in a single transaction.\n @param borrower The address of the contract that implements and conforms to `IBatchFlashBorrower` and handles the flashloan.\n @param receivers An array of the token receivers. A one-to-one mapping with `tokens` and `amounts`.\n @param tokens The addresses of the tokens.\n @param amounts of the tokens for each receiver.\n @param data The calldata to pass to the `borrower` contract."},"functionSelector":"f483b3da","id":2656,"implemented":true,"kind":"function","modifiers":[],"name":"batchFlashLoan","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2519,"mutability":"mutable","name":"borrower","nodeType":"VariableDeclaration","overrides":null,"scope":2656,"src":"43747:28:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IBatchFlashBorrower_$105","typeString":"contract IBatchFlashBorrower"},"typeName":{"contractScope":null,"id":2518,"name":"IBatchFlashBorrower","nodeType":"UserDefinedTypeName","referencedDeclaration":105,"src":"43747:19:0","typeDescriptions":{"typeIdentifier":"t_contract$_IBatchFlashBorrower_$105","typeString":"contract IBatchFlashBorrower"}},"value":null,"visibility":"internal"},{"constant":false,"id":2522,"mutability":"mutable","name":"receivers","nodeType":"VariableDeclaration","overrides":null,"scope":2656,"src":"43785:28:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2520,"name":"address","nodeType":"ElementaryTypeName","src":"43785:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2521,"length":null,"nodeType":"ArrayTypeName","src":"43785:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"value":null,"visibility":"internal"},{"constant":false,"id":2525,"mutability":"mutable","name":"tokens","nodeType":"VariableDeclaration","overrides":null,"scope":2656,"src":"43823:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$72_$dyn_calldata_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"contractScope":null,"id":2523,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"43823:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"id":2524,"length":null,"nodeType":"ArrayTypeName","src":"43823:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$72_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"value":null,"visibility":"internal"},{"constant":false,"id":2528,"mutability":"mutable","name":"amounts","nodeType":"VariableDeclaration","overrides":null,"scope":2656,"src":"43857:26:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2526,"name":"uint256","nodeType":"ElementaryTypeName","src":"43857:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2527,"length":null,"nodeType":"ArrayTypeName","src":"43857:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"value":null,"visibility":"internal"},{"constant":false,"id":2530,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","overrides":null,"scope":2656,"src":"43893:19:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2529,"name":"bytes","nodeType":"ElementaryTypeName","src":"43893:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"43737:181:0"},"returnParameters":{"id":2532,"nodeType":"ParameterList","parameters":[],"src":"43926:0:0"},"scope":3137,"src":"43714:932:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2685,"nodeType":"Block","src":"45083:276:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2667,"name":"targetPercentage_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2661,"src":"45119:17:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"id":2668,"name":"MAX_TARGET_PERCENTAGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"45140:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"45119:42:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"53747261746567794d616e616765723a2054617267657420746f6f2068696768","id":2670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"45163:34:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_fa169a3b7ec1ea7a2a1a50e5f856d1f4ecd22f3eaba96fbdaee65d4d00485419","typeString":"literal_string \"StrategyManager: Target too high\""},"value":"StrategyManager: Target too high"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fa169a3b7ec1ea7a2a1a50e5f856d1f4ecd22f3eaba96fbdaee65d4d00485419","typeString":"literal_string \"StrategyManager: Target too high\""}],"id":2666,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"45111:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"45111:87:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2672,"nodeType":"ExpressionStatement","src":"45111:87:0"},{"expression":{"argumentTypes":null,"id":2678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2673,"name":"strategyData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"45228:12:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_struct$_StrategyData_$1678_storage_$","typeString":"mapping(contract IERC20 => struct BentoBoxV1.StrategyData storage ref)"}},"id":2675,"indexExpression":{"argumentTypes":null,"id":2674,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2659,"src":"45241:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"45228:19:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_storage","typeString":"struct BentoBoxV1.StrategyData storage ref"}},"id":2676,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"targetPercentage","nodeType":"MemberAccess","referencedDeclaration":1675,"src":"45228:36:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":2677,"name":"targetPercentage_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2661,"src":"45267:17:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"45228:56:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":2679,"nodeType":"ExpressionStatement","src":"45228:56:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2681,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2659,"src":"45327:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},{"argumentTypes":null,"id":2682,"name":"targetPercentage_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2661,"src":"45334:17:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":2680,"name":"LogStrategyTargetPercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1635,"src":"45299:27:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$72_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,uint256)"}},"id":2683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"45299:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2684,"nodeType":"EmitStatement","src":"45294:58:0"}]},"documentation":{"id":2657,"nodeType":"StructuredDocumentation","src":"44652:332:0","text":"@notice Sets the target percentage of the strategy for `token`.\n @dev Only the owner of this contract is allowed to change this.\n @param token The address of the token that maps to a strategy to change.\n @param targetPercentage_ The new target in percent. Must be lesser or equal to `MAX_TARGET_PERCENTAGE`."},"functionSelector":"3e2a9d4e","id":2686,"implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":2664,"modifierName":{"argumentTypes":null,"id":2663,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"45073:9:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"45073:9:0"}],"name":"setStrategyTargetPercentage","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2659,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":2686,"src":"45026:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":2658,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"45026:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":2661,"mutability":"mutable","name":"targetPercentage_","nodeType":"VariableDeclaration","overrides":null,"scope":2686,"src":"45040:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2660,"name":"uint64","nodeType":"ElementaryTypeName","src":"45040:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":null,"visibility":"internal"}],"src":"45025:40:0"},"returnParameters":{"id":2665,"nodeType":"ParameterList","parameters":[],"src":"45083:0:0"},"scope":3137,"src":"44989:370:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2871,"nodeType":"Block","src":"46235:1583:0","statements":[{"assignments":[2697],"declarations":[{"constant":false,"id":2697,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","overrides":null,"scope":2871,"src":"46245:24:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_memory_ptr","typeString":"struct BentoBoxV1.StrategyData"},"typeName":{"contractScope":null,"id":2696,"name":"StrategyData","nodeType":"UserDefinedTypeName","referencedDeclaration":1678,"src":"46245:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_storage_ptr","typeString":"struct BentoBoxV1.StrategyData"}},"value":null,"visibility":"internal"}],"id":2701,"initialValue":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2698,"name":"strategyData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"46272:12:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_struct$_StrategyData_$1678_storage_$","typeString":"mapping(contract IERC20 => struct BentoBoxV1.StrategyData storage ref)"}},"id":2700,"indexExpression":{"argumentTypes":null,"id":2699,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"46285:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"46272:19:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_storage","typeString":"struct BentoBoxV1.StrategyData storage ref"}},"nodeType":"VariableDeclarationStatement","src":"46245:46:0"},{"assignments":[2703],"declarations":[{"constant":false,"id":2703,"mutability":"mutable","name":"pending","nodeType":"VariableDeclaration","overrides":null,"scope":2871,"src":"46301:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"},"typeName":{"contractScope":null,"id":2702,"name":"IStrategy","nodeType":"UserDefinedTypeName","referencedDeclaration":147,"src":"46301:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}},"value":null,"visibility":"internal"}],"id":2707,"initialValue":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2704,"name":"pendingStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1718,"src":"46321:15:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_contract$_IStrategy_$147_$","typeString":"mapping(contract IERC20 => contract IStrategy)"}},"id":2706,"indexExpression":{"argumentTypes":null,"id":2705,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"46337:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"46321:22:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}},"nodeType":"VariableDeclarationStatement","src":"46301:42:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":2711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2708,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"46357:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_memory_ptr","typeString":"struct BentoBoxV1.StrategyData memory"}},"id":2709,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"strategyStartDate","nodeType":"MemberAccess","referencedDeclaration":1673,"src":"46357:22:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":2710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"46383:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"46357:27:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"},"id":2714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2712,"name":"pending","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2703,"src":"46388:7:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"id":2713,"name":"newStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2691,"src":"46399:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}},"src":"46388:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"46357:53:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2863,"nodeType":"Block","src":"46755:1021:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":2744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2741,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"46777:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_memory_ptr","typeString":"struct BentoBoxV1.StrategyData memory"}},"id":2742,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"strategyStartDate","nodeType":"MemberAccess","referencedDeclaration":1673,"src":"46777:22:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"30","id":2743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"46803:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"46777:27:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2745,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"46808:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","referencedDeclaration":null,"src":"46808:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2747,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"46827:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_memory_ptr","typeString":"struct BentoBoxV1.StrategyData memory"}},"id":2748,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"strategyStartDate","nodeType":"MemberAccess","referencedDeclaration":1673,"src":"46827:22:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"46808:41:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"46777:72:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"53747261746567794d616e616765723a20546f6f206561726c79","id":2751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"46851:28:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_90881d0adc7ac2d6397f1fee49db9e56cb6d6db8a51f54dd8223c6e98e46c87d","typeString":"literal_string \"StrategyManager: Too early\""},"value":"StrategyManager: Too early"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_90881d0adc7ac2d6397f1fee49db9e56cb6d6db8a51f54dd8223c6e98e46c87d","typeString":"literal_string \"StrategyManager: Too early\""}],"id":2740,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"46769:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"46769:111:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2753,"nodeType":"ExpressionStatement","src":"46769:111:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2756,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"46906:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_contract$_IStrategy_$147_$","typeString":"mapping(contract IERC20 => contract IStrategy)"}},"id":2758,"indexExpression":{"argumentTypes":null,"id":2757,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"46915:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"46906:15:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}],"id":2755,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"46898:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2754,"name":"address","nodeType":"ElementaryTypeName","src":"46898:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":2759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"46898:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":2762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"46934:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2761,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"46926:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2760,"name":"address","nodeType":"ElementaryTypeName","src":"46926:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":2763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"46926:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"46898:38:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2831,"nodeType":"IfStatement","src":"46894:659:0","trueBody":{"id":2830,"nodeType":"Block","src":"46938:615:0","statements":[{"assignments":[2766],"declarations":[{"constant":false,"id":2766,"mutability":"mutable","name":"balanceChange","nodeType":"VariableDeclaration","overrides":null,"scope":2830,"src":"46956:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2765,"name":"int256","nodeType":"ElementaryTypeName","src":"46956:6:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":null,"visibility":"internal"}],"id":2774,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2771,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"47000:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_memory_ptr","typeString":"struct BentoBoxV1.StrategyData memory"}},"id":2772,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"47000:12:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2767,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"46979:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_contract$_IStrategy_$147_$","typeString":"mapping(contract IERC20 => contract IStrategy)"}},"id":2769,"indexExpression":{"argumentTypes":null,"id":2768,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"46988:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"46979:15:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}},"id":2770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"exit","nodeType":"MemberAccess","referencedDeclaration":146,"src":"46979:20:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$_t_int256_$","typeString":"function (uint256) external returns (int256)"}},"id":2773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"46979:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"46956:57:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2775,"name":"balanceChange","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2766,"src":"47062:13:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"hexValue":"30","id":2776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"47078:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"47062:17:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2798,"name":"balanceChange","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2766,"src":"47275:13:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"argumentTypes":null,"hexValue":"30","id":2799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"47291:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"47275:17:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2822,"nodeType":"IfStatement","src":"47271:206:0","trueBody":{"id":2821,"nodeType":"Block","src":"47294:183:0","statements":[{"assignments":[2802],"declarations":[{"constant":false,"id":2802,"mutability":"mutable","name":"sub","nodeType":"VariableDeclaration","overrides":null,"scope":2821,"src":"47316:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2801,"name":"uint256","nodeType":"ElementaryTypeName","src":"47316:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2808,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"47338:14:0","subExpression":{"argumentTypes":null,"id":2805,"name":"balanceChange","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2766,"src":"47339:13:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2804,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"47330:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2803,"name":"uint256","nodeType":"ElementaryTypeName","src":"47330:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":2807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"47330:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"47316:37:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2813,"name":"sub","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2802,"src":"47400:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2809,"name":"totals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"47375:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_struct$_Rebase_$555_storage_$","typeString":"mapping(contract IERC20 => struct Rebase storage ref)"}},"id":2811,"indexExpression":{"argumentTypes":null,"id":2810,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"47382:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"47375:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage","typeString":"struct Rebase storage ref"}},"id":2812,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"subElastic","nodeType":"MemberAccess","referencedDeclaration":902,"src":"47375:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Rebase_$555_storage_ptr_$_t_uint256_$returns$_t_uint256_$bound_to$_t_struct$_Rebase_$555_storage_ptr_$","typeString":"function (struct Rebase storage pointer,uint256) returns (uint256)"}},"id":2814,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"47375:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2815,"nodeType":"ExpressionStatement","src":"47375:29:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2817,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"47447:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},{"argumentTypes":null,"id":2818,"name":"sub","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2802,"src":"47454:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2816,"name":"LogStrategyLoss","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1671,"src":"47431:15:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$72_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,uint256)"}},"id":2819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"47431:27:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2820,"nodeType":"EmitStatement","src":"47426:32:0"}]}},"id":2823,"nodeType":"IfStatement","src":"47058:419:0","trueBody":{"id":2797,"nodeType":"Block","src":"47081:184:0","statements":[{"assignments":[2779],"declarations":[{"constant":false,"id":2779,"mutability":"mutable","name":"add","nodeType":"VariableDeclaration","overrides":null,"scope":2797,"src":"47103:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2778,"name":"uint256","nodeType":"ElementaryTypeName","src":"47103:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2784,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2782,"name":"balanceChange","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2766,"src":"47125:13:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2781,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"47117:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2780,"name":"uint256","nodeType":"ElementaryTypeName","src":"47117:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":2783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"47117:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"47103:36:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2789,"name":"add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"47186:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2785,"name":"totals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"47161:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_struct$_Rebase_$555_storage_$","typeString":"mapping(contract IERC20 => struct Rebase storage ref)"}},"id":2787,"indexExpression":{"argumentTypes":null,"id":2786,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"47168:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"47161:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage","typeString":"struct Rebase storage ref"}},"id":2788,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"addElastic","nodeType":"MemberAccess","referencedDeclaration":878,"src":"47161:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Rebase_$555_storage_ptr_$_t_uint256_$returns$_t_uint256_$bound_to$_t_struct$_Rebase_$555_storage_ptr_$","typeString":"function (struct Rebase storage pointer,uint256) returns (uint256)"}},"id":2790,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"47161:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2791,"nodeType":"ExpressionStatement","src":"47161:29:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2793,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"47235:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},{"argumentTypes":null,"id":2794,"name":"add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"47242:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2792,"name":"LogStrategyProfit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1665,"src":"47217:17:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$72_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,uint256)"}},"id":2795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"47217:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2796,"nodeType":"EmitStatement","src":"47212:34:0"}]}},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2825,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"47518:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2826,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"47525:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_memory_ptr","typeString":"struct BentoBoxV1.StrategyData memory"}},"id":2827,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"47525:12:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},{"typeIdentifier":"t_uint128","typeString":"uint128"}],"id":2824,"name":"LogStrategyDivest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"47500:17:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$72_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,uint256)"}},"id":2828,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"47500:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2829,"nodeType":"EmitStatement","src":"47495:43:0"}]}},{"expression":{"argumentTypes":null,"id":2836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2832,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"47566:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_contract$_IStrategy_$147_$","typeString":"mapping(contract IERC20 => contract IStrategy)"}},"id":2834,"indexExpression":{"argumentTypes":null,"id":2833,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"47575:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"47566:15:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":2835,"name":"pending","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2703,"src":"47584:7:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}},"src":"47566:25:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}},"id":2837,"nodeType":"ExpressionStatement","src":"47566:25:0"},{"expression":{"argumentTypes":null,"id":2842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2838,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"47605:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_memory_ptr","typeString":"struct BentoBoxV1.StrategyData memory"}},"id":2840,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"strategyStartDate","nodeType":"MemberAccess","referencedDeclaration":1673,"src":"47605:22:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"hexValue":"30","id":2841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"47630:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"47605:26:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":2843,"nodeType":"ExpressionStatement","src":"47605:26:0"},{"expression":{"argumentTypes":null,"id":2848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2844,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"47645:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_memory_ptr","typeString":"struct BentoBoxV1.StrategyData memory"}},"id":2846,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"47645:12:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"hexValue":"30","id":2847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"47660:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"47645:16:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":2849,"nodeType":"ExpressionStatement","src":"47645:16:0"},{"expression":{"argumentTypes":null,"id":2856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2850,"name":"pendingStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1718,"src":"47675:15:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_contract$_IStrategy_$147_$","typeString":"mapping(contract IERC20 => contract IStrategy)"}},"id":2852,"indexExpression":{"argumentTypes":null,"id":2851,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"47691:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"47675:22:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":2854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"47710:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2853,"name":"IStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"47700:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IStrategy_$147_$","typeString":"type(contract IStrategy)"}},"id":2855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"47700:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}},"src":"47675:37:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}},"id":2857,"nodeType":"ExpressionStatement","src":"47675:37:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2859,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"47746:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},{"argumentTypes":null,"id":2860,"name":"newStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2691,"src":"47753:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}],"id":2858,"name":"LogStrategySet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1647,"src":"47731:14:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$72_$_t_contract$_IStrategy_$147_$returns$__$","typeString":"function (contract IERC20,contract IStrategy)"}},"id":2861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"47731:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2862,"nodeType":"EmitStatement","src":"47726:39:0"}]},"id":2864,"nodeType":"IfStatement","src":"46353:1423:0","trueBody":{"id":2739,"nodeType":"Block","src":"46412:337:0","statements":[{"expression":{"argumentTypes":null,"id":2720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2716,"name":"pendingStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1718,"src":"46426:15:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_contract$_IStrategy_$147_$","typeString":"mapping(contract IERC20 => contract IStrategy)"}},"id":2718,"indexExpression":{"argumentTypes":null,"id":2717,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"46442:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"46426:22:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":2719,"name":"newStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2691,"src":"46451:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}},"src":"46426:36:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}},"id":2721,"nodeType":"ExpressionStatement","src":"46426:36:0"},{"expression":{"argumentTypes":null,"id":2732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2722,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"46616:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_memory_ptr","typeString":"struct BentoBoxV1.StrategyData memory"}},"id":2724,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"strategyStartDate","nodeType":"MemberAccess","referencedDeclaration":1673,"src":"46616:22:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2725,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"46642:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","referencedDeclaration":null,"src":"46642:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"id":2727,"name":"STRATEGY_DELAY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"46660:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"46642:32:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2729,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"46641:34:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"to64","nodeType":"MemberAccess","referencedDeclaration":385,"src":"46641:39:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint64_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint64)"}},"id":2731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"46641:41:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"46616:66:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":2733,"nodeType":"ExpressionStatement","src":"46616:66:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2735,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"46719:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},{"argumentTypes":null,"id":2736,"name":"newStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2691,"src":"46726:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}],"id":2734,"name":"LogStrategyQueued","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1641,"src":"46701:17:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$72_$_t_contract$_IStrategy_$147_$returns$__$","typeString":"function (contract IERC20,contract IStrategy)"}},"id":2737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"46701:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2738,"nodeType":"EmitStatement","src":"46696:42:0"}]}},{"expression":{"argumentTypes":null,"id":2869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2865,"name":"strategyData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"47785:12:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_struct$_StrategyData_$1678_storage_$","typeString":"mapping(contract IERC20 => struct BentoBoxV1.StrategyData storage ref)"}},"id":2867,"indexExpression":{"argumentTypes":null,"id":2866,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"47798:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"47785:19:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_storage","typeString":"struct BentoBoxV1.StrategyData storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":2868,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"47807:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_memory_ptr","typeString":"struct BentoBoxV1.StrategyData memory"}},"src":"47785:26:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_storage","typeString":"struct BentoBoxV1.StrategyData storage ref"}},"id":2870,"nodeType":"ExpressionStatement","src":"47785:26:0"}]},"documentation":{"id":2687,"nodeType":"StructuredDocumentation","src":"45365:486:0","text":"@notice Sets the contract address of a new strategy that conforms to `IStrategy` for `token`.\n Must be called twice with the same arguments.\n A new strategy becomes pending first and can be activated once `STRATEGY_DELAY` is over.\n @dev Only the owner of this contract is allowed to change this.\n @param token The address of the token that maps to a strategy to change.\n @param newStrategy The address of the contract that conforms to `IStrategy`."},"functionSelector":"72cb5d97","id":2872,"implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":2694,"modifierName":{"argumentTypes":null,"id":2693,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"46225:9:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"46225:9:0"}],"name":"setStrategy","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2689,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":2872,"src":"46181:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":2688,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"46181:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":2691,"mutability":"mutable","name":"newStrategy","nodeType":"VariableDeclaration","overrides":null,"scope":2872,"src":"46195:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"},"typeName":{"contractScope":null,"id":2690,"name":"IStrategy","nodeType":"UserDefinedTypeName","referencedDeclaration":147,"src":"46195:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}},"value":null,"visibility":"internal"}],"src":"46180:37:0"},"returnParameters":{"id":2695,"nodeType":"ParameterList","parameters":[],"src":"46235:0:0"},"scope":3137,"src":"46160:1658:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3131,"nodeType":"Block","src":"48665:2314:0","statements":[{"assignments":[2883],"declarations":[{"constant":false,"id":2883,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","overrides":null,"scope":3131,"src":"48675:24:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_memory_ptr","typeString":"struct BentoBoxV1.StrategyData"},"typeName":{"contractScope":null,"id":2882,"name":"StrategyData","nodeType":"UserDefinedTypeName","referencedDeclaration":1678,"src":"48675:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_storage_ptr","typeString":"struct BentoBoxV1.StrategyData"}},"value":null,"visibility":"internal"}],"id":2887,"initialValue":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2884,"name":"strategyData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"48702:12:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_struct$_StrategyData_$1678_storage_$","typeString":"mapping(contract IERC20 => struct BentoBoxV1.StrategyData storage ref)"}},"id":2886,"indexExpression":{"argumentTypes":null,"id":2885,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"48715:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"48702:19:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_storage","typeString":"struct BentoBoxV1.StrategyData storage ref"}},"nodeType":"VariableDeclarationStatement","src":"48675:46:0"},{"assignments":[2889],"declarations":[{"constant":false,"id":2889,"mutability":"mutable","name":"_strategy","nodeType":"VariableDeclaration","overrides":null,"scope":3131,"src":"48731:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"},"typeName":{"contractScope":null,"id":2888,"name":"IStrategy","nodeType":"UserDefinedTypeName","referencedDeclaration":147,"src":"48731:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}},"value":null,"visibility":"internal"}],"id":2893,"initialValue":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2890,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"48753:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_contract$_IStrategy_$147_$","typeString":"mapping(contract IERC20 => contract IStrategy)"}},"id":2892,"indexExpression":{"argumentTypes":null,"id":2891,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"48762:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"48753:15:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}},"nodeType":"VariableDeclarationStatement","src":"48731:37:0"},{"assignments":[2895],"declarations":[{"constant":false,"id":2895,"mutability":"mutable","name":"balanceChange","nodeType":"VariableDeclaration","overrides":null,"scope":3131,"src":"48778:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2894,"name":"int256","nodeType":"ElementaryTypeName","src":"48778:6:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":null,"visibility":"internal"}],"id":2903,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2898,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2883,"src":"48819:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_memory_ptr","typeString":"struct BentoBoxV1.StrategyData memory"}},"id":2899,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"48819:12:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2900,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"48833:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"48833:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"argumentTypes":null,"id":2896,"name":"_strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"48801:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}},"id":2897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"harvest","nodeType":"MemberAccess","referencedDeclaration":130,"src":"48801:17:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_address_$returns$_t_int256_$","typeString":"function (uint256,address) external returns (int256)"}},"id":2902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"48801:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"48778:66:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2904,"name":"balanceChange","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2895,"src":"48858:13:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":2905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"48875:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"48858:18:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"argumentTypes":null,"id":2908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"48880:8:0","subExpression":{"argumentTypes":null,"id":2907,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2877,"src":"48881:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"48858:30:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2912,"nodeType":"IfStatement","src":"48854:67:0","trueBody":{"id":2911,"nodeType":"Block","src":"48890:31:0","statements":[{"expression":null,"functionReturnParameters":2881,"id":2910,"nodeType":"Return","src":"48904:7:0"}]}},{"assignments":[2914],"declarations":[{"constant":false,"id":2914,"mutability":"mutable","name":"totalElastic","nodeType":"VariableDeclaration","overrides":null,"scope":3131,"src":"48931:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2913,"name":"uint256","nodeType":"ElementaryTypeName","src":"48931:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2919,"initialValue":{"argumentTypes":null,"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2915,"name":"totals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"48954:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_struct$_Rebase_$555_storage_$","typeString":"mapping(contract IERC20 => struct Rebase storage ref)"}},"id":2917,"indexExpression":{"argumentTypes":null,"id":2916,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"48961:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"48954:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage","typeString":"struct Rebase storage ref"}},"id":2918,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"elastic","nodeType":"MemberAccess","referencedDeclaration":552,"src":"48954:21:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"VariableDeclarationStatement","src":"48931:44:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2920,"name":"balanceChange","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2895,"src":"48990:13:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"hexValue":"30","id":2921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"49006:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"48990:17:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2952,"name":"balanceChange","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2895,"src":"49236:13:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"argumentTypes":null,"hexValue":"30","id":2953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"49252:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"49236:17:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2997,"nodeType":"IfStatement","src":"49232:523:0","trueBody":{"id":2996,"nodeType":"Block","src":"49255:500:0","statements":[{"assignments":[2956],"declarations":[{"constant":false,"id":2956,"mutability":"mutable","name":"sub","nodeType":"VariableDeclaration","overrides":null,"scope":2996,"src":"49495:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2955,"name":"uint256","nodeType":"ElementaryTypeName","src":"49495:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2962,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"49517:14:0","subExpression":{"argumentTypes":null,"id":2959,"name":"balanceChange","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2895,"src":"49518:13:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2958,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"49509:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2957,"name":"uint256","nodeType":"ElementaryTypeName","src":"49509:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":2961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49509:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"49495:37:0"},{"expression":{"argumentTypes":null,"id":2968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":2963,"name":"totalElastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2914,"src":"49546:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2966,"name":"sub","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2956,"src":"49578:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":2964,"name":"totalElastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2914,"src":"49561:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":305,"src":"49561:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49561:21:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"49546:36:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2969,"nodeType":"ExpressionStatement","src":"49546:36:0"},{"expression":{"argumentTypes":null,"id":2977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2970,"name":"totals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"49596:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_struct$_Rebase_$555_storage_$","typeString":"mapping(contract IERC20 => struct Rebase storage ref)"}},"id":2972,"indexExpression":{"argumentTypes":null,"id":2971,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"49603:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"49596:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage","typeString":"struct Rebase storage ref"}},"id":2973,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"elastic","nodeType":"MemberAccess","referencedDeclaration":552,"src":"49596:21:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":2974,"name":"totalElastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2914,"src":"49620:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"to128","nodeType":"MemberAccess","referencedDeclaration":359,"src":"49620:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint128_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint128)"}},"id":2976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49620:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"49596:44:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":2978,"nodeType":"ExpressionStatement","src":"49596:44:0"},{"expression":{"argumentTypes":null,"id":2989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2979,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2883,"src":"49654:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_memory_ptr","typeString":"struct BentoBoxV1.StrategyData memory"}},"id":2981,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"49654:12:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":2985,"name":"sub","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2956,"src":"49686:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"to128","nodeType":"MemberAccess","referencedDeclaration":359,"src":"49686:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint128_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint128)"}},"id":2987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49686:11:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2982,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2883,"src":"49669:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_memory_ptr","typeString":"struct BentoBoxV1.StrategyData memory"}},"id":2983,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"49669:12:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":2984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":457,"src":"49669:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint128_$_t_uint128_$returns$_t_uint128_$bound_to$_t_uint128_$","typeString":"function (uint128,uint128) pure returns (uint128)"}},"id":2988,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49669:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"49654:44:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":2990,"nodeType":"ExpressionStatement","src":"49654:44:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2992,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"49733:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},{"argumentTypes":null,"id":2993,"name":"sub","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2956,"src":"49740:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2991,"name":"LogStrategyLoss","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1671,"src":"49717:15:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$72_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,uint256)"}},"id":2994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49717:27:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2995,"nodeType":"EmitStatement","src":"49712:32:0"}]}},"id":2998,"nodeType":"IfStatement","src":"48986:769:0","trueBody":{"id":2951,"nodeType":"Block","src":"49009:217:0","statements":[{"assignments":[2924],"declarations":[{"constant":false,"id":2924,"mutability":"mutable","name":"add","nodeType":"VariableDeclaration","overrides":null,"scope":2951,"src":"49023:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2923,"name":"uint256","nodeType":"ElementaryTypeName","src":"49023:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2929,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2927,"name":"balanceChange","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2895,"src":"49045:13:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2926,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"49037:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2925,"name":"uint256","nodeType":"ElementaryTypeName","src":"49037:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":2928,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49037:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"49023:36:0"},{"expression":{"argumentTypes":null,"id":2935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":2930,"name":"totalElastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2914,"src":"49073:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2933,"name":"add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2924,"src":"49105:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":2931,"name":"totalElastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2914,"src":"49088:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":283,"src":"49088:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49088:21:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"49073:36:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2936,"nodeType":"ExpressionStatement","src":"49073:36:0"},{"expression":{"argumentTypes":null,"id":2944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2937,"name":"totals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"49123:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_struct$_Rebase_$555_storage_$","typeString":"mapping(contract IERC20 => struct Rebase storage ref)"}},"id":2939,"indexExpression":{"argumentTypes":null,"id":2938,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"49130:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"49123:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Rebase_$555_storage","typeString":"struct Rebase storage ref"}},"id":2940,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"elastic","nodeType":"MemberAccess","referencedDeclaration":552,"src":"49123:21:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":2941,"name":"totalElastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2914,"src":"49147:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"to128","nodeType":"MemberAccess","referencedDeclaration":359,"src":"49147:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint128_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint128)"}},"id":2943,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49147:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"49123:44:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":2945,"nodeType":"ExpressionStatement","src":"49123:44:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2947,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"49204:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},{"argumentTypes":null,"id":2948,"name":"add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2924,"src":"49211:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2946,"name":"LogStrategyProfit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1665,"src":"49186:17:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$72_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,uint256)"}},"id":2949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49186:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2950,"nodeType":"EmitStatement","src":"49181:34:0"}]}},{"condition":{"argumentTypes":null,"id":2999,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2877,"src":"49769:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":3124,"nodeType":"IfStatement","src":"49765:1171:0","trueBody":{"id":3123,"nodeType":"Block","src":"49778:1158:0","statements":[{"assignments":[3001],"declarations":[{"constant":false,"id":3001,"mutability":"mutable","name":"targetBalance","nodeType":"VariableDeclaration","overrides":null,"scope":3123,"src":"49792:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3000,"name":"uint256","nodeType":"ElementaryTypeName","src":"49792:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":3009,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3004,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2883,"src":"49833:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_memory_ptr","typeString":"struct BentoBoxV1.StrategyData memory"}},"id":3005,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"targetPercentage","nodeType":"MemberAccess","referencedDeclaration":1675,"src":"49833:21:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"expression":{"argumentTypes":null,"id":3002,"name":"totalElastic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2914,"src":"49816:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":333,"src":"49816:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49816:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"hexValue":"313030","id":3007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"49858:3:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"49816:45:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"49792:69:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3010,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2883,"src":"49954:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_memory_ptr","typeString":"struct BentoBoxV1.StrategyData memory"}},"id":3011,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"49954:12:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"argumentTypes":null,"id":3012,"name":"targetBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"49969:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"49954:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3069,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2883,"src":"50456:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_memory_ptr","typeString":"struct BentoBoxV1.StrategyData memory"}},"id":3070,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"50456:12:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"id":3071,"name":"targetBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"50471:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"50456:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":3121,"nodeType":"IfStatement","src":"50452:474:0","trueBody":{"id":3120,"nodeType":"Block","src":"50486:440:0","statements":[{"assignments":[3074],"declarations":[{"constant":false,"id":3074,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","overrides":null,"scope":3120,"src":"50504:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3073,"name":"uint256","nodeType":"ElementaryTypeName","src":"50504:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":3082,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":3078,"name":"targetBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"50540:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"to128","nodeType":"MemberAccess","referencedDeclaration":359,"src":"50540:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint128_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint128)"}},"id":3080,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50540:21:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3075,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2883,"src":"50523:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_memory_ptr","typeString":"struct BentoBoxV1.StrategyData memory"}},"id":3076,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"50523:12:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":3077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":457,"src":"50523:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint128_$_t_uint128_$returns$_t_uint128_$bound_to$_t_uint128_$","typeString":"function (uint128,uint128) pure returns (uint128)"}},"id":3081,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50523:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"VariableDeclarationStatement","src":"50504:58:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":3083,"name":"maxChangeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"50584:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"30","id":3084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"50603:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"50584:20:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":3086,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"50608:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"id":3087,"name":"maxChangeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"50619:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"50608:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"50584:50:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":3095,"nodeType":"IfStatement","src":"50580:123:0","trueBody":{"id":3094,"nodeType":"Block","src":"50636:67:0","statements":[{"expression":{"argumentTypes":null,"id":3092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":3090,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"50658:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":3091,"name":"maxChangeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"50669:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"50658:26:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3093,"nodeType":"ExpressionStatement","src":"50658:26:0"}]}},{"assignments":[3097],"declarations":[{"constant":false,"id":3097,"mutability":"mutable","name":"actualAmountIn","nodeType":"VariableDeclaration","overrides":null,"scope":3120,"src":"50721:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3096,"name":"uint256","nodeType":"ElementaryTypeName","src":"50721:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":3102,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":3100,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"50765:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":3098,"name":"_strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"50746:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}},"id":3099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"withdraw","nodeType":"MemberAccess","referencedDeclaration":138,"src":"50746:18:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) external returns (uint256)"}},"id":3101,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50746:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"50721:53:0"},{"expression":{"argumentTypes":null,"id":3113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3103,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2883,"src":"50793:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_memory_ptr","typeString":"struct BentoBoxV1.StrategyData memory"}},"id":3105,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"50793:12:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":3109,"name":"actualAmountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3097,"src":"50825:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"to128","nodeType":"MemberAccess","referencedDeclaration":359,"src":"50825:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint128_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint128)"}},"id":3111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50825:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3106,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2883,"src":"50808:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_memory_ptr","typeString":"struct BentoBoxV1.StrategyData memory"}},"id":3107,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"50808:12:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":3108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":457,"src":"50808:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint128_$_t_uint128_$returns$_t_uint128_$bound_to$_t_uint128_$","typeString":"function (uint128,uint128) pure returns (uint128)"}},"id":3112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50808:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"50793:55:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":3114,"nodeType":"ExpressionStatement","src":"50793:55:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":3116,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"50889:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},{"argumentTypes":null,"id":3117,"name":"actualAmountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3097,"src":"50896:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3115,"name":"LogStrategyDivest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"50871:17:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$72_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,uint256)"}},"id":3118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50871:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3119,"nodeType":"EmitStatement","src":"50866:45:0"}]}},"id":3122,"nodeType":"IfStatement","src":"49950:976:0","trueBody":{"id":3068,"nodeType":"Block","src":"49984:462:0","statements":[{"assignments":[3015],"declarations":[{"constant":false,"id":3015,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","overrides":null,"scope":3068,"src":"50002:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3014,"name":"uint256","nodeType":"ElementaryTypeName","src":"50002:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":3021,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3018,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2883,"src":"50040:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_memory_ptr","typeString":"struct BentoBoxV1.StrategyData memory"}},"id":3019,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"50040:12:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"id":3016,"name":"targetBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"50022:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":305,"src":"50022:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50022:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"50002:51:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":3022,"name":"maxChangeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"50075:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"30","id":3023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"50094:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"50075:20:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":3025,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3015,"src":"50099:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"id":3026,"name":"maxChangeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"50111:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"50099:27:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"50075:51:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":3034,"nodeType":"IfStatement","src":"50071:125:0","trueBody":{"id":3033,"nodeType":"Block","src":"50128:68:0","statements":[{"expression":{"argumentTypes":null,"id":3031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":3029,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3015,"src":"50150:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":3030,"name":"maxChangeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"50162:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"50150:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3032,"nodeType":"ExpressionStatement","src":"50150:27:0"}]}},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":3040,"name":"_strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"50240:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}],"id":3039,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"50232:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3038,"name":"address","nodeType":"ElementaryTypeName","src":"50232:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":3041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50232:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":3042,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3015,"src":"50252:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":3035,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"50213:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"id":3037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":209,"src":"50213:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$72_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$72_$","typeString":"function (contract IERC20,address,uint256)"}},"id":3043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50213:49:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3044,"nodeType":"ExpressionStatement","src":"50213:49:0"},{"expression":{"argumentTypes":null,"id":3055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3045,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2883,"src":"50280:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_memory_ptr","typeString":"struct BentoBoxV1.StrategyData memory"}},"id":3047,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"50280:12:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":3051,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3015,"src":"50312:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"to128","nodeType":"MemberAccess","referencedDeclaration":359,"src":"50312:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint128_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint128)"}},"id":3053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50312:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3048,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2883,"src":"50295:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_memory_ptr","typeString":"struct BentoBoxV1.StrategyData memory"}},"id":3049,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"50295:12:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":3050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":435,"src":"50295:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint128_$_t_uint128_$returns$_t_uint128_$bound_to$_t_uint128_$","typeString":"function (uint128,uint128) pure returns (uint128)"}},"id":3054,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50295:35:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"50280:50:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":3056,"nodeType":"ExpressionStatement","src":"50280:50:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":3060,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3015,"src":"50363:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":3057,"name":"_strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"50348:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$147","typeString":"contract IStrategy"}},"id":3059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"skim","nodeType":"MemberAccess","referencedDeclaration":120,"src":"50348:14:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256) external"}},"id":3061,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50348:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3062,"nodeType":"ExpressionStatement","src":"50348:25:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":3064,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"50414:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},{"argumentTypes":null,"id":3065,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3015,"src":"50421:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3063,"name":"LogStrategyInvest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1653,"src":"50396:17:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IERC20_$72_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,uint256)"}},"id":3066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50396:35:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3067,"nodeType":"EmitStatement","src":"50391:40:0"}]}}]}},{"expression":{"argumentTypes":null,"id":3129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":3125,"name":"strategyData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"50946:12:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IERC20_$72_$_t_struct$_StrategyData_$1678_storage_$","typeString":"mapping(contract IERC20 => struct BentoBoxV1.StrategyData storage ref)"}},"id":3127,"indexExpression":{"argumentTypes":null,"id":3126,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"50959:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"50946:19:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_storage","typeString":"struct BentoBoxV1.StrategyData storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":3128,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2883,"src":"50968:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_memory_ptr","typeString":"struct BentoBoxV1.StrategyData memory"}},"src":"50946:26:0","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyData_$1678_storage","typeString":"struct BentoBoxV1.StrategyData storage ref"}},"id":3130,"nodeType":"ExpressionStatement","src":"50946:26:0"}]},"documentation":{"id":2873,"nodeType":"StructuredDocumentation","src":"47824:483:0","text":"@notice The actual process of yield farming. Executes the strategy of `token`.\n Optionally does housekeeping if `balance` is true.\n `maxChangeAmount` is relevant for skimming or withdrawing if `balance` is true.\n @param token The address of the token for which a strategy is deployed.\n @param balance True if housekeeping should be done.\n @param maxChangeAmount The maximum amount for either pulling or pushing from/to the `IStrategy` contract."},"functionSelector":"66c6bb0b","id":3132,"implemented":true,"kind":"function","modifiers":[],"name":"harvest","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":2880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2875,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":3132,"src":"48584:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":2874,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":72,"src":"48584:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$72","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":2877,"mutability":"mutable","name":"balance","nodeType":"VariableDeclaration","overrides":null,"scope":3132,"src":"48606:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2876,"name":"bool","nodeType":"ElementaryTypeName","src":"48606:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},{"constant":false,"id":2879,"mutability":"mutable","name":"maxChangeAmount","nodeType":"VariableDeclaration","overrides":null,"scope":3132,"src":"48628:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2878,"name":"uint256","nodeType":"ElementaryTypeName","src":"48628:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"48574:83:0"},"returnParameters":{"id":2881,"nodeType":"ParameterList","parameters":[],"src":"48665:0:0"},"scope":3137,"src":"48558:2421:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3135,"nodeType":"Block","src":"51142:2:0","statements":[]},"documentation":null,"id":3136,"implemented":true,"kind":"receive","modifiers":[],"name":"","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":3133,"nodeType":"ParameterList","parameters":[],"src":"51122:2:0"},"returnParameters":{"id":3134,"nodeType":"ParameterList","parameters":[],"src":"51142:0:0"},"scope":3137,"src":"51115:29:0","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":3138,"src":"27784:23362:0"}],"src":"891:50256:0"},"id":0}},"contracts":{"contracts/flat/BentoBoxV1Flat.sol":{"BaseBoringBatchable":{"abi":[{"inputs":[{"internalType":"bytes[]","name":"calls","type":"bytes[]"},{"internalType":"bool","name":"revertOnFail","type":"bool"}],"name":"batch","outputs":[{"internalType":"bool[]","name":"successes","type":"bool[]"},{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"payable","type":"function"}],"devdoc":{"kind":"dev","methods":{"batch(bytes[],bool)":{"params":{"calls":"An array of inputs for each call.","revertOnFail":"If True then reverts after a failed call and stops doing further calls."},"returns":{"results":"An array with the returned data of each function call, mapped one-to-one to `calls`.","successes":"An array indicating the success of a call, mapped one-to-one to `calls`."}}},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"608060405234801561001057600080fd5b5061058e806100206000396000f3fe60806040526004361061001e5760003560e01c8063d2423b5114610023575b600080fd5b61003661003136600461026a565b61004d565b604051610044929190610401565b60405180910390f35b6060808367ffffffffffffffff8111801561006757600080fd5b50604051908082528060200260200182016040528015610091578160200160208202803683370190505b5091508367ffffffffffffffff811180156100ab57600080fd5b506040519080825280602002602001820160405280156100df57816020015b60608152602001906001900390816100ca5790505b50905060005b848110156101f95760006060308888858181106100fe57fe5b905060200281019061011091906104b5565b60405161011e9291906103f1565b600060405180830381855af49150503d8060008114610159576040519150601f19603f3d011682016040523d82523d6000602084013e61015e565b606091505b5091509150818061016d575085155b61017682610202565b906101b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ae919061049b565b60405180910390fd5b50818584815181106101c557fe5b602002602001019015159081151581525050808484815181106101e457fe5b602090810291909101015250506001016100e5565b50935093915050565b6060604482511015610248575060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c790000006020820152610265565b6004820191508180602001905181019061026291906102ee565b90505b919050565b60008060006040848603121561027e578283fd5b833567ffffffffffffffff80821115610295578485fd5b818601915086601f8301126102a8578485fd5b8135818111156102b6578586fd5b87602080830285010111156102c9578586fd5b6020928301955093505084013580151581146102e3578182fd5b809150509250925092565b6000602082840312156102ff578081fd5b815167ffffffffffffffff80821115610316578283fd5b818401915084601f830112610329578283fd5b815181811115610337578384fd5b60405160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401168201018181108482111715610375578586fd5b60405281815283820160200187101561038c578485fd5b61039d826020830160208701610528565b9695505050505050565b600081518084526103bf816020860160208601610528565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000828483379101908152919050565b604080825283519082018190526000906020906060840190828701845b8281101561043c57815115158452928401929084019060010161041e565b50505083810382850152808551610453818461051f565b91508192508381028201848801865b8381101561048c57858303855261047a8383516103a7565b94870194925090860190600101610462565b50909998505050505050505050565b6000602082526104ae60208301846103a7565b9392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126104e9578283fd5b83018035915067ffffffffffffffff821115610503578283fd5b60200191503681900382131561051857600080fd5b9250929050565b90815260200190565b60005b8381101561054357818101518382015260200161052b565b83811115610552576000848401525b5050505056fea26469706673582212200b1712c3debc393439ad5c50c794c82c20224f79074b139287e31740437bb78c64736f6c634300060c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x58E DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xD2423B51 EQ PUSH2 0x23 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x36 PUSH2 0x31 CALLDATASIZE PUSH1 0x4 PUSH2 0x26A JUMP JUMPDEST PUSH2 0x4D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x44 SWAP3 SWAP2 SWAP1 PUSH2 0x401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 DUP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x91 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0xAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xDF JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xCA JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1F9 JUMPI PUSH1 0x0 PUSH1 0x60 ADDRESS DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0xFE JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x110 SWAP2 SWAP1 PUSH2 0x4B5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11E SWAP3 SWAP2 SWAP1 PUSH2 0x3F1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x159 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x15E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 PUSH2 0x16D JUMPI POP DUP6 ISZERO JUMPDEST PUSH2 0x176 DUP3 PUSH2 0x202 JUMP JUMPDEST SWAP1 PUSH2 0x1B7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1AE SWAP2 SWAP1 PUSH2 0x49B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP2 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1C5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 ISZERO ISZERO SWAP1 DUP2 ISZERO ISZERO DUP2 MSTORE POP POP DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1E4 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0xE5 JUMP JUMPDEST POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x44 DUP3 MLOAD LT ISZERO PUSH2 0x248 JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH32 0x5472616E73616374696F6E2072657665727465642073696C656E746C79000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x265 JUMP JUMPDEST PUSH1 0x4 DUP3 ADD SWAP2 POP DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x262 SWAP2 SWAP1 PUSH2 0x2EE JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x27E JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x295 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2A8 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x2B6 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x2C9 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH1 0x20 SWAP3 DUP4 ADD SWAP6 POP SWAP4 POP POP DUP5 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2E3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2FF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x316 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x329 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x337 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND DUP3 ADD ADD DUP2 DUP2 LT DUP5 DUP3 GT OR ISZERO PUSH2 0x375 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH1 0x40 MSTORE DUP2 DUP2 MSTORE DUP4 DUP3 ADD PUSH1 0x20 ADD DUP8 LT ISZERO PUSH2 0x38C JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x39D DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x528 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x3BF DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x528 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP4 MLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x20 SWAP1 PUSH1 0x60 DUP5 ADD SWAP1 DUP3 DUP8 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x43C JUMPI DUP2 MLOAD ISZERO ISZERO DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x41E JUMP JUMPDEST POP POP POP DUP4 DUP2 SUB DUP3 DUP6 ADD MSTORE DUP1 DUP6 MLOAD PUSH2 0x453 DUP2 DUP5 PUSH2 0x51F JUMP JUMPDEST SWAP2 POP DUP2 SWAP3 POP DUP4 DUP2 MUL DUP3 ADD DUP5 DUP9 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x48C JUMPI DUP6 DUP4 SUB DUP6 MSTORE PUSH2 0x47A DUP4 DUP4 MLOAD PUSH2 0x3A7 JUMP JUMPDEST SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x462 JUMP JUMPDEST POP SWAP1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x4AE PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3A7 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x4E9 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x503 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x518 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x543 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x52B JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x552 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SIGNEXTEND OR SLT 0xC3 0xDE 0xBC CODECOPY CALLVALUE CODECOPY 0xAD 0x5C POP 0xC7 SWAP5 0xC8 0x2C KECCAK256 0x22 0x4F PUSH26 0x74B139287E31740437BB78C64736F6C634300060C0033000000 ","sourceMap":"24618:2061:0:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"60806040526004361061001e5760003560e01c8063d2423b5114610023575b600080fd5b61003661003136600461026a565b61004d565b604051610044929190610401565b60405180910390f35b6060808367ffffffffffffffff8111801561006757600080fd5b50604051908082528060200260200182016040528015610091578160200160208202803683370190505b5091508367ffffffffffffffff811180156100ab57600080fd5b506040519080825280602002602001820160405280156100df57816020015b60608152602001906001900390816100ca5790505b50905060005b848110156101f95760006060308888858181106100fe57fe5b905060200281019061011091906104b5565b60405161011e9291906103f1565b600060405180830381855af49150503d8060008114610159576040519150601f19603f3d011682016040523d82523d6000602084013e61015e565b606091505b5091509150818061016d575085155b61017682610202565b906101b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ae919061049b565b60405180910390fd5b50818584815181106101c557fe5b602002602001019015159081151581525050808484815181106101e457fe5b602090810291909101015250506001016100e5565b50935093915050565b6060604482511015610248575060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c790000006020820152610265565b6004820191508180602001905181019061026291906102ee565b90505b919050565b60008060006040848603121561027e578283fd5b833567ffffffffffffffff80821115610295578485fd5b818601915086601f8301126102a8578485fd5b8135818111156102b6578586fd5b87602080830285010111156102c9578586fd5b6020928301955093505084013580151581146102e3578182fd5b809150509250925092565b6000602082840312156102ff578081fd5b815167ffffffffffffffff80821115610316578283fd5b818401915084601f830112610329578283fd5b815181811115610337578384fd5b60405160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401168201018181108482111715610375578586fd5b60405281815283820160200187101561038c578485fd5b61039d826020830160208701610528565b9695505050505050565b600081518084526103bf816020860160208601610528565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000828483379101908152919050565b604080825283519082018190526000906020906060840190828701845b8281101561043c57815115158452928401929084019060010161041e565b50505083810382850152808551610453818461051f565b91508192508381028201848801865b8381101561048c57858303855261047a8383516103a7565b94870194925090860190600101610462565b50909998505050505050505050565b6000602082526104ae60208301846103a7565b9392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126104e9578283fd5b83018035915067ffffffffffffffff821115610503578283fd5b60200191503681900382131561051857600080fd5b9250929050565b90815260200190565b60005b8381101561054357818101518382015260200161052b565b83811115610552576000848401525b5050505056fea26469706673582212200b1712c3debc393439ad5c50c794c82c20224f79074b139287e31740437bb78c64736f6c634300060c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xD2423B51 EQ PUSH2 0x23 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x36 PUSH2 0x31 CALLDATASIZE PUSH1 0x4 PUSH2 0x26A JUMP JUMPDEST PUSH2 0x4D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x44 SWAP3 SWAP2 SWAP1 PUSH2 0x401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 DUP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x91 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0xAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xDF JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xCA JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1F9 JUMPI PUSH1 0x0 PUSH1 0x60 ADDRESS DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0xFE JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x110 SWAP2 SWAP1 PUSH2 0x4B5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11E SWAP3 SWAP2 SWAP1 PUSH2 0x3F1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x159 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x15E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 PUSH2 0x16D JUMPI POP DUP6 ISZERO JUMPDEST PUSH2 0x176 DUP3 PUSH2 0x202 JUMP JUMPDEST SWAP1 PUSH2 0x1B7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1AE SWAP2 SWAP1 PUSH2 0x49B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP2 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1C5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 ISZERO ISZERO SWAP1 DUP2 ISZERO ISZERO DUP2 MSTORE POP POP DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1E4 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0xE5 JUMP JUMPDEST POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x44 DUP3 MLOAD LT ISZERO PUSH2 0x248 JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH32 0x5472616E73616374696F6E2072657665727465642073696C656E746C79000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x265 JUMP JUMPDEST PUSH1 0x4 DUP3 ADD SWAP2 POP DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x262 SWAP2 SWAP1 PUSH2 0x2EE JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x27E JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x295 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2A8 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x2B6 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x2C9 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH1 0x20 SWAP3 DUP4 ADD SWAP6 POP SWAP4 POP POP DUP5 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2E3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2FF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x316 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x329 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x337 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND DUP3 ADD ADD DUP2 DUP2 LT DUP5 DUP3 GT OR ISZERO PUSH2 0x375 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH1 0x40 MSTORE DUP2 DUP2 MSTORE DUP4 DUP3 ADD PUSH1 0x20 ADD DUP8 LT ISZERO PUSH2 0x38C JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x39D DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x528 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x3BF DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x528 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP4 MLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x20 SWAP1 PUSH1 0x60 DUP5 ADD SWAP1 DUP3 DUP8 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x43C JUMPI DUP2 MLOAD ISZERO ISZERO DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x41E JUMP JUMPDEST POP POP POP DUP4 DUP2 SUB DUP3 DUP6 ADD MSTORE DUP1 DUP6 MLOAD PUSH2 0x453 DUP2 DUP5 PUSH2 0x51F JUMP JUMPDEST SWAP2 POP DUP2 SWAP3 POP DUP4 DUP2 MUL DUP3 ADD DUP5 DUP9 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x48C JUMPI DUP6 DUP4 SUB DUP6 MSTORE PUSH2 0x47A DUP4 DUP4 MLOAD PUSH2 0x3A7 JUMP JUMPDEST SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x462 JUMP JUMPDEST POP SWAP1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x4AE PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3A7 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x4E9 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x503 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x518 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x543 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x52B JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x552 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SIGNEXTEND OR SLT 0xC3 0xDE 0xBC CODECOPY CALLVALUE CODECOPY 0xAD 0x5C POP 0xC7 SWAP5 0xC8 0x2C KECCAK256 0x22 0x4F PUSH26 0x74B139287E31740437BB78C64736F6C634300060C0033000000 ","sourceMap":"24618:2061:0:-:0;;;;;;;;;;;;;;;;;;;;;26156:521;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;26240:23;;26322:5;26311:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;26311:24:0;-1:-1:-1;26299:36:0;-1:-1:-1;26367:5:0;26355:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26345:35;;26395:9;26390:281;26410:16;;;26390:281;;;26448:12;26462:19;26493:4;26512:5;;26518:1;26512:8;;;;;;;;;;;;;;;;;;:::i;:::-;26485:36;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26447:74;;;;26543:7;:24;;;;26555:12;26554:13;26543:24;26569:21;26583:6;26569:13;:21::i;:::-;26535:56;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;26620:7;26605:9;26615:1;26605:12;;;;;;;;;;;;;:22;;;;;;;;;;;26654:6;26641:7;26649:1;26641:10;;;;;;;;;;;;;;;;;:19;-1:-1:-1;;26428:3:0;;26390:281;;;;26156:521;;;;;;:::o;24840:487::-;24912:13;25073:2;25052:11;:18;:23;25048:67;;;-1:-1:-1;25077:38:0;;;;;;;;;;;;;;;;;;;25048:67;25215:4;25202:11;25198:22;25183:37;;25257:11;25246:33;;;;;;;;;;;;:::i;:::-;25239:40;;24840:487;;;;:::o;976:538:-1:-;;;;1140:2;1128:9;1119:7;1115:23;1111:32;1108:2;;;-1:-1;;1146:12;1108:2;1204:17;1191:31;1242:18;;1234:6;1231:30;1228:2;;;-1:-1;;1264:12;1228:2;1376:6;1365:9;1361:22;;;162:3;155:4;147:6;143:17;139:27;129:2;;-1:-1;;170:12;129:2;213:6;200:20;1242:18;232:6;229:30;226:2;;;-1:-1;;262:12;226:2;357:3;306:4;;341:6;337:17;298:6;323:32;;320:41;317:2;;;-1:-1;;364:12;317:2;306:4;294:17;;;;-1:-1;1284:109;-1:-1;;1466:22;;456:20;9459:13;;9452:21;10077:32;;10067:2;;-1:-1;;10113:12;10067:2;1438:60;;;;1102:412;;;;;:::o;1521:362::-;;1646:2;1634:9;1625:7;1621:23;1617:32;1614:2;;;-1:-1;;1652:12;1614:2;1703:17;1697:24;1741:18;;1733:6;1730:30;1727:2;;;-1:-1;;1763:12;1727:2;1850:6;1839:9;1835:22;;;637:3;630:4;622:6;618:17;614:27;604:2;;-1:-1;;645:12;604:2;685:6;679:13;1741:18;7225:6;7222:30;7219:2;;;-1:-1;;7255:12;7219:2;6888;6882:9;1646:2;7328:9;630:4;7313:6;7309:17;7305:33;6918:6;6914:17;;7025:6;7013:10;7010:22;1741:18;6977:10;6974:34;6971:62;6968:2;;;-1:-1;;7036:12;6968:2;6888;7055:22;778:21;;;878:16;;;1646:2;878:16;875:25;-1:-1;872:2;;;-1:-1;;903:12;872:2;923:39;955:6;1646:2;854:5;850:16;1646:2;820:6;816:17;923:39;:::i;:::-;1783:84;1608:275;-1:-1;;;;;;1608:275::o;4354:323::-;;4486:5;7840:12;8655:6;8650:3;8643:19;4569:52;4614:6;8692:4;8687:3;8683:14;8692:4;4595:5;4591:16;4569:52;:::i;:::-;10004:2;9984:14;10000:7;9980:28;4633:39;;;;8692:4;4633:39;;4434:243;-1:-1;;4434:243::o;5038:291::-;;9567:6;9562:3;9557;9544:30;9605:16;;9598:27;;;9605:16;5182:147;-1:-1;5182:147::o;5336:653::-;5603:2;5617:47;;;7840:12;;5588:18;;;8643:19;;;5336:653;;8692:4;;8683:14;;;;7530;;;5336:653;2676:251;2701:6;2698:1;2695:13;2676:251;;;2762:13;;9459;9452:21;3967:34;;2032:14;;;;8377;;;;2723:1;2716:9;2676:251;;;2680:14;;;5828:9;5822:4;5818:20;8692:4;5802:9;5798:18;5791:48;5853:126;3204:5;7840:12;3223:95;3311:6;3306:3;3223:95;:::i;:::-;3216:102;;;;;8692:4;3375:6;3371:17;3366:3;3362:27;8692:4;3469:5;7530:14;-1:-1;3508:357;3533:6;3530:1;3527:13;3508:357;;;3595:9;3589:4;3585:20;3580:3;3573:33;2180:64;2240:3;3640:6;3634:13;2180:64;:::i;:::-;3844:14;;;;3654:90;-1:-1;8377:14;;;;2723:1;3548:9;3508:357;;;-1:-1;5845:134;;5574:415;-1:-1;;;;;;;;;5574:415::o;5996:310::-;;6143:2;6164:17;6157:47;6218:78;6143:2;6132:9;6128:18;6282:6;6218:78;:::i;:::-;6210:86;6114:192;-1:-1;;;6114:192::o;6313:506::-;;;6448:11;6435:25;6499:48;6523:8;6507:14;6503:29;6499:48;6479:18;6475:73;6465:2;;-1:-1;;6552:12;6465:2;6579:33;;6633:18;;;-1:-1;6671:18;6660:30;;6657:2;;;-1:-1;;6693:12;6657:2;6538:4;6721:13;;-1:-1;6507:14;6753:38;;;6743:49;;6740:2;;;6805:1;;6795:12;6740:2;6403:416;;;;;:::o;8528:175::-;8643:19;;;8692:4;8683:14;;8636:67::o;9640:268::-;9705:1;9712:101;9726:6;9723:1;9720:13;9712:101;;;9793:11;;;9787:18;9774:11;;;9767:39;9748:2;9741:10;9712:101;;;9828:6;9825:1;9822:13;9819:2;;;9705:1;9884:6;9879:3;9875:16;9868:27;9819:2;;9689:219;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"284400","executionCost":"324","totalCost":"284724"},"external":{"batch(bytes[],bool)":"infinite"},"internal":{"_getRevertMsg(bytes memory)":"infinite"}},"methodIdentifiers":{"batch(bytes[],bool)":"d2423b51"}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"calls\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"revertOnFail\",\"type\":\"bool\"}],\"name\":\"batch\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"successes\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"batch(bytes[],bool)\":{\"params\":{\"calls\":\"An array of inputs for each call.\",\"revertOnFail\":\"If True then reverts after a failed call and stops doing further calls.\"},\"returns\":{\"results\":\"An array with the returned data of each function call, mapped one-to-one to `calls`.\",\"successes\":\"An array indicating the success of a call, mapped one-to-one to `calls`.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batch(bytes[],bool)\":{\"notice\":\"Allows batched call to self (this contract).\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/BentoBoxV1Flat.sol\":\"BaseBoringBatchable\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/flat/BentoBoxV1Flat.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// The BentoBox\\n\\n//  \\u2584\\u2584\\u2584\\u2584\\u00b7 \\u2584\\u2584\\u2584 . \\u2590 \\u2584 \\u2584\\u2584\\u2584\\u2584\\u2584      \\u2584\\u2584\\u2584\\u2584\\u00b7       \\u2590\\u2584\\u2022 \\u2584\\n//  \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u2580\\u2584.\\u2580\\u00b7\\u2588\\u258c\\u2590\\u2588\\u2022\\u2588\\u2588  \\u25aa     \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u25aa      \\u2588\\u258c\\u2588\\u258c\\u25aa\\n//  \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584\\u2590\\u2580\\u2580\\u25aa\\u2584\\u2590\\u2588\\u2590\\u2590\\u258c \\u2590\\u2588.\\u25aa \\u2584\\u2588\\u2580\\u2584 \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584 \\u2584\\u2588\\u2580\\u2584  \\u00b7\\u2588\\u2588\\u00b7\\n//  \\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u2584\\u2584\\u258c\\u2588\\u2588\\u2590\\u2588\\u258c \\u2590\\u2588\\u258c\\u00b7\\u2590\\u2588\\u258c.\\u2590\\u258c\\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u258c.\\u2590\\u258c\\u25aa\\u2590\\u2588\\u00b7\\u2588\\u258c\\n//  \\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2580\\u2580 \\u2580\\u2580 \\u2588\\u25aa \\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u2022\\u2580\\u2580 \\u2580\\u2580\\n\\n// This contract stores funds, handles their transfers, supports flash loans and strategies.\\n\\n// Copyright (c) 2021 BoringCrypto - All rights reserved\\n// Twitter: @Boring_Crypto\\n\\n// Special thanks to Keno for all his hard work and support\\n\\n// Version 22-Mar-2021\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable not-rely-on-time\\n// solhint-disable no-inline-assembly\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function decimals() external view returns (uint256);\\n}\\n\\n// File contracts/interfaces/IFlashLoan.sol\\n// License-Identifier: MIT\\n\\ninterface IFlashBorrower {\\n    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param token The address of the token that is loaned.\\n    /// @param amount of the `token` that is loaned.\\n    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onFlashLoan(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IBatchFlashBorrower {\\n    /// @notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param tokens Array of addresses for ERC-20 tokens that is loaned.\\n    /// @param amounts A one-to-one map to `tokens` that is loaned.\\n    /// @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onBatchFlashLoan(\\n        address sender,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata fees,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File contracts/interfaces/IWETH.sol\\n// License-Identifier: MIT\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\\n// File contracts/interfaces/IStrategy.sol\\n// License-Identifier: MIT\\n\\ninterface IStrategy {\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\n    /// @param amount The amount of tokens to invest.\\n    function skim(uint256 amount) external;\\n\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\n    /// @dev The `actualAmount` should be very close to the amount.\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\n    /// @param amount The requested amount the caller wants to withdraw.\\n    /// @return actualAmount The real amount that is withdrawn.\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library using overflow-/underflow-safe math.\\nlibrary RebaseLibrary {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = elastic.mul(total.base) / total.elastic;\\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\\n                base = base.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = base.mul(total.elastic) / total.base;\\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\\n                elastic = elastic.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\\n    /// @return (Rebase) The new total.\\n    /// @return base in relationship to `elastic`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 base) {\\n        base = toBase(total, elastic, roundUp);\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return (total, base);\\n    }\\n\\n    /// @notice Sub `base` from `total` and update `total.elastic`.\\n    /// @return (Rebase) The new total.\\n    /// @return elastic in relationship to `base`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 elastic) {\\n        elastic = toElastic(total, base, roundUp);\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return (total, elastic);\\n    }\\n\\n    /// @notice Add `elastic` and `base` to `total`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Subtract `elastic` and `base` to `total`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Add `elastic` to `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.add(elastic.to128());\\n    }\\n\\n    /// @notice Subtract `elastic` from `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.sub(elastic.to128());\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() public {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IMasterContract {\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\n    /// Also kown as the constructor for cloned contracts.\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\n    /// @param data Can be abi encoded arguments or anything else.\\n    function init(bytes calldata data) external payable;\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringFactory.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BoringFactory {\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\n\\n    /// @notice Mapping from clone contracts to their masterContract.\\n    mapping(address => address) public masterContractOf;\\n\\n    /// @notice Deploys a given master Contract as a clone.\\n    /// Any ETH transferred with this call is forwarded to the new clone.\\n    /// Emits `LogDeploy`.\\n    /// @param masterContract The address of the contract to clone.\\n    /// @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\\n    /// @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\\n    /// @return cloneAddress Address of the created clone contract.\\n    function deploy(\\n        address masterContract,\\n        bytes calldata data,\\n        bool useCreate2\\n    ) public payable returns (address cloneAddress) {\\n        require(masterContract != address(0), \\\"BoringFactory: No masterContract\\\");\\n        bytes20 targetBytes = bytes20(masterContract); // Takes the first 20 bytes of the masterContract's address\\n\\n        if (useCreate2) {\\n            // each masterContract has different code already. So clones are distinguished by their data only.\\n            bytes32 salt = keccak256(data);\\n\\n            // Creates clone, more info here: https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create2(0, clone, 0x37, salt)\\n            }\\n        } else {\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create(0, clone, 0x37)\\n            }\\n        }\\n        masterContractOf[cloneAddress] = masterContract;\\n\\n        IMasterContract(cloneAddress).init{value: msg.value}(data);\\n\\n        emit LogDeploy(masterContract, data, cloneAddress);\\n    }\\n}\\n\\n// File contracts/MasterContractManager.sol\\n// License-Identifier: UNLICENSED\\n\\ncontract MasterContractManager is BoringOwnable, BoringFactory {\\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\\n    event LogRegisterProtocol(address indexed protocol);\\n\\n    /// @notice masterContract to user to approval state\\n    mapping(address => mapping(address => bool)) public masterContractApproved;\\n    /// @notice masterContract to whitelisted state for approval without signed message\\n    mapping(address => bool) public whitelistedMasterContracts;\\n    /// @notice user nonces for masterContract approvals\\n    mapping(address => uint256) public nonces;\\n\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n    // See https://eips.ethereum.org/EIPS/eip-191\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\n    bytes32 private constant APPROVAL_SIGNATURE_HASH =\\n        keccak256(\\\"SetMasterContractApproval(string warning,address user,address masterContract,bool approved,uint256 nonce)\\\");\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\n    }\\n\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, keccak256(\\\"BentoBox V1\\\"), chainId, address(this)));\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @notice Other contracts need to register with this master contract so that users can approve them for the BentoBox.\\n    function registerProtocol() public {\\n        masterContractOf[msg.sender] = msg.sender;\\n        emit LogRegisterProtocol(msg.sender);\\n    }\\n\\n    /// @notice Enables or disables a contract for approval without signed message.\\n    function whitelistMasterContract(address masterContract, bool approved) public onlyOwner {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: Cannot approve 0\\\");\\n\\n        // Effects\\n        whitelistedMasterContracts[masterContract] = approved;\\n        emit LogWhiteListMasterContract(masterContract, approved);\\n    }\\n\\n    /// @notice Approves or revokes a `masterContract` access to `user` funds.\\n    /// @param user The address of the user that approves or revokes access.\\n    /// @param masterContract The address who gains or loses access.\\n    /// @param approved If True approves access. If False revokes access.\\n    /// @param v Part of the signature. (See EIP-191)\\n    /// @param r Part of the signature. (See EIP-191)\\n    /// @param s Part of the signature. (See EIP-191)\\n    // F4 - Check behaviour for all function arguments when wrong or extreme\\n    // F4: Don't allow masterContract 0 to be approved. Unknown contracts will have a masterContract of 0.\\n    // F4: User can't be 0 for signed approvals because the recoveredAddress will be 0 if ecrecover fails\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: masterC not set\\\"); // Important for security\\n\\n        // If no signature is provided, the fallback is executed\\n        if (r == 0 && s == 0 && v == 0) {\\n            require(user == msg.sender, \\\"MasterCMgr: user not sender\\\");\\n            require(masterContractOf[user] == address(0), \\\"MasterCMgr: user is clone\\\");\\n            require(whitelistedMasterContracts[masterContract], \\\"MasterCMgr: not whitelisted\\\");\\n        } else {\\n            // Important for security - any address without masterContract has address(0) as masterContract\\n            // So approving address(0) would approve every address, leading to full loss of funds\\n            // Also, ecrecover returns address(0) on failure. So we check this:\\n            require(user != address(0), \\\"MasterCMgr: User cannot be 0\\\");\\n\\n            // C10 - Protect signatures against replay, use nonce and chainId (SWC-121)\\n            // C10: nonce + chainId are used to prevent replays\\n            // C11 - All signatures strictly EIP-712 (SWC-117 SWC-122)\\n            // C11: signature is EIP-712 compliant\\n            // C12 - abi.encodePacked can't contain variable length user input (SWC-133)\\n            // C12: abi.encodePacked has fixed length parameters\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA,\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            APPROVAL_SIGNATURE_HASH,\\n                            approved\\n                                ? keccak256(\\\"Give FULL access to funds in (and approved to) BentoBox?\\\")\\n                                : keccak256(\\\"Revoke access to BentoBox?\\\"),\\n                            user,\\n                            masterContract,\\n                            approved,\\n                            nonces[user]++\\n                        )\\n                    )\\n                )\\n            );\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress == user, \\\"MasterCMgr: Invalid Signature\\\");\\n        }\\n\\n        // Effects\\n        masterContractApproved[masterContract][user] = approved;\\n        emit LogSetMasterContractApproval(masterContract, user, approved);\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringBatchable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BaseBoringBatchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /// @notice Allows batched call to self (this contract).\\n    /// @param calls An array of inputs for each call.\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n    /// @return successes An array indicating the success of a call, mapped one-to-one to `calls`.\\n    /// @return results An array with the returned data of each function call, mapped one-to-one to `calls`.\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results) {\\n        successes = new bool[](calls.length);\\n        results = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\n            require(success || !revertOnFail, _getRevertMsg(result));\\n            successes[i] = success;\\n            results[i] = result;\\n        }\\n    }\\n}\\n\\ncontract BoringBatchable is BaseBoringBatchable {\\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\\n    /// Lookup `IERC20.permit`.\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\n    function permitToken(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        token.permit(from, to, amount, deadline, v, r, s);\\n    }\\n}\\n\\n// File contracts/BentoBox.sol\\n// License-Identifier: UNLICENSED\\n\\n/// @title BentoBox\\n/// @author BoringCrypto, Keno\\n/// @notice The BentoBox is a vault for tokens. The stored tokens can be flash loaned and used in strategies.\\n/// Yield from this will go to the token depositors.\\n/// Rebasing tokens ARE NOT supported and WILL cause loss of funds.\\n/// Any funds transfered directly onto the BentoBox will be lost, use the deposit function instead.\\ncontract BentoBoxV1 is MasterContractManager, BoringBatchable {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n    using BoringERC20 for IERC20;\\n    using RebaseLibrary for Rebase;\\n\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n\\n    event LogDeposit(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogWithdraw(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogTransfer(IERC20 indexed token, address indexed from, address indexed to, uint256 share);\\n\\n    event LogFlashLoan(address indexed borrower, IERC20 indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\\n\\n    event LogStrategyTargetPercentage(IERC20 indexed token, uint256 targetPercentage);\\n    event LogStrategyQueued(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategySet(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategyInvest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyDivest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyProfit(IERC20 indexed token, uint256 amount);\\n    event LogStrategyLoss(IERC20 indexed token, uint256 amount);\\n\\n    // *************** //\\n    // *** STRUCTS *** //\\n    // *************** //\\n\\n    struct StrategyData {\\n        uint64 strategyStartDate;\\n        uint64 targetPercentage;\\n        uint128 balance; // the balance of the strategy that BentoBox thinks is in there\\n    }\\n\\n    // ******************************** //\\n    // *** CONSTANTS AND IMMUTABLES *** //\\n    // ******************************** //\\n\\n    // V2 - Can they be private?\\n    // V2: Private to save gas, to verify it's correct, check the constructor arguments\\n    IERC20 private immutable wethToken;\\n\\n    IERC20 private constant USE_ETHEREUM = IERC20(0);\\n    uint256 private constant FLASH_LOAN_FEE = 50; // 0.05%\\n    uint256 private constant FLASH_LOAN_FEE_PRECISION = 1e5;\\n    uint256 private constant STRATEGY_DELAY = 0 weeks;\\n    uint256 private constant MAX_TARGET_PERCENTAGE = 95; // 95%\\n    uint256 private constant MINIMUM_SHARE_BALANCE = 1000; // To prevent the ratio going off\\n\\n    // ***************** //\\n    // *** VARIABLES *** //\\n    // ***************** //\\n\\n    // Balance per token per address/contract in shares\\n    mapping(IERC20 => mapping(address => uint256)) public balanceOf;\\n\\n    // Rebase from amount to share\\n    mapping(IERC20 => Rebase) public totals;\\n\\n    mapping(IERC20 => IStrategy) public strategy;\\n    mapping(IERC20 => IStrategy) public pendingStrategy;\\n    mapping(IERC20 => StrategyData) public strategyData;\\n\\n    // ******************* //\\n    // *** CONSTRUCTOR *** //\\n    // ******************* //\\n\\n    constructor(IERC20 wethToken_) public {\\n        wethToken = wethToken_;\\n    }\\n\\n    // Just for testing purposes!!! Don't deploy this contract on production!!\\n    function setTokenTotal(\\n        IERC20 token,\\n        uint128 elastic,\\n        uint128 base\\n    ) public {\\n        Rebase memory total;\\n        total.elastic = elastic;\\n        total.base = base;\\n        totals[token] = total;\\n    }\\n\\n    // ***************** //\\n    // *** MODIFIERS *** //\\n    // ***************** //\\n\\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\\n    /// If 'from' is msg.sender, it's allowed.\\n    /// If 'from' is the BentoBox itself, it's allowed. Any ETH, token balances (above the known balances) or BentoBox balances\\n    /// can be taken by anyone.\\n    /// This is to enable skimming, not just for deposits, but also for withdrawals or transfers, enabling better composability.\\n    /// If 'from' is a clone of a masterContract AND the 'from' address has approved that masterContract, it's allowed.\\n    modifier allowed(address from) {\\n        if (from != msg.sender && from != address(this)) {\\n            // From is sender or you are skimming\\n            address masterContract = masterContractOf[msg.sender];\\n            require(masterContract != address(0), \\\"BentoBox: no masterContract\\\");\\n            require(masterContractApproved[masterContract][from], \\\"BentoBox: Transfer not approved\\\");\\n        }\\n        _;\\n    }\\n\\n    // ************************** //\\n    // *** INTERNAL FUNCTIONS *** //\\n    // ************************** //\\n\\n    /// @dev Returns the total balance of `token` this contracts holds,\\n    /// plus the total amount this contract thinks the strategy holds.\\n    function _tokenBalanceOf(IERC20 token) internal view returns (uint256 amount) {\\n        amount = token.balanceOf(address(this)).add(strategyData[token].balance);\\n    }\\n\\n    // ************************ //\\n    // *** PUBLIC FUNCTIONS *** //\\n    // ************************ //\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share) {\\n        share = totals[token].toBase(amount, roundUp);\\n    }\\n\\n    /// @dev Helper function represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        IERC20 token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount) {\\n        amount = totals[token].toElastic(share, roundUp);\\n    }\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public payable allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n\\n        // If a new token gets added, the tokenSupply call checks that this is a deployed contract. Needed for security.\\n        require(total.elastic != 0 || token.totalSupply() > 0, \\\"BentoBox: No tokens\\\");\\n        if (share == 0) {\\n            // value of the share may be lower than the amount due to rounding, that's ok\\n            share = total.toBase(amount, false);\\n            // Any deposit should lead to at least the minimum share balance, otherwise it's ignored (no amount taken)\\n            if (total.base.add(share.to128()) < MINIMUM_SHARE_BALANCE) {\\n                return (0, 0);\\n            }\\n        } else {\\n            // amount may be lower than the value of share due to rounding, in that case, add 1 to amount (Always round up)\\n            amount = total.toElastic(share, true);\\n        }\\n\\n        // In case of skimming, check that only the skimmable amount is taken.\\n        // For ETH, the full balance is available, so no need to check.\\n        // During flashloans the _tokenBalanceOf is lower than 'reality', so skimming deposits will mostly fail during a flashloan.\\n        require(\\n            from != address(this) || token_ == USE_ETHEREUM || amount <= _tokenBalanceOf(token).sub(total.elastic),\\n            \\\"BentoBox: Skim too much\\\"\\n        );\\n\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n        total.base = total.base.add(share.to128());\\n        total.elastic = total.elastic.add(amount.to128());\\n        totals[token] = total;\\n\\n        // Interactions\\n        // During the first deposit, we check that this token is 'real'\\n        if (token_ == USE_ETHEREUM) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the WETH implementation is faulty or malicious, it will block adding ETH (but we know the WETH implementation)\\n            IWETH(address(wethToken)).deposit{value: amount}();\\n        } else if (from != address(this)) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the token implementation is faulty or malicious, it may block adding tokens. Good.\\n            token.safeTransferFrom(from, address(this), amount);\\n        }\\n        emit LogDeposit(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n        if (share == 0) {\\n            // value of the share paid could be lower than the amount paid due to rounding, in that case, add a share (Always round up)\\n            share = total.toBase(amount, true);\\n        } else {\\n            // amount may be lower than the value of share due to rounding, that's ok\\n            amount = total.toElastic(share, false);\\n        }\\n\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        total.elastic = total.elastic.sub(amount.to128());\\n        total.base = total.base.sub(share.to128());\\n        // There have to be at least 1000 shares left to prevent reseting the share/amount ratio (unless it's fully emptied)\\n        require(total.base >= MINIMUM_SHARE_BALANCE || total.base == 0, \\\"BentoBox: cannot empty\\\");\\n        totals[token] = total;\\n\\n        // Interactions\\n        if (token_ == USE_ETHEREUM) {\\n            // X2, X3: A revert or big gas usage in the WETH contract could block withdrawals, but WETH9 is fine.\\n            IWETH(address(wethToken)).withdraw(amount);\\n            // X2, X3: A revert or big gas usage could block, however, the to address is under control of the caller.\\n            (bool success, ) = to.call{value: amount}(\\\"\\\");\\n            require(success, \\\"BentoBox: ETH transfer failed\\\");\\n        } else {\\n            // X2, X3: A malicious token could block withdrawal of just THAT token.\\n            //         masterContracts may want to take care not to rely on withdraw always succeeding.\\n            token.safeTransfer(to, amount);\\n        }\\n        emit LogWithdraw(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    // Clones of master contracts can transfer from any account that has approved them\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transferMultiple for gas optimization\\n    function transfer(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) public allowed(from) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n\\n        emit LogTransfer(token, from, to, share);\\n    }\\n\\n    /// @notice Transfer shares from a user account to multiple other ones.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param tos The receivers of the tokens.\\n    /// @param shares The amount of `token` in shares for each receiver in `tos`.\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transfer for gas optimization\\n    function transferMultiple(\\n        IERC20 token,\\n        address from,\\n        address[] calldata tos,\\n        uint256[] calldata shares\\n    ) public allowed(from) {\\n        // Checks\\n        require(tos[0] != address(0), \\\"BentoBox: to[0] not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        uint256 totalAmount;\\n        uint256 len = tos.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address to = tos[i];\\n            balanceOf[token][to] = balanceOf[token][to].add(shares[i]);\\n            totalAmount = totalAmount.add(shares[i]);\\n            emit LogTransfer(token, from, to, shares[i]);\\n        }\\n        balanceOf[token][from] = balanceOf[token][from].sub(totalAmount);\\n    }\\n\\n    /// @notice Flashloan ability.\\n    /// @param borrower The address of the contract that implements and conforms to `IFlashBorrower` and handles the flashloan.\\n    /// @param receiver Address of the token receiver.\\n    /// @param token The address of the token to receive.\\n    /// @param amount of the tokens to receive.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function flashLoan(\\n        IFlashBorrower borrower,\\n        address receiver,\\n        IERC20 token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public {\\n        uint256 fee = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n        token.safeTransfer(receiver, amount);\\n\\n        borrower.onFlashLoan(msg.sender, token, amount, fee, data);\\n\\n        require(_tokenBalanceOf(token) >= totals[token].addElastic(fee.to128()), \\\"BentoBox: Wrong amount\\\");\\n        emit LogFlashLoan(address(borrower), token, amount, fee, receiver);\\n    }\\n\\n    /// @notice Support for batched flashloans. Useful to request multiple different `tokens` in a single transaction.\\n    /// @param borrower The address of the contract that implements and conforms to `IBatchFlashBorrower` and handles the flashloan.\\n    /// @param receivers An array of the token receivers. A one-to-one mapping with `tokens` and `amounts`.\\n    /// @param tokens The addresses of the tokens.\\n    /// @param amounts of the tokens for each receiver.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function batchFlashLoan(\\n        IBatchFlashBorrower borrower,\\n        address[] calldata receivers,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public {\\n        uint256[] memory fees = new uint256[](tokens.length);\\n\\n        uint256 len = tokens.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 amount = amounts[i];\\n            fees[i] = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n\\n            tokens[i].safeTransfer(receivers[i], amounts[i]);\\n        }\\n\\n        borrower.onBatchFlashLoan(msg.sender, tokens, amounts, fees, data);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            IERC20 token = tokens[i];\\n            require(_tokenBalanceOf(token) >= totals[token].addElastic(fees[i].to128()), \\\"BentoBox: Wrong amount\\\");\\n            emit LogFlashLoan(address(borrower), token, amounts[i], fees[i], receivers[i]);\\n        }\\n    }\\n\\n    /// @notice Sets the target percentage of the strategy for `token`.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param targetPercentage_ The new target in percent. Must be lesser or equal to `MAX_TARGET_PERCENTAGE`.\\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) public onlyOwner {\\n        // Checks\\n        require(targetPercentage_ <= MAX_TARGET_PERCENTAGE, \\\"StrategyManager: Target too high\\\");\\n\\n        // Effects\\n        strategyData[token].targetPercentage = targetPercentage_;\\n        emit LogStrategyTargetPercentage(token, targetPercentage_);\\n    }\\n\\n    /// @notice Sets the contract address of a new strategy that conforms to `IStrategy` for `token`.\\n    /// Must be called twice with the same arguments.\\n    /// A new strategy becomes pending first and can be activated once `STRATEGY_DELAY` is over.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param newStrategy The address of the contract that conforms to `IStrategy`.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // C4 - Use block.timestamp only for long intervals (SWC-116)\\n    // C4: block.timestamp is used for a period of 2 weeks, which is long enough\\n    function setStrategy(IERC20 token, IStrategy newStrategy) public onlyOwner {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy pending = pendingStrategy[token];\\n        if (data.strategyStartDate == 0 || pending != newStrategy) {\\n            pendingStrategy[token] = newStrategy;\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: Our sun will swallow the earth well before this overflows\\n            data.strategyStartDate = (block.timestamp + STRATEGY_DELAY).to64();\\n            emit LogStrategyQueued(token, newStrategy);\\n        } else {\\n            require(data.strategyStartDate != 0 && block.timestamp >= data.strategyStartDate, \\\"StrategyManager: Too early\\\");\\n            if (address(strategy[token]) != address(0)) {\\n                int256 balanceChange = strategy[token].exit(data.balance);\\n                // Effects\\n                if (balanceChange > 0) {\\n                    uint256 add = uint256(balanceChange);\\n                    totals[token].addElastic(add);\\n                    emit LogStrategyProfit(token, add);\\n                } else if (balanceChange < 0) {\\n                    uint256 sub = uint256(-balanceChange);\\n                    totals[token].subElastic(sub);\\n                    emit LogStrategyLoss(token, sub);\\n                }\\n\\n                emit LogStrategyDivest(token, data.balance);\\n            }\\n            strategy[token] = pending;\\n            data.strategyStartDate = 0;\\n            data.balance = 0;\\n            pendingStrategy[token] = IStrategy(0);\\n            emit LogStrategySet(token, newStrategy);\\n        }\\n        strategyData[token] = data;\\n    }\\n\\n    /// @notice The actual process of yield farming. Executes the strategy of `token`.\\n    /// Optionally does housekeeping if `balance` is true.\\n    /// `maxChangeAmount` is relevant for skimming or withdrawing if `balance` is true.\\n    /// @param token The address of the token for which a strategy is deployed.\\n    /// @param balance True if housekeeping should be done.\\n    /// @param maxChangeAmount The maximum amount for either pulling or pushing from/to the `IStrategy` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // F5: Not followed to prevent reentrancy issues with flashloans and BentoBox skims?\\n    function harvest(\\n        IERC20 token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) public {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy _strategy = strategy[token];\\n        int256 balanceChange = _strategy.harvest(data.balance, msg.sender);\\n        if (balanceChange == 0 && !balance) {\\n            return;\\n        }\\n\\n        uint256 totalElastic = totals[token].elastic;\\n\\n        if (balanceChange > 0) {\\n            uint256 add = uint256(balanceChange);\\n            totalElastic = totalElastic.add(add);\\n            totals[token].elastic = totalElastic.to128();\\n            emit LogStrategyProfit(token, add);\\n        } else if (balanceChange < 0) {\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: balanceChange could overflow if it's max negative int128.\\n            // But tokens with balances that large are not supported by the BentoBox.\\n            uint256 sub = uint256(-balanceChange);\\n            totalElastic = totalElastic.sub(sub);\\n            totals[token].elastic = totalElastic.to128();\\n            data.balance = data.balance.sub(sub.to128());\\n            emit LogStrategyLoss(token, sub);\\n        }\\n\\n        if (balance) {\\n            uint256 targetBalance = totalElastic.mul(data.targetPercentage) / 100;\\n            // if data.balance == targetBalance there is nothing to update\\n            if (data.balance < targetBalance) {\\n                uint256 amountOut = targetBalance.sub(data.balance);\\n                if (maxChangeAmount != 0 && amountOut > maxChangeAmount) {\\n                    amountOut = maxChangeAmount;\\n                }\\n                token.safeTransfer(address(_strategy), amountOut);\\n                data.balance = data.balance.add(amountOut.to128());\\n                _strategy.skim(amountOut);\\n                emit LogStrategyInvest(token, amountOut);\\n            } else if (data.balance > targetBalance) {\\n                uint256 amountIn = data.balance.sub(targetBalance.to128());\\n                if (maxChangeAmount != 0 && amountIn > maxChangeAmount) {\\n                    amountIn = maxChangeAmount;\\n                }\\n\\n                uint256 actualAmountIn = _strategy.withdraw(amountIn);\\n\\n                data.balance = data.balance.sub(actualAmountIn.to128());\\n                emit LogStrategyDivest(token, actualAmountIn);\\n            }\\n        }\\n\\n        strategyData[token] = data;\\n    }\\n\\n    // Contract should be able to receive ETH deposits to support deposit & skim\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd8343e88ade6bf85fd34d3556aedb2b14fe07ca40396ae2ef6064c9d8da0d4d3\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batch(bytes[],bool)":{"notice":"Allows batched call to self (this contract)."}},"version":1}},"BentoBoxV1":{"abi":[{"inputs":[{"internalType":"contract IERC20","name":"wethToken_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"masterContract","type":"address"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"},{"indexed":true,"internalType":"address","name":"cloneAddress","type":"address"}],"name":"LogDeploy","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"share","type":"uint256"}],"name":"LogDeposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"borrower","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"feeAmount","type":"uint256"},{"indexed":true,"internalType":"address","name":"receiver","type":"address"}],"name":"LogFlashLoan","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"protocol","type":"address"}],"name":"LogRegisterProtocol","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"masterContract","type":"address"},{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"LogSetMasterContractApproval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"LogStrategyDivest","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"LogStrategyInvest","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"LogStrategyLoss","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"LogStrategyProfit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":true,"internalType":"contract IStrategy","name":"strategy","type":"address"}],"name":"LogStrategyQueued","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":true,"internalType":"contract IStrategy","name":"strategy","type":"address"}],"name":"LogStrategySet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"targetPercentage","type":"uint256"}],"name":"LogStrategyTargetPercentage","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"share","type":"uint256"}],"name":"LogTransfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"masterContract","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"LogWhiteListMasterContract","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"share","type":"uint256"}],"name":"LogWithdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"calls","type":"bytes[]"},{"internalType":"bool","name":"revertOnFail","type":"bool"}],"name":"batch","outputs":[{"internalType":"bool[]","name":"successes","type":"bool[]"},{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"contract IBatchFlashBorrower","name":"borrower","type":"address"},{"internalType":"address[]","name":"receivers","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"batchFlashLoan","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"claimOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"masterContract","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bool","name":"useCreate2","type":"bool"}],"name":"deploy","outputs":[{"internalType":"address","name":"cloneAddress","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token_","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"share","type":"uint256"}],"name":"deposit","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"shareOut","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"contract IFlashBorrower","name":"borrower","type":"address"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"flashLoan","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"bool","name":"balance","type":"bool"},{"internalType":"uint256","name":"maxChangeAmount","type":"uint256"}],"name":"harvest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"masterContractApproved","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"masterContractOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pendingOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"name":"pendingStrategy","outputs":[{"internalType":"contract IStrategy","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permitToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"registerProtocol","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"address","name":"masterContract","type":"address"},{"internalType":"bool","name":"approved","type":"bool"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"setMasterContractApproval","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"contract IStrategy","name":"newStrategy","type":"address"}],"name":"setStrategy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint64","name":"targetPercentage_","type":"uint64"}],"name":"setStrategyTargetPercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint128","name":"elastic","type":"uint128"},{"internalType":"uint128","name":"base","type":"uint128"}],"name":"setTokenTotal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"name":"strategy","outputs":[{"internalType":"contract IStrategy","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"name":"strategyData","outputs":[{"internalType":"uint64","name":"strategyStartDate","type":"uint64"},{"internalType":"uint64","name":"targetPercentage","type":"uint64"},{"internalType":"uint128","name":"balance","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"share","type":"uint256"},{"internalType":"bool","name":"roundUp","type":"bool"}],"name":"toAmount","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"roundUp","type":"bool"}],"name":"toShare","outputs":[{"internalType":"uint256","name":"share","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"name":"totals","outputs":[{"internalType":"uint128","name":"elastic","type":"uint128"},{"internalType":"uint128","name":"base","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"share","type":"uint256"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address[]","name":"tos","type":"address[]"},{"internalType":"uint256[]","name":"shares","type":"uint256[]"}],"name":"transferMultiple","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"},{"internalType":"bool","name":"direct","type":"bool"},{"internalType":"bool","name":"renounce","type":"bool"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"masterContract","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"whitelistMasterContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"whitelistedMasterContracts","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token_","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"share","type":"uint256"}],"name":"withdraw","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"shareOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"author":"BoringCrypto, Keno","kind":"dev","methods":{"batch(bytes[],bool)":{"params":{"calls":"An array of inputs for each call.","revertOnFail":"If True then reverts after a failed call and stops doing further calls."},"returns":{"results":"An array with the returned data of each function call, mapped one-to-one to `calls`.","successes":"An array indicating the success of a call, mapped one-to-one to `calls`."}},"batchFlashLoan(address,address[],address[],uint256[],bytes)":{"params":{"amounts":"of the tokens for each receiver.","borrower":"The address of the contract that implements and conforms to `IBatchFlashBorrower` and handles the flashloan.","data":"The calldata to pass to the `borrower` contract.","receivers":"An array of the token receivers. A one-to-one mapping with `tokens` and `amounts`.","tokens":"The addresses of the tokens."}},"deploy(address,bytes,bool)":{"params":{"data":"Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.","masterContract":"The address of the contract to clone.","useCreate2":"Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt."},"returns":{"cloneAddress":"Address of the created clone contract."}},"deposit(address,address,address,uint256,uint256)":{"params":{"amount":"Token amount in native representation to deposit.","from":"which account to pull the tokens.","share":"Token amount represented in shares to deposit. Takes precedence over `amount`.","to":"which account to push the tokens.","token_":"The ERC-20 token to deposit."},"returns":{"amountOut":"The amount deposited.","shareOut":"The deposited amount represented in shares."}},"flashLoan(address,address,address,uint256,bytes)":{"params":{"amount":"of the tokens to receive.","borrower":"The address of the contract that implements and conforms to `IFlashBorrower` and handles the flashloan.","data":"The calldata to pass to the `borrower` contract.","receiver":"Address of the token receiver.","token":"The address of the token to receive."}},"harvest(address,bool,uint256)":{"params":{"balance":"True if housekeeping should be done.","maxChangeAmount":"The maximum amount for either pulling or pushing from/to the `IStrategy` contract.","token":"The address of the token for which a strategy is deployed."}},"setMasterContractApproval(address,address,bool,uint8,bytes32,bytes32)":{"params":{"approved":"If True approves access. If False revokes access.","masterContract":"The address who gains or loses access.","r":"Part of the signature. (See EIP-191)","s":"Part of the signature. (See EIP-191)","user":"The address of the user that approves or revokes access.","v":"Part of the signature. (See EIP-191)"}},"setStrategy(address,address)":{"details":"Only the owner of this contract is allowed to change this.","params":{"newStrategy":"The address of the contract that conforms to `IStrategy`.","token":"The address of the token that maps to a strategy to change."}},"setStrategyTargetPercentage(address,uint64)":{"details":"Only the owner of this contract is allowed to change this.","params":{"targetPercentage_":"The new target in percent. Must be lesser or equal to `MAX_TARGET_PERCENTAGE`.","token":"The address of the token that maps to a strategy to change."}},"toAmount(address,uint256,bool)":{"details":"Helper function represent shares back into the `token` amount.","params":{"roundUp":"If the result should be rounded up.","share":"The amount of shares.","token":"The ERC-20 token."},"returns":{"amount":"The share amount back into native representation."}},"toShare(address,uint256,bool)":{"details":"Helper function to represent an `amount` of `token` in shares.","params":{"amount":"The `token` amount.","roundUp":"If the result `share` should be rounded up.","token":"The ERC-20 token."},"returns":{"share":"The token amount represented in shares."}},"transfer(address,address,address,uint256)":{"params":{"from":"which user to pull the tokens.","share":"The amount of `token` in shares.","to":"which user to push the tokens.","token":"The ERC-20 token to transfer."}},"transferMultiple(address,address,address[],uint256[])":{"params":{"from":"which user to pull the tokens.","shares":"The amount of `token` in shares for each receiver in `tos`.","token":"The ERC-20 token to transfer.","tos":"The receivers of the tokens."}},"transferOwnership(address,bool,bool)":{"params":{"direct":"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.","newOwner":"Address of the new owner.","renounce":"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."}},"withdraw(address,address,address,uint256,uint256)":{"params":{"amount":"of tokens. Either one of `amount` or `share` needs to be supplied.","from":"which user to pull the tokens.","share":"Like above, but `share` takes precedence over `amount`.","to":"which user to push the tokens.","token_":"The ERC-20 token to withdraw."}}},"title":"BentoBox","version":1},"evm":{"bytecode":{"linkReferences":{},"object":"60e06040523480156200001157600080fd5b5060405162005c0938038062005c09833981016040819052620000349162000116565b600080546001600160a01b0319163390811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a34660a081905262000084816200009e565b6080525060601b6001600160601b03191660c0526200016a565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8667fd7df266aff736d415a9dc14b4158201d612e70d75b9c7f4e375ccfd20aa5166f8330604051602001620000f9949392919062000146565b604051602081830303815290604052805190602001209050919050565b60006020828403121562000128578081fd5b81516001600160a01b03811681146200013f578182fd5b9392505050565b938452602084019290925260408301526001600160a01b0316606082015260800190565b60805160a05160c05160601c615a60620001a96000398061078c5280610b62528061293b5280612c015250806114af5250806114e45250615a606000f3fe6080604052600436106101e75760003560e01c80637ecebe0011610102578063d2423b5111610095578063f1676d3711610064578063f1676d3714610580578063f18d03cc146105a0578063f483b3da146105c0578063f7888aec146105e0576101ee565b8063d2423b51146104fb578063da5139ca1461051c578063df23b45b1461053c578063e30c39781461056b576101ee565b806398d1c8f4116100d157806398d1c8f414610486578063aee4d1b2146104a6578063bafe4f14146104bb578063c0a47c93146104db576101ee565b80637ecebe00146104115780638da5cb5b1461043157806391e0eab51461044657806397da6d3014610466576101ee565b80634e71e0c81161017a57806366c6bb0b1161014957806366c6bb0b1461039157806372cb5d97146103b1578063733a9d7c146103d15780637c516e94146103f1576101ee565b80634e71e0c81461030e5780634ffe34db146103235780635108a558146103515780635662311814610371576101ee565b80631f54245b116101b65780631f54245b1461028c578063228bfd9f146102ac5780633644e515146102cc5780633e2a9d4e146102ee576101ee565b806302b9446c146101f3578063078dfbe71461021d5780630fca88431461023f57806312a90c8a1461025f576101ee565b366101ee57005b600080fd5b610206610201366004614a14565b610600565b60405161021492919061590b565b60405180910390f35b34801561022957600080fd5b5061023d6102383660046147c8565b610cb7565b005b34801561024b57600080fd5b5061023d61025a366004614aef565b610e42565b34801561026b57600080fd5b5061027f61027a3660046146db565b611204565b6040516102149190615197565b61029f61029a366004614812565b611219565b6040516102149190614ef8565b3480156102b857600080fd5b5061029f6102c73660046146db565b611482565b3480156102d857600080fd5b506102e16114aa565b60405161021491906151a2565b3480156102fa57600080fd5b5061023d610309366004614c3d565b61150a565b34801561031a57600080fd5b5061023d61163e565b34801561032f57600080fd5b5061034361033e3660046146db565b611724565b6040516102149291906158e8565b34801561035d57600080fd5b5061029f61036c3660046146db565b611760565b34801561037d57600080fd5b506102e161038c366004614c07565b611788565b34801561039d57600080fd5b5061023d6103ac366004614b81565b6117ff565b3480156103bd57600080fd5b5061023d6103cc3660046149b2565b611fb4565b3480156103dd57600080fd5b5061023d6103ec36600461479b565b6125b3565b3480156103fd57600080fd5b5061023d61040c366004614a6e565b6126d0565b34801561041d57600080fd5b506102e161042c3660046146db565b61276a565b34801561043d57600080fd5b5061029f61277c565b34801561045257600080fd5b5061027f6104613660046146f7565b612798565b34801561047257600080fd5b50610206610481366004614a14565b6127b8565b34801561049257600080fd5b5061023d6104a1366004614bc1565b612da8565b3480156104b257600080fd5b5061023d612e48565b3480156104c757600080fd5b5061029f6104d63660046146db565b612ea7565b3480156104e757600080fd5b5061023d6104f636600461472f565b612ecf565b61050e610509366004614878565b613328565b6040516102149291906150fd565b34801561052857600080fd5b506102e1610537366004614c07565b6134d4565b34801561054857600080fd5b5061055c6105573660046146db565b613543565b6040516102149392919061592e565b34801561057757600080fd5b5061029f613598565b34801561058c57600080fd5b5061023d61059b366004614c76565b6135b4565b3480156105ac57600080fd5b5061023d6105bb3660046149c4565b61378f565b3480156105cc57600080fd5b5061023d6105db3660046148de565b6139e9565b3480156105ec57600080fd5b506102e16105fb3660046149b2565b613d34565b6000808573ffffffffffffffffffffffffffffffffffffffff81163314801590610640575073ffffffffffffffffffffffffffffffffffffffff81163014155b15610719573360009081526002602052604090205473ffffffffffffffffffffffffffffffffffffffff16806106ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a2906156df565b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff80821660009081526003602090815260408083209386168352929052205460ff16610717576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a290615562565b505b73ffffffffffffffffffffffffffffffffffffffff8616610766576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a2906154bf565b600073ffffffffffffffffffffffffffffffffffffffff89161561078a57886107ac565b7f00000000000000000000000000000000000000000000000000000000000000005b90506107b66145df565b5073ffffffffffffffffffffffffffffffffffffffff81166000908152600760209081526040918290208251808401909352546fffffffffffffffffffffffffffffffff80821680855270010000000000000000000000000000000090920416918301919091521515806108a7575060008273ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561086d57600080fd5b505afa158015610881573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a59190614ce7565b115b6108dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a2906153e3565b85610947576108ee81886000613d51565b95506103e861091c6108ff88613e0f565b60208401516fffffffffffffffffffffffffffffffff1690613e5f565b6fffffffffffffffffffffffffffffffff16101561094257600080945094505050610cac565b610956565b61095381876001613eb7565b96505b73ffffffffffffffffffffffffffffffffffffffff89163014158061098f575073ffffffffffffffffffffffffffffffffffffffff8a16155b806109c0575080516109bc906fffffffffffffffffffffffffffffffff166109b684613f5a565b9061403e565b8711155b6109f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a290615299565b73ffffffffffffffffffffffffffffffffffffffff8083166000908152600660209081526040808320938c1683529290522054610a33908761407b565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600660209081526040808320938d1683529290522055610a8f610a7287613e0f565b60208301516fffffffffffffffffffffffffffffffff1690613e5f565b6fffffffffffffffffffffffffffffffff166020820152610acc610ab288613e0f565b82516fffffffffffffffffffffffffffffffff1690613e5f565b6fffffffffffffffffffffffffffffffff908116825273ffffffffffffffffffffffffffffffffffffffff808416600090815260076020908152604090912084518154928601518516700100000000000000000000000000000000029085167fffffffffffffffffffffffffffffffff0000000000000000000000000000000090931692909217909316179091558a16610be6577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0886040518263ffffffff1660e01b81526004016000604051808303818588803b158015610bc857600080fd5b505af1158015610bdc573d6000803e3d6000fd5b5050505050610c25565b73ffffffffffffffffffffffffffffffffffffffff89163014610c2557610c2573ffffffffffffffffffffffffffffffffffffffff83168a308a6140b8565b8773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fb2346165e782564f17f5b7e555c21f4fd96fbc93458572bf0113ea35a958fc558a8a604051610c9b92919061590b565b60405180910390a486945085935050505b509550959350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610d08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a29061552d565b8115610dfc5773ffffffffffffffffffffffffffffffffffffffff8316151580610d2f5750805b610d65576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a2906153ac565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff85167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155600180549091169055610e3d565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790555b505050565b8473ffffffffffffffffffffffffffffffffffffffff81163314801590610e7f575073ffffffffffffffffffffffffffffffffffffffff81163014155b15610f4f573360009081526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1680610ee1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a2906156df565b73ffffffffffffffffffffffffffffffffffffffff80821660009081526003602090815260408083209386168352929052205460ff16610f4d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a290615562565b505b600085858281610f5b57fe5b9050602002016020810190610f7091906146db565b73ffffffffffffffffffffffffffffffffffffffff161415610fbe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a290615488565b600084815b81811015611182576000888883818110610fd957fe5b9050602002016020810190610fee91906146db565b9050611091878784818110610fff57fe5b90506020020135600660008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461407b90919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff808d166000908152600660209081526040808320938616835292905220556110e98787848181106110d357fe5b905060200201358561407b90919063ffffffff16565b93508073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167f6eabe333476233fd382224f233210cb808a7bc4c4de64f9d76628bf63c677b1a8a8a8781811061115d57fe5b9050602002013560405161117191906151a2565b60405180910390a450600101610fc3565b5073ffffffffffffffffffffffffffffffffffffffff808a166000908152600660209081526040808320938c16835292905220546111c0908361403e565b73ffffffffffffffffffffffffffffffffffffffff998a1660009081526006602090815260408083209b909c16825299909952989097209790975550505050505050565b60046020526000908152604090205460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff8516611268576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a290615673565b606085901b82156112f15760008585604051611285929190614ea2565b604051809103902090506040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152816037826000f59350505061134d565b6040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528160148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f09250505b73ffffffffffffffffffffffffffffffffffffffff8281166000818152600260205260409081902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016938a169390931790925590517f4ddf47d4000000000000000000000000000000000000000000000000000000008152634ddf47d49034906113e0908990899060040161523b565b6000604051808303818588803b1580156113f957600080fd5b505af115801561140d573d6000803e3d6000fd5b50505050508173ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fd62166f3c2149208e51788b1401cc356bf5da1fc6c7886a32e18570f57d88b3b878760405161147192919061523b565b60405180910390a350949350505050565b60086020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6000467f000000000000000000000000000000000000000000000000000000000000000081146114e2576114dd81614223565b611504565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b60005473ffffffffffffffffffffffffffffffffffffffff16331461155b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a29061552d565b605f8167ffffffffffffffff1611156115a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a29061585e565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600a60205260409081902080547fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff166801000000000000000067ffffffffffffffff861602179055517f7543af99b5602c06e62da0631b5308489a5ff859150105a623b6eb15e8deae0b90611632908490615919565b60405180910390a25050565b60015473ffffffffffffffffffffffffffffffffffffffff16338114611690576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a290615599565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff9092167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179055600180549091169055565b6007602052600090815260409020546fffffffffffffffffffffffffffffffff8082169170010000000000000000000000000000000090041682565b60096020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff831660009081526007602090815260408083208151808301909252546fffffffffffffffffffffffffffffffff808216835270010000000000000000000000000000000090910416918101919091526117f7908484613eb7565b949350505050565b6118076145f6565b5073ffffffffffffffffffffffffffffffffffffffff8381166000818152600a602090815260408083208151606081018352905467ffffffffffffffff8082168352680100000000000000008204168285015270010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16818301908152948452600890925280832054935190517f18fccc760000000000000000000000000000000000000000000000000000000081529194939093169283916318fccc76916118d69133906004016158b0565b602060405180830381600087803b1580156118f057600080fd5b505af1158015611904573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119289190614ce7565b905080158015611936575084155b1561194357505050610e3d565b73ffffffffffffffffffffffffffffffffffffffff86166000908152600760205260408120546fffffffffffffffffffffffffffffffff1690821315611a3d578161198e828261407b565b915061199982613e0f565b73ffffffffffffffffffffffffffffffffffffffff89166000818152600760205260409081902080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff949094169390931790925590517f911c9f20a03edabcbcbd18dca1174cce47a91b234ced7a5a3c60ba0d5b56c5d290611a2f9084906151a2565b60405180910390a250611b58565b6000821215611b58576000829003611a55828261403e565b9150611a6082613e0f565b73ffffffffffffffffffffffffffffffffffffffff8916600090815260076020526040902080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92909216919091179055611aed611ad082613e0f565b60408701516fffffffffffffffffffffffffffffffff169061429a565b6fffffffffffffffffffffffffffffffff166040808701919091525173ffffffffffffffffffffffffffffffffffffffff8916907f8f1f26eb9b6aa8689dbdd519ead1999d9c8819d4738e403b2003b18197d9cf9790611b4e9084906151a2565b60405180910390a2505b8515611edc5760006064611b83866020015167ffffffffffffffff16846142ec90919063ffffffff16565b81611b8a57fe5b0490508085604001516fffffffffffffffffffffffffffffffff161015611d29576000611bd686604001516fffffffffffffffffffffffffffffffff168361403e90919063ffffffff16565b90508615801590611be657508681115b15611bee5750855b611c0f73ffffffffffffffffffffffffffffffffffffffff8a16868361433d565b611c38611c1b82613e0f565b60408801516fffffffffffffffffffffffffffffffff1690613e5f565b6fffffffffffffffffffffffffffffffff16604080880191909152517f6939aaf500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861690636939aaf590611ca39084906004016151a2565b600060405180830381600087803b158015611cbd57600080fd5b505af1158015611cd1573d6000803e3d6000fd5b505050508873ffffffffffffffffffffffffffffffffffffffff167fb18e7e4f6eac147a63a3bb6beb2d9039c88698623aff3efc4febbc20b0164ee582604051611d1b91906151a2565b60405180910390a250611eda565b8085604001516fffffffffffffffffffffffffffffffff161115611eda576000611d72611d5583613e0f565b60408801516fffffffffffffffffffffffffffffffff169061429a565b6fffffffffffffffffffffffffffffffff1690508615801590611d9457508681115b15611d9c5750855b6040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff871690632e1a7d4d90611df19085906004016151a2565b602060405180830381600087803b158015611e0b57600080fd5b505af1158015611e1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e439190614ce7565b9050611e6e611e5182613e0f565b60408901516fffffffffffffffffffffffffffffffff169061429a565b6fffffffffffffffffffffffffffffffff166040808901919091525173ffffffffffffffffffffffffffffffffffffffff8b16907f39aa22060f8dd4d291720311feedf3b72fef47c06c66ccf5c22b502c62e7550a90611ecf9084906151a2565b60405180910390a250505b505b50505073ffffffffffffffffffffffffffffffffffffffff84166000908152600a6020908152604091829020835181549285015193909401516fffffffffffffffffffffffffffffffff9081167001000000000000000000000000000000000267ffffffffffffffff94851668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff959096167fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090941693909317939093169390931791909116179055505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314612005576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a29061552d565b61200d6145f6565b5073ffffffffffffffffffffffffffffffffffffffff8281166000818152600a602090815260408083208151606081018352905467ffffffffffffffff80821683526801000000000000000082048116838601527001000000000000000000000000000000009091046fffffffffffffffffffffffffffffffff16828401529484526009909252909120548151919316911615806120d757508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b1561218f5773ffffffffffffffffffffffffffffffffffffffff848116600090815260096020526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016918516919091179055612138426144a5565b67ffffffffffffffff16825260405173ffffffffffffffffffffffffffffffffffffffff80851691908616907f6f7ccdf3f86039e5a1dcf6028bf7b4773cbf7a234716ba2e5392b12bb0f8558f90600090a36124df565b815167ffffffffffffffff16158015906121b45750815167ffffffffffffffff164210155b6121ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a2906154f6565b73ffffffffffffffffffffffffffffffffffffffff84811660009081526008602052604090205416156124435773ffffffffffffffffffffffffffffffffffffffff808516600090815260086020526040808220548582015191517f7f8661a100000000000000000000000000000000000000000000000000000000815292931691637f8661a19161227e91600401615893565b602060405180830381600087803b15801561229857600080fd5b505af11580156122ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d09190614ce7565b905060008113156123615773ffffffffffffffffffffffffffffffffffffffff85166000908152600760205260409020819061230c90826144e9565b508573ffffffffffffffffffffffffffffffffffffffff167f911c9f20a03edabcbcbd18dca1174cce47a91b234ced7a5a3c60ba0d5b56c5d28260405161235391906151a2565b60405180910390a2506123ef565b60008112156123ef5773ffffffffffffffffffffffffffffffffffffffff85166000908152600760205260408120908290039061239e9082614557565b508573ffffffffffffffffffffffffffffffffffffffff167f8f1f26eb9b6aa8689dbdd519ead1999d9c8819d4738e403b2003b18197d9cf97826040516123e591906151a2565b60405180910390a2505b8473ffffffffffffffffffffffffffffffffffffffff167f39aa22060f8dd4d291720311feedf3b72fef47c06c66ccf5c22b502c62e7550a84604001516040516124399190615893565b60405180910390a2505b73ffffffffffffffffffffffffffffffffffffffff808516600081815260086020908152604080832080548688167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091558388528782018490528484526009909252808320805490921690915551928616927f03e6352a885adc4cc54767592939c3b1bbd65685658c3beaaba66a888120e2179190a35b5073ffffffffffffffffffffffffffffffffffffffff929092166000908152600a6020908152604091829020845181549286015193909501517fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090921667ffffffffffffffff958616177fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff16680100000000000000009590931694909402919091176fffffffffffffffffffffffffffffffff90811670010000000000000000000000000000000091909216021790915550565b60005473ffffffffffffffffffffffffffffffffffffffff163314612604576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a29061552d565b73ffffffffffffffffffffffffffffffffffffffff8216612651576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a2906152d0565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600460205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016841515179055517f31a1e0eac44b54ac6c2a2efa87e92c83405ffcf33fceef02a7bca695130e260090611632908490615197565b6040517fd505accf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89169063d505accf9061272e908a908a908a908a908a908a908a90600401615089565b600060405180830381600087803b15801561274857600080fd5b505af115801561275c573d6000803e3d6000fd5b505050505050505050505050565b60056020526000908152604090205481565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600360209081526000928352604080842090915290825290205460ff1681565b6000808573ffffffffffffffffffffffffffffffffffffffff811633148015906127f8575073ffffffffffffffffffffffffffffffffffffffff81163014155b156128c8573360009081526002602052604090205473ffffffffffffffffffffffffffffffffffffffff168061285a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a2906156df565b73ffffffffffffffffffffffffffffffffffffffff80821660009081526003602090815260408083209386168352929052205460ff166128c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a290615562565b505b73ffffffffffffffffffffffffffffffffffffffff8616612915576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a2906154bf565b600073ffffffffffffffffffffffffffffffffffffffff891615612939578861295b565b7f00000000000000000000000000000000000000000000000000000000000000005b90506129656145df565b5073ffffffffffffffffffffffffffffffffffffffff81166000908152600760209081526040918290208251808401909352546fffffffffffffffffffffffffffffffff80821684527001000000000000000000000000000000009091041690820152856129e0576129d981886001613d51565b95506129ef565b6129ec81876000613eb7565b96505b73ffffffffffffffffffffffffffffffffffffffff8083166000908152600660209081526040808320938d1683529290522054612a2c908761403e565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600660209081526040808320938e1683529290522055612a85612a6b88613e0f565b82516fffffffffffffffffffffffffffffffff169061429a565b6fffffffffffffffffffffffffffffffff168152612ac2612aa587613e0f565b60208301516fffffffffffffffffffffffffffffffff169061429a565b6fffffffffffffffffffffffffffffffff16602082018190526103e8111580612aff575060208101516fffffffffffffffffffffffffffffffff16155b612b35576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a290615375565b73ffffffffffffffffffffffffffffffffffffffff828116600090815260076020908152604090912083518154928501517fffffffffffffffffffffffffffffffff000000000000000000000000000000009093166fffffffffffffffffffffffffffffffff91821617811670010000000000000000000000000000000091909316029190911790558a16612d11576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90612c36908a906004016151a2565b600060405180830381600087803b158015612c5057600080fd5b505af1158015612c64573d6000803e3d6000fd5b5050505060008873ffffffffffffffffffffffffffffffffffffffff1688604051612c8e90614ef5565b60006040518083038185875af1925050503d8060008114612ccb576040519150601f19603f3d011682016040523d82523d6000602084013e612cd0565b606091505b5050905080612d0b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a2906157f0565b50612d32565b612d3273ffffffffffffffffffffffffffffffffffffffff8316898961433d565b8773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fad9ab9ee6953d4d177f4a03b3a3ac3178ffcb9816319f348060194aa76b144868a8a604051610c9b92919061590b565b612db06145df565b6fffffffffffffffffffffffffffffffff9283168152908216602080830191825273ffffffffffffffffffffffffffffffffffffffff949094166000908152600790945260409093209051815493517fffffffffffffffffffffffffffffffff000000000000000000000000000000009094169083161782167001000000000000000000000000000000009390921692909202179055565b3360008181526002602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001684179055517fdfb44ffabf0d3a8f650d3ce43eff98f6d050e7ea1a396d5794f014e7dadabacb9190a2565b60026020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff8516612f1c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a2906156a8565b81158015612f28575080155b8015612f35575060ff8316155b1561304c5773ffffffffffffffffffffffffffffffffffffffff86163314612f89576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a290615307565b73ffffffffffffffffffffffffffffffffffffffff8681166000908152600260205260409020541615612fe8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a290615605565b73ffffffffffffffffffffffffffffffffffffffff851660009081526004602052604090205460ff16613047576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a2906157b9565b613289565b73ffffffffffffffffffffffffffffffffffffffff8616613099576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a29061574b565b60006040518060400160405280600281526020017f19010000000000000000000000000000000000000000000000000000000000008152506130d96114aa565b7f1962bc9f5484cb7a998701b81090e966ee1fce5771af884cceee7c081b14ade287613125577fb426802f1f7dc850a7b6b38805edea2442f3992878a9ab985abfe8091d95d0b1613147565b7f422ac5323fe049241dee67716229a1cc1bc7b313b23dfe3ef6d42ab177a3b2845b73ffffffffffffffffffffffffffffffffffffffff8b16600090815260056020908152604091829020805460018101909155915161318e9493928e928e928e9291016151ab565b604051602081830303815290604052805190602001206040516020016131b693929190614ece565b6040516020818303038152906040528051906020012090506000600182868686604051600081526020016040526040516131f3949392919061521d565b6020604051602081039080840390855afa158015613215573d6000803e3d6000fd5b5050506020604051035190508773ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614613286576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a29061563c565b50505b73ffffffffffffffffffffffffffffffffffffffff8581166000818152600360209081526040808320948b16808452949091529081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016881515179055517f5f6ebb64ba012a851c6f014e6cad458ddf213d1512049b31cd06365c2b05925790613318908890615197565b60405180910390a3505050505050565b6060808367ffffffffffffffff8111801561334257600080fd5b5060405190808252806020026020018201604052801561336c578160200160208202803683370190505b5091508367ffffffffffffffff8111801561338657600080fd5b506040519080825280602002602001820160405280156133ba57816020015b60608152602001906001900390816133a55790505b50905060005b848110156134cb5760006060308888858181106133d957fe5b90506020028101906133eb9190615964565b6040516133f9929190614ea2565b600060405180830381855af49150503d8060008114613434576040519150601f19603f3d011682016040523d82523d6000602084013e613439565b606091505b50915091508180613448575085155b6134518261457f565b90613489576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a2919061524f565b508185848151811061349757fe5b602002602001019015159081151581525050808484815181106134b657fe5b602090810291909101015250506001016133c0565b50935093915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526007602090815260408083208151808301909252546fffffffffffffffffffffffffffffffff808216835270010000000000000000000000000000000090910416918101919091526117f7908484613d51565b600a6020526000908152604090205467ffffffffffffffff808216916801000000000000000081049091169070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1683565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b6000620186a06135c58560326142ec565b816135cc57fe5b0490506135f073ffffffffffffffffffffffffffffffffffffffff8616878661433d565b6040517f23e30c8b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8816906323e30c8b9061364c9033908990899087908a908a90600401615006565b600060405180830381600087803b15801561366657600080fd5b505af115801561367a573d6000803e3d6000fd5b505050506136c761368a82613e0f565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600760205260409020906fffffffffffffffffffffffffffffffff166144e9565b6136d086613f5a565b1015613708576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a290615782565b8573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f3be9b85936d5d30a1655ea116a17ee3d827b2cd428cc026ce5bf2ac46a223204878560405161377e92919061590b565b60405180910390a450505050505050565b8273ffffffffffffffffffffffffffffffffffffffff811633148015906137cc575073ffffffffffffffffffffffffffffffffffffffff81163014155b1561389c573360009081526002602052604090205473ffffffffffffffffffffffffffffffffffffffff168061382e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a2906156df565b73ffffffffffffffffffffffffffffffffffffffff80821660009081526003602090815260408083209386168352929052205460ff1661389a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a290615562565b505b73ffffffffffffffffffffffffffffffffffffffff83166138e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a2906154bf565b73ffffffffffffffffffffffffffffffffffffffff808616600090815260066020908152604080832093881683529290522054613926908361403e565b73ffffffffffffffffffffffffffffffffffffffff86811660009081526006602090815260408083208985168452909152808220939093559085168152205461396f908361407b565b73ffffffffffffffffffffffffffffffffffffffff80871660008181526006602090815260408083208986168085529252918290209490945551918716917f6eabe333476233fd382224f233210cb808a7bc4c4de64f9d76628bf63c677b1a906139da9087906151a2565b60405180910390a45050505050565b60608567ffffffffffffffff81118015613a0257600080fd5b50604051908082528060200260200182016040528015613a2c578160200160208202803683370190505b5090508560005b81811015613b08576000878783818110613a4957fe5b905060200201359050620186a0613a6a6032836142ec90919063ffffffff16565b81613a7157fe5b04848381518110613a7e57fe5b602002602001018181525050613aff8c8c84818110613a9957fe5b9050602002016020810190613aae91906146db565b898985818110613aba57fe5b905060200201358c8c86818110613acd57fe5b9050602002016020810190613ae291906146db565b73ffffffffffffffffffffffffffffffffffffffff16919061433d565b50600101613a33565b506040517fd9d1762300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c169063d9d1762390613b699033908c908c908c908c908a908d908d90600401614f19565b600060405180830381600087803b158015613b8357600080fd5b505af1158015613b97573d6000803e3d6000fd5b5050505060005b8181101561275c576000898983818110613bb457fe5b9050602002016020810190613bc991906146db565b9050613c27613bea858481518110613bdd57fe5b6020026020010151613e0f565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600760205260409020906fffffffffffffffffffffffffffffffff166144e9565b613c3082613f5a565b1015613c68576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a290615782565b8b8b83818110613c7457fe5b9050602002016020810190613c8991906146db565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff168e73ffffffffffffffffffffffffffffffffffffffff167f3be9b85936d5d30a1655ea116a17ee3d827b2cd428cc026ce5bf2ac46a2232048b8b87818110613cfa57fe5b90506020020135888781518110613d0d57fe5b6020026020010151604051613d2392919061590b565b60405180910390a450600101613b9e565b600660209081526000928352604080842090915290825290205481565b82516000906fffffffffffffffffffffffffffffffff16613d73575081613e08565b835160208501516fffffffffffffffffffffffffffffffff91821691613d9b918691166142ec565b81613da257fe5b049050818015613df857508284602001516fffffffffffffffffffffffffffffffff16613dee86600001516fffffffffffffffffffffffffffffffff16846142ec90919063ffffffff16565b81613df557fe5b04105b15613e08576117f781600161407b565b9392505050565b60006fffffffffffffffffffffffffffffffff821115613e5b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a29061541a565b5090565b8181016fffffffffffffffffffffffffffffffff8083169082161015613eb1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a290615451565b92915050565b600083602001516fffffffffffffffffffffffffffffffff1660001415613edf575081613e08565b602084015184516fffffffffffffffffffffffffffffffff91821691613f07918691166142ec565b81613f0e57fe5b049050818015613df857508284600001516fffffffffffffffffffffffffffffffff16613dee86602001516fffffffffffffffffffffffffffffffff16846142ec90919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff81166000818152600a60205260408082205490517f70a082310000000000000000000000000000000000000000000000000000000081529192613eb1927001000000000000000000000000000000009092046fffffffffffffffffffffffffffffffff16916370a0823190613fe8903090600401614ef8565b60206040518083038186803b15801561400057600080fd5b505afa158015614014573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140389190614ce7565b9061407b565b80820382811115613eb1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a290615262565b81810181811015613eb1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a290615451565b600060608573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b8686866040516024016140f093929190615058565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516141799190614eb2565b6000604051808303816000865af19150503d80600081146141b6576040519150601f19603f3d011682016040523d82523d6000602084013e6141bb565b606091505b50915091508180156141e55750805115806141e55750808060200190518101906141e591906148c2565b61421b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a290615716565b505050505050565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8667fd7df266aff736d415a9dc14b4158201d612e70d75b9c7f4e375ccfd20aa5166f833060405160200161427c94939291906151ec565b6040516020818303038152906040528051906020012090505b919050565b8082036fffffffffffffffffffffffffffffffff8084169082161115613eb1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a290615262565b60008115806143075750508082028282828161430457fe5b04145b613eb1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a290615827565b600060608473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b85856040516024016143739291906150d7565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516143fc9190614eb2565b6000604051808303816000865af19150503d8060008114614439576040519150601f19603f3d011682016040523d82523d6000602084013e61443e565b606091505b509150915081801561446857508051158061446857508080602001905181019061446891906148c2565b61449e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a29061533e565b5050505050565b600067ffffffffffffffff821115613e5b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a2906155ce565b60006145116144f783613e0f565b84546fffffffffffffffffffffffffffffffff1690613e5f565b83547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff919091169081179093555090919050565b600061451161456583613e0f565b84546fffffffffffffffffffffffffffffffff169061429a565b60606044825110156145c5575060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c790000006020820152614295565b60048201915081806020019051810190613eb19190614cff565b604080518082019091526000808252602082015290565b604080516060810182526000808252602082018190529181019190915290565b60008083601f840112614627578182fd5b50813567ffffffffffffffff81111561463e578182fd5b602083019150836020808302850101111561465857600080fd5b9250929050565b60008083601f840112614670578182fd5b50813567ffffffffffffffff811115614687578182fd5b60208301915083602082850101111561465857600080fd5b8035613eb1816159f7565b80356fffffffffffffffffffffffffffffffff81168114613eb157600080fd5b803560ff81168114613eb157600080fd5b6000602082840312156146ec578081fd5b8135613e08816159f7565b60008060408385031215614709578081fd5b8235614714816159f7565b91506020830135614724816159f7565b809150509250929050565b60008060008060008060c08789031215614747578182fd5b8635614752816159f7565b95506020870135614762816159f7565b9450604087013561477281615a1c565b935061478188606089016146ca565b92506080870135915060a087013590509295509295509295565b600080604083850312156147ad578182fd5b82356147b8816159f7565b9150602083013561472481615a1c565b6000806000606084860312156147dc578283fd5b83356147e7816159f7565b925060208401356147f781615a1c565b9150604084013561480781615a1c565b809150509250925092565b60008060008060608587031215614827578384fd5b8435614832816159f7565b9350602085013567ffffffffffffffff81111561484d578384fd5b6148598782880161465f565b909450925050604085013561486d81615a1c565b939692955090935050565b60008060006040848603121561488c578081fd5b833567ffffffffffffffff8111156148a2578182fd5b6148ae86828701614616565b909450925050602084013561480781615a1c565b6000602082840312156148d3578081fd5b8151613e0881615a1c565b600080600080600080600080600060a08a8c0312156148fb578687fd5b8935614906816159f7565b985060208a013567ffffffffffffffff80821115614922578889fd5b61492e8d838e01614616565b909a50985060408c0135915080821115614946578485fd5b6149528d838e01614616565b909850965060608c013591508082111561496a578485fd5b6149768d838e01614616565b909650945060808c013591508082111561498e578384fd5b5061499b8c828d0161465f565b915080935050809150509295985092959850929598565b60008060408385031215614709578182fd5b600080600080608085870312156149d9578182fd5b84356149e4816159f7565b935060208501356149f4816159f7565b92506040850135614a04816159f7565b9396929550929360600135925050565b600080600080600060a08688031215614a2b578283fd5b8535614a36816159f7565b94506020860135614a46816159f7565b93506040860135614a56816159f7565b94979396509394606081013594506080013592915050565b600080600080600080600080610100898b031215614a8a578182fd5b8835614a95816159f7565b97506020890135614aa5816159f7565b96506040890135614ab5816159f7565b95506060890135945060808901359350614ad28a60a08b016146ca565b925060c0890135915060e089013590509295985092959890939650565b60008060008060008060808789031215614b07578384fd5b8635614b12816159f7565b95506020870135614b22816159f7565b9450604087013567ffffffffffffffff80821115614b3e578586fd5b614b4a8a838b01614616565b90965094506060890135915080821115614b62578384fd5b50614b6f89828a01614616565b979a9699509497509295939492505050565b600080600060608486031215614b95578081fd5b8335614ba0816159f7565b92506020840135614bb081615a1c565b929592945050506040919091013590565b600080600060608486031215614bd5578081fd5b8335614be0816159f7565b9250614bef85602086016146aa565b9150614bfe85604086016146aa565b90509250925092565b600080600060608486031215614c1b578081fd5b8335614c26816159f7565b925060208401359150604084013561480781615a1c565b60008060408385031215614c4f578182fd5b8235614c5a816159f7565b9150602083013567ffffffffffffffff81168114614724578182fd5b60008060008060008060a08789031215614c8e578384fd5b8635614c99816159f7565b95506020870135614ca9816159f7565b94506040870135614cb9816159f7565b935060608701359250608087013567ffffffffffffffff811115614cdb578283fd5b614b6f89828a0161465f565b600060208284031215614cf8578081fd5b5051919050565b600060208284031215614d10578081fd5b815167ffffffffffffffff80821115614d27578283fd5b818401915084601f830112614d3a578283fd5b815181811115614d48578384fd5b60405160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401168201018181108482111715614d86578586fd5b604052818152838201602001871015614d9d578485fd5b614dae8260208301602087016159c7565b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff16815260200190565b6000815180845260208085019450808401835b83811015614e0557815187529582019590820190600101614de9565b509495945050505050565b600082845282826020860137806020848601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011685010190509392505050565b60008151808452614e708160208601602086016159c7565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000828483379101908152919050565b60008251614ec48184602087016159c7565b9190910192915050565b60008451614ee08184602089016159c7565b91909101928352506020820152604001919050565b90565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600060a0820173ffffffffffffffffffffffffffffffffffffffff8b168352602060a08185015281614f4b8b846151a2565b90508b9250835b8b811015614f7d57828401614f7083614f6b838861469f565b614db8565b9094509150600101614f52565b5084810360408601528881527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff891115614fb5578384fd5b8189029250828a8383013782810192505080820183815281858403016060860152614fe08189614dd6565b925050508281036080840152614ff7818587614e10565b9b9a5050505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff808916835280881660208401525085604083015284606083015260a0608083015261504c60a083018486614e10565b98975050505050505050565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff97881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b604080825283519082018190526000906020906060840190828701845b8281101561513857815115158452928401929084019060010161511a565b5050508381038285015280855161514f81846151a2565b91508192508381028201848801865b83811015615188578583038552615176838351614e58565b9487019492509086019060010161515e565b50909998505050505050505050565b901515815260200190565b90815260200190565b958652602086019490945273ffffffffffffffffffffffffffffffffffffffff9283166040860152911660608401521515608083015260a082015260c00190565b9384526020840192909252604083015273ffffffffffffffffffffffffffffffffffffffff16606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b6000602082526117f7602083018486614e10565b600060208252613e086020830184614e58565b60208082526015908201527f426f72696e674d6174683a20556e646572666c6f770000000000000000000000604082015260600190565b60208082526017908201527f42656e746f426f783a20536b696d20746f6f206d756368000000000000000000604082015260600190565b6020808252601c908201527f4d6173746572434d67723a2043616e6e6f7420617070726f7665203000000000604082015260600190565b6020808252601b908201527f4d6173746572434d67723a2075736572206e6f742073656e6465720000000000604082015260600190565b6020808252601c908201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604082015260600190565b60208082526016908201527f42656e746f426f783a2063616e6e6f7420656d70747900000000000000000000604082015260600190565b60208082526015908201527f4f776e61626c653a207a65726f20616464726573730000000000000000000000604082015260600190565b60208082526013908201527f42656e746f426f783a204e6f20746f6b656e7300000000000000000000000000604082015260600190565b6020808252601c908201527f426f72696e674d6174683a2075696e74313238204f766572666c6f7700000000604082015260600190565b60208082526018908201527f426f72696e674d6174683a20416464204f766572666c6f770000000000000000604082015260600190565b60208082526017908201527f42656e746f426f783a20746f5b305d206e6f7420736574000000000000000000604082015260600190565b60208082526014908201527f42656e746f426f783a20746f206e6f7420736574000000000000000000000000604082015260600190565b6020808252601a908201527f53747261746567794d616e616765723a20546f6f206561726c79000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f42656e746f426f783a205472616e73666572206e6f7420617070726f76656400604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604082015260600190565b6020808252601b908201527f426f72696e674d6174683a2075696e743634204f766572666c6f770000000000604082015260600190565b60208082526019908201527f4d6173746572434d67723a207573657220697320636c6f6e6500000000000000604082015260600190565b6020808252601d908201527f4d6173746572434d67723a20496e76616c6964205369676e6174757265000000604082015260600190565b6020808252818101527f426f72696e67466163746f72793a204e6f206d6173746572436f6e7472616374604082015260600190565b6020808252601b908201527f4d6173746572434d67723a206d617374657243206e6f74207365740000000000604082015260600190565b6020808252601b908201527f42656e746f426f783a206e6f206d6173746572436f6e74726163740000000000604082015260600190565b6020808252818101527f426f72696e6745524332303a205472616e7366657246726f6d206661696c6564604082015260600190565b6020808252601c908201527f4d6173746572434d67723a20557365722063616e6e6f74206265203000000000604082015260600190565b60208082526016908201527f42656e746f426f783a2057726f6e6720616d6f756e7400000000000000000000604082015260600190565b6020808252601b908201527f4d6173746572434d67723a206e6f742077686974656c69737465640000000000604082015260600190565b6020808252601d908201527f42656e746f426f783a20455448207472616e73666572206661696c6564000000604082015260600190565b60208082526018908201527f426f72696e674d6174683a204d756c204f766572666c6f770000000000000000604082015260600190565b6020808252818101527f53747261746567794d616e616765723a2054617267657420746f6f2068696768604082015260600190565b6fffffffffffffffffffffffffffffffff91909116815260200190565b6fffffffffffffffffffffffffffffffff92909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b6fffffffffffffffffffffffffffffffff92831681529116602082015260400190565b918252602082015260400190565b67ffffffffffffffff91909116815260200190565b67ffffffffffffffff93841681529190921660208201526fffffffffffffffffffffffffffffffff909116604082015260600190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112615998578283fd5b83018035915067ffffffffffffffff8211156159b2578283fd5b60200191503681900382131561465857600080fd5b60005b838110156159e25781810151838201526020016159ca565b838111156159f1576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff81168114615a1957600080fd5b50565b8015158114615a1957600080fdfea26469706673582212202beb5033d9a295c013b2891a7dde817c398025fe49e7dfc3bea112ec69becc2864736f6c634300060c0033","opcodes":"PUSH1 0xE0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x5C09 CODESIZE SUB DUP1 PUSH3 0x5C09 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x116 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 CHAINID PUSH1 0xA0 DUP2 SWAP1 MSTORE PUSH3 0x84 DUP2 PUSH3 0x9E JUMP JUMPDEST PUSH1 0x80 MSTORE POP PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0xC0 MSTORE PUSH3 0x16A JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8CAD95687BA82C2CE50E74F7B754645E5117C3A5BEC8151C0726D5857980A866 PUSH32 0xD7DF266AFF736D415A9DC14B4158201D612E70D75B9C7F4E375CCFD20AA5166F DUP4 ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0xF9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x146 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x128 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x13F JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0x60 SHR PUSH2 0x5A60 PUSH3 0x1A9 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x78C MSTORE DUP1 PUSH2 0xB62 MSTORE DUP1 PUSH2 0x293B MSTORE DUP1 PUSH2 0x2C01 MSTORE POP DUP1 PUSH2 0x14AF MSTORE POP DUP1 PUSH2 0x14E4 MSTORE POP PUSH2 0x5A60 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1E7 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7ECEBE00 GT PUSH2 0x102 JUMPI DUP1 PUSH4 0xD2423B51 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xF1676D37 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xF1676D37 EQ PUSH2 0x580 JUMPI DUP1 PUSH4 0xF18D03CC EQ PUSH2 0x5A0 JUMPI DUP1 PUSH4 0xF483B3DA EQ PUSH2 0x5C0 JUMPI DUP1 PUSH4 0xF7888AEC EQ PUSH2 0x5E0 JUMPI PUSH2 0x1EE JUMP JUMPDEST DUP1 PUSH4 0xD2423B51 EQ PUSH2 0x4FB JUMPI DUP1 PUSH4 0xDA5139CA EQ PUSH2 0x51C JUMPI DUP1 PUSH4 0xDF23B45B EQ PUSH2 0x53C JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x56B JUMPI PUSH2 0x1EE JUMP JUMPDEST DUP1 PUSH4 0x98D1C8F4 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x98D1C8F4 EQ PUSH2 0x486 JUMPI DUP1 PUSH4 0xAEE4D1B2 EQ PUSH2 0x4A6 JUMPI DUP1 PUSH4 0xBAFE4F14 EQ PUSH2 0x4BB JUMPI DUP1 PUSH4 0xC0A47C93 EQ PUSH2 0x4DB JUMPI PUSH2 0x1EE JUMP JUMPDEST DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x411 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x431 JUMPI DUP1 PUSH4 0x91E0EAB5 EQ PUSH2 0x446 JUMPI DUP1 PUSH4 0x97DA6D30 EQ PUSH2 0x466 JUMPI PUSH2 0x1EE JUMP JUMPDEST DUP1 PUSH4 0x4E71E0C8 GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x66C6BB0B GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x66C6BB0B EQ PUSH2 0x391 JUMPI DUP1 PUSH4 0x72CB5D97 EQ PUSH2 0x3B1 JUMPI DUP1 PUSH4 0x733A9D7C EQ PUSH2 0x3D1 JUMPI DUP1 PUSH4 0x7C516E94 EQ PUSH2 0x3F1 JUMPI PUSH2 0x1EE JUMP JUMPDEST DUP1 PUSH4 0x4E71E0C8 EQ PUSH2 0x30E JUMPI DUP1 PUSH4 0x4FFE34DB EQ PUSH2 0x323 JUMPI DUP1 PUSH4 0x5108A558 EQ PUSH2 0x351 JUMPI DUP1 PUSH4 0x56623118 EQ PUSH2 0x371 JUMPI PUSH2 0x1EE JUMP JUMPDEST DUP1 PUSH4 0x1F54245B GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x1F54245B EQ PUSH2 0x28C JUMPI DUP1 PUSH4 0x228BFD9F EQ PUSH2 0x2AC JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x2CC JUMPI DUP1 PUSH4 0x3E2A9D4E EQ PUSH2 0x2EE JUMPI PUSH2 0x1EE JUMP JUMPDEST DUP1 PUSH4 0x2B9446C EQ PUSH2 0x1F3 JUMPI DUP1 PUSH4 0x78DFBE7 EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0xFCA8843 EQ PUSH2 0x23F JUMPI DUP1 PUSH4 0x12A90C8A EQ PUSH2 0x25F JUMPI PUSH2 0x1EE JUMP JUMPDEST CALLDATASIZE PUSH2 0x1EE JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x206 PUSH2 0x201 CALLDATASIZE PUSH1 0x4 PUSH2 0x4A14 JUMP JUMPDEST PUSH2 0x600 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x214 SWAP3 SWAP2 SWAP1 PUSH2 0x590B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x238 CALLDATASIZE PUSH1 0x4 PUSH2 0x47C8 JUMP JUMPDEST PUSH2 0xCB7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x25A CALLDATASIZE PUSH1 0x4 PUSH2 0x4AEF JUMP JUMPDEST PUSH2 0xE42 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27F PUSH2 0x27A CALLDATASIZE PUSH1 0x4 PUSH2 0x46DB JUMP JUMPDEST PUSH2 0x1204 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x214 SWAP2 SWAP1 PUSH2 0x5197 JUMP JUMPDEST PUSH2 0x29F PUSH2 0x29A CALLDATASIZE PUSH1 0x4 PUSH2 0x4812 JUMP JUMPDEST PUSH2 0x1219 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x214 SWAP2 SWAP1 PUSH2 0x4EF8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29F PUSH2 0x2C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x46DB JUMP JUMPDEST PUSH2 0x1482 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E1 PUSH2 0x14AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x214 SWAP2 SWAP1 PUSH2 0x51A2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x309 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C3D JUMP JUMPDEST PUSH2 0x150A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x163E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x343 PUSH2 0x33E CALLDATASIZE PUSH1 0x4 PUSH2 0x46DB JUMP JUMPDEST PUSH2 0x1724 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x214 SWAP3 SWAP2 SWAP1 PUSH2 0x58E8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29F PUSH2 0x36C CALLDATASIZE PUSH1 0x4 PUSH2 0x46DB JUMP JUMPDEST PUSH2 0x1760 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E1 PUSH2 0x38C CALLDATASIZE PUSH1 0x4 PUSH2 0x4C07 JUMP JUMPDEST PUSH2 0x1788 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x3AC CALLDATASIZE PUSH1 0x4 PUSH2 0x4B81 JUMP JUMPDEST PUSH2 0x17FF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x3CC CALLDATASIZE PUSH1 0x4 PUSH2 0x49B2 JUMP JUMPDEST PUSH2 0x1FB4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x3EC CALLDATASIZE PUSH1 0x4 PUSH2 0x479B JUMP JUMPDEST PUSH2 0x25B3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x40C CALLDATASIZE PUSH1 0x4 PUSH2 0x4A6E JUMP JUMPDEST PUSH2 0x26D0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x41D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E1 PUSH2 0x42C CALLDATASIZE PUSH1 0x4 PUSH2 0x46DB JUMP JUMPDEST PUSH2 0x276A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x43D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29F PUSH2 0x277C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x452 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27F PUSH2 0x461 CALLDATASIZE PUSH1 0x4 PUSH2 0x46F7 JUMP JUMPDEST PUSH2 0x2798 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x472 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x206 PUSH2 0x481 CALLDATASIZE PUSH1 0x4 PUSH2 0x4A14 JUMP JUMPDEST PUSH2 0x27B8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x492 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x4A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x4BC1 JUMP JUMPDEST PUSH2 0x2DA8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x2E48 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29F PUSH2 0x4D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x46DB JUMP JUMPDEST PUSH2 0x2EA7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x4F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x472F JUMP JUMPDEST PUSH2 0x2ECF JUMP JUMPDEST PUSH2 0x50E PUSH2 0x509 CALLDATASIZE PUSH1 0x4 PUSH2 0x4878 JUMP JUMPDEST PUSH2 0x3328 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x214 SWAP3 SWAP2 SWAP1 PUSH2 0x50FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x528 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E1 PUSH2 0x537 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C07 JUMP JUMPDEST PUSH2 0x34D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x548 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x55C PUSH2 0x557 CALLDATASIZE PUSH1 0x4 PUSH2 0x46DB JUMP JUMPDEST PUSH2 0x3543 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x214 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x592E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x577 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29F PUSH2 0x3598 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x59B CALLDATASIZE PUSH1 0x4 PUSH2 0x4C76 JUMP JUMPDEST PUSH2 0x35B4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x5BB CALLDATASIZE PUSH1 0x4 PUSH2 0x49C4 JUMP JUMPDEST PUSH2 0x378F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x5DB CALLDATASIZE PUSH1 0x4 PUSH2 0x48DE JUMP JUMPDEST PUSH2 0x39E9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E1 PUSH2 0x5FB CALLDATASIZE PUSH1 0x4 PUSH2 0x49B2 JUMP JUMPDEST PUSH2 0x3D34 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND CALLER EQ DUP1 ISZERO SWAP1 PUSH2 0x640 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ADDRESS EQ ISZERO JUMPDEST ISZERO PUSH2 0x719 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 PUSH2 0x6AB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x56DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x717 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5562 JUMP JUMPDEST POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH2 0x766 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x54BF JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND ISZERO PUSH2 0x78A JUMPI DUP9 PUSH2 0x7AC JUMP JUMPDEST PUSH32 0x0 JUMPDEST SWAP1 POP PUSH2 0x7B6 PUSH2 0x45DF JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND DUP1 DUP6 MSTORE PUSH17 0x100000000000000000000000000000000 SWAP1 SWAP3 DIV AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ISZERO ISZERO DUP1 PUSH2 0x8A7 JUMPI POP PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x86D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x881 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8A5 SWAP2 SWAP1 PUSH2 0x4CE7 JUMP JUMPDEST GT JUMPDEST PUSH2 0x8DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x53E3 JUMP JUMPDEST DUP6 PUSH2 0x947 JUMPI PUSH2 0x8EE DUP2 DUP9 PUSH1 0x0 PUSH2 0x3D51 JUMP JUMPDEST SWAP6 POP PUSH2 0x3E8 PUSH2 0x91C PUSH2 0x8FF DUP9 PUSH2 0x3E0F JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x3E5F JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0x942 JUMPI PUSH1 0x0 DUP1 SWAP5 POP SWAP5 POP POP POP PUSH2 0xCAC JUMP JUMPDEST PUSH2 0x956 JUMP JUMPDEST PUSH2 0x953 DUP2 DUP8 PUSH1 0x1 PUSH2 0x3EB7 JUMP JUMPDEST SWAP7 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND ADDRESS EQ ISZERO DUP1 PUSH2 0x98F JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND ISZERO JUMPDEST DUP1 PUSH2 0x9C0 JUMPI POP DUP1 MLOAD PUSH2 0x9BC SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x9B6 DUP5 PUSH2 0x3F5A JUMP JUMPDEST SWAP1 PUSH2 0x403E JUMP JUMPDEST DUP8 GT ISZERO JUMPDEST PUSH2 0x9F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5299 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP13 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0xA33 SWAP1 DUP8 PUSH2 0x407B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP14 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SSTORE PUSH2 0xA8F PUSH2 0xA72 DUP8 PUSH2 0x3E0F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x3E5F JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xACC PUSH2 0xAB2 DUP9 PUSH2 0x3E0F JUMP JUMPDEST DUP3 MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x3E5F JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP5 MLOAD DUP2 SLOAD SWAP3 DUP7 ADD MLOAD DUP6 AND PUSH17 0x100000000000000000000000000000000 MUL SWAP1 DUP6 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP4 AND OR SWAP1 SWAP2 SSTORE DUP11 AND PUSH2 0xBE6 JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 DUP9 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBDC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0xC25 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND ADDRESS EQ PUSH2 0xC25 JUMPI PUSH2 0xC25 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND DUP11 ADDRESS DUP11 PUSH2 0x40B8 JUMP JUMPDEST DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xB2346165E782564F17F5B7E555C21F4FD96FBC93458572BF0113EA35A958FC55 DUP11 DUP11 PUSH1 0x40 MLOAD PUSH2 0xC9B SWAP3 SWAP2 SWAP1 PUSH2 0x590B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP7 SWAP5 POP DUP6 SWAP4 POP POP POP JUMPDEST POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xD08 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x552D JUMP JUMPDEST DUP2 ISZERO PUSH2 0xDFC JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO ISZERO DUP1 PUSH2 0xD2F JUMPI POP DUP1 JUMPDEST PUSH2 0xD65 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x53AC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH2 0xE3D JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND OR SWAP1 SSTORE JUMPDEST POP POP POP JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND CALLER EQ DUP1 ISZERO SWAP1 PUSH2 0xE7F JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ADDRESS EQ ISZERO JUMPDEST ISZERO PUSH2 0xF4F JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 PUSH2 0xEE1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x56DF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xF4D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5562 JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 DUP6 DUP6 DUP3 DUP2 PUSH2 0xF5B JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xF70 SWAP2 SWAP1 PUSH2 0x46DB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xFBE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5488 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1182 JUMPI PUSH1 0x0 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0xFD9 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xFEE SWAP2 SWAP1 PUSH2 0x46DB JUMP JUMPDEST SWAP1 POP PUSH2 0x1091 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xFFF JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x6 PUSH1 0x0 DUP15 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x407B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP14 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SSTORE PUSH2 0x10E9 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x10D3 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP6 PUSH2 0x407B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP4 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x6EABE333476233FD382224F233210CB808A7BC4C4DE64F9D76628BF63C677B1A DUP11 DUP11 DUP8 DUP2 DUP2 LT PUSH2 0x115D JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x40 MLOAD PUSH2 0x1171 SWAP2 SWAP1 PUSH2 0x51A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 ADD PUSH2 0xFC3 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP13 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0x11C0 SWAP1 DUP4 PUSH2 0x403E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP10 DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP12 SWAP1 SWAP13 AND DUP3 MSTORE SWAP10 SWAP1 SWAP10 MSTORE SWAP9 SWAP1 SWAP8 KECCAK256 SWAP8 SWAP1 SWAP8 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH2 0x1268 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5673 JUMP JUMPDEST PUSH1 0x60 DUP6 SWAP1 SHL DUP3 ISZERO PUSH2 0x12F1 JUMPI PUSH1 0x0 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x1285 SWAP3 SWAP2 SWAP1 PUSH2 0x4EA2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP PUSH1 0x40 MLOAD PUSH32 0x3D602D80600A3D3981F3363D3D373D3D3D363D73000000000000000000000000 DUP2 MSTORE DUP3 PUSH1 0x14 DUP3 ADD MSTORE PUSH32 0x5AF43D82803E903D91602B57FD5BF30000000000000000000000000000000000 PUSH1 0x28 DUP3 ADD MSTORE DUP2 PUSH1 0x37 DUP3 PUSH1 0x0 CREATE2 SWAP4 POP POP POP PUSH2 0x134D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x3D602D80600A3D3981F3363D3D373D3D3D363D73000000000000000000000000 DUP2 MSTORE DUP2 PUSH1 0x14 DUP3 ADD MSTORE PUSH32 0x5AF43D82803E903D91602B57FD5BF30000000000000000000000000000000000 PUSH1 0x28 DUP3 ADD MSTORE PUSH1 0x37 DUP2 PUSH1 0x0 CREATE SWAP3 POP POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP4 DUP11 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH32 0x4DDF47D400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH4 0x4DDF47D4 SWAP1 CALLVALUE SWAP1 PUSH2 0x13E0 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x523B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x140D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xD62166F3C2149208E51788B1401CC356BF5DA1FC6C7886A32E18570F57D88B3B DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1471 SWAP3 SWAP2 SWAP1 PUSH2 0x523B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 CHAINID PUSH32 0x0 DUP2 EQ PUSH2 0x14E2 JUMPI PUSH2 0x14DD DUP2 PUSH2 0x4223 JUMP JUMPDEST PUSH2 0x1504 JUMP JUMPDEST PUSH32 0x0 JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x155B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x552D JUMP JUMPDEST PUSH1 0x5F DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0x15A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x585E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF AND PUSH9 0x10000000000000000 PUSH8 0xFFFFFFFFFFFFFFFF DUP7 AND MUL OR SWAP1 SSTORE MLOAD PUSH32 0x7543AF99B5602C06E62DA0631B5308489A5FF859150105A623B6EB15E8DEAE0B SWAP1 PUSH2 0x1632 SWAP1 DUP5 SWAP1 PUSH2 0x5919 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP2 EQ PUSH2 0x1690 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5599 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND SWAP2 PUSH17 0x100000000000000000000000000000000 SWAP1 DIV AND DUP3 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD DUP1 DUP4 ADD SWAP1 SWAP3 MSTORE SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH17 0x100000000000000000000000000000000 SWAP1 SWAP2 DIV AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x17F7 SWAP1 DUP5 DUP5 PUSH2 0x3EB7 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1807 PUSH2 0x45F6 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP2 ADD DUP4 MSTORE SWAP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH9 0x10000000000000000 DUP3 DIV AND DUP3 DUP6 ADD MSTORE PUSH17 0x100000000000000000000000000000000 SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 DUP4 ADD SWAP1 DUP2 MSTORE SWAP5 DUP5 MSTORE PUSH1 0x8 SWAP1 SWAP3 MSTORE DUP1 DUP4 KECCAK256 SLOAD SWAP4 MLOAD SWAP1 MLOAD PUSH32 0x18FCCC7600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 SWAP5 SWAP4 SWAP1 SWAP4 AND SWAP3 DUP4 SWAP2 PUSH4 0x18FCCC76 SWAP2 PUSH2 0x18D6 SWAP2 CALLER SWAP1 PUSH1 0x4 ADD PUSH2 0x58B0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1904 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1928 SWAP2 SWAP1 PUSH2 0x4CE7 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO DUP1 ISZERO PUSH2 0x1936 JUMPI POP DUP5 ISZERO JUMPDEST ISZERO PUSH2 0x1943 JUMPI POP POP POP PUSH2 0xE3D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP3 SGT ISZERO PUSH2 0x1A3D JUMPI DUP2 PUSH2 0x198E DUP3 DUP3 PUSH2 0x407B JUMP JUMPDEST SWAP2 POP PUSH2 0x1999 DUP3 PUSH2 0x3E0F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH32 0x911C9F20A03EDABCBCBD18DCA1174CCE47A91B234CED7A5A3C60BA0D5B56C5D2 SWAP1 PUSH2 0x1A2F SWAP1 DUP5 SWAP1 PUSH2 0x51A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH2 0x1B58 JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0x1B58 JUMPI PUSH1 0x0 DUP3 SWAP1 SUB PUSH2 0x1A55 DUP3 DUP3 PUSH2 0x403E JUMP JUMPDEST SWAP2 POP PUSH2 0x1A60 DUP3 PUSH2 0x3E0F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x1AED PUSH2 0x1AD0 DUP3 PUSH2 0x3E0F JUMP JUMPDEST PUSH1 0x40 DUP8 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x429A JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP1 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP1 PUSH32 0x8F1F26EB9B6AA8689DBDD519EAD1999D9C8819D4738E403B2003B18197D9CF97 SWAP1 PUSH2 0x1B4E SWAP1 DUP5 SWAP1 PUSH2 0x51A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMPDEST DUP6 ISZERO PUSH2 0x1EDC JUMPI PUSH1 0x0 PUSH1 0x64 PUSH2 0x1B83 DUP7 PUSH1 0x20 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP5 PUSH2 0x42EC SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 PUSH2 0x1B8A JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 DUP6 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0x1D29 JUMPI PUSH1 0x0 PUSH2 0x1BD6 DUP7 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH2 0x403E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP7 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1BE6 JUMPI POP DUP7 DUP2 GT JUMPDEST ISZERO PUSH2 0x1BEE JUMPI POP DUP6 JUMPDEST PUSH2 0x1C0F PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND DUP7 DUP4 PUSH2 0x433D JUMP JUMPDEST PUSH2 0x1C38 PUSH2 0x1C1B DUP3 PUSH2 0x3E0F JUMP JUMPDEST PUSH1 0x40 DUP9 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x3E5F JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP1 DUP9 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH32 0x6939AAF500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP1 PUSH4 0x6939AAF5 SWAP1 PUSH2 0x1CA3 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x51A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1CBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1CD1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xB18E7E4F6EAC147A63A3BB6BEB2D9039C88698623AFF3EFC4FEBBC20B0164EE5 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1D1B SWAP2 SWAP1 PUSH2 0x51A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH2 0x1EDA JUMP JUMPDEST DUP1 DUP6 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0x1EDA JUMPI PUSH1 0x0 PUSH2 0x1D72 PUSH2 0x1D55 DUP4 PUSH2 0x3E0F JUMP JUMPDEST PUSH1 0x40 DUP9 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x429A JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP7 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1D94 JUMPI POP DUP7 DUP2 GT JUMPDEST ISZERO PUSH2 0x1D9C JUMPI POP DUP6 JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x1DF1 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x51A2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1E0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1E1F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E43 SWAP2 SWAP1 PUSH2 0x4CE7 JUMP JUMPDEST SWAP1 POP PUSH2 0x1E6E PUSH2 0x1E51 DUP3 PUSH2 0x3E0F JUMP JUMPDEST PUSH1 0x40 DUP10 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x429A JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP1 DUP10 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP12 AND SWAP1 PUSH32 0x39AA22060F8DD4D291720311FEEDF3B72FEF47C06C66CCF5C22B502C62E7550A SWAP1 PUSH2 0x1ECF SWAP1 DUP5 SWAP1 PUSH2 0x51A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMPDEST POP JUMPDEST POP POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP4 MLOAD DUP2 SLOAD SWAP3 DUP6 ADD MLOAD SWAP4 SWAP1 SWAP5 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH17 0x100000000000000000000000000000000 MUL PUSH8 0xFFFFFFFFFFFFFFFF SWAP5 DUP6 AND PUSH9 0x10000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF SWAP6 SWAP1 SWAP7 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP4 SWAP1 SWAP4 AND SWAP4 SWAP1 SWAP4 OR SWAP2 SWAP1 SWAP2 AND OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x2005 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x552D JUMP JUMPDEST PUSH2 0x200D PUSH2 0x45F6 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP2 ADD DUP4 MSTORE SWAP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH9 0x10000000000000000 DUP3 DIV DUP2 AND DUP4 DUP7 ADD MSTORE PUSH17 0x100000000000000000000000000000000 SWAP1 SWAP2 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 DUP5 ADD MSTORE SWAP5 DUP5 MSTORE PUSH1 0x9 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD DUP2 MLOAD SWAP2 SWAP4 AND SWAP2 AND ISZERO DUP1 PUSH2 0x20D7 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x218F JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 DUP6 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x2138 TIMESTAMP PUSH2 0x44A5 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND DUP3 MSTORE PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND SWAP2 SWAP1 DUP7 AND SWAP1 PUSH32 0x6F7CCDF3F86039E5A1DCF6028BF7B4773CBF7A234716BA2E5392B12BB0F8558F SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH2 0x24DF JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x21B4 JUMPI POP DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND TIMESTAMP LT ISZERO JUMPDEST PUSH2 0x21EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x54F6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND ISZERO PUSH2 0x2443 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD DUP6 DUP3 ADD MLOAD SWAP2 MLOAD PUSH32 0x7F8661A100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP3 SWAP4 AND SWAP2 PUSH4 0x7F8661A1 SWAP2 PUSH2 0x227E SWAP2 PUSH1 0x4 ADD PUSH2 0x5893 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2298 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x22AC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x22D0 SWAP2 SWAP1 PUSH2 0x4CE7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SGT ISZERO PUSH2 0x2361 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 PUSH2 0x230C SWAP1 DUP3 PUSH2 0x44E9 JUMP JUMPDEST POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x911C9F20A03EDABCBCBD18DCA1174CCE47A91B234CED7A5A3C60BA0D5B56C5D2 DUP3 PUSH1 0x40 MLOAD PUSH2 0x2353 SWAP2 SWAP1 PUSH2 0x51A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH2 0x23EF JUMP JUMPDEST PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x23EF JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 PUSH2 0x239E SWAP1 DUP3 PUSH2 0x4557 JUMP JUMPDEST POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8F1F26EB9B6AA8689DBDD519EAD1999D9C8819D4738E403B2003B18197D9CF97 DUP3 PUSH1 0x40 MLOAD PUSH2 0x23E5 SWAP2 SWAP1 PUSH2 0x51A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x39AA22060F8DD4D291720311FEEDF3B72FEF47C06C66CCF5C22B502C62E7550A DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x2439 SWAP2 SWAP1 PUSH2 0x5893 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 DUP9 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE DUP4 DUP9 MSTORE DUP8 DUP3 ADD DUP5 SWAP1 MSTORE DUP5 DUP5 MSTORE PUSH1 0x9 SWAP1 SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND SWAP1 SWAP2 SSTORE MLOAD SWAP3 DUP7 AND SWAP3 PUSH32 0x3E6352A885ADC4CC54767592939C3B1BBD65685658C3BEAABA66A888120E217 SWAP2 SWAP1 LOG3 JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP5 MLOAD DUP2 SLOAD SWAP3 DUP7 ADD MLOAD SWAP4 SWAP1 SWAP6 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000 SWAP1 SWAP3 AND PUSH8 0xFFFFFFFFFFFFFFFF SWAP6 DUP7 AND OR PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF AND PUSH9 0x10000000000000000 SWAP6 SWAP1 SWAP4 AND SWAP5 SWAP1 SWAP5 MUL SWAP2 SWAP1 SWAP2 OR PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH17 0x100000000000000000000000000000000 SWAP2 SWAP1 SWAP3 AND MUL OR SWAP1 SWAP2 SSTORE POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x2604 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x552D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x2651 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x52D0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP5 ISZERO ISZERO OR SWAP1 SSTORE MLOAD PUSH32 0x31A1E0EAC44B54AC6C2A2EFA87E92C83405FFCF33FCEEF02A7BCA695130E2600 SWAP1 PUSH2 0x1632 SWAP1 DUP5 SWAP1 PUSH2 0x5197 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xD505ACCF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP1 PUSH4 0xD505ACCF SWAP1 PUSH2 0x272E SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x5089 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2748 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x275C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND CALLER EQ DUP1 ISZERO SWAP1 PUSH2 0x27F8 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ADDRESS EQ ISZERO JUMPDEST ISZERO PUSH2 0x28C8 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 PUSH2 0x285A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x56DF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x28C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5562 JUMP JUMPDEST POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH2 0x2915 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x54BF JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND ISZERO PUSH2 0x2939 JUMPI DUP9 PUSH2 0x295B JUMP JUMPDEST PUSH32 0x0 JUMPDEST SWAP1 POP PUSH2 0x2965 PUSH2 0x45DF JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND DUP5 MSTORE PUSH17 0x100000000000000000000000000000000 SWAP1 SWAP2 DIV AND SWAP1 DUP3 ADD MSTORE DUP6 PUSH2 0x29E0 JUMPI PUSH2 0x29D9 DUP2 DUP9 PUSH1 0x1 PUSH2 0x3D51 JUMP JUMPDEST SWAP6 POP PUSH2 0x29EF JUMP JUMPDEST PUSH2 0x29EC DUP2 DUP8 PUSH1 0x0 PUSH2 0x3EB7 JUMP JUMPDEST SWAP7 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP14 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0x2A2C SWAP1 DUP8 PUSH2 0x403E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP15 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SSTORE PUSH2 0x2A85 PUSH2 0x2A6B DUP9 PUSH2 0x3E0F JUMP JUMPDEST DUP3 MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x429A JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH2 0x2AC2 PUSH2 0x2AA5 DUP8 PUSH2 0x3E0F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x429A JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x3E8 GT ISZERO DUP1 PUSH2 0x2AFF JUMPI POP PUSH1 0x20 DUP2 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO JUMPDEST PUSH2 0x2B35 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5375 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP4 MLOAD DUP2 SLOAD SWAP3 DUP6 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND OR DUP2 AND PUSH17 0x100000000000000000000000000000000 SWAP2 SWAP1 SWAP4 AND MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP11 AND PUSH2 0x2D11 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x2C36 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x51A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2C64 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH1 0x40 MLOAD PUSH2 0x2C8E SWAP1 PUSH2 0x4EF5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2CCB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2CD0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x2D0B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x57F0 JUMP JUMPDEST POP PUSH2 0x2D32 JUMP JUMPDEST PUSH2 0x2D32 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND DUP10 DUP10 PUSH2 0x433D JUMP JUMPDEST DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xAD9AB9EE6953D4D177F4A03B3A3AC3178FFCB9816319F348060194AA76B14486 DUP11 DUP11 PUSH1 0x40 MLOAD PUSH2 0xC9B SWAP3 SWAP2 SWAP1 PUSH2 0x590B JUMP JUMPDEST PUSH2 0x2DB0 PUSH2 0x45DF JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP1 DUP3 AND PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 SWAP1 SWAP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 SWAP1 SWAP5 MSTORE PUSH1 0x40 SWAP1 SWAP4 KECCAK256 SWAP1 MLOAD DUP2 SLOAD SWAP4 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP5 AND SWAP1 DUP4 AND OR DUP3 AND PUSH17 0x100000000000000000000000000000000 SWAP4 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 MUL OR SWAP1 SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND DUP5 OR SWAP1 SSTORE MLOAD PUSH32 0xDFB44FFABF0D3A8F650D3CE43EFF98F6D050E7EA1A396D5794F014E7DADABACB SWAP2 SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH2 0x2F1C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x56A8 JUMP JUMPDEST DUP2 ISZERO DUP1 ISZERO PUSH2 0x2F28 JUMPI POP DUP1 ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x2F35 JUMPI POP PUSH1 0xFF DUP4 AND ISZERO JUMPDEST ISZERO PUSH2 0x304C JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND CALLER EQ PUSH2 0x2F89 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5307 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND ISZERO PUSH2 0x2FE8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5605 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x3047 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x57B9 JUMP JUMPDEST PUSH2 0x3289 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH2 0x3099 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x574B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x30D9 PUSH2 0x14AA JUMP JUMPDEST PUSH32 0x1962BC9F5484CB7A998701B81090E966EE1FCE5771AF884CCEEE7C081B14ADE2 DUP8 PUSH2 0x3125 JUMPI PUSH32 0xB426802F1F7DC850A7B6B38805EDEA2442F3992878A9AB985ABFE8091D95D0B1 PUSH2 0x3147 JUMP JUMPDEST PUSH32 0x422AC5323FE049241DEE67716229A1CC1BC7B313B23DFE3EF6D42AB177A3B284 JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE SWAP2 MLOAD PUSH2 0x318E SWAP5 SWAP4 SWAP3 DUP15 SWAP3 DUP15 SWAP3 DUP15 SWAP3 SWAP2 ADD PUSH2 0x51AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x31B6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4ECE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP3 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x31F3 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x521D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3215 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3286 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x563C JUMP JUMPDEST POP POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP12 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP9 ISZERO ISZERO OR SWAP1 SSTORE MLOAD PUSH32 0x5F6EBB64BA012A851C6F014E6CAD458DDF213D1512049B31CD06365C2B059257 SWAP1 PUSH2 0x3318 SWAP1 DUP9 SWAP1 PUSH2 0x5197 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x3342 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x336C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x3386 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x33BA JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x33A5 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x34CB JUMPI PUSH1 0x0 PUSH1 0x60 ADDRESS DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x33D9 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x33EB SWAP2 SWAP1 PUSH2 0x5964 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x33F9 SWAP3 SWAP2 SWAP1 PUSH2 0x4EA2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3434 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3439 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 PUSH2 0x3448 JUMPI POP DUP6 ISZERO JUMPDEST PUSH2 0x3451 DUP3 PUSH2 0x457F JUMP JUMPDEST SWAP1 PUSH2 0x3489 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP2 SWAP1 PUSH2 0x524F JUMP JUMPDEST POP DUP2 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3497 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 ISZERO ISZERO SWAP1 DUP2 ISZERO ISZERO DUP2 MSTORE POP POP DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x34B6 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x33C0 JUMP JUMPDEST POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD DUP1 DUP4 ADD SWAP1 SWAP3 MSTORE SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH17 0x100000000000000000000000000000000 SWAP1 SWAP2 DIV AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x17F7 SWAP1 DUP5 DUP5 PUSH2 0x3D51 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 AND SWAP2 PUSH9 0x10000000000000000 DUP2 DIV SWAP1 SWAP2 AND SWAP1 PUSH17 0x100000000000000000000000000000000 SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x186A0 PUSH2 0x35C5 DUP6 PUSH1 0x32 PUSH2 0x42EC JUMP JUMPDEST DUP2 PUSH2 0x35CC JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH2 0x35F0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP8 DUP7 PUSH2 0x433D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x23E30C8B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 PUSH4 0x23E30C8B SWAP1 PUSH2 0x364C SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP8 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x5006 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3666 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x367A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x36C7 PUSH2 0x368A DUP3 PUSH2 0x3E0F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x44E9 JUMP JUMPDEST PUSH2 0x36D0 DUP7 PUSH2 0x3F5A JUMP JUMPDEST LT ISZERO PUSH2 0x3708 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5782 JUMP JUMPDEST DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x3BE9B85936D5D30A1655EA116A17EE3D827B2CD428CC026CE5BF2AC46A223204 DUP8 DUP6 PUSH1 0x40 MLOAD PUSH2 0x377E SWAP3 SWAP2 SWAP1 PUSH2 0x590B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND CALLER EQ DUP1 ISZERO SWAP1 PUSH2 0x37CC JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ADDRESS EQ ISZERO JUMPDEST ISZERO PUSH2 0x389C JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 PUSH2 0x382E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x56DF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x389A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5562 JUMP JUMPDEST POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x38E9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x54BF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0x3926 SWAP1 DUP4 PUSH2 0x403E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x396F SWAP1 DUP4 PUSH2 0x407B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP7 AND DUP1 DUP6 MSTORE SWAP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE MLOAD SWAP2 DUP8 AND SWAP2 PUSH32 0x6EABE333476233FD382224F233210CB808A7BC4C4DE64F9D76628BF63C677B1A SWAP1 PUSH2 0x39DA SWAP1 DUP8 SWAP1 PUSH2 0x51A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x3A02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3A2C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP6 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3B08 JUMPI PUSH1 0x0 DUP8 DUP8 DUP4 DUP2 DUP2 LT PUSH2 0x3A49 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP PUSH3 0x186A0 PUSH2 0x3A6A PUSH1 0x32 DUP4 PUSH2 0x42EC SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 PUSH2 0x3A71 JUMPI INVALID JUMPDEST DIV DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3A7E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x3AFF DUP13 DUP13 DUP5 DUP2 DUP2 LT PUSH2 0x3A99 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x3AAE SWAP2 SWAP1 PUSH2 0x46DB JUMP JUMPDEST DUP10 DUP10 DUP6 DUP2 DUP2 LT PUSH2 0x3ABA JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP13 DUP13 DUP7 DUP2 DUP2 LT PUSH2 0x3ACD JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x3AE2 SWAP2 SWAP1 PUSH2 0x46DB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0x433D JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x3A33 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0xD9D1762300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP13 AND SWAP1 PUSH4 0xD9D17623 SWAP1 PUSH2 0x3B69 SWAP1 CALLER SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP11 SWAP1 DUP14 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x4F19 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3B83 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3B97 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x275C JUMPI PUSH1 0x0 DUP10 DUP10 DUP4 DUP2 DUP2 LT PUSH2 0x3BB4 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x3BC9 SWAP2 SWAP1 PUSH2 0x46DB JUMP JUMPDEST SWAP1 POP PUSH2 0x3C27 PUSH2 0x3BEA DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3BDD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3E0F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x44E9 JUMP JUMPDEST PUSH2 0x3C30 DUP3 PUSH2 0x3F5A JUMP JUMPDEST LT ISZERO PUSH2 0x3C68 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5782 JUMP JUMPDEST DUP12 DUP12 DUP4 DUP2 DUP2 LT PUSH2 0x3C74 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x3C89 SWAP2 SWAP1 PUSH2 0x46DB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP15 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x3BE9B85936D5D30A1655EA116A17EE3D827B2CD428CC026CE5BF2AC46A223204 DUP12 DUP12 DUP8 DUP2 DUP2 LT PUSH2 0x3CFA JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x3D0D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x3D23 SWAP3 SWAP2 SWAP1 PUSH2 0x590B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 ADD PUSH2 0x3B9E JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x0 SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3D73 JUMPI POP DUP2 PUSH2 0x3E08 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND SWAP2 PUSH2 0x3D9B SWAP2 DUP7 SWAP2 AND PUSH2 0x42EC JUMP JUMPDEST DUP2 PUSH2 0x3DA2 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP2 DUP1 ISZERO PUSH2 0x3DF8 JUMPI POP DUP3 DUP5 PUSH1 0x20 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3DEE DUP7 PUSH1 0x0 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH2 0x42EC SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 PUSH2 0x3DF5 JUMPI INVALID JUMPDEST DIV LT JUMPDEST ISZERO PUSH2 0x3E08 JUMPI PUSH2 0x17F7 DUP2 PUSH1 0x1 PUSH2 0x407B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3E5B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x541A JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND SWAP1 DUP3 AND LT ISZERO PUSH2 0x3EB1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5451 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x20 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 EQ ISZERO PUSH2 0x3EDF JUMPI POP DUP2 PUSH2 0x3E08 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD DUP5 MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND SWAP2 PUSH2 0x3F07 SWAP2 DUP7 SWAP2 AND PUSH2 0x42EC JUMP JUMPDEST DUP2 PUSH2 0x3F0E JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP2 DUP1 ISZERO PUSH2 0x3DF8 JUMPI POP DUP3 DUP5 PUSH1 0x0 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3DEE DUP7 PUSH1 0x20 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH2 0x42EC SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD SWAP1 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 SWAP3 PUSH2 0x3EB1 SWAP3 PUSH17 0x100000000000000000000000000000000 SWAP1 SWAP3 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 PUSH4 0x70A08231 SWAP1 PUSH2 0x3FE8 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x4EF8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4000 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4014 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4038 SWAP2 SWAP1 PUSH2 0x4CE7 JUMP JUMPDEST SWAP1 PUSH2 0x407B JUMP JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 GT ISZERO PUSH2 0x3EB1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5262 JUMP JUMPDEST DUP2 DUP2 ADD DUP2 DUP2 LT ISZERO PUSH2 0x3EB1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5451 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x40F0 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5058 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x4179 SWAP2 SWAP1 PUSH2 0x4EB2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x41B6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x41BB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x41E5 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x41E5 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x41E5 SWAP2 SWAP1 PUSH2 0x48C2 JUMP JUMPDEST PUSH2 0x421B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5716 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8CAD95687BA82C2CE50E74F7B754645E5117C3A5BEC8151C0726D5857980A866 PUSH32 0xD7DF266AFF736D415A9DC14B4158201D612E70D75B9C7F4E375CCFD20AA5166F DUP4 ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x427C SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x51EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 SUB PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND SWAP1 DUP3 AND GT ISZERO PUSH2 0x3EB1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5262 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO DUP1 PUSH2 0x4307 JUMPI POP POP DUP1 DUP3 MUL DUP3 DUP3 DUP3 DUP2 PUSH2 0x4304 JUMPI INVALID JUMPDEST DIV EQ JUMPDEST PUSH2 0x3EB1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5827 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4373 SWAP3 SWAP2 SWAP1 PUSH2 0x50D7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x43FC SWAP2 SWAP1 PUSH2 0x4EB2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x4439 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x443E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x4468 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x4468 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4468 SWAP2 SWAP1 PUSH2 0x48C2 JUMP JUMPDEST PUSH2 0x449E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x533E JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3E5B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x55CE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4511 PUSH2 0x44F7 DUP4 PUSH2 0x3E0F JUMP JUMPDEST DUP5 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x3E5F JUMP JUMPDEST DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND SWAP1 DUP2 OR SWAP1 SWAP4 SSTORE POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4511 PUSH2 0x4565 DUP4 PUSH2 0x3E0F JUMP JUMPDEST DUP5 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x429A JUMP JUMPDEST PUSH1 0x60 PUSH1 0x44 DUP3 MLOAD LT ISZERO PUSH2 0x45C5 JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH32 0x5472616E73616374696F6E2072657665727465642073696C656E746C79000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x4295 JUMP JUMPDEST PUSH1 0x4 DUP3 ADD SWAP2 POP DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3EB1 SWAP2 SWAP1 PUSH2 0x4CFF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x4627 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x463E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x4658 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x4670 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4687 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x4658 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x3EB1 DUP2 PUSH2 0x59F7 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x3EB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x3EB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x46EC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3E08 DUP2 PUSH2 0x59F7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4709 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4714 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x4724 DUP2 PUSH2 0x59F7 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x4747 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x4752 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x4762 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0x4772 DUP2 PUSH2 0x5A1C JUMP JUMPDEST SWAP4 POP PUSH2 0x4781 DUP9 PUSH1 0x60 DUP10 ADD PUSH2 0x46CA JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x47AD JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x47B8 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x4724 DUP2 PUSH2 0x5A1C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x47DC JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x47E7 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x47F7 DUP2 PUSH2 0x5A1C JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x4807 DUP2 PUSH2 0x5A1C JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x4827 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x4832 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x484D JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x4859 DUP8 DUP3 DUP9 ADD PUSH2 0x465F JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x486D DUP2 PUSH2 0x5A1C JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x488C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x48A2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x48AE DUP7 DUP3 DUP8 ADD PUSH2 0x4616 JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x4807 DUP2 PUSH2 0x5A1C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x48D3 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x3E08 DUP2 PUSH2 0x5A1C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP11 DUP13 SUB SLT ISZERO PUSH2 0x48FB JUMPI DUP7 DUP8 REVERT JUMPDEST DUP10 CALLDATALOAD PUSH2 0x4906 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP9 POP PUSH1 0x20 DUP11 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4922 JUMPI DUP9 DUP10 REVERT JUMPDEST PUSH2 0x492E DUP14 DUP4 DUP15 ADD PUSH2 0x4616 JUMP JUMPDEST SWAP1 SWAP11 POP SWAP9 POP PUSH1 0x40 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4946 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4952 DUP14 DUP4 DUP15 ADD PUSH2 0x4616 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x496A JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4976 DUP14 DUP4 DUP15 ADD PUSH2 0x4616 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x498E JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x499B DUP13 DUP3 DUP14 ADD PUSH2 0x465F JUMP JUMPDEST SWAP2 POP DUP1 SWAP4 POP POP DUP1 SWAP2 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4709 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x49D9 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x49E4 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x49F4 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x4A04 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x4A2B JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x4A36 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x4A46 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x4A56 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x4A8A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0x4A95 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH2 0x4AA5 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH2 0x4AB5 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD SWAP4 POP PUSH2 0x4AD2 DUP11 PUSH1 0xA0 DUP12 ADD PUSH2 0x46CA JUMP JUMPDEST SWAP3 POP PUSH1 0xC0 DUP10 ADD CALLDATALOAD SWAP2 POP PUSH1 0xE0 DUP10 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x4B07 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x4B12 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x4B22 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4B3E JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x4B4A DUP11 DUP4 DUP12 ADD PUSH2 0x4616 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4B62 JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x4B6F DUP10 DUP3 DUP11 ADD PUSH2 0x4616 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4B95 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x4BA0 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x4BB0 DUP2 PUSH2 0x5A1C JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4BD5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x4BE0 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP3 POP PUSH2 0x4BEF DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x46AA JUMP JUMPDEST SWAP2 POP PUSH2 0x4BFE DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x46AA JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4C1B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x4C26 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x4807 DUP2 PUSH2 0x5A1C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4C4F JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4C5A DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4724 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x4C8E JUMPI DUP4 DUP5 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x4C99 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x4CA9 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0x4CB9 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4CDB JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x4B6F DUP10 DUP3 DUP11 ADD PUSH2 0x465F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4CF8 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4D10 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4D27 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4D3A JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x4D48 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND DUP3 ADD ADD DUP2 DUP2 LT DUP5 DUP3 GT OR ISZERO PUSH2 0x4D86 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH1 0x40 MSTORE DUP2 DUP2 MSTORE DUP4 DUP3 ADD PUSH1 0x20 ADD DUP8 LT ISZERO PUSH2 0x4D9D JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4DAE DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x59C7 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4E05 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4DE9 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MSTORE DUP3 DUP3 PUSH1 0x20 DUP7 ADD CALLDATACOPY DUP1 PUSH1 0x20 DUP5 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP6 ADD AND DUP6 ADD ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x4E70 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x59C7 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x4EC4 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x59C7 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 MLOAD PUSH2 0x4EE0 DUP2 DUP5 PUSH1 0x20 DUP10 ADD PUSH2 0x59C7 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 DUP4 MSTORE POP PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP2 SWAP1 POP JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP12 AND DUP4 MSTORE PUSH1 0x20 PUSH1 0xA0 DUP2 DUP6 ADD MSTORE DUP2 PUSH2 0x4F4B DUP12 DUP5 PUSH2 0x51A2 JUMP JUMPDEST SWAP1 POP DUP12 SWAP3 POP DUP4 JUMPDEST DUP12 DUP2 LT ISZERO PUSH2 0x4F7D JUMPI DUP3 DUP5 ADD PUSH2 0x4F70 DUP4 PUSH2 0x4F6B DUP4 DUP9 PUSH2 0x469F JUMP JUMPDEST PUSH2 0x4DB8 JUMP JUMPDEST SWAP1 SWAP5 POP SWAP2 POP PUSH1 0x1 ADD PUSH2 0x4F52 JUMP JUMPDEST POP DUP5 DUP2 SUB PUSH1 0x40 DUP7 ADD MSTORE DUP9 DUP2 MSTORE PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 GT ISZERO PUSH2 0x4FB5 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP10 MUL SWAP3 POP DUP3 DUP11 DUP4 DUP4 ADD CALLDATACOPY DUP3 DUP2 ADD SWAP3 POP POP DUP1 DUP3 ADD DUP4 DUP2 MSTORE DUP2 DUP6 DUP5 SUB ADD PUSH1 0x60 DUP7 ADD MSTORE PUSH2 0x4FE0 DUP2 DUP10 PUSH2 0x4DD6 JUMP JUMPDEST SWAP3 POP POP POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x4FF7 DUP2 DUP6 DUP8 PUSH2 0x4E10 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP10 AND DUP4 MSTORE DUP1 DUP9 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP6 PUSH1 0x40 DUP4 ADD MSTORE DUP5 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x504C PUSH1 0xA0 DUP4 ADD DUP5 DUP7 PUSH2 0x4E10 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP8 DUP9 AND DUP2 MSTORE SWAP6 SWAP1 SWAP7 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xFF AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP4 MLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x20 SWAP1 PUSH1 0x60 DUP5 ADD SWAP1 DUP3 DUP8 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x5138 JUMPI DUP2 MLOAD ISZERO ISZERO DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x511A JUMP JUMPDEST POP POP POP DUP4 DUP2 SUB DUP3 DUP6 ADD MSTORE DUP1 DUP6 MLOAD PUSH2 0x514F DUP2 DUP5 PUSH2 0x51A2 JUMP JUMPDEST SWAP2 POP DUP2 SWAP3 POP DUP4 DUP2 MUL DUP3 ADD DUP5 DUP9 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5188 JUMPI DUP6 DUP4 SUB DUP6 MSTORE PUSH2 0x5176 DUP4 DUP4 MLOAD PUSH2 0x4E58 JUMP JUMPDEST SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x515E JUMP JUMPDEST POP SWAP1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x40 DUP7 ADD MSTORE SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x17F7 PUSH1 0x20 DUP4 ADD DUP5 DUP7 PUSH2 0x4E10 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x3E08 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x4E58 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x426F72696E674D6174683A20556E646572666C6F770000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x42656E746F426F783A20536B696D20746F6F206D756368000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A2043616E6E6F7420617070726F7665203000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A2075736572206E6F742073656E6465720000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x426F72696E6745524332303A205472616E73666572206661696C656400000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH32 0x42656E746F426F783A2063616E6E6F7420656D70747900000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A207A65726F20616464726573730000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x42656E746F426F783A204E6F20746F6B656E7300000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x426F72696E674D6174683A2075696E74313238204F766572666C6F7700000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x426F72696E674D6174683A20416464204F766572666C6F770000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x42656E746F426F783A20746F5B305D206E6F7420736574000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x42656E746F426F783A20746F206E6F7420736574000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x53747261746567794D616E616765723A20546F6F206561726C79000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x42656E746F426F783A205472616E73666572206E6F7420617070726F76656400 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C657220213D2070656E64696E67206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x426F72696E674D6174683A2075696E743634204F766572666C6F770000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x19 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A207573657220697320636C6F6E6500000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A20496E76616C6964205369676E6174757265000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x426F72696E67466163746F72793A204E6F206D6173746572436F6E7472616374 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A206D617374657243206E6F74207365740000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x42656E746F426F783A206E6F206D6173746572436F6E74726163740000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x426F72696E6745524332303A205472616E7366657246726F6D206661696C6564 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A20557365722063616E6E6F74206265203000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH32 0x42656E746F426F783A2057726F6E6720616D6F756E7400000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A206E6F742077686974656C69737465640000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x42656E746F426F783A20455448207472616E73666572206661696C6564000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x426F72696E674D6174683A204D756C204F766572666C6F770000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x53747261746567794D616E616765723A2054617267657420746F6F2068696768 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x5998 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x59B2 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x4658 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x59E2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x59CA JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x59F1 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5A19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x5A19 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B 0xEB POP CALLER 0xD9 LOG2 SWAP6 0xC0 SGT 0xB2 DUP10 BYTE PUSH30 0xDE817C398025FE49E7DFC3BEA112EC69BECC2864736F6C634300060C0033 ","sourceMap":"27784:23362:0:-:0;;;30546:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13639:5;:18;;-1:-1:-1;;;;;;13639:18:0;13647:10;13639:18;;;;;13672:44;;13647:10;;13639:5;13672:44;;13639:5;;13672:44;19850:9;19924:35;;;;19898:62;19850:9;19898:25;:62::i;:::-;19878:82;;-1:-1:-1;30594:22:0;;-1:-1:-1;;;;;;30594:22:0;;;27784:23362;;19973:211;20047:7;19146:80;20127:24;20153:7;20170:4;20083:93;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;20073:104;;;;;;20066:111;;19973:211;;;:::o;172:289:-1:-;;300:2;288:9;279:7;275:23;271:32;268:2;;;-1:-1;;306:12;268:2;96:13;;-1:-1;;;;;1741:54;;1958:48;;1948:2;;-1:-1;;2010:12;1948:2;358:87;262:199;-1:-1;;;262:199::o;828:556::-;659:37;;;1204:2;1189:18;;659:37;;;;1287:2;1272:18;;659:37;-1:-1;;;;;1741:54;1370:2;1355:18;;539:37;1039:3;1024:19;;1010:374::o;:::-;27784:23362:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"immutableReferences":{"1170":[{"length":32,"start":5348}],"1172":[{"length":32,"start":5295}],"1680":[{"length":32,"start":1932},{"length":32,"start":2914},{"length":32,"start":10555},{"length":32,"start":11265}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1E7 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7ECEBE00 GT PUSH2 0x102 JUMPI DUP1 PUSH4 0xD2423B51 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xF1676D37 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xF1676D37 EQ PUSH2 0x580 JUMPI DUP1 PUSH4 0xF18D03CC EQ PUSH2 0x5A0 JUMPI DUP1 PUSH4 0xF483B3DA EQ PUSH2 0x5C0 JUMPI DUP1 PUSH4 0xF7888AEC EQ PUSH2 0x5E0 JUMPI PUSH2 0x1EE JUMP JUMPDEST DUP1 PUSH4 0xD2423B51 EQ PUSH2 0x4FB JUMPI DUP1 PUSH4 0xDA5139CA EQ PUSH2 0x51C JUMPI DUP1 PUSH4 0xDF23B45B EQ PUSH2 0x53C JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x56B JUMPI PUSH2 0x1EE JUMP JUMPDEST DUP1 PUSH4 0x98D1C8F4 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x98D1C8F4 EQ PUSH2 0x486 JUMPI DUP1 PUSH4 0xAEE4D1B2 EQ PUSH2 0x4A6 JUMPI DUP1 PUSH4 0xBAFE4F14 EQ PUSH2 0x4BB JUMPI DUP1 PUSH4 0xC0A47C93 EQ PUSH2 0x4DB JUMPI PUSH2 0x1EE JUMP JUMPDEST DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x411 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x431 JUMPI DUP1 PUSH4 0x91E0EAB5 EQ PUSH2 0x446 JUMPI DUP1 PUSH4 0x97DA6D30 EQ PUSH2 0x466 JUMPI PUSH2 0x1EE JUMP JUMPDEST DUP1 PUSH4 0x4E71E0C8 GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x66C6BB0B GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x66C6BB0B EQ PUSH2 0x391 JUMPI DUP1 PUSH4 0x72CB5D97 EQ PUSH2 0x3B1 JUMPI DUP1 PUSH4 0x733A9D7C EQ PUSH2 0x3D1 JUMPI DUP1 PUSH4 0x7C516E94 EQ PUSH2 0x3F1 JUMPI PUSH2 0x1EE JUMP JUMPDEST DUP1 PUSH4 0x4E71E0C8 EQ PUSH2 0x30E JUMPI DUP1 PUSH4 0x4FFE34DB EQ PUSH2 0x323 JUMPI DUP1 PUSH4 0x5108A558 EQ PUSH2 0x351 JUMPI DUP1 PUSH4 0x56623118 EQ PUSH2 0x371 JUMPI PUSH2 0x1EE JUMP JUMPDEST DUP1 PUSH4 0x1F54245B GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x1F54245B EQ PUSH2 0x28C JUMPI DUP1 PUSH4 0x228BFD9F EQ PUSH2 0x2AC JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x2CC JUMPI DUP1 PUSH4 0x3E2A9D4E EQ PUSH2 0x2EE JUMPI PUSH2 0x1EE JUMP JUMPDEST DUP1 PUSH4 0x2B9446C EQ PUSH2 0x1F3 JUMPI DUP1 PUSH4 0x78DFBE7 EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0xFCA8843 EQ PUSH2 0x23F JUMPI DUP1 PUSH4 0x12A90C8A EQ PUSH2 0x25F JUMPI PUSH2 0x1EE JUMP JUMPDEST CALLDATASIZE PUSH2 0x1EE JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x206 PUSH2 0x201 CALLDATASIZE PUSH1 0x4 PUSH2 0x4A14 JUMP JUMPDEST PUSH2 0x600 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x214 SWAP3 SWAP2 SWAP1 PUSH2 0x590B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x238 CALLDATASIZE PUSH1 0x4 PUSH2 0x47C8 JUMP JUMPDEST PUSH2 0xCB7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x25A CALLDATASIZE PUSH1 0x4 PUSH2 0x4AEF JUMP JUMPDEST PUSH2 0xE42 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27F PUSH2 0x27A CALLDATASIZE PUSH1 0x4 PUSH2 0x46DB JUMP JUMPDEST PUSH2 0x1204 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x214 SWAP2 SWAP1 PUSH2 0x5197 JUMP JUMPDEST PUSH2 0x29F PUSH2 0x29A CALLDATASIZE PUSH1 0x4 PUSH2 0x4812 JUMP JUMPDEST PUSH2 0x1219 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x214 SWAP2 SWAP1 PUSH2 0x4EF8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29F PUSH2 0x2C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x46DB JUMP JUMPDEST PUSH2 0x1482 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E1 PUSH2 0x14AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x214 SWAP2 SWAP1 PUSH2 0x51A2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x309 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C3D JUMP JUMPDEST PUSH2 0x150A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x163E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x343 PUSH2 0x33E CALLDATASIZE PUSH1 0x4 PUSH2 0x46DB JUMP JUMPDEST PUSH2 0x1724 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x214 SWAP3 SWAP2 SWAP1 PUSH2 0x58E8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29F PUSH2 0x36C CALLDATASIZE PUSH1 0x4 PUSH2 0x46DB JUMP JUMPDEST PUSH2 0x1760 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E1 PUSH2 0x38C CALLDATASIZE PUSH1 0x4 PUSH2 0x4C07 JUMP JUMPDEST PUSH2 0x1788 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x3AC CALLDATASIZE PUSH1 0x4 PUSH2 0x4B81 JUMP JUMPDEST PUSH2 0x17FF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x3CC CALLDATASIZE PUSH1 0x4 PUSH2 0x49B2 JUMP JUMPDEST PUSH2 0x1FB4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x3EC CALLDATASIZE PUSH1 0x4 PUSH2 0x479B JUMP JUMPDEST PUSH2 0x25B3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x40C CALLDATASIZE PUSH1 0x4 PUSH2 0x4A6E JUMP JUMPDEST PUSH2 0x26D0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x41D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E1 PUSH2 0x42C CALLDATASIZE PUSH1 0x4 PUSH2 0x46DB JUMP JUMPDEST PUSH2 0x276A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x43D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29F PUSH2 0x277C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x452 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27F PUSH2 0x461 CALLDATASIZE PUSH1 0x4 PUSH2 0x46F7 JUMP JUMPDEST PUSH2 0x2798 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x472 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x206 PUSH2 0x481 CALLDATASIZE PUSH1 0x4 PUSH2 0x4A14 JUMP JUMPDEST PUSH2 0x27B8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x492 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x4A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x4BC1 JUMP JUMPDEST PUSH2 0x2DA8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x2E48 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29F PUSH2 0x4D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x46DB JUMP JUMPDEST PUSH2 0x2EA7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x4F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x472F JUMP JUMPDEST PUSH2 0x2ECF JUMP JUMPDEST PUSH2 0x50E PUSH2 0x509 CALLDATASIZE PUSH1 0x4 PUSH2 0x4878 JUMP JUMPDEST PUSH2 0x3328 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x214 SWAP3 SWAP2 SWAP1 PUSH2 0x50FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x528 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E1 PUSH2 0x537 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C07 JUMP JUMPDEST PUSH2 0x34D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x548 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x55C PUSH2 0x557 CALLDATASIZE PUSH1 0x4 PUSH2 0x46DB JUMP JUMPDEST PUSH2 0x3543 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x214 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x592E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x577 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29F PUSH2 0x3598 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x59B CALLDATASIZE PUSH1 0x4 PUSH2 0x4C76 JUMP JUMPDEST PUSH2 0x35B4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x5BB CALLDATASIZE PUSH1 0x4 PUSH2 0x49C4 JUMP JUMPDEST PUSH2 0x378F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH2 0x5DB CALLDATASIZE PUSH1 0x4 PUSH2 0x48DE JUMP JUMPDEST PUSH2 0x39E9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E1 PUSH2 0x5FB CALLDATASIZE PUSH1 0x4 PUSH2 0x49B2 JUMP JUMPDEST PUSH2 0x3D34 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND CALLER EQ DUP1 ISZERO SWAP1 PUSH2 0x640 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ADDRESS EQ ISZERO JUMPDEST ISZERO PUSH2 0x719 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 PUSH2 0x6AB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x56DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x717 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5562 JUMP JUMPDEST POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH2 0x766 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x54BF JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND ISZERO PUSH2 0x78A JUMPI DUP9 PUSH2 0x7AC JUMP JUMPDEST PUSH32 0x0 JUMPDEST SWAP1 POP PUSH2 0x7B6 PUSH2 0x45DF JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND DUP1 DUP6 MSTORE PUSH17 0x100000000000000000000000000000000 SWAP1 SWAP3 DIV AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ISZERO ISZERO DUP1 PUSH2 0x8A7 JUMPI POP PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x86D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x881 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8A5 SWAP2 SWAP1 PUSH2 0x4CE7 JUMP JUMPDEST GT JUMPDEST PUSH2 0x8DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x53E3 JUMP JUMPDEST DUP6 PUSH2 0x947 JUMPI PUSH2 0x8EE DUP2 DUP9 PUSH1 0x0 PUSH2 0x3D51 JUMP JUMPDEST SWAP6 POP PUSH2 0x3E8 PUSH2 0x91C PUSH2 0x8FF DUP9 PUSH2 0x3E0F JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x3E5F JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0x942 JUMPI PUSH1 0x0 DUP1 SWAP5 POP SWAP5 POP POP POP PUSH2 0xCAC JUMP JUMPDEST PUSH2 0x956 JUMP JUMPDEST PUSH2 0x953 DUP2 DUP8 PUSH1 0x1 PUSH2 0x3EB7 JUMP JUMPDEST SWAP7 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND ADDRESS EQ ISZERO DUP1 PUSH2 0x98F JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND ISZERO JUMPDEST DUP1 PUSH2 0x9C0 JUMPI POP DUP1 MLOAD PUSH2 0x9BC SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x9B6 DUP5 PUSH2 0x3F5A JUMP JUMPDEST SWAP1 PUSH2 0x403E JUMP JUMPDEST DUP8 GT ISZERO JUMPDEST PUSH2 0x9F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5299 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP13 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0xA33 SWAP1 DUP8 PUSH2 0x407B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP14 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SSTORE PUSH2 0xA8F PUSH2 0xA72 DUP8 PUSH2 0x3E0F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x3E5F JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xACC PUSH2 0xAB2 DUP9 PUSH2 0x3E0F JUMP JUMPDEST DUP3 MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x3E5F JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP5 MLOAD DUP2 SLOAD SWAP3 DUP7 ADD MLOAD DUP6 AND PUSH17 0x100000000000000000000000000000000 MUL SWAP1 DUP6 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP4 AND OR SWAP1 SWAP2 SSTORE DUP11 AND PUSH2 0xBE6 JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 DUP9 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBDC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0xC25 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND ADDRESS EQ PUSH2 0xC25 JUMPI PUSH2 0xC25 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND DUP11 ADDRESS DUP11 PUSH2 0x40B8 JUMP JUMPDEST DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xB2346165E782564F17F5B7E555C21F4FD96FBC93458572BF0113EA35A958FC55 DUP11 DUP11 PUSH1 0x40 MLOAD PUSH2 0xC9B SWAP3 SWAP2 SWAP1 PUSH2 0x590B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP7 SWAP5 POP DUP6 SWAP4 POP POP POP JUMPDEST POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xD08 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x552D JUMP JUMPDEST DUP2 ISZERO PUSH2 0xDFC JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO ISZERO DUP1 PUSH2 0xD2F JUMPI POP DUP1 JUMPDEST PUSH2 0xD65 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x53AC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH2 0xE3D JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND OR SWAP1 SSTORE JUMPDEST POP POP POP JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND CALLER EQ DUP1 ISZERO SWAP1 PUSH2 0xE7F JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ADDRESS EQ ISZERO JUMPDEST ISZERO PUSH2 0xF4F JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 PUSH2 0xEE1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x56DF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xF4D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5562 JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 DUP6 DUP6 DUP3 DUP2 PUSH2 0xF5B JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xF70 SWAP2 SWAP1 PUSH2 0x46DB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xFBE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5488 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1182 JUMPI PUSH1 0x0 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0xFD9 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xFEE SWAP2 SWAP1 PUSH2 0x46DB JUMP JUMPDEST SWAP1 POP PUSH2 0x1091 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xFFF JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x6 PUSH1 0x0 DUP15 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x407B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP14 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SSTORE PUSH2 0x10E9 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x10D3 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP6 PUSH2 0x407B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP4 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x6EABE333476233FD382224F233210CB808A7BC4C4DE64F9D76628BF63C677B1A DUP11 DUP11 DUP8 DUP2 DUP2 LT PUSH2 0x115D JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x40 MLOAD PUSH2 0x1171 SWAP2 SWAP1 PUSH2 0x51A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 ADD PUSH2 0xFC3 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP13 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0x11C0 SWAP1 DUP4 PUSH2 0x403E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP10 DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP12 SWAP1 SWAP13 AND DUP3 MSTORE SWAP10 SWAP1 SWAP10 MSTORE SWAP9 SWAP1 SWAP8 KECCAK256 SWAP8 SWAP1 SWAP8 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH2 0x1268 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5673 JUMP JUMPDEST PUSH1 0x60 DUP6 SWAP1 SHL DUP3 ISZERO PUSH2 0x12F1 JUMPI PUSH1 0x0 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x1285 SWAP3 SWAP2 SWAP1 PUSH2 0x4EA2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP PUSH1 0x40 MLOAD PUSH32 0x3D602D80600A3D3981F3363D3D373D3D3D363D73000000000000000000000000 DUP2 MSTORE DUP3 PUSH1 0x14 DUP3 ADD MSTORE PUSH32 0x5AF43D82803E903D91602B57FD5BF30000000000000000000000000000000000 PUSH1 0x28 DUP3 ADD MSTORE DUP2 PUSH1 0x37 DUP3 PUSH1 0x0 CREATE2 SWAP4 POP POP POP PUSH2 0x134D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x3D602D80600A3D3981F3363D3D373D3D3D363D73000000000000000000000000 DUP2 MSTORE DUP2 PUSH1 0x14 DUP3 ADD MSTORE PUSH32 0x5AF43D82803E903D91602B57FD5BF30000000000000000000000000000000000 PUSH1 0x28 DUP3 ADD MSTORE PUSH1 0x37 DUP2 PUSH1 0x0 CREATE SWAP3 POP POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP4 DUP11 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH32 0x4DDF47D400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH4 0x4DDF47D4 SWAP1 CALLVALUE SWAP1 PUSH2 0x13E0 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x523B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x140D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xD62166F3C2149208E51788B1401CC356BF5DA1FC6C7886A32E18570F57D88B3B DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1471 SWAP3 SWAP2 SWAP1 PUSH2 0x523B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 CHAINID PUSH32 0x0 DUP2 EQ PUSH2 0x14E2 JUMPI PUSH2 0x14DD DUP2 PUSH2 0x4223 JUMP JUMPDEST PUSH2 0x1504 JUMP JUMPDEST PUSH32 0x0 JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x155B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x552D JUMP JUMPDEST PUSH1 0x5F DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0x15A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x585E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF AND PUSH9 0x10000000000000000 PUSH8 0xFFFFFFFFFFFFFFFF DUP7 AND MUL OR SWAP1 SSTORE MLOAD PUSH32 0x7543AF99B5602C06E62DA0631B5308489A5FF859150105A623B6EB15E8DEAE0B SWAP1 PUSH2 0x1632 SWAP1 DUP5 SWAP1 PUSH2 0x5919 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP2 EQ PUSH2 0x1690 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5599 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND SWAP2 PUSH17 0x100000000000000000000000000000000 SWAP1 DIV AND DUP3 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD DUP1 DUP4 ADD SWAP1 SWAP3 MSTORE SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH17 0x100000000000000000000000000000000 SWAP1 SWAP2 DIV AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x17F7 SWAP1 DUP5 DUP5 PUSH2 0x3EB7 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1807 PUSH2 0x45F6 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP2 ADD DUP4 MSTORE SWAP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH9 0x10000000000000000 DUP3 DIV AND DUP3 DUP6 ADD MSTORE PUSH17 0x100000000000000000000000000000000 SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 DUP4 ADD SWAP1 DUP2 MSTORE SWAP5 DUP5 MSTORE PUSH1 0x8 SWAP1 SWAP3 MSTORE DUP1 DUP4 KECCAK256 SLOAD SWAP4 MLOAD SWAP1 MLOAD PUSH32 0x18FCCC7600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 SWAP5 SWAP4 SWAP1 SWAP4 AND SWAP3 DUP4 SWAP2 PUSH4 0x18FCCC76 SWAP2 PUSH2 0x18D6 SWAP2 CALLER SWAP1 PUSH1 0x4 ADD PUSH2 0x58B0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1904 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1928 SWAP2 SWAP1 PUSH2 0x4CE7 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO DUP1 ISZERO PUSH2 0x1936 JUMPI POP DUP5 ISZERO JUMPDEST ISZERO PUSH2 0x1943 JUMPI POP POP POP PUSH2 0xE3D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP3 SGT ISZERO PUSH2 0x1A3D JUMPI DUP2 PUSH2 0x198E DUP3 DUP3 PUSH2 0x407B JUMP JUMPDEST SWAP2 POP PUSH2 0x1999 DUP3 PUSH2 0x3E0F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH32 0x911C9F20A03EDABCBCBD18DCA1174CCE47A91B234CED7A5A3C60BA0D5B56C5D2 SWAP1 PUSH2 0x1A2F SWAP1 DUP5 SWAP1 PUSH2 0x51A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH2 0x1B58 JUMP JUMPDEST PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0x1B58 JUMPI PUSH1 0x0 DUP3 SWAP1 SUB PUSH2 0x1A55 DUP3 DUP3 PUSH2 0x403E JUMP JUMPDEST SWAP2 POP PUSH2 0x1A60 DUP3 PUSH2 0x3E0F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x1AED PUSH2 0x1AD0 DUP3 PUSH2 0x3E0F JUMP JUMPDEST PUSH1 0x40 DUP8 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x429A JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP1 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP1 PUSH32 0x8F1F26EB9B6AA8689DBDD519EAD1999D9C8819D4738E403B2003B18197D9CF97 SWAP1 PUSH2 0x1B4E SWAP1 DUP5 SWAP1 PUSH2 0x51A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMPDEST DUP6 ISZERO PUSH2 0x1EDC JUMPI PUSH1 0x0 PUSH1 0x64 PUSH2 0x1B83 DUP7 PUSH1 0x20 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP5 PUSH2 0x42EC SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 PUSH2 0x1B8A JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 DUP6 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0x1D29 JUMPI PUSH1 0x0 PUSH2 0x1BD6 DUP7 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH2 0x403E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP7 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1BE6 JUMPI POP DUP7 DUP2 GT JUMPDEST ISZERO PUSH2 0x1BEE JUMPI POP DUP6 JUMPDEST PUSH2 0x1C0F PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND DUP7 DUP4 PUSH2 0x433D JUMP JUMPDEST PUSH2 0x1C38 PUSH2 0x1C1B DUP3 PUSH2 0x3E0F JUMP JUMPDEST PUSH1 0x40 DUP9 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x3E5F JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP1 DUP9 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH32 0x6939AAF500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP1 PUSH4 0x6939AAF5 SWAP1 PUSH2 0x1CA3 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x51A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1CBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1CD1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xB18E7E4F6EAC147A63A3BB6BEB2D9039C88698623AFF3EFC4FEBBC20B0164EE5 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1D1B SWAP2 SWAP1 PUSH2 0x51A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH2 0x1EDA JUMP JUMPDEST DUP1 DUP6 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0x1EDA JUMPI PUSH1 0x0 PUSH2 0x1D72 PUSH2 0x1D55 DUP4 PUSH2 0x3E0F JUMP JUMPDEST PUSH1 0x40 DUP9 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x429A JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP7 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1D94 JUMPI POP DUP7 DUP2 GT JUMPDEST ISZERO PUSH2 0x1D9C JUMPI POP DUP6 JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x1DF1 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x51A2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1E0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1E1F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E43 SWAP2 SWAP1 PUSH2 0x4CE7 JUMP JUMPDEST SWAP1 POP PUSH2 0x1E6E PUSH2 0x1E51 DUP3 PUSH2 0x3E0F JUMP JUMPDEST PUSH1 0x40 DUP10 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x429A JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP1 DUP10 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP12 AND SWAP1 PUSH32 0x39AA22060F8DD4D291720311FEEDF3B72FEF47C06C66CCF5C22B502C62E7550A SWAP1 PUSH2 0x1ECF SWAP1 DUP5 SWAP1 PUSH2 0x51A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMPDEST POP JUMPDEST POP POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP4 MLOAD DUP2 SLOAD SWAP3 DUP6 ADD MLOAD SWAP4 SWAP1 SWAP5 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH17 0x100000000000000000000000000000000 MUL PUSH8 0xFFFFFFFFFFFFFFFF SWAP5 DUP6 AND PUSH9 0x10000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF SWAP6 SWAP1 SWAP7 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP4 SWAP1 SWAP4 AND SWAP4 SWAP1 SWAP4 OR SWAP2 SWAP1 SWAP2 AND OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x2005 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x552D JUMP JUMPDEST PUSH2 0x200D PUSH2 0x45F6 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP2 ADD DUP4 MSTORE SWAP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH9 0x10000000000000000 DUP3 DIV DUP2 AND DUP4 DUP7 ADD MSTORE PUSH17 0x100000000000000000000000000000000 SWAP1 SWAP2 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 DUP5 ADD MSTORE SWAP5 DUP5 MSTORE PUSH1 0x9 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD DUP2 MLOAD SWAP2 SWAP4 AND SWAP2 AND ISZERO DUP1 PUSH2 0x20D7 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x218F JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 DUP6 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x2138 TIMESTAMP PUSH2 0x44A5 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND DUP3 MSTORE PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND SWAP2 SWAP1 DUP7 AND SWAP1 PUSH32 0x6F7CCDF3F86039E5A1DCF6028BF7B4773CBF7A234716BA2E5392B12BB0F8558F SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH2 0x24DF JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x21B4 JUMPI POP DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND TIMESTAMP LT ISZERO JUMPDEST PUSH2 0x21EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x54F6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND ISZERO PUSH2 0x2443 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD DUP6 DUP3 ADD MLOAD SWAP2 MLOAD PUSH32 0x7F8661A100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP3 SWAP4 AND SWAP2 PUSH4 0x7F8661A1 SWAP2 PUSH2 0x227E SWAP2 PUSH1 0x4 ADD PUSH2 0x5893 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2298 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x22AC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x22D0 SWAP2 SWAP1 PUSH2 0x4CE7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SGT ISZERO PUSH2 0x2361 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 PUSH2 0x230C SWAP1 DUP3 PUSH2 0x44E9 JUMP JUMPDEST POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x911C9F20A03EDABCBCBD18DCA1174CCE47A91B234CED7A5A3C60BA0D5B56C5D2 DUP3 PUSH1 0x40 MLOAD PUSH2 0x2353 SWAP2 SWAP1 PUSH2 0x51A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH2 0x23EF JUMP JUMPDEST PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x23EF JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 PUSH2 0x239E SWAP1 DUP3 PUSH2 0x4557 JUMP JUMPDEST POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8F1F26EB9B6AA8689DBDD519EAD1999D9C8819D4738E403B2003B18197D9CF97 DUP3 PUSH1 0x40 MLOAD PUSH2 0x23E5 SWAP2 SWAP1 PUSH2 0x51A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x39AA22060F8DD4D291720311FEEDF3B72FEF47C06C66CCF5C22B502C62E7550A DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x2439 SWAP2 SWAP1 PUSH2 0x5893 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 DUP9 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE DUP4 DUP9 MSTORE DUP8 DUP3 ADD DUP5 SWAP1 MSTORE DUP5 DUP5 MSTORE PUSH1 0x9 SWAP1 SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND SWAP1 SWAP2 SSTORE MLOAD SWAP3 DUP7 AND SWAP3 PUSH32 0x3E6352A885ADC4CC54767592939C3B1BBD65685658C3BEAABA66A888120E217 SWAP2 SWAP1 LOG3 JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP5 MLOAD DUP2 SLOAD SWAP3 DUP7 ADD MLOAD SWAP4 SWAP1 SWAP6 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000 SWAP1 SWAP3 AND PUSH8 0xFFFFFFFFFFFFFFFF SWAP6 DUP7 AND OR PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF AND PUSH9 0x10000000000000000 SWAP6 SWAP1 SWAP4 AND SWAP5 SWAP1 SWAP5 MUL SWAP2 SWAP1 SWAP2 OR PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH17 0x100000000000000000000000000000000 SWAP2 SWAP1 SWAP3 AND MUL OR SWAP1 SWAP2 SSTORE POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x2604 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x552D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x2651 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x52D0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP5 ISZERO ISZERO OR SWAP1 SSTORE MLOAD PUSH32 0x31A1E0EAC44B54AC6C2A2EFA87E92C83405FFCF33FCEEF02A7BCA695130E2600 SWAP1 PUSH2 0x1632 SWAP1 DUP5 SWAP1 PUSH2 0x5197 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xD505ACCF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP1 PUSH4 0xD505ACCF SWAP1 PUSH2 0x272E SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x5089 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2748 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x275C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND CALLER EQ DUP1 ISZERO SWAP1 PUSH2 0x27F8 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ADDRESS EQ ISZERO JUMPDEST ISZERO PUSH2 0x28C8 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 PUSH2 0x285A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x56DF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x28C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5562 JUMP JUMPDEST POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH2 0x2915 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x54BF JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND ISZERO PUSH2 0x2939 JUMPI DUP9 PUSH2 0x295B JUMP JUMPDEST PUSH32 0x0 JUMPDEST SWAP1 POP PUSH2 0x2965 PUSH2 0x45DF JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND DUP5 MSTORE PUSH17 0x100000000000000000000000000000000 SWAP1 SWAP2 DIV AND SWAP1 DUP3 ADD MSTORE DUP6 PUSH2 0x29E0 JUMPI PUSH2 0x29D9 DUP2 DUP9 PUSH1 0x1 PUSH2 0x3D51 JUMP JUMPDEST SWAP6 POP PUSH2 0x29EF JUMP JUMPDEST PUSH2 0x29EC DUP2 DUP8 PUSH1 0x0 PUSH2 0x3EB7 JUMP JUMPDEST SWAP7 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP14 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0x2A2C SWAP1 DUP8 PUSH2 0x403E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP15 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SSTORE PUSH2 0x2A85 PUSH2 0x2A6B DUP9 PUSH2 0x3E0F JUMP JUMPDEST DUP3 MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x429A JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH2 0x2AC2 PUSH2 0x2AA5 DUP8 PUSH2 0x3E0F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x429A JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x3E8 GT ISZERO DUP1 PUSH2 0x2AFF JUMPI POP PUSH1 0x20 DUP2 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO JUMPDEST PUSH2 0x2B35 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5375 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP4 MLOAD DUP2 SLOAD SWAP3 DUP6 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND OR DUP2 AND PUSH17 0x100000000000000000000000000000000 SWAP2 SWAP1 SWAP4 AND MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP11 AND PUSH2 0x2D11 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x2C36 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x51A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2C64 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH1 0x40 MLOAD PUSH2 0x2C8E SWAP1 PUSH2 0x4EF5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2CCB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2CD0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x2D0B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x57F0 JUMP JUMPDEST POP PUSH2 0x2D32 JUMP JUMPDEST PUSH2 0x2D32 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND DUP10 DUP10 PUSH2 0x433D JUMP JUMPDEST DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xAD9AB9EE6953D4D177F4A03B3A3AC3178FFCB9816319F348060194AA76B14486 DUP11 DUP11 PUSH1 0x40 MLOAD PUSH2 0xC9B SWAP3 SWAP2 SWAP1 PUSH2 0x590B JUMP JUMPDEST PUSH2 0x2DB0 PUSH2 0x45DF JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP1 DUP3 AND PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 SWAP1 SWAP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 SWAP1 SWAP5 MSTORE PUSH1 0x40 SWAP1 SWAP4 KECCAK256 SWAP1 MLOAD DUP2 SLOAD SWAP4 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP5 AND SWAP1 DUP4 AND OR DUP3 AND PUSH17 0x100000000000000000000000000000000 SWAP4 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP3 MUL OR SWAP1 SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND DUP5 OR SWAP1 SSTORE MLOAD PUSH32 0xDFB44FFABF0D3A8F650D3CE43EFF98F6D050E7EA1A396D5794F014E7DADABACB SWAP2 SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH2 0x2F1C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x56A8 JUMP JUMPDEST DUP2 ISZERO DUP1 ISZERO PUSH2 0x2F28 JUMPI POP DUP1 ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x2F35 JUMPI POP PUSH1 0xFF DUP4 AND ISZERO JUMPDEST ISZERO PUSH2 0x304C JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND CALLER EQ PUSH2 0x2F89 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5307 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND ISZERO PUSH2 0x2FE8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5605 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x3047 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x57B9 JUMP JUMPDEST PUSH2 0x3289 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH2 0x3099 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x574B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x30D9 PUSH2 0x14AA JUMP JUMPDEST PUSH32 0x1962BC9F5484CB7A998701B81090E966EE1FCE5771AF884CCEEE7C081B14ADE2 DUP8 PUSH2 0x3125 JUMPI PUSH32 0xB426802F1F7DC850A7B6B38805EDEA2442F3992878A9AB985ABFE8091D95D0B1 PUSH2 0x3147 JUMP JUMPDEST PUSH32 0x422AC5323FE049241DEE67716229A1CC1BC7B313B23DFE3EF6D42AB177A3B284 JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE SWAP2 MLOAD PUSH2 0x318E SWAP5 SWAP4 SWAP3 DUP15 SWAP3 DUP15 SWAP3 DUP15 SWAP3 SWAP2 ADD PUSH2 0x51AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x31B6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4ECE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP3 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x31F3 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x521D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3215 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3286 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x563C JUMP JUMPDEST POP POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP12 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP9 ISZERO ISZERO OR SWAP1 SSTORE MLOAD PUSH32 0x5F6EBB64BA012A851C6F014E6CAD458DDF213D1512049B31CD06365C2B059257 SWAP1 PUSH2 0x3318 SWAP1 DUP9 SWAP1 PUSH2 0x5197 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x3342 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x336C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x3386 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x33BA JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x33A5 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x34CB JUMPI PUSH1 0x0 PUSH1 0x60 ADDRESS DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x33D9 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x33EB SWAP2 SWAP1 PUSH2 0x5964 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x33F9 SWAP3 SWAP2 SWAP1 PUSH2 0x4EA2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3434 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3439 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 PUSH2 0x3448 JUMPI POP DUP6 ISZERO JUMPDEST PUSH2 0x3451 DUP3 PUSH2 0x457F JUMP JUMPDEST SWAP1 PUSH2 0x3489 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP2 SWAP1 PUSH2 0x524F JUMP JUMPDEST POP DUP2 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3497 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 ISZERO ISZERO SWAP1 DUP2 ISZERO ISZERO DUP2 MSTORE POP POP DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x34B6 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x33C0 JUMP JUMPDEST POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD DUP1 DUP4 ADD SWAP1 SWAP3 MSTORE SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH17 0x100000000000000000000000000000000 SWAP1 SWAP2 DIV AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x17F7 SWAP1 DUP5 DUP5 PUSH2 0x3D51 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 AND SWAP2 PUSH9 0x10000000000000000 DUP2 DIV SWAP1 SWAP2 AND SWAP1 PUSH17 0x100000000000000000000000000000000 SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x186A0 PUSH2 0x35C5 DUP6 PUSH1 0x32 PUSH2 0x42EC JUMP JUMPDEST DUP2 PUSH2 0x35CC JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH2 0x35F0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP8 DUP7 PUSH2 0x433D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x23E30C8B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 PUSH4 0x23E30C8B SWAP1 PUSH2 0x364C SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP8 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x5006 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3666 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x367A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x36C7 PUSH2 0x368A DUP3 PUSH2 0x3E0F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x44E9 JUMP JUMPDEST PUSH2 0x36D0 DUP7 PUSH2 0x3F5A JUMP JUMPDEST LT ISZERO PUSH2 0x3708 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5782 JUMP JUMPDEST DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x3BE9B85936D5D30A1655EA116A17EE3D827B2CD428CC026CE5BF2AC46A223204 DUP8 DUP6 PUSH1 0x40 MLOAD PUSH2 0x377E SWAP3 SWAP2 SWAP1 PUSH2 0x590B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND CALLER EQ DUP1 ISZERO SWAP1 PUSH2 0x37CC JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ADDRESS EQ ISZERO JUMPDEST ISZERO PUSH2 0x389C JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 PUSH2 0x382E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x56DF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x389A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5562 JUMP JUMPDEST POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x38E9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x54BF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0x3926 SWAP1 DUP4 PUSH2 0x403E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x396F SWAP1 DUP4 PUSH2 0x407B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP7 AND DUP1 DUP6 MSTORE SWAP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE MLOAD SWAP2 DUP8 AND SWAP2 PUSH32 0x6EABE333476233FD382224F233210CB808A7BC4C4DE64F9D76628BF63C677B1A SWAP1 PUSH2 0x39DA SWAP1 DUP8 SWAP1 PUSH2 0x51A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x3A02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3A2C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP6 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3B08 JUMPI PUSH1 0x0 DUP8 DUP8 DUP4 DUP2 DUP2 LT PUSH2 0x3A49 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP PUSH3 0x186A0 PUSH2 0x3A6A PUSH1 0x32 DUP4 PUSH2 0x42EC SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 PUSH2 0x3A71 JUMPI INVALID JUMPDEST DIV DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3A7E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x3AFF DUP13 DUP13 DUP5 DUP2 DUP2 LT PUSH2 0x3A99 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x3AAE SWAP2 SWAP1 PUSH2 0x46DB JUMP JUMPDEST DUP10 DUP10 DUP6 DUP2 DUP2 LT PUSH2 0x3ABA JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP13 DUP13 DUP7 DUP2 DUP2 LT PUSH2 0x3ACD JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x3AE2 SWAP2 SWAP1 PUSH2 0x46DB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0x433D JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x3A33 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0xD9D1762300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP13 AND SWAP1 PUSH4 0xD9D17623 SWAP1 PUSH2 0x3B69 SWAP1 CALLER SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP11 SWAP1 DUP14 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x4F19 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3B83 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3B97 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x275C JUMPI PUSH1 0x0 DUP10 DUP10 DUP4 DUP2 DUP2 LT PUSH2 0x3BB4 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x3BC9 SWAP2 SWAP1 PUSH2 0x46DB JUMP JUMPDEST SWAP1 POP PUSH2 0x3C27 PUSH2 0x3BEA DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3BDD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3E0F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x44E9 JUMP JUMPDEST PUSH2 0x3C30 DUP3 PUSH2 0x3F5A JUMP JUMPDEST LT ISZERO PUSH2 0x3C68 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5782 JUMP JUMPDEST DUP12 DUP12 DUP4 DUP2 DUP2 LT PUSH2 0x3C74 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x3C89 SWAP2 SWAP1 PUSH2 0x46DB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP15 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x3BE9B85936D5D30A1655EA116A17EE3D827B2CD428CC026CE5BF2AC46A223204 DUP12 DUP12 DUP8 DUP2 DUP2 LT PUSH2 0x3CFA JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x3D0D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x3D23 SWAP3 SWAP2 SWAP1 PUSH2 0x590B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 ADD PUSH2 0x3B9E JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x0 SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3D73 JUMPI POP DUP2 PUSH2 0x3E08 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND SWAP2 PUSH2 0x3D9B SWAP2 DUP7 SWAP2 AND PUSH2 0x42EC JUMP JUMPDEST DUP2 PUSH2 0x3DA2 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP2 DUP1 ISZERO PUSH2 0x3DF8 JUMPI POP DUP3 DUP5 PUSH1 0x20 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3DEE DUP7 PUSH1 0x0 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH2 0x42EC SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 PUSH2 0x3DF5 JUMPI INVALID JUMPDEST DIV LT JUMPDEST ISZERO PUSH2 0x3E08 JUMPI PUSH2 0x17F7 DUP2 PUSH1 0x1 PUSH2 0x407B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3E5B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x541A JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND SWAP1 DUP3 AND LT ISZERO PUSH2 0x3EB1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5451 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x20 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 EQ ISZERO PUSH2 0x3EDF JUMPI POP DUP2 PUSH2 0x3E08 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD DUP5 MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND SWAP2 PUSH2 0x3F07 SWAP2 DUP7 SWAP2 AND PUSH2 0x42EC JUMP JUMPDEST DUP2 PUSH2 0x3F0E JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP2 DUP1 ISZERO PUSH2 0x3DF8 JUMPI POP DUP3 DUP5 PUSH1 0x0 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3DEE DUP7 PUSH1 0x20 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH2 0x42EC SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD SWAP1 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 SWAP3 PUSH2 0x3EB1 SWAP3 PUSH17 0x100000000000000000000000000000000 SWAP1 SWAP3 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 PUSH4 0x70A08231 SWAP1 PUSH2 0x3FE8 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x4EF8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4000 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4014 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4038 SWAP2 SWAP1 PUSH2 0x4CE7 JUMP JUMPDEST SWAP1 PUSH2 0x407B JUMP JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 GT ISZERO PUSH2 0x3EB1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5262 JUMP JUMPDEST DUP2 DUP2 ADD DUP2 DUP2 LT ISZERO PUSH2 0x3EB1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5451 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x40F0 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5058 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x4179 SWAP2 SWAP1 PUSH2 0x4EB2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x41B6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x41BB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x41E5 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x41E5 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x41E5 SWAP2 SWAP1 PUSH2 0x48C2 JUMP JUMPDEST PUSH2 0x421B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5716 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8CAD95687BA82C2CE50E74F7B754645E5117C3A5BEC8151C0726D5857980A866 PUSH32 0xD7DF266AFF736D415A9DC14B4158201D612E70D75B9C7F4E375CCFD20AA5166F DUP4 ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x427C SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x51EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 SUB PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND SWAP1 DUP3 AND GT ISZERO PUSH2 0x3EB1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5262 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO DUP1 PUSH2 0x4307 JUMPI POP POP DUP1 DUP3 MUL DUP3 DUP3 DUP3 DUP2 PUSH2 0x4304 JUMPI INVALID JUMPDEST DIV EQ JUMPDEST PUSH2 0x3EB1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x5827 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4373 SWAP3 SWAP2 SWAP1 PUSH2 0x50D7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x43FC SWAP2 SWAP1 PUSH2 0x4EB2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x4439 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x443E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x4468 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x4468 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4468 SWAP2 SWAP1 PUSH2 0x48C2 JUMP JUMPDEST PUSH2 0x449E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x533E JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3E5B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A2 SWAP1 PUSH2 0x55CE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4511 PUSH2 0x44F7 DUP4 PUSH2 0x3E0F JUMP JUMPDEST DUP5 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x3E5F JUMP JUMPDEST DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND SWAP1 DUP2 OR SWAP1 SWAP4 SSTORE POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4511 PUSH2 0x4565 DUP4 PUSH2 0x3E0F JUMP JUMPDEST DUP5 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x429A JUMP JUMPDEST PUSH1 0x60 PUSH1 0x44 DUP3 MLOAD LT ISZERO PUSH2 0x45C5 JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH32 0x5472616E73616374696F6E2072657665727465642073696C656E746C79000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x4295 JUMP JUMPDEST PUSH1 0x4 DUP3 ADD SWAP2 POP DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3EB1 SWAP2 SWAP1 PUSH2 0x4CFF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x4627 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x463E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x4658 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x4670 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4687 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x4658 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x3EB1 DUP2 PUSH2 0x59F7 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x3EB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x3EB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x46EC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3E08 DUP2 PUSH2 0x59F7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4709 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4714 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x4724 DUP2 PUSH2 0x59F7 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x4747 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x4752 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x4762 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0x4772 DUP2 PUSH2 0x5A1C JUMP JUMPDEST SWAP4 POP PUSH2 0x4781 DUP9 PUSH1 0x60 DUP10 ADD PUSH2 0x46CA JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x47AD JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x47B8 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x4724 DUP2 PUSH2 0x5A1C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x47DC JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x47E7 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x47F7 DUP2 PUSH2 0x5A1C JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x4807 DUP2 PUSH2 0x5A1C JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x4827 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x4832 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x484D JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x4859 DUP8 DUP3 DUP9 ADD PUSH2 0x465F JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x486D DUP2 PUSH2 0x5A1C JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x488C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x48A2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x48AE DUP7 DUP3 DUP8 ADD PUSH2 0x4616 JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x4807 DUP2 PUSH2 0x5A1C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x48D3 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x3E08 DUP2 PUSH2 0x5A1C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP11 DUP13 SUB SLT ISZERO PUSH2 0x48FB JUMPI DUP7 DUP8 REVERT JUMPDEST DUP10 CALLDATALOAD PUSH2 0x4906 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP9 POP PUSH1 0x20 DUP11 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4922 JUMPI DUP9 DUP10 REVERT JUMPDEST PUSH2 0x492E DUP14 DUP4 DUP15 ADD PUSH2 0x4616 JUMP JUMPDEST SWAP1 SWAP11 POP SWAP9 POP PUSH1 0x40 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4946 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4952 DUP14 DUP4 DUP15 ADD PUSH2 0x4616 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x496A JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4976 DUP14 DUP4 DUP15 ADD PUSH2 0x4616 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x498E JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x499B DUP13 DUP3 DUP14 ADD PUSH2 0x465F JUMP JUMPDEST SWAP2 POP DUP1 SWAP4 POP POP DUP1 SWAP2 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4709 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x49D9 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x49E4 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x49F4 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x4A04 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x4A2B JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x4A36 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x4A46 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x4A56 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x4A8A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0x4A95 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH2 0x4AA5 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH2 0x4AB5 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD SWAP4 POP PUSH2 0x4AD2 DUP11 PUSH1 0xA0 DUP12 ADD PUSH2 0x46CA JUMP JUMPDEST SWAP3 POP PUSH1 0xC0 DUP10 ADD CALLDATALOAD SWAP2 POP PUSH1 0xE0 DUP10 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x4B07 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x4B12 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x4B22 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4B3E JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x4B4A DUP11 DUP4 DUP12 ADD PUSH2 0x4616 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4B62 JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x4B6F DUP10 DUP3 DUP11 ADD PUSH2 0x4616 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4B95 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x4BA0 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x4BB0 DUP2 PUSH2 0x5A1C JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4BD5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x4BE0 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP3 POP PUSH2 0x4BEF DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x46AA JUMP JUMPDEST SWAP2 POP PUSH2 0x4BFE DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x46AA JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4C1B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x4C26 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x4807 DUP2 PUSH2 0x5A1C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4C4F JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4C5A DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4724 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x4C8E JUMPI DUP4 DUP5 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x4C99 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x4CA9 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0x4CB9 DUP2 PUSH2 0x59F7 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4CDB JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x4B6F DUP10 DUP3 DUP11 ADD PUSH2 0x465F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4CF8 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4D10 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4D27 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4D3A JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x4D48 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND DUP3 ADD ADD DUP2 DUP2 LT DUP5 DUP3 GT OR ISZERO PUSH2 0x4D86 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH1 0x40 MSTORE DUP2 DUP2 MSTORE DUP4 DUP3 ADD PUSH1 0x20 ADD DUP8 LT ISZERO PUSH2 0x4D9D JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4DAE DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x59C7 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4E05 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4DE9 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MSTORE DUP3 DUP3 PUSH1 0x20 DUP7 ADD CALLDATACOPY DUP1 PUSH1 0x20 DUP5 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP6 ADD AND DUP6 ADD ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x4E70 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x59C7 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x4EC4 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x59C7 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 MLOAD PUSH2 0x4EE0 DUP2 DUP5 PUSH1 0x20 DUP10 ADD PUSH2 0x59C7 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 DUP4 MSTORE POP PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP2 SWAP1 POP JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP12 AND DUP4 MSTORE PUSH1 0x20 PUSH1 0xA0 DUP2 DUP6 ADD MSTORE DUP2 PUSH2 0x4F4B DUP12 DUP5 PUSH2 0x51A2 JUMP JUMPDEST SWAP1 POP DUP12 SWAP3 POP DUP4 JUMPDEST DUP12 DUP2 LT ISZERO PUSH2 0x4F7D JUMPI DUP3 DUP5 ADD PUSH2 0x4F70 DUP4 PUSH2 0x4F6B DUP4 DUP9 PUSH2 0x469F JUMP JUMPDEST PUSH2 0x4DB8 JUMP JUMPDEST SWAP1 SWAP5 POP SWAP2 POP PUSH1 0x1 ADD PUSH2 0x4F52 JUMP JUMPDEST POP DUP5 DUP2 SUB PUSH1 0x40 DUP7 ADD MSTORE DUP9 DUP2 MSTORE PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 GT ISZERO PUSH2 0x4FB5 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP10 MUL SWAP3 POP DUP3 DUP11 DUP4 DUP4 ADD CALLDATACOPY DUP3 DUP2 ADD SWAP3 POP POP DUP1 DUP3 ADD DUP4 DUP2 MSTORE DUP2 DUP6 DUP5 SUB ADD PUSH1 0x60 DUP7 ADD MSTORE PUSH2 0x4FE0 DUP2 DUP10 PUSH2 0x4DD6 JUMP JUMPDEST SWAP3 POP POP POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x4FF7 DUP2 DUP6 DUP8 PUSH2 0x4E10 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP10 AND DUP4 MSTORE DUP1 DUP9 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP6 PUSH1 0x40 DUP4 ADD MSTORE DUP5 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x504C PUSH1 0xA0 DUP4 ADD DUP5 DUP7 PUSH2 0x4E10 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP8 DUP9 AND DUP2 MSTORE SWAP6 SWAP1 SWAP7 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xFF AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP4 MLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x20 SWAP1 PUSH1 0x60 DUP5 ADD SWAP1 DUP3 DUP8 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x5138 JUMPI DUP2 MLOAD ISZERO ISZERO DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x511A JUMP JUMPDEST POP POP POP DUP4 DUP2 SUB DUP3 DUP6 ADD MSTORE DUP1 DUP6 MLOAD PUSH2 0x514F DUP2 DUP5 PUSH2 0x51A2 JUMP JUMPDEST SWAP2 POP DUP2 SWAP3 POP DUP4 DUP2 MUL DUP3 ADD DUP5 DUP9 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5188 JUMPI DUP6 DUP4 SUB DUP6 MSTORE PUSH2 0x5176 DUP4 DUP4 MLOAD PUSH2 0x4E58 JUMP JUMPDEST SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x515E JUMP JUMPDEST POP SWAP1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x40 DUP7 ADD MSTORE SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x17F7 PUSH1 0x20 DUP4 ADD DUP5 DUP7 PUSH2 0x4E10 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x3E08 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x4E58 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x426F72696E674D6174683A20556E646572666C6F770000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x42656E746F426F783A20536B696D20746F6F206D756368000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A2043616E6E6F7420617070726F7665203000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A2075736572206E6F742073656E6465720000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x426F72696E6745524332303A205472616E73666572206661696C656400000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH32 0x42656E746F426F783A2063616E6E6F7420656D70747900000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A207A65726F20616464726573730000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x42656E746F426F783A204E6F20746F6B656E7300000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x426F72696E674D6174683A2075696E74313238204F766572666C6F7700000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x426F72696E674D6174683A20416464204F766572666C6F770000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x42656E746F426F783A20746F5B305D206E6F7420736574000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x42656E746F426F783A20746F206E6F7420736574000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x53747261746567794D616E616765723A20546F6F206561726C79000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x42656E746F426F783A205472616E73666572206E6F7420617070726F76656400 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C657220213D2070656E64696E67206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x426F72696E674D6174683A2075696E743634204F766572666C6F770000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x19 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A207573657220697320636C6F6E6500000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A20496E76616C6964205369676E6174757265000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x426F72696E67466163746F72793A204E6F206D6173746572436F6E7472616374 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A206D617374657243206E6F74207365740000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x42656E746F426F783A206E6F206D6173746572436F6E74726163740000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x426F72696E6745524332303A205472616E7366657246726F6D206661696C6564 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A20557365722063616E6E6F74206265203000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH32 0x42656E746F426F783A2057726F6E6720616D6F756E7400000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A206E6F742077686974656C69737465640000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x42656E746F426F783A20455448207472616E73666572206661696C6564000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x426F72696E674D6174683A204D756C204F766572666C6F770000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x53747261746567794D616E616765723A2054617267657420746F6F2068696768 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x5998 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x59B2 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x4658 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x59E2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x59CA JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x59F1 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5A19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x5A19 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B 0xEB POP CALLER 0xD9 LOG2 SWAP6 0xC0 SGT 0xB2 DUP10 BYTE PUSH30 0xDE817C398025FE49E7DFC3BEA112EC69BECC2864736F6C634300060C0033 ","sourceMap":"27784:23362:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;34055:2830;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;14182:489;;;;;;;;;;-1:-1:-1;14182:489:0;;;;;:::i;:::-;;:::i;:::-;;40794:723;;;;;;;;;;-1:-1:-1;40794:723:0;;;;;:::i;:::-;;:::i;18910:58::-;;;;;;;;;;-1:-1:-1;18910:58:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;16611:1670::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;30290:44::-;;;;;;;;;;-1:-1:-1;30290:44:0;;;;;:::i;:::-;;:::i;20243:262::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;44989:370::-;;;;;;;;;;-1:-1:-1;44989:370:0;;;;;:::i;:::-;;:::i;14750:330::-;;;;;;;;;;;;;:::i;30244:39::-;;;;;;;;;;-1:-1:-1;30244:39:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;30340:51::-;;;;;;;;;;-1:-1:-1;30340:51:0;;;;;:::i;:::-;;:::i;33320:195::-;;;;;;;;;;-1:-1:-1;33320:195:0;;;;;:::i;:::-;;:::i;48558:2421::-;;;;;;;;;;-1:-1:-1;48558:2421:0;;;;;:::i;:::-;;:::i;46160:1658::-;;;;;;;;;;-1:-1:-1;46160:1658:0;;;;;:::i;:::-;;:::i;20864:343::-;;;;;;;;;;-1:-1:-1;20864:343:0;;;;;:::i;:::-;;:::i;27063:269::-;;;;;;;;;;-1:-1:-1;27063:269:0;;;;;:::i;:::-;;:::i;19031:41::-;;;;;;;;;;-1:-1:-1;19031:41:0;;;;;:::i;:::-;;:::i;13346:20::-;;;;;;;;;;;;;:::i;18742:74::-;;;;;;;;;;-1:-1:-1;18742:74:0;;;;;:::i;:::-;;:::i;37277:2114::-;;;;;;;;;;-1:-1:-1;37277:2114:0;;;;;:::i;:::-;;:::i;30708:232::-;;;;;;;;;;-1:-1:-1;30708:232:0;;;;;:::i;:::-;;:::i;20635:139::-;;;;;;;;;;;;;:::i;16029:51::-;;;;;;;;;;-1:-1:-1;16029:51:0;;;;;:::i;:::-;;:::i;21964:2547::-;;;;;;;;;;-1:-1:-1;21964:2547:0;;;;;:::i;:::-;;:::i;26156:521::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;32833:191::-;;;;;;;;;;-1:-1:-1;32833:191:0;;;;;:::i;:::-;;:::i;30397:51::-;;;;;;;;;;-1:-1:-1;30397:51:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;13372:27::-;;;;;;;;;;;;;:::i;42269:550::-;;;;;;;;;;-1:-1:-1;42269:550:0;;;;;:::i;:::-;;:::i;39893:459::-;;;;;;;;;;-1:-1:-1;39893:459:0;;;;;:::i;:::-;;:::i;43714:932::-;;;;;;;;;;-1:-1:-1;43714:932:0;;;;;:::i;:::-;;:::i;30139:63::-;;;;;;;;;;-1:-1:-1;30139:63:0;;;;;:::i;:::-;;:::i;34055:2830::-;34228:17;;34213:4;31633:18;;;31641:10;31633:18;;;;:43;;-1:-1:-1;31655:21:0;;;31671:4;31655:21;;31633:43;31629:361;;;31784:10;31742:22;31767:28;;;:16;:28;;;;;;;;31817;31809:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;31899:38;;;;;;;;:22;:38;;;;;;;;:44;;;;;;;;;;;;31891:88;;;;;;;;;;;;:::i;:::-;31629:361;;34301:16:::1;::::0;::::1;34293:49;;;;;;;;;;;;:::i;:::-;34412:12;34427:22;::::0;::::1;::::0;:43:::1;;34464:6;34427:43;;;34452:9;34427:43;34412:58;;34480:19;;:::i;:::-;-1:-1:-1::0;34502:13:0::1;::::0;::::1;;::::0;;;:6:::1;:13;::::0;;;;;;;;34480:35;;;;::::1;::::0;;;;::::1;::::0;;::::1;::::0;;;;;;::::1;;::::0;;::::1;::::0;;;;34655:18;::::1;::::0;:45:::1;;;34699:1;34677:5;:17;;;:19;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:23;34655:45;34647:77;;;;;;;;;;;;:::i;:::-;34738:10:::0;34734:595:::1;;34862:27;:5:::0;34875:6;34883:5:::1;34862:12;:27::i;:::-;34854:35;;29953:4;35026:29;35041:13;:5;:11;:13::i;:::-;35026:10;::::0;::::1;::::0;:14:::1;;::::0;::::1;:29::i;:::-;:53;;;35022:105;;;35107:1;35110::::0;35099:13:::1;;;;;;;;35022:105;34734:595;;;35290:28;:5:::0;35306;35313:4:::1;35290:15;:28::i;:::-;35281:37;;34734:595;35643:21;::::0;::::1;35659:4;35643:21;;::::0;:47:::1;;-1:-1:-1::0;35668:22:0::1;::::0;::::1;::::0;35643:47:::1;:102;;;-1:-1:-1::0;35731:13:0;;35704:41:::1;::::0;::::1;;:22;35720:5:::0;35704:15:::1;:22::i;:::-;:26:::0;::::1;:41::i;:::-;35694:6;:51;;35643:102;35622:172;;;;;;;;;;;;:::i;:::-;35828:16;::::0;;::::1;;::::0;;;:9:::1;:16;::::0;;;;;;;:20;;::::1;::::0;;;;;;;:31:::1;::::0;35853:5;35828:24:::1;:31::i;:::-;35805:16;::::0;;::::1;;::::0;;;:9:::1;:16;::::0;;;;;;;:20;;::::1;::::0;;;;;;:54;35882:29:::1;35897:13;:5:::0;:11:::1;:13::i;:::-;35882:10;::::0;::::1;::::0;:14:::1;;::::0;::::1;:29::i;:::-;35869:42;;:10;::::0;::::1;:42:::0;35937:33:::1;35955:14;:6:::0;:12:::1;:14::i;:::-;35937:13:::0;;:17:::1;;::::0;::::1;:33::i;:::-;35921:49;::::0;;::::1;::::0;;35980:13:::1;::::0;;::::1;35921;35980::::0;;;:6:::1;:13;::::0;;;;;;;:21;;;;;;::::1;::::0;;::::1;::::0;::::1;::::0;;::::1;::::0;;;::::1;::::0;;;::::1;::::0;;::::1;;::::0;;;36112:22;::::1;36108:660;;36402:9;36388:33;;;36429:6;36388:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;36108:660;;;36459:21;::::0;::::1;36475:4;36459:21;36455:313;;36706:51;:22;::::0;::::1;36729:4:::0;36743::::1;36750:6:::0;36706:22:::1;:51::i;:::-;36806:2;36782:42;;36800:4;36782:42;;36793:5;36782:42;;;36810:6;36818:5;36782:42;;;;;;;:::i;:::-;;;;;;;;36846:6;36834:18;;36873:5;36862:16;;31999:1;;;34055:2830:::0;;;;;;;;;:::o;14182:489::-;15204:5;;;;15190:10;:19;15182:64;;;;;;;;;;;;:::i;:::-;14316:6:::1;14312:353;;;14368:22;::::0;::::1;::::0;::::1;::::0;:34:::1;;;14394:8;14368:34;14360:68;;;;;;;;;;;;:::i;:::-;14492:5;::::0;;14471:37:::1;::::0;::::1;::::0;;::::1;::::0;14492:5;::::1;::::0;14471:37:::1;::::0;::::1;14522:5;:16:::0;;::::1;::::0;::::1;::::0;;;::::1;;::::0;;;;14552:25;;;;::::1;::::0;;14312:353:::1;;;14631:12;:23:::0;;;::::1;;::::0;::::1;;::::0;;14312:353:::1;14182:489:::0;;;:::o;40794:723::-;40952:4;31633:18;;;31641:10;31633:18;;;;:43;;-1:-1:-1;31655:21:0;;;31671:4;31655:21;;31633:43;31629:361;;;31784:10;31742:22;31767:28;;;:16;:28;;;;;;;;31817;31809:68;;;;;;;;;;;;:::i;:::-;31899:38;;;;;;;;:22;:38;;;;;;;;:44;;;;;;;;;;;;31891:88;;;;;;;;;;;;:::i;:::-;31629:361;;41012:1:::1;40994:3:::0;;41012:1;40994:6;::::1;;;;;;;;;;;;;;;;;:::i;:::-;:20;;;;40986:56;;;;;;;;;;;;:::i;:::-;41112:19;41155:3:::0;41112:19;41175:262:::1;41199:3;41195:1;:7;41175:262;;;41223:10;41236:3;;41240:1;41236:6;;;;;;;;;;;;;;;;;;;;:::i;:::-;41223:19;;41279:35;41304:6;;41311:1;41304:9;;;;;;;;;;;;;41279;:16;41289:5;41279:16;;;;;;;;;;;;;;;:20;41296:2;41279:20;;;;;;;;;;;;;;;;:24;;:35;;;;:::i;:::-;41256:16;::::0;;::::1;;::::0;;;:9:::1;:16;::::0;;;;;;;:20;;::::1;::::0;;;;;;:58;41342:26:::1;41358:6:::0;;41365:1;41358:9;;::::1;;;;;;;;;;;41342:11;:15;;:26;;;;:::i;:::-;41328:40;;41412:2;41387:39;;41406:4;41387:39;;41399:5;41387:39;;;41416:6;;41423:1;41416:9;;;;;;;;;;;;;41387:39;;;;;;:::i;:::-;;;;;;;;-1:-1:-1::0;41204:3:0::1;;41175:262;;;-1:-1:-1::0;41471:16:0::1;::::0;;::::1;;::::0;;;:9:::1;:16;::::0;;;;;;;:22;;::::1;::::0;;;;;;;:39:::1;::::0;41498:11;41471:26:::1;:39::i;:::-;41446:16;::::0;;::::1;;::::0;;;:9:::1;:16;::::0;;;;;;;:22;;;::::1;::::0;;;;;;;;;;:64;;;;-1:-1:-1;;;;;;;40794:723:0:o;18910:58::-;;;;;;;;;;;;;;;:::o;16611:1670::-;16743:20;16783:28;;;16775:73;;;;;;;;;;;;:::i;:::-;16880:23;;;;16974:1114;;;;17115:12;17140:4;;17130:15;;;;;;;:::i;:::-;;;;;;;;17115:30;;17325:4;17319:11;17361:66;17354:5;17347:81;17470:11;17463:4;17456:5;17452:16;17445:37;17524:66;17517:4;17510:5;17506:16;17499:92;17648:4;17642;17635:5;17632:1;17624:29;17608:45;;;17288:379;;;;17743:4;17737:11;17779:66;17772:5;17765:81;17888:11;17881:4;17874:5;17870:16;17863:37;17942:66;17935:4;17928:5;17924:16;17917:92;18059:4;18052:5;18049:1;18042:22;18026:38;;;17706:372;18097:30;;;;;;;;:16;:30;;;;;;;:47;;;;;;;;;;;;;;18155:58;;;;;:34;;18197:9;;18155:58;;18208:4;;;;18155:58;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18261:12;18229:45;;18239:14;18229:45;;;18255:4;;18229:45;;;;;;;:::i;:::-;;;;;;;;16611:1670;;;;;;;:::o;30290:44::-;;;;;;;;;;;;;;;:::o;20243:262::-;20292:7;20370:9;20416:25;20405:36;;:93;;20464:34;20490:7;20464:25;:34::i;:::-;20405:93;;;20444:17;20405:93;20398:100;;;20243:262;:::o;44989:370::-;15204:5;;;;15190:10;:19;15182:64;;;;;;;;;;;;:::i;:::-;29889:2:::1;45119:17;:42;;;;45111:87;;;;;;;;;;;;:::i;:::-;45228:19;::::0;::::1;;::::0;;;:12:::1;:19;::::0;;;;;;:56;;;::::1;::::0;::::1;::::0;::::1;;;::::0;;45299:53;::::1;::::0;::::1;::::0;45228:56;;45299:53:::1;:::i;:::-;;;;;;;;44989:370:::0;;:::o;14750:330::-;14817:12;;;;14866:10;:27;;14858:72;;;;;;;;;;;;:::i;:::-;14986:5;;;14965:42;;;;;;;14986:5;;;14965:42;;;15017:5;:21;;;;;;;;;;;;;;15048:25;;;;;;;14750:330::o;30244:39::-;;;;;;;;;;;;;;;;;;;;;;:::o;30340:51::-;;;;;;;;;;;;;;;:::o;33320:195::-;33469:13;;;33434:14;33469:13;;;:6;:13;;;;;;;;:23;;;;;;;;;;;;;;;;;;;;;;;;;;;:39;;33493:5;33500:7;33469:23;:39::i;:::-;33460:48;33320:195;-1:-1:-1;;;;33320:195:0:o;48558:2421::-;48675:24;;:::i;:::-;-1:-1:-1;48702:19:0;;;;;;;;:12;:19;;;;;;;;48675:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;48753:15;;;48675:46;48753:15;;;;;;;48819:12;;48801:43;;;;;48675:46;;48753:15;;;;;;;48801:17;;:43;;48833:10;;48801:43;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;48778:66;-1:-1:-1;48858:18:0;;:30;;;;;48881:7;48880:8;48858:30;48854:67;;;48904:7;;;;;48854:67;48954:13;;;48931:20;48954:13;;;:6;:13;;;;;:21;;;;48990:17;;48986:769;;;49045:13;49088:21;:12;49045:13;49088:16;:21::i;:::-;49073:36;;49147:20;:12;:18;:20::i;:::-;49123:13;;;;;;;:6;:13;;;;;;;:44;;;;;;;;;;;;;;;;49186:29;;;;;;49211:3;;49186:29;:::i;:::-;;;;;;;;48986:769;;;;49252:1;49236:13;:17;49232:523;;;49495:11;49517:14;;;49561:21;:12;49517:14;49561:16;:21::i;:::-;49546:36;;49620:20;:12;:18;:20::i;:::-;49596:13;;;;;;;:6;:13;;;;;:44;;;;;;;;;;;;;;;49669:29;49686:11;:3;:9;:11::i;:::-;49669:12;;;;:16;;;;:29::i;:::-;49654:44;;:12;;;;:44;;;;49717:27;;;;;;;;;49740:3;;49717:27;:::i;:::-;;;;;;;;49232:523;;49769:7;49765:1171;;;49792:21;49858:3;49816:39;49833:4;:21;;;49816:39;;:12;:16;;:39;;;;:::i;:::-;:45;;;;;;49792:69;;49969:13;49954:4;:12;;;:28;;;49950:976;;;50002:17;50022:31;50040:4;:12;;;50022:31;;:13;:17;;:31;;;;:::i;:::-;50002:51;-1:-1:-1;50075:20:0;;;;;:51;;;50111:15;50099:9;:27;50075:51;50071:125;;;-1:-1:-1;50162:15:0;50071:125;50213:49;:18;;;50240:9;50252;50213:18;:49::i;:::-;50295:35;50312:17;:9;:15;:17::i;:::-;50295:12;;;;:16;;;;:35::i;:::-;50280:50;;:12;;;;:50;;;;50348:25;;;;:14;;;;;;:25;;50363:9;;50348:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;50414:5;50396:35;;;50421:9;50396:35;;;;;;:::i;:::-;;;;;;;;49950:976;;;;50471:13;50456:4;:12;;;:28;;;50452:474;;;50504:16;50523:39;50540:21;:13;:19;:21::i;:::-;50523:12;;;;:16;;;;:39::i;:::-;50504:58;;;-1:-1:-1;50584:20:0;;;;;:50;;;50619:15;50608:8;:26;50584:50;50580:123;;;-1:-1:-1;50669:15:0;50580:123;50746:28;;;;;50721:22;;50746:18;;;;;;:28;;50765:8;;50746:28;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;50721:53;;50808:40;50825:22;:14;:20;:22::i;:::-;50808:12;;;;:16;;;;:40::i;:::-;50793:55;;:12;;;;:55;;;;50871:40;;;;;;;;;50896:14;;50871:40;:::i;:::-;;;;;;;;50452:474;;;49765:1171;;-1:-1:-1;;;50946:19:0;;;;;;;:12;:19;;;;;;;;;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;48558:2421;;;:::o;46160:1658::-;15204:5;;;;15190:10;:19;15182:64;;;;;;;;;;;;:::i;:::-;46245:24:::1;;:::i;:::-;-1:-1:-1::0;46272:19:0::1;::::0;;::::1;;::::0;;;:12:::1;:19;::::0;;;;;;;46245:46;;::::1;::::0;::::1;::::0;;;;::::1;::::0;;::::1;::::0;;;;::::1;::::0;::::1;::::0;;::::1;::::0;;;;::::1;;;::::0;;;;46321:22;;;:15:::1;:22:::0;;;;;;;46357;;46245:46;;46321:22:::1;::::0;46357:27:::1;::::0;;:53:::1;;;46399:11;46388:22;;:7;:22;;;;46357:53;46353:1423;;;46426:22;::::0;;::::1;;::::0;;;:15:::1;:22;::::0;;;;:36;;;::::1;::::0;;::::1;::::0;;;::::1;::::0;;46641:41:::1;46642:15;46641:39;:41::i;:::-;46616:66;;::::0;;46701:37:::1;::::0;::::1;::::0;;::::1;::::0;;;::::1;::::0;::::1;::::0;46616:22:::1;::::0;46701:37:::1;46353:1423;;;46777:22:::0;;:27:::1;;::::0;;::::1;::::0;:72:::1;;-1:-1:-1::0;46827:22:0;;46808:41:::1;;:15;:41;;46777:72;46769:111;;;;;;;;;;;;:::i;:::-;46898:38;46906:15:::0;;::::1;46934:1;46906:15:::0;;;:8:::1;:15;::::0;;;;;::::1;46898:38:::0;46894:659:::1;;46979:15;::::0;;::::1;46956:20;46979:15:::0;;;:8:::1;:15;::::0;;;;;;47000:12;;::::1;::::0;46979:34;;;;;46956:20;;46979:15:::1;::::0;:20:::1;::::0;:34:::1;::::0;::::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;46956:57;;47078:1;47062:13;:17;47058:419;;;47161:13;::::0;::::1;47103:11;47161:13:::0;;;:6:::1;:13;::::0;;;;47125;;47161:29:::1;::::0;47125:13;47161:24:::1;:29::i;:::-;;47235:5;47217:29;;;47242:3;47217:29;;;;;;:::i;:::-;;;;;;;;47058:419;;;;47291:1;47275:13;:17;47271:206;;;47375:13;::::0;::::1;47316:11;47375:13:::0;;;:6:::1;:13;::::0;;;;47338:14;;;::::1;::::0;47375:29:::1;::::0;47338:14;47375:24:::1;:29::i;:::-;;47447:5;47431:27;;;47454:3;47431:27;;;;;;:::i;:::-;;;;;;;;47271:206;;47518:5;47500:38;;;47525:4;:12;;;47500:38;;;;;;:::i;:::-;;;;;;;;46894:659;;47566:15;::::0;;::::1;;::::0;;;:8:::1;:15;::::0;;;;;;;:25;;;;::::1;::::0;;;::::1;;::::0;;;47605:26;;;47645:12;;::::1;:16:::0;;;47675:22;;;:15:::1;:22:::0;;;;;;:37;;;;::::1;::::0;;;47731:34;;;::::1;::::0;::::1;::::0;47566:15;47731:34:::1;46353:1423;-1:-1:-1::0;47785:19:0::1;::::0;;;::::1;;::::0;;;:12:::1;:19;::::0;;;;;;;;:26;;;;;;::::1;::::0;;;;::::1;::::0;;;;::::1;;::::0;;::::1;;::::0;::::1;::::0;;;;::::1;::::0;;;::::1;::::0;;;::::1;;::::0;;::::1;::::0;;;;::::1;;;::::0;;;-1:-1:-1;46160:1658:0:o;20864:343::-;15204:5;;;;15190:10;:19;15182:64;;;;;;;;;;;;:::i;:::-;20989:28:::1;::::0;::::1;20981:69;;;;;;;;;;;;:::i;:::-;21080:42;::::0;::::1;;::::0;;;:26:::1;:42;::::0;;;;;;:53;;;::::1;::::0;::::1;;;::::0;;21148:52;::::1;::::0;::::1;::::0;21080:53;;21148:52:::1;:::i;27063:269::-:0;27276:49;;;;;:12;;;;;;:49;;27289:4;;27295:2;;27299:6;;27307:8;;27317:1;;27320;;27323;;27276:49;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27063:269;;;;;;;;:::o;19031:41::-;;;;;;;;;;;;;:::o;13346:20::-;;;;;;:::o;18742:74::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;37277:2114::-;37443:17;;37428:4;31633:18;;;31641:10;31633:18;;;;:43;;-1:-1:-1;31655:21:0;;;31671:4;31655:21;;31633:43;31629:361;;;31784:10;31742:22;31767:28;;;:16;:28;;;;;;;;31817;31809:68;;;;;;;;;;;;:::i;:::-;31899:38;;;;;;;;:22;:38;;;;;;;;:44;;;;;;;;;;;;31891:88;;;;;;;;;;;;:::i;:::-;31629:361;;37516:16:::1;::::0;::::1;37508:49;;;;;;;;;;;;:::i;:::-;37627:12;37642:22;::::0;::::1;::::0;:43:::1;;37679:6;37642:43;;;37667:9;37642:43;37627:58;;37695:19;;:::i;:::-;-1:-1:-1::0;37717:13:0::1;::::0;::::1;;::::0;;;:6:::1;:13;::::0;;;;;;;;37695:35;;;;::::1;::::0;;;;::::1;::::0;;::::1;::::0;;;;;::::1;;::::0;;::::1;::::0;37744:10;37740:366:::1;;37914:26;:5:::0;37927:6;37935:4:::1;37914:12;:26::i;:::-;37906:34;;37740:366;;;38066:29;:5:::0;38082;38089::::1;38066:15;:29::i;:::-;38057:38;;37740:366;38141:16;::::0;;::::1;;::::0;;;:9:::1;:16;::::0;;;;;;;:22;;::::1;::::0;;;;;;;:33:::1;::::0;38168:5;38141:26:::1;:33::i;:::-;38116:16;::::0;;::::1;;::::0;;;:9:::1;:16;::::0;;;;;;;:22;;::::1;::::0;;;;;;:58;38200:33:::1;38218:14;:6:::0;:12:::1;:14::i;:::-;38200:13:::0;;:17:::1;;::::0;::::1;:33::i;:::-;38184:49;;::::0;;38256:29:::1;38271:13;:5:::0;:11:::1;:13::i;:::-;38256:10;::::0;::::1;::::0;:14:::1;;::::0;::::1;:29::i;:::-;38243:42;;:10;::::0;::::1;:42:::0;;;29953:4:::1;-1:-1:-1::0;38428:35:0::1;::::0;:54:::1;;-1:-1:-1::0;38467:10:0::1;::::0;::::1;::::0;:15:::1;;::::0;38428:54:::1;38420:89;;;;;;;;;;;;:::i;:::-;38519:13;::::0;;::::1;;::::0;;;:6:::1;:13;::::0;;;;;;;:21;;;;;;::::1;::::0;;;;::::1;;::::0;;::::1;;::::0;::::1;::::0;;;;::::1;;::::0;;;::::1;::::0;;38579:22;::::1;38575:698;;38731:42;::::0;;;;:34:::1;38745:9;38731:34;::::0;::::1;::::0;:42:::1;::::0;38766:6;;38731:42:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;38906:12;38924:2;:7;;38939:6;38924:26;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;38905:45;;;38972:7;38964:49;;;;;;;;;;;;:::i;:::-;38575:698;;;;39232:30;:18;::::0;::::1;39251:2:::0;39255:6;39232:18:::1;:30::i;:::-;39312:2;39287:43;;39306:4;39287:43;;39299:5;39287:43;;;39316:6;39324:5;39287:43;;;;;;;:::i;30708:232::-:0;30823:19;;:::i;:::-;30852:23;;;;;;30885:17;;;:10;;;;:17;;;30912:13;;;;;-1:-1:-1;30912:13:0;;;:6;:13;;;;;;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;30708:232::o;20635:139::-;20711:10;20680:28;;;;:16;:28;;;;;;:41;;;;;;;;20736:31;;;20680:28;20736:31;20635:139::o;16029:51::-;;;;;;;;;;;;;;;:::o;21964:2547::-;22180:28;;;22172:68;;;;;;;;;;;;:::i;:::-;22346:6;;:16;;;;-1:-1:-1;22356:6:0;;22346:16;:26;;;;-1:-1:-1;22366:6:0;;;;22346:26;22342:2003;;;22396:18;;;22404:10;22396:18;22388:58;;;;;;;;;;;;:::i;:::-;22468:36;:22;;;22502:1;22468:22;;;:16;:22;;;;;;;:36;22460:74;;;;;;;;;;;;:::i;:::-;22556:42;;;;;;;:26;:42;;;;;;;;22548:82;;;;;;;;;;;;:::i;:::-;22342:2003;;;22955:18;;;22947:59;;;;;;;;;;;;:::i;:::-;23449:14;23531:40;;;;;;;;;;;;;;;;;23593:18;:16;:18::i;:::-;19424:118;23761:8;:186;;23908:39;23761:186;;;23804:69;23761:186;24093:12;;;;;;;:6;:12;;;;;;;;;:14;;;;;;;;23668:465;;;;;;23977:4;;24011:14;;24055:8;;24093:14;23668:465;;:::i;:::-;;;;;;;;;;;;;23633:522;;;;;;23493:680;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;23466:721;;;;;;23449:738;;24201:24;24228:26;24238:6;24246:1;24249;24252;24228:26;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24201:53;;24296:4;24276:24;;:16;:24;;;24268:66;;;;;;;;;;;;:::i;:::-;22342:2003;;;24374:38;;;;;;;;:22;:38;;;;;;;;:44;;;;;;;;;;;;;;:55;;;;;;;;;;24444:60;;;;;24374:55;;24444:60;:::i;:::-;;;;;;;;21964:2547;;;;;;:::o;26156:521::-;26240:23;;26322:5;26311:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;26311:24:0;-1:-1:-1;26299:36:0;-1:-1:-1;26367:5:0;26355:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26345:35;;26395:9;26390:281;26410:16;;;26390:281;;;26448:12;26462:19;26493:4;26512:5;;26518:1;26512:8;;;;;;;;;;;;;;;;;;:::i;:::-;26485:36;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26447:74;;;;26543:7;:24;;;;26555:12;26554:13;26543:24;26569:21;26583:6;26569:13;:21::i;:::-;26535:56;;;;;;;;;;;;;;:::i;:::-;;26620:7;26605:9;26615:1;26605:12;;;;;;;;;;;;;:22;;;;;;;;;;;26654:6;26641:7;26649:1;26641:10;;;;;;;;;;;;;;;;;:19;-1:-1:-1;;26428:3:0;;26390:281;;;;26156:521;;;;;;:::o;32833:191::-;32980:13;;;32947;32980;;;:6;:13;;;;;;;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;:37;;33001:6;33009:7;32980:20;:37::i;30397:51::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;13372:27::-;;;;;;:::o;42269:550::-;42445:11;29776:3;42459:26;:6;29707:2;42459:10;:26::i;:::-;:53;;;;;;;-1:-1:-1;42522:36:0;:18;;;42541:8;42551:6;42522:18;:36::i;:::-;42569:58;;;;;:20;;;;;;:58;;42590:10;;42602:5;;42609:6;;42617:3;;42622:4;;;;42569:58;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;42672:37;42697:11;:3;:9;:11::i;:::-;42672:13;;;;;;;:6;:13;;;;;;:37;;:24;:37::i;:::-;42646:22;42662:5;42646:15;:22::i;:::-;:63;;42638:98;;;;;;;;;;;;:::i;:::-;42803:8;42751:61;;42783:5;42751:61;;42772:8;42751:61;;;42790:6;42798:3;42751:61;;;;;;;:::i;:::-;;;;;;;;42269:550;;;;;;;:::o;39893:459::-;40019:4;31633:18;;;31641:10;31633:18;;;;:43;;-1:-1:-1;31655:21:0;;;31671:4;31655:21;;31633:43;31629:361;;;31784:10;31742:22;31767:28;;;:16;:28;;;;;;;;31817;31809:68;;;;;;;;;;;;:::i;:::-;31899:38;;;;;;;;:22;:38;;;;;;;;:44;;;;;;;;;;;;31891:88;;;;;;;;;;;;:::i;:::-;31629:361;;40061:16:::1;::::0;::::1;40053:49;;;;;;;;;;;;:::i;:::-;40197:16;::::0;;::::1;;::::0;;;:9:::1;:16;::::0;;;;;;;:22;;::::1;::::0;;;;;;;:33:::1;::::0;40224:5;40197:26:::1;:33::i;:::-;40172:16;::::0;;::::1;;::::0;;;:9:::1;:16;::::0;;;;;;;:22;;::::1;::::0;;;;;;;;:58;;;;40263:20;;::::1;::::0;;;;:31:::1;::::0;40288:5;40263:24:::1;:31::i;:::-;40240:16;::::0;;::::1;;::::0;;;:9:::1;:16;::::0;;;;;;;:20;;::::1;::::0;;;;;;;;;:54;;;;40310:35;;;::::1;::::0;::::1;::::0;::::1;::::0;40339:5;;40310:35:::1;:::i;:::-;;;;;;;;39893:459:::0;;;;;:::o;43714:932::-;43936:21;43974:6;43960:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;43960:28:0;-1:-1:-1;43936:52:0;-1:-1:-1;44013:6:0;43999:11;44036:226;44060:3;44056:1;:7;44036:226;;;44084:14;44101:7;;44109:1;44101:10;;;;;;;;;;;;;44084:27;;29776:3;44135:26;29707:2;44135:6;:10;;:26;;;;:::i;:::-;:53;;;;;;44125:4;44130:1;44125:7;;;;;;;;;;;;;:63;;;;;44203:48;44226:9;;44236:1;44226:12;;;;;;;;;;;;;;;;;;;;:::i;:::-;44240:7;;44248:1;44240:10;;;;;;;;;;;;;44203:6;;44210:1;44203:9;;;;;;;;;;;;;;;;;;;;:::i;:::-;:22;;;:48;:22;:48::i;:::-;-1:-1:-1;44065:3:0;;44036:226;;;-1:-1:-1;44272:66:0;;;;;:25;;;;;;:66;;44298:10;;44310:6;;;;44318:7;;;;44327:4;;44333;;;;44272:66;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;44354:9;44349:291;44373:3;44369:1;:7;44349:291;;;44397:12;44412:6;;44419:1;44412:9;;;;;;;;;;;;;;;;;;;;:::i;:::-;44397:24;;44469:41;44494:15;:4;44499:1;44494:7;;;;;;;;;;;;;;:13;:15::i;:::-;44469:13;;;;;;;:6;:13;;;;;;:41;;:24;:41::i;:::-;44443:22;44459:5;44443:15;:22::i;:::-;:67;;44435:102;;;;;;;;;;;;:::i;:::-;44616:9;;44626:1;44616:12;;;;;;;;;;;;;;;;;;;;:::i;:::-;44556:73;;44588:5;44556:73;;44577:8;44556:73;;;44595:7;;44603:1;44595:10;;;;;;;;;;;;;44607:4;44612:1;44607:7;;;;;;;;;;;;;;44556:73;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;44378:3:0;;44349:291;;30139:63;;;;;;;;;;;;;;;;;;;;;;;;:::o;9833:418::-;9982:13;;9954:12;;9982:18;;9978:267;;-1:-1:-1;10023:7:0;9978:267;;;10094:13;;10080:10;;;;10068:39;;;;;:23;;:7;;:23;:11;:23::i;:::-;:39;;;;;;10061:46;;10125:7;:57;;;;;10175:7;10162:5;:10;;;10136:36;;:23;10145:5;:13;;;10136:23;;:4;:8;;:23;;;;:::i;:::-;:36;;;;;;:46;10125:57;10121:114;;;10209:11;:4;10218:1;10209:8;:11::i;10121:114::-;9833:418;;;;;:::o;7713:158::-;7762:9;7791:16;;;;7783:57;;;;;;;;;;;;:::i;:::-;-1:-1:-1;7862:1:0;7713:158::o;8320:139::-;8412:5;;;8407:16;;;;;;;;;8399:53;;;;;;;;;;;;:::i;:::-;8320:139;;;;:::o;10341:424::-;10462:15;10493:5;:10;;;:15;;10507:1;10493:15;10489:270;;;-1:-1:-1;10534:4:0;10489:270;;;10605:10;;;;10588:13;;10579:36;;;;;:23;;:4;;:23;:8;:23::i;:::-;:36;;;;;;10569:46;;10633:7;:57;;;;;10686:4;10670:5;:13;;;10644:39;;:23;10656:5;:10;;;10644:23;;:7;:11;;:23;;;;:::i;32268:167::-;32400:19;;;32330:14;32400:19;;;:12;:19;;;;;;:27;32365:30;;;;;32330:14;;32365:63;;32400:27;;;;;;;32365:15;;:30;;32389:4;;32365:30;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:34;;:63::i;7412:136::-;7504:5;;;7499:16;;;;7491:50;;;;;;;;;;;;:::i;7267:139::-;7359:5;;;7354:16;;;;7346:53;;;;;;;;;;;;:::i;6605:374::-;6745:12;6759:17;6788:5;6780:19;;5636:10;6823:17;;6842:4;6848:2;6852:6;6800:59;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6780:80;;;;6800:59;6780:80;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6744:116;;;;6878:7;:57;;;;-1:-1:-1;6890:11:0;;:16;;:44;;;6921:4;6910:24;;;;;;;;;;;;:::i;:::-;6870:102;;;;;;;;;;;;:::i;:::-;6605:374;;;;;;:::o;19973:211::-;20047:7;19146:80;20127:24;20153:7;20170:4;20083:93;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;20073:104;;;;;;20066:111;;19973:211;;;;:::o;8465:136::-;8557:5;;;8552:16;;;;;;;;;8544:50;;;;;;;;;;;;:::i;7554:153::-;7612:9;7641:6;;;:30;;-1:-1:-1;;7656:5:0;;;7670:1;7665;7656:5;7665:1;7651:15;;;;;:20;7641:30;7633:67;;;;;;;;;;;;:::i;5957:333::-;6071:12;6085:17;6114:5;6106:19;;5547:10;6149:12;;6163:2;6167:6;6126:48;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6106:69;;;;6126:48;6106:69;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6070:105;;;;6193:7;:57;;;;-1:-1:-1;6205:11:0;;:16;;:44;;;6236:4;6225:24;;;;;;;;;;;;:::i;:::-;6185:98;;;;;;;;;;;;:::i;:::-;5957:333;;;;;:::o;7877:153::-;7925:8;7953:15;;;;7945:55;;;;;;;;;;;;:::i;12576:177::-;12653:18;12712:34;12730:15;:7;:13;:15::i;:::-;12712:13;;;;;:17;:34::i;:::-;12696:50;;;;;;;;;;;;;;;-1:-1:-1;12696:50:0;;;-1:-1:-1;12576:177:0:o;12881:::-;12958:18;13017:34;13035:15;:7;:13;:15::i;:::-;13017:13;;;;;:17;:34::i;24840:487::-;24912:13;25073:2;25052:11;:18;:23;25048:67;;;-1:-1:-1;25077:38:0;;;;;;;;;;;;;;;;;;;25048:67;25215:4;25202:11;25198:22;25183:37;;25257:11;25246:33;;;;;;;;;;;;:::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;160:352::-;;;290:3;283:4;275:6;271:17;267:27;257:2;;-1:-1;;298:12;257:2;-1:-1;328:20;;368:18;357:30;;354:2;;;-1:-1;;390:12;354:2;434:4;426:6;422:17;410:29;;485:3;434:4;;469:6;465:17;426:6;451:32;;448:41;445:2;;;502:1;;492:12;445:2;250:262;;;;;:::o;2101:336::-;;;2215:3;2208:4;2200:6;2196:17;2192:27;2182:2;;-1:-1;;2223:12;2182:2;-1:-1;2253:20;;2293:18;2282:30;;2279:2;;;-1:-1;;2315:12;2279:2;2359:4;2351:6;2347:17;2335:29;;2410:3;2359:4;2390:17;2351:6;2376:32;;2373:41;2370:2;;;2427:1;;2417:12;2636:156;2716:20;;2741:46;2716:20;2741:46;:::i;3741:130::-;3808:20;;66335:34;66324:46;;69779:35;;69769:2;;69828:1;;69818:12;4291:126;4356:20;;66763:4;66752:16;;70147:33;;70137:2;;70194:1;;70184:12;4424:241;;4528:2;4516:9;4507:7;4503:23;4499:32;4496:2;;;-1:-1;;4534:12;4496:2;85:6;72:20;97:33;124:5;97:33;:::i;4672:366::-;;;4793:2;4781:9;4772:7;4768:23;4764:32;4761:2;;;-1:-1;;4799:12;4761:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;4851:63;-1:-1;4951:2;4990:22;;72:20;97:33;72:20;97:33;:::i;:::-;4959:63;;;;4755:283;;;;;:::o;5045:859::-;;;;;;;5229:3;5217:9;5208:7;5204:23;5200:33;5197:2;;;-1:-1;;5236:12;5197:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;5288:63;-1:-1;5388:2;5427:22;;72:20;97:33;72:20;97:33;:::i;:::-;5396:63;-1:-1;5496:2;5532:22;;1748:20;1773:30;1748:20;1773:30;:::i;:::-;5504:60;-1:-1;5619:51;5662:7;5601:2;5638:22;;5619:51;:::i;:::-;5609:61;;5707:3;5751:9;5747:22;2017:20;5716:63;;5816:3;5860:9;5856:22;2017:20;5825:63;;5191:713;;;;;;;;:::o;5911:360::-;;;6029:2;6017:9;6008:7;6004:23;6000:32;5997:2;;;-1:-1;;6035:12;5997:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;6087:63;-1:-1;6187:2;6223:22;;1748:20;1773:30;1748:20;1773:30;:::i;6278:479::-;;;;6410:2;6398:9;6389:7;6385:23;6381:32;6378:2;;;-1:-1;;6416:12;6378:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;6468:63;-1:-1;6568:2;6604:22;;1748:20;1773:30;1748:20;1773:30;:::i;:::-;6576:60;-1:-1;6673:2;6709:22;;1748:20;1773:30;1748:20;1773:30;:::i;:::-;6681:60;;;;6372:385;;;;;:::o;6764:609::-;;;;;6918:2;6906:9;6897:7;6893:23;6889:32;6886:2;;;-1:-1;;6924:12;6886:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;6976:63;-1:-1;7104:2;7089:18;;7076:32;7128:18;7117:30;;7114:2;;;-1:-1;;7150:12;7114:2;7188:64;7244:7;7235:6;7224:9;7220:22;7188:64;:::i;:::-;7170:82;;-1:-1;7170:82;-1:-1;;7289:2;7325:22;;1748:20;1773:30;1748:20;1773:30;:::i;:::-;6880:493;;;;-1:-1;6880:493;;-1:-1;;6880:493::o;7380:538::-;;;;7544:2;7532:9;7523:7;7519:23;7515:32;7512:2;;;-1:-1;;7550:12;7512:2;7608:17;7595:31;7646:18;7638:6;7635:30;7632:2;;;-1:-1;;7668:12;7632:2;7706:91;7789:7;7780:6;7769:9;7765:22;7706:91;:::i;:::-;7688:109;;-1:-1;7688:109;-1:-1;;7834:2;7870:22;;1748:20;1773:30;1748:20;1773:30;:::i;7925:257::-;;8037:2;8025:9;8016:7;8012:23;8008:32;8005:2;;;-1:-1;;8043:12;8005:2;1896:6;1890:13;1908:30;1932:5;1908:30;:::i;8189:1415::-;;;;;;;;;;8525:3;8513:9;8504:7;8500:23;8496:33;8493:2;;;-1:-1;;8532:12;8493:2;2552:6;2539:20;2564:60;2618:5;2564:60;:::i;:::-;8584:90;-1:-1;8739:2;8724:18;;8711:32;8763:18;8752:30;;;8749:2;;;-1:-1;;8785:12;8749:2;8823:80;8895:7;8886:6;8875:9;8871:22;8823:80;:::i;:::-;8805:98;;-1:-1;8805:98;-1:-1;8968:2;8953:18;;8940:32;;-1:-1;8981:30;;;8978:2;;;-1:-1;;9014:12;8978:2;9052:93;9137:7;9128:6;9117:9;9113:22;9052:93;:::i;:::-;9034:111;;-1:-1;9034:111;-1:-1;9210:2;9195:18;;9182:32;;-1:-1;9223:30;;;9220:2;;;-1:-1;;9256:12;9220:2;9294:80;9366:7;9357:6;9346:9;9342:22;9294:80;:::i;:::-;9276:98;;-1:-1;9276:98;-1:-1;9439:3;9424:19;;9411:33;;-1:-1;9453:30;;;9450:2;;;-1:-1;;9486:12;9450:2;;9524:64;9580:7;9571:6;9560:9;9556:22;9524:64;:::i;:::-;9506:82;;;;;;;;;;8487:1117;;;;;;;;;;;:::o;9885:392::-;;;10019:2;10007:9;9998:7;9994:23;9990:32;9987:2;;;-1:-1;;10025:12;10284:643;;;;;10452:3;10440:9;10431:7;10427:23;10423:33;10420:2;;;-1:-1;;10459:12;10420:2;2729:6;2716:20;2741:46;2781:5;2741:46;:::i;:::-;10511:76;-1:-1;10624:2;10663:22;;72:20;97:33;72:20;97:33;:::i;:::-;10632:63;-1:-1;10732:2;10771:22;;72:20;97:33;72:20;97:33;:::i;:::-;10414:513;;;;-1:-1;10740:63;;10840:2;10879:22;3945:20;;-1:-1;;10414:513::o;10934:769::-;;;;;;11119:3;11107:9;11098:7;11094:23;11090:33;11087:2;;;-1:-1;;11126:12;11087:2;2729:6;2716:20;2741:46;2781:5;2741:46;:::i;:::-;11178:76;-1:-1;11291:2;11330:22;;72:20;97:33;72:20;97:33;:::i;:::-;11299:63;-1:-1;11399:2;11438:22;;72:20;97:33;72:20;97:33;:::i;:::-;11081:622;;;;-1:-1;11407:63;;11507:2;11546:22;;3945:20;;-1:-1;11615:3;11655:22;3945:20;;11081:622;-1:-1;;11081:622::o;11710:1143::-;;;;;;;;;11944:3;11932:9;11923:7;11919:23;11915:33;11912:2;;;-1:-1;;11951:12;11912:2;2729:6;2716:20;2741:46;2781:5;2741:46;:::i;:::-;12003:76;-1:-1;12116:2;12155:22;;72:20;97:33;72:20;97:33;:::i;:::-;12124:63;-1:-1;12224:2;12263:22;;72:20;97:33;72:20;97:33;:::i;:::-;12232:63;-1:-1;12332:2;12371:22;;3945:20;;-1:-1;12440:3;12480:22;;3945:20;;-1:-1;12568:51;12611:7;12549:3;12587:22;;12568:51;:::i;:::-;12558:61;;12656:3;12700:9;12696:22;2017:20;12665:63;;12765:3;12809:9;12805:22;2017:20;12774:63;;11906:947;;;;;;;;;;;:::o;12860:955::-;;;;;;;13098:3;13086:9;13077:7;13073:23;13069:33;13066:2;;;-1:-1;;13105:12;13066:2;2729:6;2716:20;2741:46;2781:5;2741:46;:::i;:::-;13157:76;-1:-1;13270:2;13309:22;;72:20;97:33;72:20;97:33;:::i;:::-;13278:63;-1:-1;13406:2;13391:18;;13378:32;13430:18;13419:30;;;13416:2;;;-1:-1;;13452:12;13416:2;13490:80;13562:7;13553:6;13542:9;13538:22;13490:80;:::i;:::-;13472:98;;-1:-1;13472:98;-1:-1;13635:2;13620:18;;13607:32;;-1:-1;13648:30;;;13645:2;;;-1:-1;;13681:12;13645:2;;13719:80;13791:7;13782:6;13771:9;13767:22;13719:80;:::i;:::-;13060:755;;;;-1:-1;13060:755;;-1:-1;13060:755;;13701:98;;13060:755;-1:-1;;;13060:755::o;13822:511::-;;;;13970:2;13958:9;13949:7;13945:23;13941:32;13938:2;;;-1:-1;;13976:12;13938:2;2729:6;2716:20;2741:46;2781:5;2741:46;:::i;:::-;14028:76;-1:-1;14141:2;14177:22;;1748:20;1773:30;1748:20;1773:30;:::i;:::-;13932:401;;14149:60;;-1:-1;;;14246:2;14285:22;;;;3945:20;;13932:401::o;14773:517::-;;;;14924:2;14912:9;14903:7;14899:23;14895:32;14892:2;;;-1:-1;;14930:12;14892:2;2729:6;2716:20;2741:46;2781:5;2741:46;:::i;:::-;14982:76;-1:-1;15113:53;15158:7;15095:2;15134:22;;15113:53;:::i;:::-;15103:63;;15221:53;15266:7;15203:2;15246:9;15242:22;15221:53;:::i;:::-;15211:63;;14886:404;;;;;:::o;15297:511::-;;;;15445:2;15433:9;15424:7;15420:23;15416:32;15413:2;;;-1:-1;;15451:12;15413:2;2729:6;2716:20;2741:46;2781:5;2741:46;:::i;:::-;15503:76;-1:-1;15616:2;15655:22;;3945:20;;-1:-1;15724:2;15760:22;;1748:20;1773:30;1748:20;1773:30;:::i;15815:390::-;;;15948:2;15936:9;15927:7;15923:23;15919:32;15916:2;;;-1:-1;;15954:12;15916:2;2729:6;2716:20;2741:46;2781:5;2741:46;:::i;:::-;16006:76;-1:-1;16119:2;16157:22;;4222:20;66661:18;66650:30;;70026:34;;70016:2;;-1:-1;;70064:12;16212:935;;;;;;;16437:3;16425:9;16416:7;16412:23;16408:33;16405:2;;;-1:-1;;16444:12;16405:2;2900:6;2887:20;2912:54;2960:5;2912:54;:::i;:::-;16496:84;-1:-1;16617:2;16656:22;;72:20;97:33;72:20;97:33;:::i;:::-;16625:63;-1:-1;16725:2;16777:22;;2716:20;2741:46;2716:20;2741:46;:::i;:::-;16733:76;-1:-1;16846:2;16885:22;;3945:20;;-1:-1;16982:3;16967:19;;16954:33;17007:18;16996:30;;16993:2;;;-1:-1;;17029:12;16993:2;17067:64;17123:7;17114:6;17103:9;17099:22;17067:64;:::i;17154:261::-;;17268:2;17256:9;17247:7;17243:23;17239:32;17236:2;;;-1:-1;;17274:12;17236:2;-1:-1;3226:13;;17230:185;-1:-1;17230:185::o;17422:362::-;;17547:2;17535:9;17526:7;17522:23;17518:32;17515:2;;;-1:-1;;17553:12;17515:2;17604:17;17598:24;17642:18;;17634:6;17631:30;17628:2;;;-1:-1;;17664:12;17628:2;17751:6;17740:9;17736:22;;;3402:3;3395:4;3387:6;3383:17;3379:27;3369:2;;-1:-1;;3410:12;3369:2;3450:6;3444:13;17642:18;61739:6;61736:30;61733:2;;;-1:-1;;61769:12;61733:2;61402;61396:9;17547:2;61842:9;3395:4;61827:6;61823:17;61819:33;61432:6;61428:17;;61539:6;61527:10;61524:22;17642:18;61491:10;61488:34;61485:62;61482:2;;;-1:-1;;61550:12;61482:2;61402;61569:22;3543:21;;;3643:16;;;17547:2;3643:16;3640:25;-1:-1;3637:2;;;-1:-1;;3668:12;3637:2;3688:39;3720:6;17547:2;3619:5;3615:16;17547:2;3585:6;3581:17;3688:39;:::i;:::-;17684:84;17509:275;-1:-1;;;;;;17509:275::o;18430:199::-;66455:42;66444:54;24681:63;;18618:4;18609:14;;18523:106::o;22056:690::-;;22249:5;62650:12;63857:6;63852:3;63845:19;63894:4;;63889:3;63885:14;22261:93;;63894:4;22425:5;62044:14;-1:-1;22464:260;22489:6;22486:1;22483:13;22464:260;;;22550:13;;23037:37;;18791:14;;;;63331;;;;22511:1;22504:9;22464:260;;;-1:-1;22730:10;;22180:566;-1:-1;;;;;22180:566::o;23268:297::-;;63857:6;63852:3;63845:19;68045:6;68040:3;63894:4;63889:3;63885:14;68022:30;-1:-1;63894:4;68092:6;63889:3;68083:16;;68076:27;63894:4;68559:7;68563:2;23551:6;68543:14;68539:28;63889:3;23520:39;;23513:46;;23368:197;;;;;:::o;23914:323::-;;24046:5;62650:12;63857:6;63852:3;63845:19;24129:52;24174:6;63894:4;63889:3;63885:14;63894:4;24155:5;24151:16;24129:52;:::i;:::-;68563:2;68543:14;68559:7;68539:28;24193:39;;;;63894:4;24193:39;;23994:243;-1:-1;;23994:243::o;36680:291::-;;68045:6;68040:3;68035;68022:30;68083:16;;68076:27;;;68083:16;36824:147;-1:-1;36824:147::o;36978:271::-;;24404:5;62650:12;24515:52;24560:6;24555:3;24548:4;24541:5;24537:16;24515:52;:::i;:::-;24579:16;;;;;37112:137;-1:-1;;37112:137::o;37256:553::-;;24404:5;62650:12;24515:52;24560:6;24555:3;24548:4;24541:5;24537:16;24515:52;:::i;:::-;24579:16;;;;23037:37;;;-1:-1;24548:4;37661:12;;23037:37;37772:12;;;37448:361;-1:-1;37448:361::o;37816:379::-;38180:10;38004:191::o;38202:222::-;66455:42;66444:54;;;;19039:37;;38329:2;38314:18;;38300:124::o;38676:1298::-;;39134:3;39123:9;39119:19;66455:42;65525:5;66444:54;18905:3;18898:58;39261:2;39134:3;39261:2;39250:9;39246:18;39239:48;39301:131;20948:86;21027:6;21022:3;20948:86;:::i;:::-;20941:93;;21132:21;;;-1:-1;21159:330;21184:6;21181:1;21178:13;21159:330;;;39261:2;21293:6;65418:12;21314:76;21386:3;65379:52;65418:12;21293:6;65379:52;:::i;:::-;21314:76;:::i;:::-;21397:85;;-1:-1;21307:83;-1:-1;21206:1;21199:9;21159:330;;;21163:14;39480:9;39474:4;39470:20;39465:2;39454:9;39450:18;39443:48;63857:6;63852:3;63845:19;21809:66;21801:6;21798:78;21795:2;;;-1:-1;;21879:12;21795:2;39261;21914:6;21910:17;21900:27;;68045:6;68040:3;39261:2;63889:3;63885:14;68022:30;68092:6;63889:3;68083:16;;;;39261:2;68083:16;;-1:-1;68083:16;68076:27;39261:2;39671:9;68083:16;39661:20;;39656:2;39645:9;39641:18;39634:48;39696:108;39799:4;39790:6;39696:108;:::i;:::-;39688:116;;;;39853:9;39847:4;39843:20;39837:3;39826:9;39822:19;39815:49;39878:86;39959:4;39950:6;39942;39878:86;:::i;:::-;39870:94;39105:869;-1:-1;;;;;;;;;;;39105:869::o;39981:814::-;;66455:42;;65525:5;66444:54;18905:3;18898:58;66455:42;65525:5;66444:54;40455:2;40444:9;40440:18;24681:63;;23067:5;40538:2;40527:9;40523:18;23037:37;23067:5;40621:2;40610:9;40606:18;23037:37;40269:3;40658;40647:9;40643:19;40636:49;40699:86;40269:3;40258:9;40254:19;40771:6;40763;40699:86;:::i;:::-;40691:94;40240:555;-1:-1;;;;;;;;40240:555::o;40802:444::-;66455:42;66444:54;;;19039:37;;66444:54;;;;41149:2;41134:18;;19039:37;41232:2;41217:18;;23037:37;;;;40985:2;40970:18;;40956:290::o;41253:884::-;66455:42;66444:54;;;19039:37;;66444:54;;;;41709:2;41694:18;;19039:37;41792:2;41777:18;;23037:37;;;;41875:2;41860:18;;23037:37;;;;66763:4;66752:16;41954:3;41939:19;;36633:35;42038:3;42023:19;;23037:37;42122:3;42107:19;;23037:37;;;;41544:3;41529:19;;41515:622::o;42144:333::-;66455:42;66444:54;;;;19039:37;;42463:2;42448:18;;23037:37;42299:2;42284:18;;42270:207::o;42484:653::-;42751:2;42765:47;;;62650:12;;42736:18;;;63845:19;;;42484:653;;63894:4;;63885:14;;;;62044;;;42484:653;19506:251;19531:6;19528:1;19525:13;19506:251;;;19592:13;;65609;65602:21;22809:34;;18203:14;;;;63331;;;;19553:1;19546:9;19506:251;;;19510:14;;;42976:9;42970:4;42966:20;63894:4;42950:9;42946:18;42939:48;43001:126;20034:5;62650:12;20053:95;20141:6;20136:3;20053:95;:::i;:::-;20046:102;;;;;63894:4;20205:6;20201:17;20196:3;20192:27;63894:4;20299:5;62044:14;-1:-1;20338:357;20363:6;20360:1;20357:13;20338:357;;;20425:9;20419:4;20415:20;20410:3;20403:33;18351:64;18411:3;20470:6;20464:13;18351:64;:::i;:::-;20674:14;;;;20484:90;-1:-1;63331:14;;;;19553:1;20378:9;20338:357;;;-1:-1;42993:134;;42722:415;-1:-1;;;;;;;;;42722:415::o;43144:210::-;65609:13;;65602:21;22809:34;;43265:2;43250:18;;43236:118::o;43361:222::-;23037:37;;;43488:2;43473:18;;43459:124::o;43590:768::-;23037:37;;;44016:2;44001:18;;23037:37;;;;66455:42;66444:54;;;44099:2;44084:18;;19039:37;66444:54;;44182:2;44167:18;;19039:37;65609:13;65602:21;44259:3;44244:19;;22809:34;44343:3;44328:19;;23037:37;43851:3;43836:19;;43822:536::o;44365:556::-;23037:37;;;44741:2;44726:18;;23037:37;;;;44824:2;44809:18;;23037:37;66455:42;66444:54;44907:2;44892:18;;19039:37;44576:3;44561:19;;44547:374::o;44928:548::-;23037:37;;;66763:4;66752:16;;;;45296:2;45281:18;;36633:35;45379:2;45364:18;;23037:37;45462:2;45447:18;;23037:37;45135:3;45120:19;;45106:370::o;45483:326::-;;45638:2;45659:17;45652:47;45713:86;45638:2;45627:9;45623:18;45785:6;45777;45713:86;:::i;46079:310::-;;46226:2;46247:17;46240:47;46301:78;46226:2;46215:9;46211:18;46365:6;46301:78;:::i;46396:416::-;46596:2;46610:47;;;26028:2;46581:18;;;63845:19;26064:23;63885:14;;;26044:44;26107:12;;;46567:245::o;46819:416::-;47019:2;47033:47;;;26358:2;47004:18;;;63845:19;26394:25;63885:14;;;26374:46;26439:12;;;46990:245::o;47242:416::-;47442:2;47456:47;;;26690:2;47427:18;;;63845:19;26726:30;63885:14;;;26706:51;26776:12;;;47413:245::o;47665:416::-;47865:2;47879:47;;;27027:2;47850:18;;;63845:19;27063:29;63885:14;;;27043:50;27112:12;;;47836:245::o;48088:416::-;48288:2;48302:47;;;27363:2;48273:18;;;63845:19;27399:30;63885:14;;;27379:51;27449:12;;;48259:245::o;48511:416::-;48711:2;48725:47;;;27700:2;48696:18;;;63845:19;27736:24;63885:14;;;27716:45;27780:12;;;48682:245::o;48934:416::-;49134:2;49148:47;;;28031:2;49119:18;;;63845:19;28067:23;63885:14;;;28047:44;28110:12;;;49105:245::o;49357:416::-;49557:2;49571:47;;;28361:2;49542:18;;;63845:19;28397:21;63885:14;;;28377:42;28438:12;;;49528:245::o;49780:416::-;49980:2;49994:47;;;28689:2;49965:18;;;63845:19;28725:30;63885:14;;;28705:51;28775:12;;;49951:245::o;50203:416::-;50403:2;50417:47;;;29026:2;50388:18;;;63845:19;29062:26;63885:14;;;29042:47;29108:12;;;50374:245::o;50626:416::-;50826:2;50840:47;;;29359:2;50811:18;;;63845:19;29395:25;63885:14;;;29375:46;29440:12;;;50797:245::o;51049:416::-;51249:2;51263:47;;;29691:2;51234:18;;;63845:19;29727:22;63885:14;;;29707:43;29769:12;;;51220:245::o;51472:416::-;51672:2;51686:47;;;30020:2;51657:18;;;63845:19;30056:28;63885:14;;;30036:49;30104:12;;;51643:245::o;51895:416::-;52095:2;52109:47;;;52080:18;;;63845:19;30391:34;63885:14;;;30371:55;30445:12;;;52066:245::o;52318:416::-;52518:2;52532:47;;;30696:2;52503:18;;;63845:19;30732:33;63885:14;;;30712:54;30785:12;;;52489:245::o;52741:416::-;52941:2;52955:47;;;52926:18;;;63845:19;31072:34;63885:14;;;31052:55;31126:12;;;52912:245::o;53164:416::-;53364:2;53378:47;;;31377:2;53349:18;;;63845:19;31413:29;63885:14;;;31393:50;31462:12;;;53335:245::o;53587:416::-;53787:2;53801:47;;;31713:2;53772:18;;;63845:19;31749:27;63885:14;;;31729:48;31796:12;;;53758:245::o;54010:416::-;54210:2;54224:47;;;32047:2;54195:18;;;63845:19;32083:31;63885:14;;;32063:52;32134:12;;;54181:245::o;54433:416::-;54633:2;54647:47;;;54618:18;;;63845:19;32726:34;63885:14;;;32706:55;32780:12;;;54604:245::o;54856:416::-;55056:2;55070:47;;;33031:2;55041:18;;;63845:19;33067:29;63885:14;;;33047:50;33116:12;;;55027:245::o;55279:416::-;55479:2;55493:47;;;33367:2;55464:18;;;63845:19;33403:29;63885:14;;;33383:50;33452:12;;;55450:245::o;55702:416::-;55902:2;55916:47;;;55887:18;;;63845:19;33739:34;63885:14;;;33719:55;33793:12;;;55873:245::o;56125:416::-;56325:2;56339:47;;;34044:2;56310:18;;;63845:19;34080:30;63885:14;;;34060:51;34130:12;;;56296:245::o;56548:416::-;56748:2;56762:47;;;34381:2;56733:18;;;63845:19;34417:24;63885:14;;;34397:45;34461:12;;;56719:245::o;56971:416::-;57171:2;57185:47;;;34712:2;57156:18;;;63845:19;34748:29;63885:14;;;34728:50;34797:12;;;57142:245::o;57394:416::-;57594:2;57608:47;;;35048:2;57579:18;;;63845:19;35084:31;63885:14;;;35064:52;35135:12;;;57565:245::o;57817:416::-;58017:2;58031:47;;;35386:2;58002:18;;;63845:19;35422:26;63885:14;;;35402:47;35468:12;;;57988:245::o;58240:416::-;58440:2;58454:47;;;58425:18;;;63845:19;35755:34;63885:14;;;35735:55;35809:12;;;58411:245::o;58663:222::-;66335:34;66324:46;;;;36026:50;;58790:2;58775:18;;58761:124::o;58892:349::-;66335:34;66324:46;;;;36026:50;;66455:42;66444:54;59227:2;59212:18;;18898:58;59055:2;59040:18;;59026:215::o;59248:333::-;66335:34;66324:46;;;35906:37;;66324:46;;59567:2;59552:18;;35906:37;59403:2;59388:18;;59374:207::o;59817:333::-;23037:37;;;60136:2;60121:18;;23037:37;59972:2;59957:18;;59943:207::o;60157:220::-;66661:18;66650:30;;;;36388:49;;60283:2;60268:18;;60254:123::o;60384:436::-;66661:18;66650:30;;;36518:36;;66650:30;;;;60723:2;60708:18;;36518:36;66335:34;66324:46;;;60806:2;60791:18;;35906:37;60563:2;60548:18;;60534:286::o;60827:506::-;;;60962:11;60949:25;61013:48;61037:8;61021:14;61017:29;61013:48;60993:18;60989:73;60979:2;;-1:-1;;61066:12;60979:2;61093:33;;61147:18;;;-1:-1;61185:18;61174:30;;61171:2;;;-1:-1;;61207:12;61171:2;61052:4;61235:13;;-1:-1;61021:14;61267:38;;;61257:49;;61254:2;;;61319:1;;61309:12;68118:268;68183:1;68190:101;68204:6;68201:1;68198:13;68190:101;;;68271:11;;;68265:18;68252:11;;;68245:39;68226:2;68219:10;68190:101;;;68306:6;68303:1;68300:13;68297:2;;;68183:1;68362:6;68357:3;68353:16;68346:27;68297:2;;68167:219;;;:::o;68580:117::-;66455:42;68667:5;66444:54;68642:5;68639:35;68629:2;;68688:1;;68678:12;68629:2;68623:74;:::o;68704:111::-;68785:5;65609:13;65602:21;68763:5;68760:32;68750:2;;68806:1;;68796:12"},"gasEstimates":{"creation":{"codeDepositCost":"4627200","executionCost":"infinite","totalCost":"infinite"},"external":{"DOMAIN_SEPARATOR()":"infinite","balanceOf(address,address)":"infinite","batch(bytes[],bool)":"infinite","batchFlashLoan(address,address[],address[],uint256[],bytes)":"infinite","claimOwnership()":"45017","deploy(address,bytes,bool)":"infinite","deposit(address,address,address,uint256,uint256)":"infinite","flashLoan(address,address,address,uint256,bytes)":"infinite","harvest(address,bool,uint256)":"infinite","masterContractApproved(address,address)":"infinite","masterContractOf(address)":"1341","nonces(address)":"1280","owner()":"1114","pendingOwner()":"1157","pendingStrategy(address)":"1342","permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","registerProtocol()":"22240","setMasterContractApproval(address,address,bool,uint8,bytes32,bytes32)":"infinite","setStrategy(address,address)":"infinite","setStrategyTargetPercentage(address,uint64)":"23713","setTokenTotal(address,uint128,uint128)":"infinite","strategy(address)":"1320","strategyData(address)":"1447","toAmount(address,uint256,bool)":"infinite","toShare(address,uint256,bool)":"infinite","totals(address)":"1364","transfer(address,address,address,uint256)":"infinite","transferMultiple(address,address,address[],uint256[])":"infinite","transferOwnership(address,bool,bool)":"infinite","whitelistMasterContract(address,bool)":"infinite","whitelistedMasterContracts(address)":"1359","withdraw(address,address,address,uint256,uint256)":"infinite"},"internal":{"_tokenBalanceOf(contract IERC20)":"infinite"}},"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","balanceOf(address,address)":"f7888aec","batch(bytes[],bool)":"d2423b51","batchFlashLoan(address,address[],address[],uint256[],bytes)":"f483b3da","claimOwnership()":"4e71e0c8","deploy(address,bytes,bool)":"1f54245b","deposit(address,address,address,uint256,uint256)":"02b9446c","flashLoan(address,address,address,uint256,bytes)":"f1676d37","harvest(address,bool,uint256)":"66c6bb0b","masterContractApproved(address,address)":"91e0eab5","masterContractOf(address)":"bafe4f14","nonces(address)":"7ecebe00","owner()":"8da5cb5b","pendingOwner()":"e30c3978","pendingStrategy(address)":"5108a558","permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)":"7c516e94","registerProtocol()":"aee4d1b2","setMasterContractApproval(address,address,bool,uint8,bytes32,bytes32)":"c0a47c93","setStrategy(address,address)":"72cb5d97","setStrategyTargetPercentage(address,uint64)":"3e2a9d4e","setTokenTotal(address,uint128,uint128)":"98d1c8f4","strategy(address)":"228bfd9f","strategyData(address)":"df23b45b","toAmount(address,uint256,bool)":"56623118","toShare(address,uint256,bool)":"da5139ca","totals(address)":"4ffe34db","transfer(address,address,address,uint256)":"f18d03cc","transferMultiple(address,address,address[],uint256[])":"0fca8843","transferOwnership(address,bool,bool)":"078dfbe7","whitelistMasterContract(address,bool)":"733a9d7c","whitelistedMasterContracts(address)":"12a90c8a","withdraw(address,address,address,uint256,uint256)":"97da6d30"}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"wethToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"masterContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cloneAddress\",\"type\":\"address\"}],\"name\":\"LogDeploy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"LogFlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"}],\"name\":\"LogRegisterProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"masterContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"LogSetMasterContractApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogStrategyDivest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogStrategyInvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogStrategyLoss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogStrategyProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"LogStrategyQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"LogStrategySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetPercentage\",\"type\":\"uint256\"}],\"name\":\"LogStrategyTargetPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"LogTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"masterContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"LogWhiteListMasterContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"calls\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"revertOnFail\",\"type\":\"bool\"}],\"name\":\"batch\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"successes\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBatchFlashBorrower\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"useCreate2\",\"type\":\"bool\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"cloneAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFlashBorrower\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"balance\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxChangeAmount\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"masterContractApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"masterContractOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingStrategy\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"masterContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"setMasterContractApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"newStrategy\",\"type\":\"address\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"targetPercentage_\",\"type\":\"uint64\"}],\"name\":\"setStrategyTargetPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"elastic\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"base\",\"type\":\"uint128\"}],\"name\":\"setTokenTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategyData\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"strategyStartDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"targetPercentage\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"balance\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"roundUp\",\"type\":\"bool\"}],\"name\":\"toAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"roundUp\",\"type\":\"bool\"}],\"name\":\"toShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totals\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"elastic\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"base\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"transferMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"whitelistMasterContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedMasterContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"BoringCrypto, Keno\",\"kind\":\"dev\",\"methods\":{\"batch(bytes[],bool)\":{\"params\":{\"calls\":\"An array of inputs for each call.\",\"revertOnFail\":\"If True then reverts after a failed call and stops doing further calls.\"},\"returns\":{\"results\":\"An array with the returned data of each function call, mapped one-to-one to `calls`.\",\"successes\":\"An array indicating the success of a call, mapped one-to-one to `calls`.\"}},\"batchFlashLoan(address,address[],address[],uint256[],bytes)\":{\"params\":{\"amounts\":\"of the tokens for each receiver.\",\"borrower\":\"The address of the contract that implements and conforms to `IBatchFlashBorrower` and handles the flashloan.\",\"data\":\"The calldata to pass to the `borrower` contract.\",\"receivers\":\"An array of the token receivers. A one-to-one mapping with `tokens` and `amounts`.\",\"tokens\":\"The addresses of the tokens.\"}},\"deploy(address,bytes,bool)\":{\"params\":{\"data\":\"Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\",\"masterContract\":\"The address of the contract to clone.\",\"useCreate2\":\"Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\"},\"returns\":{\"cloneAddress\":\"Address of the created clone contract.\"}},\"deposit(address,address,address,uint256,uint256)\":{\"params\":{\"amount\":\"Token amount in native representation to deposit.\",\"from\":\"which account to pull the tokens.\",\"share\":\"Token amount represented in shares to deposit. Takes precedence over `amount`.\",\"to\":\"which account to push the tokens.\",\"token_\":\"The ERC-20 token to deposit.\"},\"returns\":{\"amountOut\":\"The amount deposited.\",\"shareOut\":\"The deposited amount represented in shares.\"}},\"flashLoan(address,address,address,uint256,bytes)\":{\"params\":{\"amount\":\"of the tokens to receive.\",\"borrower\":\"The address of the contract that implements and conforms to `IFlashBorrower` and handles the flashloan.\",\"data\":\"The calldata to pass to the `borrower` contract.\",\"receiver\":\"Address of the token receiver.\",\"token\":\"The address of the token to receive.\"}},\"harvest(address,bool,uint256)\":{\"params\":{\"balance\":\"True if housekeeping should be done.\",\"maxChangeAmount\":\"The maximum amount for either pulling or pushing from/to the `IStrategy` contract.\",\"token\":\"The address of the token for which a strategy is deployed.\"}},\"setMasterContractApproval(address,address,bool,uint8,bytes32,bytes32)\":{\"params\":{\"approved\":\"If True approves access. If False revokes access.\",\"masterContract\":\"The address who gains or loses access.\",\"r\":\"Part of the signature. (See EIP-191)\",\"s\":\"Part of the signature. (See EIP-191)\",\"user\":\"The address of the user that approves or revokes access.\",\"v\":\"Part of the signature. (See EIP-191)\"}},\"setStrategy(address,address)\":{\"details\":\"Only the owner of this contract is allowed to change this.\",\"params\":{\"newStrategy\":\"The address of the contract that conforms to `IStrategy`.\",\"token\":\"The address of the token that maps to a strategy to change.\"}},\"setStrategyTargetPercentage(address,uint64)\":{\"details\":\"Only the owner of this contract is allowed to change this.\",\"params\":{\"targetPercentage_\":\"The new target in percent. Must be lesser or equal to `MAX_TARGET_PERCENTAGE`.\",\"token\":\"The address of the token that maps to a strategy to change.\"}},\"toAmount(address,uint256,bool)\":{\"details\":\"Helper function represent shares back into the `token` amount.\",\"params\":{\"roundUp\":\"If the result should be rounded up.\",\"share\":\"The amount of shares.\",\"token\":\"The ERC-20 token.\"},\"returns\":{\"amount\":\"The share amount back into native representation.\"}},\"toShare(address,uint256,bool)\":{\"details\":\"Helper function to represent an `amount` of `token` in shares.\",\"params\":{\"amount\":\"The `token` amount.\",\"roundUp\":\"If the result `share` should be rounded up.\",\"token\":\"The ERC-20 token.\"},\"returns\":{\"share\":\"The token amount represented in shares.\"}},\"transfer(address,address,address,uint256)\":{\"params\":{\"from\":\"which user to pull the tokens.\",\"share\":\"The amount of `token` in shares.\",\"to\":\"which user to push the tokens.\",\"token\":\"The ERC-20 token to transfer.\"}},\"transferMultiple(address,address,address[],uint256[])\":{\"params\":{\"from\":\"which user to pull the tokens.\",\"shares\":\"The amount of `token` in shares for each receiver in `tos`.\",\"token\":\"The ERC-20 token to transfer.\",\"tos\":\"The receivers of the tokens.\"}},\"transferOwnership(address,bool,bool)\":{\"params\":{\"direct\":\"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\",\"newOwner\":\"Address of the new owner.\",\"renounce\":\"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\"}},\"withdraw(address,address,address,uint256,uint256)\":{\"params\":{\"amount\":\"of tokens. Either one of `amount` or `share` needs to be supplied.\",\"from\":\"which user to pull the tokens.\",\"share\":\"Like above, but `share` takes precedence over `amount`.\",\"to\":\"which user to push the tokens.\",\"token_\":\"The ERC-20 token to withdraw.\"}}},\"title\":\"BentoBox\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batch(bytes[],bool)\":{\"notice\":\"Allows batched call to self (this contract).\"},\"batchFlashLoan(address,address[],address[],uint256[],bytes)\":{\"notice\":\"Support for batched flashloans. Useful to request multiple different `tokens` in a single transaction.\"},\"claimOwnership()\":{\"notice\":\"Needs to be called by `pendingOwner` to claim ownership.\"},\"deploy(address,bytes,bool)\":{\"notice\":\"Deploys a given master Contract as a clone. Any ETH transferred with this call is forwarded to the new clone. Emits `LogDeploy`.\"},\"deposit(address,address,address,uint256,uint256)\":{\"notice\":\"Deposit an amount of `token` represented in either `amount` or `share`.\"},\"flashLoan(address,address,address,uint256,bytes)\":{\"notice\":\"Flashloan ability.\"},\"harvest(address,bool,uint256)\":{\"notice\":\"The actual process of yield farming. Executes the strategy of `token`. Optionally does housekeeping if `balance` is true. `maxChangeAmount` is relevant for skimming or withdrawing if `balance` is true.\"},\"masterContractApproved(address,address)\":{\"notice\":\"masterContract to user to approval state\"},\"masterContractOf(address)\":{\"notice\":\"Mapping from clone contracts to their masterContract.\"},\"nonces(address)\":{\"notice\":\"user nonces for masterContract approvals\"},\"permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Call wrapper that performs `ERC20.permit` on `token`. Lookup `IERC20.permit`.\"},\"registerProtocol()\":{\"notice\":\"Other contracts need to register with this master contract so that users can approve them for the BentoBox.\"},\"setMasterContractApproval(address,address,bool,uint8,bytes32,bytes32)\":{\"notice\":\"Approves or revokes a `masterContract` access to `user` funds.\"},\"setStrategy(address,address)\":{\"notice\":\"Sets the contract address of a new strategy that conforms to `IStrategy` for `token`. Must be called twice with the same arguments. A new strategy becomes pending first and can be activated once `STRATEGY_DELAY` is over.\"},\"setStrategyTargetPercentage(address,uint64)\":{\"notice\":\"Sets the target percentage of the strategy for `token`.\"},\"transfer(address,address,address,uint256)\":{\"notice\":\"Transfer shares from a user account to another one.\"},\"transferMultiple(address,address,address[],uint256[])\":{\"notice\":\"Transfer shares from a user account to multiple other ones.\"},\"transferOwnership(address,bool,bool)\":{\"notice\":\"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.\"},\"whitelistMasterContract(address,bool)\":{\"notice\":\"Enables or disables a contract for approval without signed message.\"},\"whitelistedMasterContracts(address)\":{\"notice\":\"masterContract to whitelisted state for approval without signed message\"},\"withdraw(address,address,address,uint256,uint256)\":{\"notice\":\"Withdraws an amount of `token` from a user account.\"}},\"notice\":\"The BentoBox is a vault for tokens. The stored tokens can be flash loaned and used in strategies. Yield from this will go to the token depositors. Rebasing tokens ARE NOT supported and WILL cause loss of funds. Any funds transfered directly onto the BentoBox will be lost, use the deposit function instead.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/BentoBoxV1Flat.sol\":\"BentoBoxV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/flat/BentoBoxV1Flat.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// The BentoBox\\n\\n//  \\u2584\\u2584\\u2584\\u2584\\u00b7 \\u2584\\u2584\\u2584 . \\u2590 \\u2584 \\u2584\\u2584\\u2584\\u2584\\u2584      \\u2584\\u2584\\u2584\\u2584\\u00b7       \\u2590\\u2584\\u2022 \\u2584\\n//  \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u2580\\u2584.\\u2580\\u00b7\\u2588\\u258c\\u2590\\u2588\\u2022\\u2588\\u2588  \\u25aa     \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u25aa      \\u2588\\u258c\\u2588\\u258c\\u25aa\\n//  \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584\\u2590\\u2580\\u2580\\u25aa\\u2584\\u2590\\u2588\\u2590\\u2590\\u258c \\u2590\\u2588.\\u25aa \\u2584\\u2588\\u2580\\u2584 \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584 \\u2584\\u2588\\u2580\\u2584  \\u00b7\\u2588\\u2588\\u00b7\\n//  \\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u2584\\u2584\\u258c\\u2588\\u2588\\u2590\\u2588\\u258c \\u2590\\u2588\\u258c\\u00b7\\u2590\\u2588\\u258c.\\u2590\\u258c\\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u258c.\\u2590\\u258c\\u25aa\\u2590\\u2588\\u00b7\\u2588\\u258c\\n//  \\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2580\\u2580 \\u2580\\u2580 \\u2588\\u25aa \\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u2022\\u2580\\u2580 \\u2580\\u2580\\n\\n// This contract stores funds, handles their transfers, supports flash loans and strategies.\\n\\n// Copyright (c) 2021 BoringCrypto - All rights reserved\\n// Twitter: @Boring_Crypto\\n\\n// Special thanks to Keno for all his hard work and support\\n\\n// Version 22-Mar-2021\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable not-rely-on-time\\n// solhint-disable no-inline-assembly\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function decimals() external view returns (uint256);\\n}\\n\\n// File contracts/interfaces/IFlashLoan.sol\\n// License-Identifier: MIT\\n\\ninterface IFlashBorrower {\\n    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param token The address of the token that is loaned.\\n    /// @param amount of the `token` that is loaned.\\n    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onFlashLoan(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IBatchFlashBorrower {\\n    /// @notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param tokens Array of addresses for ERC-20 tokens that is loaned.\\n    /// @param amounts A one-to-one map to `tokens` that is loaned.\\n    /// @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onBatchFlashLoan(\\n        address sender,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata fees,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File contracts/interfaces/IWETH.sol\\n// License-Identifier: MIT\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\\n// File contracts/interfaces/IStrategy.sol\\n// License-Identifier: MIT\\n\\ninterface IStrategy {\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\n    /// @param amount The amount of tokens to invest.\\n    function skim(uint256 amount) external;\\n\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\n    /// @dev The `actualAmount` should be very close to the amount.\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\n    /// @param amount The requested amount the caller wants to withdraw.\\n    /// @return actualAmount The real amount that is withdrawn.\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library using overflow-/underflow-safe math.\\nlibrary RebaseLibrary {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = elastic.mul(total.base) / total.elastic;\\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\\n                base = base.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = base.mul(total.elastic) / total.base;\\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\\n                elastic = elastic.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\\n    /// @return (Rebase) The new total.\\n    /// @return base in relationship to `elastic`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 base) {\\n        base = toBase(total, elastic, roundUp);\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return (total, base);\\n    }\\n\\n    /// @notice Sub `base` from `total` and update `total.elastic`.\\n    /// @return (Rebase) The new total.\\n    /// @return elastic in relationship to `base`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 elastic) {\\n        elastic = toElastic(total, base, roundUp);\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return (total, elastic);\\n    }\\n\\n    /// @notice Add `elastic` and `base` to `total`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Subtract `elastic` and `base` to `total`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Add `elastic` to `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.add(elastic.to128());\\n    }\\n\\n    /// @notice Subtract `elastic` from `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.sub(elastic.to128());\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() public {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IMasterContract {\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\n    /// Also kown as the constructor for cloned contracts.\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\n    /// @param data Can be abi encoded arguments or anything else.\\n    function init(bytes calldata data) external payable;\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringFactory.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BoringFactory {\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\n\\n    /// @notice Mapping from clone contracts to their masterContract.\\n    mapping(address => address) public masterContractOf;\\n\\n    /// @notice Deploys a given master Contract as a clone.\\n    /// Any ETH transferred with this call is forwarded to the new clone.\\n    /// Emits `LogDeploy`.\\n    /// @param masterContract The address of the contract to clone.\\n    /// @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\\n    /// @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\\n    /// @return cloneAddress Address of the created clone contract.\\n    function deploy(\\n        address masterContract,\\n        bytes calldata data,\\n        bool useCreate2\\n    ) public payable returns (address cloneAddress) {\\n        require(masterContract != address(0), \\\"BoringFactory: No masterContract\\\");\\n        bytes20 targetBytes = bytes20(masterContract); // Takes the first 20 bytes of the masterContract's address\\n\\n        if (useCreate2) {\\n            // each masterContract has different code already. So clones are distinguished by their data only.\\n            bytes32 salt = keccak256(data);\\n\\n            // Creates clone, more info here: https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create2(0, clone, 0x37, salt)\\n            }\\n        } else {\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create(0, clone, 0x37)\\n            }\\n        }\\n        masterContractOf[cloneAddress] = masterContract;\\n\\n        IMasterContract(cloneAddress).init{value: msg.value}(data);\\n\\n        emit LogDeploy(masterContract, data, cloneAddress);\\n    }\\n}\\n\\n// File contracts/MasterContractManager.sol\\n// License-Identifier: UNLICENSED\\n\\ncontract MasterContractManager is BoringOwnable, BoringFactory {\\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\\n    event LogRegisterProtocol(address indexed protocol);\\n\\n    /// @notice masterContract to user to approval state\\n    mapping(address => mapping(address => bool)) public masterContractApproved;\\n    /// @notice masterContract to whitelisted state for approval without signed message\\n    mapping(address => bool) public whitelistedMasterContracts;\\n    /// @notice user nonces for masterContract approvals\\n    mapping(address => uint256) public nonces;\\n\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n    // See https://eips.ethereum.org/EIPS/eip-191\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\n    bytes32 private constant APPROVAL_SIGNATURE_HASH =\\n        keccak256(\\\"SetMasterContractApproval(string warning,address user,address masterContract,bool approved,uint256 nonce)\\\");\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\n    }\\n\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, keccak256(\\\"BentoBox V1\\\"), chainId, address(this)));\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @notice Other contracts need to register with this master contract so that users can approve them for the BentoBox.\\n    function registerProtocol() public {\\n        masterContractOf[msg.sender] = msg.sender;\\n        emit LogRegisterProtocol(msg.sender);\\n    }\\n\\n    /// @notice Enables or disables a contract for approval without signed message.\\n    function whitelistMasterContract(address masterContract, bool approved) public onlyOwner {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: Cannot approve 0\\\");\\n\\n        // Effects\\n        whitelistedMasterContracts[masterContract] = approved;\\n        emit LogWhiteListMasterContract(masterContract, approved);\\n    }\\n\\n    /// @notice Approves or revokes a `masterContract` access to `user` funds.\\n    /// @param user The address of the user that approves or revokes access.\\n    /// @param masterContract The address who gains or loses access.\\n    /// @param approved If True approves access. If False revokes access.\\n    /// @param v Part of the signature. (See EIP-191)\\n    /// @param r Part of the signature. (See EIP-191)\\n    /// @param s Part of the signature. (See EIP-191)\\n    // F4 - Check behaviour for all function arguments when wrong or extreme\\n    // F4: Don't allow masterContract 0 to be approved. Unknown contracts will have a masterContract of 0.\\n    // F4: User can't be 0 for signed approvals because the recoveredAddress will be 0 if ecrecover fails\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: masterC not set\\\"); // Important for security\\n\\n        // If no signature is provided, the fallback is executed\\n        if (r == 0 && s == 0 && v == 0) {\\n            require(user == msg.sender, \\\"MasterCMgr: user not sender\\\");\\n            require(masterContractOf[user] == address(0), \\\"MasterCMgr: user is clone\\\");\\n            require(whitelistedMasterContracts[masterContract], \\\"MasterCMgr: not whitelisted\\\");\\n        } else {\\n            // Important for security - any address without masterContract has address(0) as masterContract\\n            // So approving address(0) would approve every address, leading to full loss of funds\\n            // Also, ecrecover returns address(0) on failure. So we check this:\\n            require(user != address(0), \\\"MasterCMgr: User cannot be 0\\\");\\n\\n            // C10 - Protect signatures against replay, use nonce and chainId (SWC-121)\\n            // C10: nonce + chainId are used to prevent replays\\n            // C11 - All signatures strictly EIP-712 (SWC-117 SWC-122)\\n            // C11: signature is EIP-712 compliant\\n            // C12 - abi.encodePacked can't contain variable length user input (SWC-133)\\n            // C12: abi.encodePacked has fixed length parameters\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA,\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            APPROVAL_SIGNATURE_HASH,\\n                            approved\\n                                ? keccak256(\\\"Give FULL access to funds in (and approved to) BentoBox?\\\")\\n                                : keccak256(\\\"Revoke access to BentoBox?\\\"),\\n                            user,\\n                            masterContract,\\n                            approved,\\n                            nonces[user]++\\n                        )\\n                    )\\n                )\\n            );\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress == user, \\\"MasterCMgr: Invalid Signature\\\");\\n        }\\n\\n        // Effects\\n        masterContractApproved[masterContract][user] = approved;\\n        emit LogSetMasterContractApproval(masterContract, user, approved);\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringBatchable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BaseBoringBatchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /// @notice Allows batched call to self (this contract).\\n    /// @param calls An array of inputs for each call.\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n    /// @return successes An array indicating the success of a call, mapped one-to-one to `calls`.\\n    /// @return results An array with the returned data of each function call, mapped one-to-one to `calls`.\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results) {\\n        successes = new bool[](calls.length);\\n        results = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\n            require(success || !revertOnFail, _getRevertMsg(result));\\n            successes[i] = success;\\n            results[i] = result;\\n        }\\n    }\\n}\\n\\ncontract BoringBatchable is BaseBoringBatchable {\\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\\n    /// Lookup `IERC20.permit`.\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\n    function permitToken(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        token.permit(from, to, amount, deadline, v, r, s);\\n    }\\n}\\n\\n// File contracts/BentoBox.sol\\n// License-Identifier: UNLICENSED\\n\\n/// @title BentoBox\\n/// @author BoringCrypto, Keno\\n/// @notice The BentoBox is a vault for tokens. The stored tokens can be flash loaned and used in strategies.\\n/// Yield from this will go to the token depositors.\\n/// Rebasing tokens ARE NOT supported and WILL cause loss of funds.\\n/// Any funds transfered directly onto the BentoBox will be lost, use the deposit function instead.\\ncontract BentoBoxV1 is MasterContractManager, BoringBatchable {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n    using BoringERC20 for IERC20;\\n    using RebaseLibrary for Rebase;\\n\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n\\n    event LogDeposit(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogWithdraw(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogTransfer(IERC20 indexed token, address indexed from, address indexed to, uint256 share);\\n\\n    event LogFlashLoan(address indexed borrower, IERC20 indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\\n\\n    event LogStrategyTargetPercentage(IERC20 indexed token, uint256 targetPercentage);\\n    event LogStrategyQueued(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategySet(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategyInvest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyDivest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyProfit(IERC20 indexed token, uint256 amount);\\n    event LogStrategyLoss(IERC20 indexed token, uint256 amount);\\n\\n    // *************** //\\n    // *** STRUCTS *** //\\n    // *************** //\\n\\n    struct StrategyData {\\n        uint64 strategyStartDate;\\n        uint64 targetPercentage;\\n        uint128 balance; // the balance of the strategy that BentoBox thinks is in there\\n    }\\n\\n    // ******************************** //\\n    // *** CONSTANTS AND IMMUTABLES *** //\\n    // ******************************** //\\n\\n    // V2 - Can they be private?\\n    // V2: Private to save gas, to verify it's correct, check the constructor arguments\\n    IERC20 private immutable wethToken;\\n\\n    IERC20 private constant USE_ETHEREUM = IERC20(0);\\n    uint256 private constant FLASH_LOAN_FEE = 50; // 0.05%\\n    uint256 private constant FLASH_LOAN_FEE_PRECISION = 1e5;\\n    uint256 private constant STRATEGY_DELAY = 0 weeks;\\n    uint256 private constant MAX_TARGET_PERCENTAGE = 95; // 95%\\n    uint256 private constant MINIMUM_SHARE_BALANCE = 1000; // To prevent the ratio going off\\n\\n    // ***************** //\\n    // *** VARIABLES *** //\\n    // ***************** //\\n\\n    // Balance per token per address/contract in shares\\n    mapping(IERC20 => mapping(address => uint256)) public balanceOf;\\n\\n    // Rebase from amount to share\\n    mapping(IERC20 => Rebase) public totals;\\n\\n    mapping(IERC20 => IStrategy) public strategy;\\n    mapping(IERC20 => IStrategy) public pendingStrategy;\\n    mapping(IERC20 => StrategyData) public strategyData;\\n\\n    // ******************* //\\n    // *** CONSTRUCTOR *** //\\n    // ******************* //\\n\\n    constructor(IERC20 wethToken_) public {\\n        wethToken = wethToken_;\\n    }\\n\\n    // Just for testing purposes!!! Don't deploy this contract on production!!\\n    function setTokenTotal(\\n        IERC20 token,\\n        uint128 elastic,\\n        uint128 base\\n    ) public {\\n        Rebase memory total;\\n        total.elastic = elastic;\\n        total.base = base;\\n        totals[token] = total;\\n    }\\n\\n    // ***************** //\\n    // *** MODIFIERS *** //\\n    // ***************** //\\n\\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\\n    /// If 'from' is msg.sender, it's allowed.\\n    /// If 'from' is the BentoBox itself, it's allowed. Any ETH, token balances (above the known balances) or BentoBox balances\\n    /// can be taken by anyone.\\n    /// This is to enable skimming, not just for deposits, but also for withdrawals or transfers, enabling better composability.\\n    /// If 'from' is a clone of a masterContract AND the 'from' address has approved that masterContract, it's allowed.\\n    modifier allowed(address from) {\\n        if (from != msg.sender && from != address(this)) {\\n            // From is sender or you are skimming\\n            address masterContract = masterContractOf[msg.sender];\\n            require(masterContract != address(0), \\\"BentoBox: no masterContract\\\");\\n            require(masterContractApproved[masterContract][from], \\\"BentoBox: Transfer not approved\\\");\\n        }\\n        _;\\n    }\\n\\n    // ************************** //\\n    // *** INTERNAL FUNCTIONS *** //\\n    // ************************** //\\n\\n    /// @dev Returns the total balance of `token` this contracts holds,\\n    /// plus the total amount this contract thinks the strategy holds.\\n    function _tokenBalanceOf(IERC20 token) internal view returns (uint256 amount) {\\n        amount = token.balanceOf(address(this)).add(strategyData[token].balance);\\n    }\\n\\n    // ************************ //\\n    // *** PUBLIC FUNCTIONS *** //\\n    // ************************ //\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share) {\\n        share = totals[token].toBase(amount, roundUp);\\n    }\\n\\n    /// @dev Helper function represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        IERC20 token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount) {\\n        amount = totals[token].toElastic(share, roundUp);\\n    }\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public payable allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n\\n        // If a new token gets added, the tokenSupply call checks that this is a deployed contract. Needed for security.\\n        require(total.elastic != 0 || token.totalSupply() > 0, \\\"BentoBox: No tokens\\\");\\n        if (share == 0) {\\n            // value of the share may be lower than the amount due to rounding, that's ok\\n            share = total.toBase(amount, false);\\n            // Any deposit should lead to at least the minimum share balance, otherwise it's ignored (no amount taken)\\n            if (total.base.add(share.to128()) < MINIMUM_SHARE_BALANCE) {\\n                return (0, 0);\\n            }\\n        } else {\\n            // amount may be lower than the value of share due to rounding, in that case, add 1 to amount (Always round up)\\n            amount = total.toElastic(share, true);\\n        }\\n\\n        // In case of skimming, check that only the skimmable amount is taken.\\n        // For ETH, the full balance is available, so no need to check.\\n        // During flashloans the _tokenBalanceOf is lower than 'reality', so skimming deposits will mostly fail during a flashloan.\\n        require(\\n            from != address(this) || token_ == USE_ETHEREUM || amount <= _tokenBalanceOf(token).sub(total.elastic),\\n            \\\"BentoBox: Skim too much\\\"\\n        );\\n\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n        total.base = total.base.add(share.to128());\\n        total.elastic = total.elastic.add(amount.to128());\\n        totals[token] = total;\\n\\n        // Interactions\\n        // During the first deposit, we check that this token is 'real'\\n        if (token_ == USE_ETHEREUM) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the WETH implementation is faulty or malicious, it will block adding ETH (but we know the WETH implementation)\\n            IWETH(address(wethToken)).deposit{value: amount}();\\n        } else if (from != address(this)) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the token implementation is faulty or malicious, it may block adding tokens. Good.\\n            token.safeTransferFrom(from, address(this), amount);\\n        }\\n        emit LogDeposit(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n        if (share == 0) {\\n            // value of the share paid could be lower than the amount paid due to rounding, in that case, add a share (Always round up)\\n            share = total.toBase(amount, true);\\n        } else {\\n            // amount may be lower than the value of share due to rounding, that's ok\\n            amount = total.toElastic(share, false);\\n        }\\n\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        total.elastic = total.elastic.sub(amount.to128());\\n        total.base = total.base.sub(share.to128());\\n        // There have to be at least 1000 shares left to prevent reseting the share/amount ratio (unless it's fully emptied)\\n        require(total.base >= MINIMUM_SHARE_BALANCE || total.base == 0, \\\"BentoBox: cannot empty\\\");\\n        totals[token] = total;\\n\\n        // Interactions\\n        if (token_ == USE_ETHEREUM) {\\n            // X2, X3: A revert or big gas usage in the WETH contract could block withdrawals, but WETH9 is fine.\\n            IWETH(address(wethToken)).withdraw(amount);\\n            // X2, X3: A revert or big gas usage could block, however, the to address is under control of the caller.\\n            (bool success, ) = to.call{value: amount}(\\\"\\\");\\n            require(success, \\\"BentoBox: ETH transfer failed\\\");\\n        } else {\\n            // X2, X3: A malicious token could block withdrawal of just THAT token.\\n            //         masterContracts may want to take care not to rely on withdraw always succeeding.\\n            token.safeTransfer(to, amount);\\n        }\\n        emit LogWithdraw(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    // Clones of master contracts can transfer from any account that has approved them\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transferMultiple for gas optimization\\n    function transfer(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) public allowed(from) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n\\n        emit LogTransfer(token, from, to, share);\\n    }\\n\\n    /// @notice Transfer shares from a user account to multiple other ones.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param tos The receivers of the tokens.\\n    /// @param shares The amount of `token` in shares for each receiver in `tos`.\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transfer for gas optimization\\n    function transferMultiple(\\n        IERC20 token,\\n        address from,\\n        address[] calldata tos,\\n        uint256[] calldata shares\\n    ) public allowed(from) {\\n        // Checks\\n        require(tos[0] != address(0), \\\"BentoBox: to[0] not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        uint256 totalAmount;\\n        uint256 len = tos.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address to = tos[i];\\n            balanceOf[token][to] = balanceOf[token][to].add(shares[i]);\\n            totalAmount = totalAmount.add(shares[i]);\\n            emit LogTransfer(token, from, to, shares[i]);\\n        }\\n        balanceOf[token][from] = balanceOf[token][from].sub(totalAmount);\\n    }\\n\\n    /// @notice Flashloan ability.\\n    /// @param borrower The address of the contract that implements and conforms to `IFlashBorrower` and handles the flashloan.\\n    /// @param receiver Address of the token receiver.\\n    /// @param token The address of the token to receive.\\n    /// @param amount of the tokens to receive.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function flashLoan(\\n        IFlashBorrower borrower,\\n        address receiver,\\n        IERC20 token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public {\\n        uint256 fee = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n        token.safeTransfer(receiver, amount);\\n\\n        borrower.onFlashLoan(msg.sender, token, amount, fee, data);\\n\\n        require(_tokenBalanceOf(token) >= totals[token].addElastic(fee.to128()), \\\"BentoBox: Wrong amount\\\");\\n        emit LogFlashLoan(address(borrower), token, amount, fee, receiver);\\n    }\\n\\n    /// @notice Support for batched flashloans. Useful to request multiple different `tokens` in a single transaction.\\n    /// @param borrower The address of the contract that implements and conforms to `IBatchFlashBorrower` and handles the flashloan.\\n    /// @param receivers An array of the token receivers. A one-to-one mapping with `tokens` and `amounts`.\\n    /// @param tokens The addresses of the tokens.\\n    /// @param amounts of the tokens for each receiver.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function batchFlashLoan(\\n        IBatchFlashBorrower borrower,\\n        address[] calldata receivers,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public {\\n        uint256[] memory fees = new uint256[](tokens.length);\\n\\n        uint256 len = tokens.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 amount = amounts[i];\\n            fees[i] = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n\\n            tokens[i].safeTransfer(receivers[i], amounts[i]);\\n        }\\n\\n        borrower.onBatchFlashLoan(msg.sender, tokens, amounts, fees, data);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            IERC20 token = tokens[i];\\n            require(_tokenBalanceOf(token) >= totals[token].addElastic(fees[i].to128()), \\\"BentoBox: Wrong amount\\\");\\n            emit LogFlashLoan(address(borrower), token, amounts[i], fees[i], receivers[i]);\\n        }\\n    }\\n\\n    /// @notice Sets the target percentage of the strategy for `token`.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param targetPercentage_ The new target in percent. Must be lesser or equal to `MAX_TARGET_PERCENTAGE`.\\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) public onlyOwner {\\n        // Checks\\n        require(targetPercentage_ <= MAX_TARGET_PERCENTAGE, \\\"StrategyManager: Target too high\\\");\\n\\n        // Effects\\n        strategyData[token].targetPercentage = targetPercentage_;\\n        emit LogStrategyTargetPercentage(token, targetPercentage_);\\n    }\\n\\n    /// @notice Sets the contract address of a new strategy that conforms to `IStrategy` for `token`.\\n    /// Must be called twice with the same arguments.\\n    /// A new strategy becomes pending first and can be activated once `STRATEGY_DELAY` is over.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param newStrategy The address of the contract that conforms to `IStrategy`.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // C4 - Use block.timestamp only for long intervals (SWC-116)\\n    // C4: block.timestamp is used for a period of 2 weeks, which is long enough\\n    function setStrategy(IERC20 token, IStrategy newStrategy) public onlyOwner {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy pending = pendingStrategy[token];\\n        if (data.strategyStartDate == 0 || pending != newStrategy) {\\n            pendingStrategy[token] = newStrategy;\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: Our sun will swallow the earth well before this overflows\\n            data.strategyStartDate = (block.timestamp + STRATEGY_DELAY).to64();\\n            emit LogStrategyQueued(token, newStrategy);\\n        } else {\\n            require(data.strategyStartDate != 0 && block.timestamp >= data.strategyStartDate, \\\"StrategyManager: Too early\\\");\\n            if (address(strategy[token]) != address(0)) {\\n                int256 balanceChange = strategy[token].exit(data.balance);\\n                // Effects\\n                if (balanceChange > 0) {\\n                    uint256 add = uint256(balanceChange);\\n                    totals[token].addElastic(add);\\n                    emit LogStrategyProfit(token, add);\\n                } else if (balanceChange < 0) {\\n                    uint256 sub = uint256(-balanceChange);\\n                    totals[token].subElastic(sub);\\n                    emit LogStrategyLoss(token, sub);\\n                }\\n\\n                emit LogStrategyDivest(token, data.balance);\\n            }\\n            strategy[token] = pending;\\n            data.strategyStartDate = 0;\\n            data.balance = 0;\\n            pendingStrategy[token] = IStrategy(0);\\n            emit LogStrategySet(token, newStrategy);\\n        }\\n        strategyData[token] = data;\\n    }\\n\\n    /// @notice The actual process of yield farming. Executes the strategy of `token`.\\n    /// Optionally does housekeeping if `balance` is true.\\n    /// `maxChangeAmount` is relevant for skimming or withdrawing if `balance` is true.\\n    /// @param token The address of the token for which a strategy is deployed.\\n    /// @param balance True if housekeeping should be done.\\n    /// @param maxChangeAmount The maximum amount for either pulling or pushing from/to the `IStrategy` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // F5: Not followed to prevent reentrancy issues with flashloans and BentoBox skims?\\n    function harvest(\\n        IERC20 token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) public {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy _strategy = strategy[token];\\n        int256 balanceChange = _strategy.harvest(data.balance, msg.sender);\\n        if (balanceChange == 0 && !balance) {\\n            return;\\n        }\\n\\n        uint256 totalElastic = totals[token].elastic;\\n\\n        if (balanceChange > 0) {\\n            uint256 add = uint256(balanceChange);\\n            totalElastic = totalElastic.add(add);\\n            totals[token].elastic = totalElastic.to128();\\n            emit LogStrategyProfit(token, add);\\n        } else if (balanceChange < 0) {\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: balanceChange could overflow if it's max negative int128.\\n            // But tokens with balances that large are not supported by the BentoBox.\\n            uint256 sub = uint256(-balanceChange);\\n            totalElastic = totalElastic.sub(sub);\\n            totals[token].elastic = totalElastic.to128();\\n            data.balance = data.balance.sub(sub.to128());\\n            emit LogStrategyLoss(token, sub);\\n        }\\n\\n        if (balance) {\\n            uint256 targetBalance = totalElastic.mul(data.targetPercentage) / 100;\\n            // if data.balance == targetBalance there is nothing to update\\n            if (data.balance < targetBalance) {\\n                uint256 amountOut = targetBalance.sub(data.balance);\\n                if (maxChangeAmount != 0 && amountOut > maxChangeAmount) {\\n                    amountOut = maxChangeAmount;\\n                }\\n                token.safeTransfer(address(_strategy), amountOut);\\n                data.balance = data.balance.add(amountOut.to128());\\n                _strategy.skim(amountOut);\\n                emit LogStrategyInvest(token, amountOut);\\n            } else if (data.balance > targetBalance) {\\n                uint256 amountIn = data.balance.sub(targetBalance.to128());\\n                if (maxChangeAmount != 0 && amountIn > maxChangeAmount) {\\n                    amountIn = maxChangeAmount;\\n                }\\n\\n                uint256 actualAmountIn = _strategy.withdraw(amountIn);\\n\\n                data.balance = data.balance.sub(actualAmountIn.to128());\\n                emit LogStrategyDivest(token, actualAmountIn);\\n            }\\n        }\\n\\n        strategyData[token] = data;\\n    }\\n\\n    // Contract should be able to receive ETH deposits to support deposit & skim\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd8343e88ade6bf85fd34d3556aedb2b14fe07ca40396ae2ef6064c9d8da0d4d3\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":905,"contract":"contracts/flat/BentoBoxV1Flat.sol:BentoBoxV1","label":"owner","offset":0,"slot":"0","type":"t_address"},{"astId":907,"contract":"contracts/flat/BentoBoxV1Flat.sol:BentoBoxV1","label":"pendingOwner","offset":0,"slot":"1","type":"t_address"},{"astId":1051,"contract":"contracts/flat/BentoBoxV1Flat.sol:BentoBoxV1","label":"masterContractOf","offset":0,"slot":"2","type":"t_mapping(t_address,t_address)"},{"astId":1145,"contract":"contracts/flat/BentoBoxV1Flat.sol:BentoBoxV1","label":"masterContractApproved","offset":0,"slot":"3","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":1150,"contract":"contracts/flat/BentoBoxV1Flat.sol:BentoBoxV1","label":"whitelistedMasterContracts","offset":0,"slot":"4","type":"t_mapping(t_address,t_bool)"},{"astId":1155,"contract":"contracts/flat/BentoBoxV1Flat.sol:BentoBoxV1","label":"nonces","offset":0,"slot":"5","type":"t_mapping(t_address,t_uint256)"},{"astId":1706,"contract":"contracts/flat/BentoBoxV1Flat.sol:BentoBoxV1","label":"balanceOf","offset":0,"slot":"6","type":"t_mapping(t_contract(IERC20)72,t_mapping(t_address,t_uint256))"},{"astId":1710,"contract":"contracts/flat/BentoBoxV1Flat.sol:BentoBoxV1","label":"totals","offset":0,"slot":"7","type":"t_mapping(t_contract(IERC20)72,t_struct(Rebase)555_storage)"},{"astId":1714,"contract":"contracts/flat/BentoBoxV1Flat.sol:BentoBoxV1","label":"strategy","offset":0,"slot":"8","type":"t_mapping(t_contract(IERC20)72,t_contract(IStrategy)147)"},{"astId":1718,"contract":"contracts/flat/BentoBoxV1Flat.sol:BentoBoxV1","label":"pendingStrategy","offset":0,"slot":"9","type":"t_mapping(t_contract(IERC20)72,t_contract(IStrategy)147)"},{"astId":1722,"contract":"contracts/flat/BentoBoxV1Flat.sol:BentoBoxV1","label":"strategyData","offset":0,"slot":"10","type":"t_mapping(t_contract(IERC20)72,t_struct(StrategyData)1678_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(IERC20)72":{"encoding":"inplace","label":"contract IERC20","numberOfBytes":"20"},"t_contract(IStrategy)147":{"encoding":"inplace","label":"contract IStrategy","numberOfBytes":"20"},"t_mapping(t_address,t_address)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_contract(IERC20)72,t_contract(IStrategy)147)":{"encoding":"mapping","key":"t_contract(IERC20)72","label":"mapping(contract IERC20 => contract IStrategy)","numberOfBytes":"32","value":"t_contract(IStrategy)147"},"t_mapping(t_contract(IERC20)72,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_contract(IERC20)72","label":"mapping(contract IERC20 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_contract(IERC20)72,t_struct(Rebase)555_storage)":{"encoding":"mapping","key":"t_contract(IERC20)72","label":"mapping(contract IERC20 => struct Rebase)","numberOfBytes":"32","value":"t_struct(Rebase)555_storage"},"t_mapping(t_contract(IERC20)72,t_struct(StrategyData)1678_storage)":{"encoding":"mapping","key":"t_contract(IERC20)72","label":"mapping(contract IERC20 => struct BentoBoxV1.StrategyData)","numberOfBytes":"32","value":"t_struct(StrategyData)1678_storage"},"t_struct(Rebase)555_storage":{"encoding":"inplace","label":"struct Rebase","members":[{"astId":552,"contract":"contracts/flat/BentoBoxV1Flat.sol:BentoBoxV1","label":"elastic","offset":0,"slot":"0","type":"t_uint128"},{"astId":554,"contract":"contracts/flat/BentoBoxV1Flat.sol:BentoBoxV1","label":"base","offset":16,"slot":"0","type":"t_uint128"}],"numberOfBytes":"32"},"t_struct(StrategyData)1678_storage":{"encoding":"inplace","label":"struct BentoBoxV1.StrategyData","members":[{"astId":1673,"contract":"contracts/flat/BentoBoxV1Flat.sol:BentoBoxV1","label":"strategyStartDate","offset":0,"slot":"0","type":"t_uint64"},{"astId":1675,"contract":"contracts/flat/BentoBoxV1Flat.sol:BentoBoxV1","label":"targetPercentage","offset":8,"slot":"0","type":"t_uint64"},{"astId":1677,"contract":"contracts/flat/BentoBoxV1Flat.sol:BentoBoxV1","label":"balance","offset":16,"slot":"0","type":"t_uint128"}],"numberOfBytes":"32"},"t_uint128":{"encoding":"inplace","label":"uint128","numberOfBytes":"16"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"}}},"userdoc":{"kind":"user","methods":{"batch(bytes[],bool)":{"notice":"Allows batched call to self (this contract)."},"batchFlashLoan(address,address[],address[],uint256[],bytes)":{"notice":"Support for batched flashloans. Useful to request multiple different `tokens` in a single transaction."},"claimOwnership()":{"notice":"Needs to be called by `pendingOwner` to claim ownership."},"deploy(address,bytes,bool)":{"notice":"Deploys a given master Contract as a clone. Any ETH transferred with this call is forwarded to the new clone. Emits `LogDeploy`."},"deposit(address,address,address,uint256,uint256)":{"notice":"Deposit an amount of `token` represented in either `amount` or `share`."},"flashLoan(address,address,address,uint256,bytes)":{"notice":"Flashloan ability."},"harvest(address,bool,uint256)":{"notice":"The actual process of yield farming. Executes the strategy of `token`. Optionally does housekeeping if `balance` is true. `maxChangeAmount` is relevant for skimming or withdrawing if `balance` is true."},"masterContractApproved(address,address)":{"notice":"masterContract to user to approval state"},"masterContractOf(address)":{"notice":"Mapping from clone contracts to their masterContract."},"nonces(address)":{"notice":"user nonces for masterContract approvals"},"permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)":{"notice":"Call wrapper that performs `ERC20.permit` on `token`. Lookup `IERC20.permit`."},"registerProtocol()":{"notice":"Other contracts need to register with this master contract so that users can approve them for the BentoBox."},"setMasterContractApproval(address,address,bool,uint8,bytes32,bytes32)":{"notice":"Approves or revokes a `masterContract` access to `user` funds."},"setStrategy(address,address)":{"notice":"Sets the contract address of a new strategy that conforms to `IStrategy` for `token`. Must be called twice with the same arguments. A new strategy becomes pending first and can be activated once `STRATEGY_DELAY` is over."},"setStrategyTargetPercentage(address,uint64)":{"notice":"Sets the target percentage of the strategy for `token`."},"transfer(address,address,address,uint256)":{"notice":"Transfer shares from a user account to another one."},"transferMultiple(address,address,address[],uint256[])":{"notice":"Transfer shares from a user account to multiple other ones."},"transferOwnership(address,bool,bool)":{"notice":"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`."},"whitelistMasterContract(address,bool)":{"notice":"Enables or disables a contract for approval without signed message."},"whitelistedMasterContracts(address)":{"notice":"masterContract to whitelisted state for approval without signed message"},"withdraw(address,address,address,uint256,uint256)":{"notice":"Withdraws an amount of `token` from a user account."}},"notice":"The BentoBox is a vault for tokens. The stored tokens can be flash loaned and used in strategies. Yield from this will go to the token depositors. Rebasing tokens ARE NOT supported and WILL cause loss of funds. Any funds transfered directly onto the BentoBox will be lost, use the deposit function instead.","version":1}},"BoringBatchable":{"abi":[{"inputs":[{"internalType":"bytes[]","name":"calls","type":"bytes[]"},{"internalType":"bool","name":"revertOnFail","type":"bool"}],"name":"batch","outputs":[{"internalType":"bool[]","name":"successes","type":"bool[]"},{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permitToken","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"batch(bytes[],bool)":{"params":{"calls":"An array of inputs for each call.","revertOnFail":"If True then reverts after a failed call and stops doing further calls."},"returns":{"results":"An array with the returned data of each function call, mapped one-to-one to `calls`.","successes":"An array indicating the success of a call, mapped one-to-one to `calls`."}}},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"608060405234801561001057600080fd5b5061074f806100206000396000f3fe6080604052600436106100295760003560e01c80637c516e941461002e578063d2423b5114610050575b600080fd5b34801561003a57600080fd5b5061004e6100493660046103b5565b61007a565b005b61006361005e366004610331565b610114565b60405161007192919061059d565b60405180910390f35b6040517fd505accf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89169063d505accf906100d8908a908a908a908a908a908a908a9060040161054f565b600060405180830381600087803b1580156100f257600080fd5b505af1158015610106573d6000803e3d6000fd5b505050505050505050505050565b6060808367ffffffffffffffff8111801561012e57600080fd5b50604051908082528060200260200182016040528015610158578160200160208202803683370190505b5091508367ffffffffffffffff8111801561017257600080fd5b506040519080825280602002602001820160405280156101a657816020015b60608152602001906001900390816101915790505b50905060005b848110156102c05760006060308888858181106101c557fe5b90506020028101906101d79190610651565b6040516101e592919061053f565b600060405180830381855af49150503d8060008114610220576040519150601f19603f3d011682016040523d82523d6000602084013e610225565b606091505b50915091508180610234575085155b61023d826102c9565b9061027e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102759190610637565b60405180910390fd5b508185848151811061028c57fe5b602002602001019015159081151581525050808484815181106102ab57fe5b602090810291909101015250506001016101ac565b50935093915050565b606060448251101561030f575060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c79000000602082015261032c565b60048201915081806020019051810190610329919061043c565b90505b919050565b600080600060408486031215610345578283fd5b833567ffffffffffffffff8082111561035c578485fd5b818601915086601f83011261036f578485fd5b81358181111561037d578586fd5b8760208083028501011115610390578586fd5b6020928301955093505084013580151581146103aa578182fd5b809150509250925092565b600080600080600080600080610100898b0312156103d1578384fd5b88356103dc816106f4565b975060208901356103ec816106f4565b965060408901356103fc816106f4565b9550606089013594506080890135935060a089013560ff8116811461041f578384fd5b979a969950949793969295929450505060c08201359160e0013590565b60006020828403121561044d578081fd5b815167ffffffffffffffff80821115610464578283fd5b818401915084601f830112610477578283fd5b815181811115610485578384fd5b60405160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011682010181811084821117156104c3578586fd5b6040528181528382016020018710156104da578485fd5b6104eb8260208301602087016106c4565b9695505050505050565b6000815180845261050d8160208601602086016106c4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000828483379101908152919050565b73ffffffffffffffffffffffffffffffffffffffff97881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b604080825283519082018190526000906020906060840190828701845b828110156105d85781511515845292840192908401906001016105ba565b505050838103828501528085516105ef81846106bb565b91508192508381028201848801865b838110156106285785830385526106168383516104f5565b948701949250908601906001016105fe565b50909998505050505050505050565b60006020825261064a60208301846104f5565b9392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610685578283fd5b83018035915067ffffffffffffffff82111561069f578283fd5b6020019150368190038213156106b457600080fd5b9250929050565b90815260200190565b60005b838110156106df5781810151838201526020016106c7565b838111156106ee576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461071657600080fd5b5056fea26469706673582212200f1853b009a29211bbc3235ec8f250939eb1f61245e040ec5e4e24679e72b86264736f6c634300060c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x74F DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x29 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7C516E94 EQ PUSH2 0x2E JUMPI DUP1 PUSH4 0xD2423B51 EQ PUSH2 0x50 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4E PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B5 JUMP JUMPDEST PUSH2 0x7A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x63 PUSH2 0x5E CALLDATASIZE PUSH1 0x4 PUSH2 0x331 JUMP JUMPDEST PUSH2 0x114 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x71 SWAP3 SWAP2 SWAP1 PUSH2 0x59D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xD505ACCF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP1 PUSH4 0xD505ACCF SWAP1 PUSH2 0xD8 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x54F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x106 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x12E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x158 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x172 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1A6 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x191 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2C0 JUMPI PUSH1 0x0 PUSH1 0x60 ADDRESS DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x1C5 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x1D7 SWAP2 SWAP1 PUSH2 0x651 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E5 SWAP3 SWAP2 SWAP1 PUSH2 0x53F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x220 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x225 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 PUSH2 0x234 JUMPI POP DUP6 ISZERO JUMPDEST PUSH2 0x23D DUP3 PUSH2 0x2C9 JUMP JUMPDEST SWAP1 PUSH2 0x27E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x275 SWAP2 SWAP1 PUSH2 0x637 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP2 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x28C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 ISZERO ISZERO SWAP1 DUP2 ISZERO ISZERO DUP2 MSTORE POP POP DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2AB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x1AC JUMP JUMPDEST POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x44 DUP3 MLOAD LT ISZERO PUSH2 0x30F JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH32 0x5472616E73616374696F6E2072657665727465642073696C656E746C79000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x32C JUMP JUMPDEST PUSH1 0x4 DUP3 ADD SWAP2 POP DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x329 SWAP2 SWAP1 PUSH2 0x43C JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x345 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x35C JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x36F JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x37D JUMPI DUP6 DUP7 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x390 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH1 0x20 SWAP3 DUP4 ADD SWAP6 POP SWAP4 POP POP DUP5 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x3AA JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x3D1 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0x3DC DUP2 PUSH2 0x6F4 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH2 0x3EC DUP2 PUSH2 0x6F4 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH2 0x3FC DUP2 PUSH2 0x6F4 JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD SWAP4 POP PUSH1 0xA0 DUP10 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x41F JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0xC0 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0xE0 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x44D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x464 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x477 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x485 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND DUP3 ADD ADD DUP2 DUP2 LT DUP5 DUP3 GT OR ISZERO PUSH2 0x4C3 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH1 0x40 MSTORE DUP2 DUP2 MSTORE DUP4 DUP3 ADD PUSH1 0x20 ADD DUP8 LT ISZERO PUSH2 0x4DA JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4EB DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x6C4 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x50D DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x6C4 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP8 DUP9 AND DUP2 MSTORE SWAP6 SWAP1 SWAP7 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xFF AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP4 MLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x20 SWAP1 PUSH1 0x60 DUP5 ADD SWAP1 DUP3 DUP8 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x5D8 JUMPI DUP2 MLOAD ISZERO ISZERO DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5BA JUMP JUMPDEST POP POP POP DUP4 DUP2 SUB DUP3 DUP6 ADD MSTORE DUP1 DUP6 MLOAD PUSH2 0x5EF DUP2 DUP5 PUSH2 0x6BB JUMP JUMPDEST SWAP2 POP DUP2 SWAP3 POP DUP4 DUP2 MUL DUP3 ADD DUP5 DUP9 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x628 JUMPI DUP6 DUP4 SUB DUP6 MSTORE PUSH2 0x616 DUP4 DUP4 MLOAD PUSH2 0x4F5 JUMP JUMPDEST SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5FE JUMP JUMPDEST POP SWAP1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x64A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x4F5 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x685 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x69F JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x6B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x6DF JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x6C7 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x6EE JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x716 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF XOR MSTORE8 0xB0 MULMOD LOG2 SWAP3 GT 0xBB 0xC3 0x23 0x5E 0xC8 CALLCODE POP SWAP4 SWAP15 0xB1 0xF6 SLT GASLIMIT 0xE0 BLOCKHASH 0xEC 0x5E 0x4E 0x24 PUSH8 0x9E72B86264736F6C PUSH4 0x4300060C STOP CALLER ","sourceMap":"26681:653:0:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106100295760003560e01c80637c516e941461002e578063d2423b5114610050575b600080fd5b34801561003a57600080fd5b5061004e6100493660046103b5565b61007a565b005b61006361005e366004610331565b610114565b60405161007192919061059d565b60405180910390f35b6040517fd505accf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89169063d505accf906100d8908a908a908a908a908a908a908a9060040161054f565b600060405180830381600087803b1580156100f257600080fd5b505af1158015610106573d6000803e3d6000fd5b505050505050505050505050565b6060808367ffffffffffffffff8111801561012e57600080fd5b50604051908082528060200260200182016040528015610158578160200160208202803683370190505b5091508367ffffffffffffffff8111801561017257600080fd5b506040519080825280602002602001820160405280156101a657816020015b60608152602001906001900390816101915790505b50905060005b848110156102c05760006060308888858181106101c557fe5b90506020028101906101d79190610651565b6040516101e592919061053f565b600060405180830381855af49150503d8060008114610220576040519150601f19603f3d011682016040523d82523d6000602084013e610225565b606091505b50915091508180610234575085155b61023d826102c9565b9061027e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102759190610637565b60405180910390fd5b508185848151811061028c57fe5b602002602001019015159081151581525050808484815181106102ab57fe5b602090810291909101015250506001016101ac565b50935093915050565b606060448251101561030f575060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c79000000602082015261032c565b60048201915081806020019051810190610329919061043c565b90505b919050565b600080600060408486031215610345578283fd5b833567ffffffffffffffff8082111561035c578485fd5b818601915086601f83011261036f578485fd5b81358181111561037d578586fd5b8760208083028501011115610390578586fd5b6020928301955093505084013580151581146103aa578182fd5b809150509250925092565b600080600080600080600080610100898b0312156103d1578384fd5b88356103dc816106f4565b975060208901356103ec816106f4565b965060408901356103fc816106f4565b9550606089013594506080890135935060a089013560ff8116811461041f578384fd5b979a969950949793969295929450505060c08201359160e0013590565b60006020828403121561044d578081fd5b815167ffffffffffffffff80821115610464578283fd5b818401915084601f830112610477578283fd5b815181811115610485578384fd5b60405160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011682010181811084821117156104c3578586fd5b6040528181528382016020018710156104da578485fd5b6104eb8260208301602087016106c4565b9695505050505050565b6000815180845261050d8160208601602086016106c4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000828483379101908152919050565b73ffffffffffffffffffffffffffffffffffffffff97881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b604080825283519082018190526000906020906060840190828701845b828110156105d85781511515845292840192908401906001016105ba565b505050838103828501528085516105ef81846106bb565b91508192508381028201848801865b838110156106285785830385526106168383516104f5565b948701949250908601906001016105fe565b50909998505050505050505050565b60006020825261064a60208301846104f5565b9392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610685578283fd5b83018035915067ffffffffffffffff82111561069f578283fd5b6020019150368190038213156106b457600080fd5b9250929050565b90815260200190565b60005b838110156106df5781810151838201526020016106c7565b838111156106ee576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461071657600080fd5b5056fea26469706673582212200f1853b009a29211bbc3235ec8f250939eb1f61245e040ec5e4e24679e72b86264736f6c634300060c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x29 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7C516E94 EQ PUSH2 0x2E JUMPI DUP1 PUSH4 0xD2423B51 EQ PUSH2 0x50 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4E PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B5 JUMP JUMPDEST PUSH2 0x7A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x63 PUSH2 0x5E CALLDATASIZE PUSH1 0x4 PUSH2 0x331 JUMP JUMPDEST PUSH2 0x114 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x71 SWAP3 SWAP2 SWAP1 PUSH2 0x59D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xD505ACCF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP1 PUSH4 0xD505ACCF SWAP1 PUSH2 0xD8 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x54F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x106 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x12E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x158 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x172 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1A6 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x191 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2C0 JUMPI PUSH1 0x0 PUSH1 0x60 ADDRESS DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x1C5 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x1D7 SWAP2 SWAP1 PUSH2 0x651 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E5 SWAP3 SWAP2 SWAP1 PUSH2 0x53F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x220 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x225 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 PUSH2 0x234 JUMPI POP DUP6 ISZERO JUMPDEST PUSH2 0x23D DUP3 PUSH2 0x2C9 JUMP JUMPDEST SWAP1 PUSH2 0x27E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x275 SWAP2 SWAP1 PUSH2 0x637 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP2 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x28C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 ISZERO ISZERO SWAP1 DUP2 ISZERO ISZERO DUP2 MSTORE POP POP DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2AB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x1AC JUMP JUMPDEST POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x44 DUP3 MLOAD LT ISZERO PUSH2 0x30F JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH32 0x5472616E73616374696F6E2072657665727465642073696C656E746C79000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x32C JUMP JUMPDEST PUSH1 0x4 DUP3 ADD SWAP2 POP DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x329 SWAP2 SWAP1 PUSH2 0x43C JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x345 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x35C JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x36F JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x37D JUMPI DUP6 DUP7 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x390 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH1 0x20 SWAP3 DUP4 ADD SWAP6 POP SWAP4 POP POP DUP5 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x3AA JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x3D1 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0x3DC DUP2 PUSH2 0x6F4 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH2 0x3EC DUP2 PUSH2 0x6F4 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH2 0x3FC DUP2 PUSH2 0x6F4 JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD SWAP4 POP PUSH1 0xA0 DUP10 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x41F JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0xC0 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0xE0 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x44D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x464 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x477 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x485 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND DUP3 ADD ADD DUP2 DUP2 LT DUP5 DUP3 GT OR ISZERO PUSH2 0x4C3 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH1 0x40 MSTORE DUP2 DUP2 MSTORE DUP4 DUP3 ADD PUSH1 0x20 ADD DUP8 LT ISZERO PUSH2 0x4DA JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4EB DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x6C4 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x50D DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x6C4 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP8 DUP9 AND DUP2 MSTORE SWAP6 SWAP1 SWAP7 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xFF AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP4 MLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x20 SWAP1 PUSH1 0x60 DUP5 ADD SWAP1 DUP3 DUP8 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x5D8 JUMPI DUP2 MLOAD ISZERO ISZERO DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5BA JUMP JUMPDEST POP POP POP DUP4 DUP2 SUB DUP3 DUP6 ADD MSTORE DUP1 DUP6 MLOAD PUSH2 0x5EF DUP2 DUP5 PUSH2 0x6BB JUMP JUMPDEST SWAP2 POP DUP2 SWAP3 POP DUP4 DUP2 MUL DUP3 ADD DUP5 DUP9 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x628 JUMPI DUP6 DUP4 SUB DUP6 MSTORE PUSH2 0x616 DUP4 DUP4 MLOAD PUSH2 0x4F5 JUMP JUMPDEST SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5FE JUMP JUMPDEST POP SWAP1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x64A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x4F5 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x685 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x69F JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x6B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x6DF JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x6C7 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x6EE JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x716 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF XOR MSTORE8 0xB0 MULMOD LOG2 SWAP3 GT 0xBB 0xC3 0x23 0x5E 0xC8 CALLCODE POP SWAP4 SWAP15 0xB1 0xF6 SLT GASLIMIT 0xE0 BLOCKHASH 0xEC 0x5E 0x4E 0x24 PUSH8 0x9E72B86264736F6C PUSH4 0x4300060C STOP CALLER ","sourceMap":"26681:653:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;27063:269;;;;;;;;;;-1:-1:-1;27063:269:0;;;;;:::i;:::-;;:::i;:::-;;26156:521;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;27063:269;27276:49;;;;;:12;;;;;;:49;;27289:4;;27295:2;;27299:6;;27307:8;;27317:1;;27320;;27323;;27276:49;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27063:269;;;;;;;;:::o;26156:521::-;26240:23;;26322:5;26311:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;26311:24:0;-1:-1:-1;26299:36:0;-1:-1:-1;26367:5:0;26355:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26345:35;;26395:9;26390:281;26410:16;;;26390:281;;;26448:12;26462:19;26493:4;26512:5;;26518:1;26512:8;;;;;;;;;;;;;;;;;;:::i;:::-;26485:36;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26447:74;;;;26543:7;:24;;;;26555:12;26554:13;26543:24;26569:21;26583:6;26569:13;:21::i;:::-;26535:56;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;26620:7;26605:9;26615:1;26605:12;;;;;;;;;;;;;:22;;;;;;;;;;;26654:6;26641:7;26649:1;26641:10;;;;;;;;;;;;;;;;;:19;-1:-1:-1;;26428:3:0;;26390:281;;;;26156:521;;;;;;:::o;24840:487::-;24912:13;25073:2;25052:11;:18;:23;25048:67;;;-1:-1:-1;25077:38:0;;;;;;;;;;;;;;;;;;;25048:67;25215:4;25202:11;25198:22;25183:37;;25257:11;25246:33;;;;;;;;;;;;:::i;:::-;25239:40;;24840:487;;;;:::o;1683:538:-1:-;;;;1847:2;1835:9;1826:7;1822:23;1818:32;1815:2;;;-1:-1;;1853:12;1815:2;1911:17;1898:31;1949:18;;1941:6;1938:30;1935:2;;;-1:-1;;1971:12;1935:2;2083:6;2072:9;2068:22;;;299:3;292:4;284:6;280:17;276:27;266:2;;-1:-1;;307:12;266:2;350:6;337:20;1949:18;369:6;366:30;363:2;;;-1:-1;;399:12;363:2;494:3;443:4;;478:6;474:17;435:6;460:32;;457:41;454:2;;;-1:-1;;501:12;454:2;443:4;431:17;;;;-1:-1;1991:109;-1:-1;;2173:22;;593:20;12779:13;;12772:21;14006:32;;13996:2;;-1:-1;;14042:12;13996:2;2145:60;;;;1809:412;;;;;:::o;2228:1143::-;;;;;;;;;2462:3;2450:9;2441:7;2437:23;2433:33;2430:2;;;-1:-1;;2469:12;2430:2;890:6;877:20;902:46;942:5;902:46;:::i;:::-;2521:76;-1:-1;2634:2;2673:22;;72:20;97:33;72:20;97:33;:::i;:::-;2642:63;-1:-1;2742:2;2781:22;;72:20;97:33;72:20;97:33;:::i;:::-;2750:63;-1:-1;2850:2;2889:22;;1480:20;;-1:-1;2958:3;2998:22;;1480:20;;-1:-1;3067:3;3105:22;;1615:20;13273:4;13262:16;;14523:33;;14513:2;;-1:-1;;14560:12;14513:2;2424:947;;;;-1:-1;2424:947;;;;;;3076:61;;-1:-1;;;3174:3;3214:22;;727:20;;3283:3;3323:22;727:20;;2424:947::o;3378:362::-;;3503:2;3491:9;3482:7;3478:23;3474:32;3471:2;;;-1:-1;;3509:12;3471:2;3560:17;3554:24;3598:18;;3590:6;3587:30;3584:2;;;-1:-1;;3620:12;3584:2;3707:6;3696:9;3692:22;;;1074:3;1067:4;1059:6;1055:17;1051:27;1041:2;;-1:-1;;1082:12;1041:2;1122:6;1116:13;3598:18;10447:6;10444:30;10441:2;;;-1:-1;;10477:12;10441:2;10110;10104:9;3503:2;10550:9;1067:4;10535:6;10531:17;10527:33;10140:6;10136:17;;10247:6;10235:10;10232:22;3598:18;10199:10;10196:34;10193:62;10190:2;;;-1:-1;;10258:12;10190:2;10110;10277:22;1215:21;;;1315:16;;;3503:2;1315:16;1312:25;-1:-1;1309:2;;;-1:-1;;1340:12;1309:2;1360:39;1392:6;3503:2;1291:5;1287:16;3503:2;1257:6;1253:17;1360:39;:::i;:::-;3640:84;3465:275;-1:-1;;;;;;3465:275::o;6451:323::-;;6583:5;11062:12;11877:6;11872:3;11865:19;6666:52;6711:6;11914:4;11909:3;11905:14;11914:4;6692:5;6688:16;6666:52;:::i;:::-;13809:2;13789:14;13805:7;13785:28;6730:39;;;;11914:4;6730:39;;6531:243;-1:-1;;6531:243::o;7369:291::-;;13372:6;13367:3;13362;13349:30;13410:16;;13403:27;;;13410:16;7513:147;-1:-1;7513:147::o;7667:884::-;13068:42;13057:54;;;4186:37;;13057:54;;;;8123:2;8108:18;;4186:37;8206:2;8191:18;;6061:37;;;;8289:2;8274:18;;6061:37;;;;13273:4;13262:16;8368:3;8353:19;;7322:35;8452:3;8437:19;;6061:37;8536:3;8521:19;;6061:37;;;;7958:3;7943:19;;7929:622::o;8558:653::-;8825:2;8839:47;;;11062:12;;8810:18;;;11865:19;;;8558:653;;11914:4;;11905:14;;;;10752;;;8558:653;4653:251;4678:6;4675:1;4672:13;4653:251;;;4739:13;;12779;12772:21;5944:34;;3889:14;;;;11599;;;;4700:1;4693:9;4653:251;;;4657:14;;;9050:9;9044:4;9040:20;11914:4;9024:9;9020:18;9013:48;9075:126;5181:5;11062:12;5200:95;5288:6;5283:3;5200:95;:::i;:::-;5193:102;;;;;11914:4;5352:6;5348:17;5343:3;5339:27;11914:4;5446:5;10752:14;-1:-1;5485:357;5510:6;5507:1;5504:13;5485:357;;;5572:9;5566:4;5562:20;5557:3;5550:33;4037:64;4097:3;5617:6;5611:13;4037:64;:::i;:::-;5821:14;;;;5631:90;-1:-1;11599:14;;;;4700:1;5525:9;5485:357;;;-1:-1;9067:134;;8796:415;-1:-1;;;;;;;;;8796:415::o;9218:310::-;;9365:2;9386:17;9379:47;9440:78;9365:2;9354:9;9350:18;9504:6;9440:78;:::i;:::-;9432:86;9336:192;-1:-1;;;9336:192::o;9535:506::-;;;9670:11;9657:25;9721:48;9745:8;9729:14;9725:29;9721:48;9701:18;9697:73;9687:2;;-1:-1;;9774:12;9687:2;9801:33;;9855:18;;;-1:-1;9893:18;9882:30;;9879:2;;;-1:-1;;9915:12;9879:2;9760:4;9943:13;;-1:-1;9729:14;9975:38;;;9965:49;;9962:2;;;10027:1;;10017:12;9962:2;9625:416;;;;;:::o;11750:175::-;11865:19;;;11914:4;11905:14;;11858:67::o;13445:268::-;13510:1;13517:101;13531:6;13528:1;13525:13;13517:101;;;13598:11;;;13592:18;13579:11;;;13572:39;13553:2;13546:10;13517:101;;;13633:6;13630:1;13627:13;13624:2;;;13510:1;13689:6;13684:3;13680:16;13673:27;13624:2;;13494:219;;;:::o;13826:117::-;13068:42;13913:5;13057:54;13888:5;13885:35;13875:2;;13934:1;;13924:12;13875:2;13869:74;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"374200","executionCost":"411","totalCost":"374611"},"external":{"batch(bytes[],bool)":"infinite","permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{"batch(bytes[],bool)":"d2423b51","permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)":"7c516e94"}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"calls\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"revertOnFail\",\"type\":\"bool\"}],\"name\":\"batch\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"successes\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"batch(bytes[],bool)\":{\"params\":{\"calls\":\"An array of inputs for each call.\",\"revertOnFail\":\"If True then reverts after a failed call and stops doing further calls.\"},\"returns\":{\"results\":\"An array with the returned data of each function call, mapped one-to-one to `calls`.\",\"successes\":\"An array indicating the success of a call, mapped one-to-one to `calls`.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batch(bytes[],bool)\":{\"notice\":\"Allows batched call to self (this contract).\"},\"permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Call wrapper that performs `ERC20.permit` on `token`. Lookup `IERC20.permit`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/BentoBoxV1Flat.sol\":\"BoringBatchable\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/flat/BentoBoxV1Flat.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// The BentoBox\\n\\n//  \\u2584\\u2584\\u2584\\u2584\\u00b7 \\u2584\\u2584\\u2584 . \\u2590 \\u2584 \\u2584\\u2584\\u2584\\u2584\\u2584      \\u2584\\u2584\\u2584\\u2584\\u00b7       \\u2590\\u2584\\u2022 \\u2584\\n//  \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u2580\\u2584.\\u2580\\u00b7\\u2588\\u258c\\u2590\\u2588\\u2022\\u2588\\u2588  \\u25aa     \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u25aa      \\u2588\\u258c\\u2588\\u258c\\u25aa\\n//  \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584\\u2590\\u2580\\u2580\\u25aa\\u2584\\u2590\\u2588\\u2590\\u2590\\u258c \\u2590\\u2588.\\u25aa \\u2584\\u2588\\u2580\\u2584 \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584 \\u2584\\u2588\\u2580\\u2584  \\u00b7\\u2588\\u2588\\u00b7\\n//  \\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u2584\\u2584\\u258c\\u2588\\u2588\\u2590\\u2588\\u258c \\u2590\\u2588\\u258c\\u00b7\\u2590\\u2588\\u258c.\\u2590\\u258c\\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u258c.\\u2590\\u258c\\u25aa\\u2590\\u2588\\u00b7\\u2588\\u258c\\n//  \\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2580\\u2580 \\u2580\\u2580 \\u2588\\u25aa \\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u2022\\u2580\\u2580 \\u2580\\u2580\\n\\n// This contract stores funds, handles their transfers, supports flash loans and strategies.\\n\\n// Copyright (c) 2021 BoringCrypto - All rights reserved\\n// Twitter: @Boring_Crypto\\n\\n// Special thanks to Keno for all his hard work and support\\n\\n// Version 22-Mar-2021\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable not-rely-on-time\\n// solhint-disable no-inline-assembly\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function decimals() external view returns (uint256);\\n}\\n\\n// File contracts/interfaces/IFlashLoan.sol\\n// License-Identifier: MIT\\n\\ninterface IFlashBorrower {\\n    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param token The address of the token that is loaned.\\n    /// @param amount of the `token` that is loaned.\\n    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onFlashLoan(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IBatchFlashBorrower {\\n    /// @notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param tokens Array of addresses for ERC-20 tokens that is loaned.\\n    /// @param amounts A one-to-one map to `tokens` that is loaned.\\n    /// @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onBatchFlashLoan(\\n        address sender,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata fees,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File contracts/interfaces/IWETH.sol\\n// License-Identifier: MIT\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\\n// File contracts/interfaces/IStrategy.sol\\n// License-Identifier: MIT\\n\\ninterface IStrategy {\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\n    /// @param amount The amount of tokens to invest.\\n    function skim(uint256 amount) external;\\n\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\n    /// @dev The `actualAmount` should be very close to the amount.\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\n    /// @param amount The requested amount the caller wants to withdraw.\\n    /// @return actualAmount The real amount that is withdrawn.\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library using overflow-/underflow-safe math.\\nlibrary RebaseLibrary {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = elastic.mul(total.base) / total.elastic;\\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\\n                base = base.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = base.mul(total.elastic) / total.base;\\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\\n                elastic = elastic.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\\n    /// @return (Rebase) The new total.\\n    /// @return base in relationship to `elastic`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 base) {\\n        base = toBase(total, elastic, roundUp);\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return (total, base);\\n    }\\n\\n    /// @notice Sub `base` from `total` and update `total.elastic`.\\n    /// @return (Rebase) The new total.\\n    /// @return elastic in relationship to `base`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 elastic) {\\n        elastic = toElastic(total, base, roundUp);\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return (total, elastic);\\n    }\\n\\n    /// @notice Add `elastic` and `base` to `total`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Subtract `elastic` and `base` to `total`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Add `elastic` to `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.add(elastic.to128());\\n    }\\n\\n    /// @notice Subtract `elastic` from `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.sub(elastic.to128());\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() public {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IMasterContract {\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\n    /// Also kown as the constructor for cloned contracts.\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\n    /// @param data Can be abi encoded arguments or anything else.\\n    function init(bytes calldata data) external payable;\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringFactory.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BoringFactory {\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\n\\n    /// @notice Mapping from clone contracts to their masterContract.\\n    mapping(address => address) public masterContractOf;\\n\\n    /// @notice Deploys a given master Contract as a clone.\\n    /// Any ETH transferred with this call is forwarded to the new clone.\\n    /// Emits `LogDeploy`.\\n    /// @param masterContract The address of the contract to clone.\\n    /// @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\\n    /// @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\\n    /// @return cloneAddress Address of the created clone contract.\\n    function deploy(\\n        address masterContract,\\n        bytes calldata data,\\n        bool useCreate2\\n    ) public payable returns (address cloneAddress) {\\n        require(masterContract != address(0), \\\"BoringFactory: No masterContract\\\");\\n        bytes20 targetBytes = bytes20(masterContract); // Takes the first 20 bytes of the masterContract's address\\n\\n        if (useCreate2) {\\n            // each masterContract has different code already. So clones are distinguished by their data only.\\n            bytes32 salt = keccak256(data);\\n\\n            // Creates clone, more info here: https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create2(0, clone, 0x37, salt)\\n            }\\n        } else {\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create(0, clone, 0x37)\\n            }\\n        }\\n        masterContractOf[cloneAddress] = masterContract;\\n\\n        IMasterContract(cloneAddress).init{value: msg.value}(data);\\n\\n        emit LogDeploy(masterContract, data, cloneAddress);\\n    }\\n}\\n\\n// File contracts/MasterContractManager.sol\\n// License-Identifier: UNLICENSED\\n\\ncontract MasterContractManager is BoringOwnable, BoringFactory {\\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\\n    event LogRegisterProtocol(address indexed protocol);\\n\\n    /// @notice masterContract to user to approval state\\n    mapping(address => mapping(address => bool)) public masterContractApproved;\\n    /// @notice masterContract to whitelisted state for approval without signed message\\n    mapping(address => bool) public whitelistedMasterContracts;\\n    /// @notice user nonces for masterContract approvals\\n    mapping(address => uint256) public nonces;\\n\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n    // See https://eips.ethereum.org/EIPS/eip-191\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\n    bytes32 private constant APPROVAL_SIGNATURE_HASH =\\n        keccak256(\\\"SetMasterContractApproval(string warning,address user,address masterContract,bool approved,uint256 nonce)\\\");\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\n    }\\n\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, keccak256(\\\"BentoBox V1\\\"), chainId, address(this)));\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @notice Other contracts need to register with this master contract so that users can approve them for the BentoBox.\\n    function registerProtocol() public {\\n        masterContractOf[msg.sender] = msg.sender;\\n        emit LogRegisterProtocol(msg.sender);\\n    }\\n\\n    /// @notice Enables or disables a contract for approval without signed message.\\n    function whitelistMasterContract(address masterContract, bool approved) public onlyOwner {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: Cannot approve 0\\\");\\n\\n        // Effects\\n        whitelistedMasterContracts[masterContract] = approved;\\n        emit LogWhiteListMasterContract(masterContract, approved);\\n    }\\n\\n    /// @notice Approves or revokes a `masterContract` access to `user` funds.\\n    /// @param user The address of the user that approves or revokes access.\\n    /// @param masterContract The address who gains or loses access.\\n    /// @param approved If True approves access. If False revokes access.\\n    /// @param v Part of the signature. (See EIP-191)\\n    /// @param r Part of the signature. (See EIP-191)\\n    /// @param s Part of the signature. (See EIP-191)\\n    // F4 - Check behaviour for all function arguments when wrong or extreme\\n    // F4: Don't allow masterContract 0 to be approved. Unknown contracts will have a masterContract of 0.\\n    // F4: User can't be 0 for signed approvals because the recoveredAddress will be 0 if ecrecover fails\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: masterC not set\\\"); // Important for security\\n\\n        // If no signature is provided, the fallback is executed\\n        if (r == 0 && s == 0 && v == 0) {\\n            require(user == msg.sender, \\\"MasterCMgr: user not sender\\\");\\n            require(masterContractOf[user] == address(0), \\\"MasterCMgr: user is clone\\\");\\n            require(whitelistedMasterContracts[masterContract], \\\"MasterCMgr: not whitelisted\\\");\\n        } else {\\n            // Important for security - any address without masterContract has address(0) as masterContract\\n            // So approving address(0) would approve every address, leading to full loss of funds\\n            // Also, ecrecover returns address(0) on failure. So we check this:\\n            require(user != address(0), \\\"MasterCMgr: User cannot be 0\\\");\\n\\n            // C10 - Protect signatures against replay, use nonce and chainId (SWC-121)\\n            // C10: nonce + chainId are used to prevent replays\\n            // C11 - All signatures strictly EIP-712 (SWC-117 SWC-122)\\n            // C11: signature is EIP-712 compliant\\n            // C12 - abi.encodePacked can't contain variable length user input (SWC-133)\\n            // C12: abi.encodePacked has fixed length parameters\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA,\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            APPROVAL_SIGNATURE_HASH,\\n                            approved\\n                                ? keccak256(\\\"Give FULL access to funds in (and approved to) BentoBox?\\\")\\n                                : keccak256(\\\"Revoke access to BentoBox?\\\"),\\n                            user,\\n                            masterContract,\\n                            approved,\\n                            nonces[user]++\\n                        )\\n                    )\\n                )\\n            );\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress == user, \\\"MasterCMgr: Invalid Signature\\\");\\n        }\\n\\n        // Effects\\n        masterContractApproved[masterContract][user] = approved;\\n        emit LogSetMasterContractApproval(masterContract, user, approved);\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringBatchable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BaseBoringBatchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /// @notice Allows batched call to self (this contract).\\n    /// @param calls An array of inputs for each call.\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n    /// @return successes An array indicating the success of a call, mapped one-to-one to `calls`.\\n    /// @return results An array with the returned data of each function call, mapped one-to-one to `calls`.\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results) {\\n        successes = new bool[](calls.length);\\n        results = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\n            require(success || !revertOnFail, _getRevertMsg(result));\\n            successes[i] = success;\\n            results[i] = result;\\n        }\\n    }\\n}\\n\\ncontract BoringBatchable is BaseBoringBatchable {\\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\\n    /// Lookup `IERC20.permit`.\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\n    function permitToken(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        token.permit(from, to, amount, deadline, v, r, s);\\n    }\\n}\\n\\n// File contracts/BentoBox.sol\\n// License-Identifier: UNLICENSED\\n\\n/// @title BentoBox\\n/// @author BoringCrypto, Keno\\n/// @notice The BentoBox is a vault for tokens. The stored tokens can be flash loaned and used in strategies.\\n/// Yield from this will go to the token depositors.\\n/// Rebasing tokens ARE NOT supported and WILL cause loss of funds.\\n/// Any funds transfered directly onto the BentoBox will be lost, use the deposit function instead.\\ncontract BentoBoxV1 is MasterContractManager, BoringBatchable {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n    using BoringERC20 for IERC20;\\n    using RebaseLibrary for Rebase;\\n\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n\\n    event LogDeposit(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogWithdraw(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogTransfer(IERC20 indexed token, address indexed from, address indexed to, uint256 share);\\n\\n    event LogFlashLoan(address indexed borrower, IERC20 indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\\n\\n    event LogStrategyTargetPercentage(IERC20 indexed token, uint256 targetPercentage);\\n    event LogStrategyQueued(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategySet(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategyInvest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyDivest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyProfit(IERC20 indexed token, uint256 amount);\\n    event LogStrategyLoss(IERC20 indexed token, uint256 amount);\\n\\n    // *************** //\\n    // *** STRUCTS *** //\\n    // *************** //\\n\\n    struct StrategyData {\\n        uint64 strategyStartDate;\\n        uint64 targetPercentage;\\n        uint128 balance; // the balance of the strategy that BentoBox thinks is in there\\n    }\\n\\n    // ******************************** //\\n    // *** CONSTANTS AND IMMUTABLES *** //\\n    // ******************************** //\\n\\n    // V2 - Can they be private?\\n    // V2: Private to save gas, to verify it's correct, check the constructor arguments\\n    IERC20 private immutable wethToken;\\n\\n    IERC20 private constant USE_ETHEREUM = IERC20(0);\\n    uint256 private constant FLASH_LOAN_FEE = 50; // 0.05%\\n    uint256 private constant FLASH_LOAN_FEE_PRECISION = 1e5;\\n    uint256 private constant STRATEGY_DELAY = 0 weeks;\\n    uint256 private constant MAX_TARGET_PERCENTAGE = 95; // 95%\\n    uint256 private constant MINIMUM_SHARE_BALANCE = 1000; // To prevent the ratio going off\\n\\n    // ***************** //\\n    // *** VARIABLES *** //\\n    // ***************** //\\n\\n    // Balance per token per address/contract in shares\\n    mapping(IERC20 => mapping(address => uint256)) public balanceOf;\\n\\n    // Rebase from amount to share\\n    mapping(IERC20 => Rebase) public totals;\\n\\n    mapping(IERC20 => IStrategy) public strategy;\\n    mapping(IERC20 => IStrategy) public pendingStrategy;\\n    mapping(IERC20 => StrategyData) public strategyData;\\n\\n    // ******************* //\\n    // *** CONSTRUCTOR *** //\\n    // ******************* //\\n\\n    constructor(IERC20 wethToken_) public {\\n        wethToken = wethToken_;\\n    }\\n\\n    // Just for testing purposes!!! Don't deploy this contract on production!!\\n    function setTokenTotal(\\n        IERC20 token,\\n        uint128 elastic,\\n        uint128 base\\n    ) public {\\n        Rebase memory total;\\n        total.elastic = elastic;\\n        total.base = base;\\n        totals[token] = total;\\n    }\\n\\n    // ***************** //\\n    // *** MODIFIERS *** //\\n    // ***************** //\\n\\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\\n    /// If 'from' is msg.sender, it's allowed.\\n    /// If 'from' is the BentoBox itself, it's allowed. Any ETH, token balances (above the known balances) or BentoBox balances\\n    /// can be taken by anyone.\\n    /// This is to enable skimming, not just for deposits, but also for withdrawals or transfers, enabling better composability.\\n    /// If 'from' is a clone of a masterContract AND the 'from' address has approved that masterContract, it's allowed.\\n    modifier allowed(address from) {\\n        if (from != msg.sender && from != address(this)) {\\n            // From is sender or you are skimming\\n            address masterContract = masterContractOf[msg.sender];\\n            require(masterContract != address(0), \\\"BentoBox: no masterContract\\\");\\n            require(masterContractApproved[masterContract][from], \\\"BentoBox: Transfer not approved\\\");\\n        }\\n        _;\\n    }\\n\\n    // ************************** //\\n    // *** INTERNAL FUNCTIONS *** //\\n    // ************************** //\\n\\n    /// @dev Returns the total balance of `token` this contracts holds,\\n    /// plus the total amount this contract thinks the strategy holds.\\n    function _tokenBalanceOf(IERC20 token) internal view returns (uint256 amount) {\\n        amount = token.balanceOf(address(this)).add(strategyData[token].balance);\\n    }\\n\\n    // ************************ //\\n    // *** PUBLIC FUNCTIONS *** //\\n    // ************************ //\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share) {\\n        share = totals[token].toBase(amount, roundUp);\\n    }\\n\\n    /// @dev Helper function represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        IERC20 token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount) {\\n        amount = totals[token].toElastic(share, roundUp);\\n    }\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public payable allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n\\n        // If a new token gets added, the tokenSupply call checks that this is a deployed contract. Needed for security.\\n        require(total.elastic != 0 || token.totalSupply() > 0, \\\"BentoBox: No tokens\\\");\\n        if (share == 0) {\\n            // value of the share may be lower than the amount due to rounding, that's ok\\n            share = total.toBase(amount, false);\\n            // Any deposit should lead to at least the minimum share balance, otherwise it's ignored (no amount taken)\\n            if (total.base.add(share.to128()) < MINIMUM_SHARE_BALANCE) {\\n                return (0, 0);\\n            }\\n        } else {\\n            // amount may be lower than the value of share due to rounding, in that case, add 1 to amount (Always round up)\\n            amount = total.toElastic(share, true);\\n        }\\n\\n        // In case of skimming, check that only the skimmable amount is taken.\\n        // For ETH, the full balance is available, so no need to check.\\n        // During flashloans the _tokenBalanceOf is lower than 'reality', so skimming deposits will mostly fail during a flashloan.\\n        require(\\n            from != address(this) || token_ == USE_ETHEREUM || amount <= _tokenBalanceOf(token).sub(total.elastic),\\n            \\\"BentoBox: Skim too much\\\"\\n        );\\n\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n        total.base = total.base.add(share.to128());\\n        total.elastic = total.elastic.add(amount.to128());\\n        totals[token] = total;\\n\\n        // Interactions\\n        // During the first deposit, we check that this token is 'real'\\n        if (token_ == USE_ETHEREUM) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the WETH implementation is faulty or malicious, it will block adding ETH (but we know the WETH implementation)\\n            IWETH(address(wethToken)).deposit{value: amount}();\\n        } else if (from != address(this)) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the token implementation is faulty or malicious, it may block adding tokens. Good.\\n            token.safeTransferFrom(from, address(this), amount);\\n        }\\n        emit LogDeposit(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n        if (share == 0) {\\n            // value of the share paid could be lower than the amount paid due to rounding, in that case, add a share (Always round up)\\n            share = total.toBase(amount, true);\\n        } else {\\n            // amount may be lower than the value of share due to rounding, that's ok\\n            amount = total.toElastic(share, false);\\n        }\\n\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        total.elastic = total.elastic.sub(amount.to128());\\n        total.base = total.base.sub(share.to128());\\n        // There have to be at least 1000 shares left to prevent reseting the share/amount ratio (unless it's fully emptied)\\n        require(total.base >= MINIMUM_SHARE_BALANCE || total.base == 0, \\\"BentoBox: cannot empty\\\");\\n        totals[token] = total;\\n\\n        // Interactions\\n        if (token_ == USE_ETHEREUM) {\\n            // X2, X3: A revert or big gas usage in the WETH contract could block withdrawals, but WETH9 is fine.\\n            IWETH(address(wethToken)).withdraw(amount);\\n            // X2, X3: A revert or big gas usage could block, however, the to address is under control of the caller.\\n            (bool success, ) = to.call{value: amount}(\\\"\\\");\\n            require(success, \\\"BentoBox: ETH transfer failed\\\");\\n        } else {\\n            // X2, X3: A malicious token could block withdrawal of just THAT token.\\n            //         masterContracts may want to take care not to rely on withdraw always succeeding.\\n            token.safeTransfer(to, amount);\\n        }\\n        emit LogWithdraw(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    // Clones of master contracts can transfer from any account that has approved them\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transferMultiple for gas optimization\\n    function transfer(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) public allowed(from) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n\\n        emit LogTransfer(token, from, to, share);\\n    }\\n\\n    /// @notice Transfer shares from a user account to multiple other ones.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param tos The receivers of the tokens.\\n    /// @param shares The amount of `token` in shares for each receiver in `tos`.\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transfer for gas optimization\\n    function transferMultiple(\\n        IERC20 token,\\n        address from,\\n        address[] calldata tos,\\n        uint256[] calldata shares\\n    ) public allowed(from) {\\n        // Checks\\n        require(tos[0] != address(0), \\\"BentoBox: to[0] not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        uint256 totalAmount;\\n        uint256 len = tos.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address to = tos[i];\\n            balanceOf[token][to] = balanceOf[token][to].add(shares[i]);\\n            totalAmount = totalAmount.add(shares[i]);\\n            emit LogTransfer(token, from, to, shares[i]);\\n        }\\n        balanceOf[token][from] = balanceOf[token][from].sub(totalAmount);\\n    }\\n\\n    /// @notice Flashloan ability.\\n    /// @param borrower The address of the contract that implements and conforms to `IFlashBorrower` and handles the flashloan.\\n    /// @param receiver Address of the token receiver.\\n    /// @param token The address of the token to receive.\\n    /// @param amount of the tokens to receive.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function flashLoan(\\n        IFlashBorrower borrower,\\n        address receiver,\\n        IERC20 token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public {\\n        uint256 fee = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n        token.safeTransfer(receiver, amount);\\n\\n        borrower.onFlashLoan(msg.sender, token, amount, fee, data);\\n\\n        require(_tokenBalanceOf(token) >= totals[token].addElastic(fee.to128()), \\\"BentoBox: Wrong amount\\\");\\n        emit LogFlashLoan(address(borrower), token, amount, fee, receiver);\\n    }\\n\\n    /// @notice Support for batched flashloans. Useful to request multiple different `tokens` in a single transaction.\\n    /// @param borrower The address of the contract that implements and conforms to `IBatchFlashBorrower` and handles the flashloan.\\n    /// @param receivers An array of the token receivers. A one-to-one mapping with `tokens` and `amounts`.\\n    /// @param tokens The addresses of the tokens.\\n    /// @param amounts of the tokens for each receiver.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function batchFlashLoan(\\n        IBatchFlashBorrower borrower,\\n        address[] calldata receivers,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public {\\n        uint256[] memory fees = new uint256[](tokens.length);\\n\\n        uint256 len = tokens.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 amount = amounts[i];\\n            fees[i] = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n\\n            tokens[i].safeTransfer(receivers[i], amounts[i]);\\n        }\\n\\n        borrower.onBatchFlashLoan(msg.sender, tokens, amounts, fees, data);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            IERC20 token = tokens[i];\\n            require(_tokenBalanceOf(token) >= totals[token].addElastic(fees[i].to128()), \\\"BentoBox: Wrong amount\\\");\\n            emit LogFlashLoan(address(borrower), token, amounts[i], fees[i], receivers[i]);\\n        }\\n    }\\n\\n    /// @notice Sets the target percentage of the strategy for `token`.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param targetPercentage_ The new target in percent. Must be lesser or equal to `MAX_TARGET_PERCENTAGE`.\\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) public onlyOwner {\\n        // Checks\\n        require(targetPercentage_ <= MAX_TARGET_PERCENTAGE, \\\"StrategyManager: Target too high\\\");\\n\\n        // Effects\\n        strategyData[token].targetPercentage = targetPercentage_;\\n        emit LogStrategyTargetPercentage(token, targetPercentage_);\\n    }\\n\\n    /// @notice Sets the contract address of a new strategy that conforms to `IStrategy` for `token`.\\n    /// Must be called twice with the same arguments.\\n    /// A new strategy becomes pending first and can be activated once `STRATEGY_DELAY` is over.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param newStrategy The address of the contract that conforms to `IStrategy`.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // C4 - Use block.timestamp only for long intervals (SWC-116)\\n    // C4: block.timestamp is used for a period of 2 weeks, which is long enough\\n    function setStrategy(IERC20 token, IStrategy newStrategy) public onlyOwner {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy pending = pendingStrategy[token];\\n        if (data.strategyStartDate == 0 || pending != newStrategy) {\\n            pendingStrategy[token] = newStrategy;\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: Our sun will swallow the earth well before this overflows\\n            data.strategyStartDate = (block.timestamp + STRATEGY_DELAY).to64();\\n            emit LogStrategyQueued(token, newStrategy);\\n        } else {\\n            require(data.strategyStartDate != 0 && block.timestamp >= data.strategyStartDate, \\\"StrategyManager: Too early\\\");\\n            if (address(strategy[token]) != address(0)) {\\n                int256 balanceChange = strategy[token].exit(data.balance);\\n                // Effects\\n                if (balanceChange > 0) {\\n                    uint256 add = uint256(balanceChange);\\n                    totals[token].addElastic(add);\\n                    emit LogStrategyProfit(token, add);\\n                } else if (balanceChange < 0) {\\n                    uint256 sub = uint256(-balanceChange);\\n                    totals[token].subElastic(sub);\\n                    emit LogStrategyLoss(token, sub);\\n                }\\n\\n                emit LogStrategyDivest(token, data.balance);\\n            }\\n            strategy[token] = pending;\\n            data.strategyStartDate = 0;\\n            data.balance = 0;\\n            pendingStrategy[token] = IStrategy(0);\\n            emit LogStrategySet(token, newStrategy);\\n        }\\n        strategyData[token] = data;\\n    }\\n\\n    /// @notice The actual process of yield farming. Executes the strategy of `token`.\\n    /// Optionally does housekeeping if `balance` is true.\\n    /// `maxChangeAmount` is relevant for skimming or withdrawing if `balance` is true.\\n    /// @param token The address of the token for which a strategy is deployed.\\n    /// @param balance True if housekeeping should be done.\\n    /// @param maxChangeAmount The maximum amount for either pulling or pushing from/to the `IStrategy` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // F5: Not followed to prevent reentrancy issues with flashloans and BentoBox skims?\\n    function harvest(\\n        IERC20 token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) public {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy _strategy = strategy[token];\\n        int256 balanceChange = _strategy.harvest(data.balance, msg.sender);\\n        if (balanceChange == 0 && !balance) {\\n            return;\\n        }\\n\\n        uint256 totalElastic = totals[token].elastic;\\n\\n        if (balanceChange > 0) {\\n            uint256 add = uint256(balanceChange);\\n            totalElastic = totalElastic.add(add);\\n            totals[token].elastic = totalElastic.to128();\\n            emit LogStrategyProfit(token, add);\\n        } else if (balanceChange < 0) {\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: balanceChange could overflow if it's max negative int128.\\n            // But tokens with balances that large are not supported by the BentoBox.\\n            uint256 sub = uint256(-balanceChange);\\n            totalElastic = totalElastic.sub(sub);\\n            totals[token].elastic = totalElastic.to128();\\n            data.balance = data.balance.sub(sub.to128());\\n            emit LogStrategyLoss(token, sub);\\n        }\\n\\n        if (balance) {\\n            uint256 targetBalance = totalElastic.mul(data.targetPercentage) / 100;\\n            // if data.balance == targetBalance there is nothing to update\\n            if (data.balance < targetBalance) {\\n                uint256 amountOut = targetBalance.sub(data.balance);\\n                if (maxChangeAmount != 0 && amountOut > maxChangeAmount) {\\n                    amountOut = maxChangeAmount;\\n                }\\n                token.safeTransfer(address(_strategy), amountOut);\\n                data.balance = data.balance.add(amountOut.to128());\\n                _strategy.skim(amountOut);\\n                emit LogStrategyInvest(token, amountOut);\\n            } else if (data.balance > targetBalance) {\\n                uint256 amountIn = data.balance.sub(targetBalance.to128());\\n                if (maxChangeAmount != 0 && amountIn > maxChangeAmount) {\\n                    amountIn = maxChangeAmount;\\n                }\\n\\n                uint256 actualAmountIn = _strategy.withdraw(amountIn);\\n\\n                data.balance = data.balance.sub(actualAmountIn.to128());\\n                emit LogStrategyDivest(token, actualAmountIn);\\n            }\\n        }\\n\\n        strategyData[token] = data;\\n    }\\n\\n    // Contract should be able to receive ETH deposits to support deposit & skim\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd8343e88ade6bf85fd34d3556aedb2b14fe07ca40396ae2ef6064c9d8da0d4d3\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batch(bytes[],bool)":{"notice":"Allows batched call to self (this contract)."},"permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)":{"notice":"Call wrapper that performs `ERC20.permit` on `token`. Lookup `IERC20.permit`."}},"version":1}},"BoringERC20":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209b1f926f5fda2152aa9397d31154bfcb77f48ef247f66e0d0a7d526e93361f1f64736f6c634300060c0033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP12 0x1F SWAP3 PUSH16 0x5FDA2152AA9397D31154BFCB77F48EF2 SELFBALANCE 0xF6 PUSH15 0xD0A7D526E93361F1F64736F6C6343 STOP MOD 0xC STOP CALLER ","sourceMap":"5287:1694:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209b1f926f5fda2152aa9397d31154bfcb77f48ef247f66e0d0a7d526e93361f1f64736f6c634300060c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP12 0x1F SWAP3 PUSH16 0x5FDA2152AA9397D31154BFCB77F48EF2 SELFBALANCE 0xF6 PUSH15 0xD0A7D526E93361F1F64736F6C6343 STOP MOD 0xC STOP CALLER ","sourceMap":"5287:1694:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/BentoBoxV1Flat.sol\":\"BoringERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/flat/BentoBoxV1Flat.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// The BentoBox\\n\\n//  \\u2584\\u2584\\u2584\\u2584\\u00b7 \\u2584\\u2584\\u2584 . \\u2590 \\u2584 \\u2584\\u2584\\u2584\\u2584\\u2584      \\u2584\\u2584\\u2584\\u2584\\u00b7       \\u2590\\u2584\\u2022 \\u2584\\n//  \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u2580\\u2584.\\u2580\\u00b7\\u2588\\u258c\\u2590\\u2588\\u2022\\u2588\\u2588  \\u25aa     \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u25aa      \\u2588\\u258c\\u2588\\u258c\\u25aa\\n//  \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584\\u2590\\u2580\\u2580\\u25aa\\u2584\\u2590\\u2588\\u2590\\u2590\\u258c \\u2590\\u2588.\\u25aa \\u2584\\u2588\\u2580\\u2584 \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584 \\u2584\\u2588\\u2580\\u2584  \\u00b7\\u2588\\u2588\\u00b7\\n//  \\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u2584\\u2584\\u258c\\u2588\\u2588\\u2590\\u2588\\u258c \\u2590\\u2588\\u258c\\u00b7\\u2590\\u2588\\u258c.\\u2590\\u258c\\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u258c.\\u2590\\u258c\\u25aa\\u2590\\u2588\\u00b7\\u2588\\u258c\\n//  \\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2580\\u2580 \\u2580\\u2580 \\u2588\\u25aa \\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u2022\\u2580\\u2580 \\u2580\\u2580\\n\\n// This contract stores funds, handles their transfers, supports flash loans and strategies.\\n\\n// Copyright (c) 2021 BoringCrypto - All rights reserved\\n// Twitter: @Boring_Crypto\\n\\n// Special thanks to Keno for all his hard work and support\\n\\n// Version 22-Mar-2021\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable not-rely-on-time\\n// solhint-disable no-inline-assembly\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function decimals() external view returns (uint256);\\n}\\n\\n// File contracts/interfaces/IFlashLoan.sol\\n// License-Identifier: MIT\\n\\ninterface IFlashBorrower {\\n    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param token The address of the token that is loaned.\\n    /// @param amount of the `token` that is loaned.\\n    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onFlashLoan(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IBatchFlashBorrower {\\n    /// @notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param tokens Array of addresses for ERC-20 tokens that is loaned.\\n    /// @param amounts A one-to-one map to `tokens` that is loaned.\\n    /// @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onBatchFlashLoan(\\n        address sender,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata fees,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File contracts/interfaces/IWETH.sol\\n// License-Identifier: MIT\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\\n// File contracts/interfaces/IStrategy.sol\\n// License-Identifier: MIT\\n\\ninterface IStrategy {\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\n    /// @param amount The amount of tokens to invest.\\n    function skim(uint256 amount) external;\\n\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\n    /// @dev The `actualAmount` should be very close to the amount.\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\n    /// @param amount The requested amount the caller wants to withdraw.\\n    /// @return actualAmount The real amount that is withdrawn.\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library using overflow-/underflow-safe math.\\nlibrary RebaseLibrary {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = elastic.mul(total.base) / total.elastic;\\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\\n                base = base.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = base.mul(total.elastic) / total.base;\\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\\n                elastic = elastic.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\\n    /// @return (Rebase) The new total.\\n    /// @return base in relationship to `elastic`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 base) {\\n        base = toBase(total, elastic, roundUp);\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return (total, base);\\n    }\\n\\n    /// @notice Sub `base` from `total` and update `total.elastic`.\\n    /// @return (Rebase) The new total.\\n    /// @return elastic in relationship to `base`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 elastic) {\\n        elastic = toElastic(total, base, roundUp);\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return (total, elastic);\\n    }\\n\\n    /// @notice Add `elastic` and `base` to `total`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Subtract `elastic` and `base` to `total`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Add `elastic` to `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.add(elastic.to128());\\n    }\\n\\n    /// @notice Subtract `elastic` from `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.sub(elastic.to128());\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() public {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IMasterContract {\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\n    /// Also kown as the constructor for cloned contracts.\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\n    /// @param data Can be abi encoded arguments or anything else.\\n    function init(bytes calldata data) external payable;\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringFactory.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BoringFactory {\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\n\\n    /// @notice Mapping from clone contracts to their masterContract.\\n    mapping(address => address) public masterContractOf;\\n\\n    /// @notice Deploys a given master Contract as a clone.\\n    /// Any ETH transferred with this call is forwarded to the new clone.\\n    /// Emits `LogDeploy`.\\n    /// @param masterContract The address of the contract to clone.\\n    /// @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\\n    /// @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\\n    /// @return cloneAddress Address of the created clone contract.\\n    function deploy(\\n        address masterContract,\\n        bytes calldata data,\\n        bool useCreate2\\n    ) public payable returns (address cloneAddress) {\\n        require(masterContract != address(0), \\\"BoringFactory: No masterContract\\\");\\n        bytes20 targetBytes = bytes20(masterContract); // Takes the first 20 bytes of the masterContract's address\\n\\n        if (useCreate2) {\\n            // each masterContract has different code already. So clones are distinguished by their data only.\\n            bytes32 salt = keccak256(data);\\n\\n            // Creates clone, more info here: https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create2(0, clone, 0x37, salt)\\n            }\\n        } else {\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create(0, clone, 0x37)\\n            }\\n        }\\n        masterContractOf[cloneAddress] = masterContract;\\n\\n        IMasterContract(cloneAddress).init{value: msg.value}(data);\\n\\n        emit LogDeploy(masterContract, data, cloneAddress);\\n    }\\n}\\n\\n// File contracts/MasterContractManager.sol\\n// License-Identifier: UNLICENSED\\n\\ncontract MasterContractManager is BoringOwnable, BoringFactory {\\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\\n    event LogRegisterProtocol(address indexed protocol);\\n\\n    /// @notice masterContract to user to approval state\\n    mapping(address => mapping(address => bool)) public masterContractApproved;\\n    /// @notice masterContract to whitelisted state for approval without signed message\\n    mapping(address => bool) public whitelistedMasterContracts;\\n    /// @notice user nonces for masterContract approvals\\n    mapping(address => uint256) public nonces;\\n\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n    // See https://eips.ethereum.org/EIPS/eip-191\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\n    bytes32 private constant APPROVAL_SIGNATURE_HASH =\\n        keccak256(\\\"SetMasterContractApproval(string warning,address user,address masterContract,bool approved,uint256 nonce)\\\");\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\n    }\\n\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, keccak256(\\\"BentoBox V1\\\"), chainId, address(this)));\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @notice Other contracts need to register with this master contract so that users can approve them for the BentoBox.\\n    function registerProtocol() public {\\n        masterContractOf[msg.sender] = msg.sender;\\n        emit LogRegisterProtocol(msg.sender);\\n    }\\n\\n    /// @notice Enables or disables a contract for approval without signed message.\\n    function whitelistMasterContract(address masterContract, bool approved) public onlyOwner {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: Cannot approve 0\\\");\\n\\n        // Effects\\n        whitelistedMasterContracts[masterContract] = approved;\\n        emit LogWhiteListMasterContract(masterContract, approved);\\n    }\\n\\n    /// @notice Approves or revokes a `masterContract` access to `user` funds.\\n    /// @param user The address of the user that approves or revokes access.\\n    /// @param masterContract The address who gains or loses access.\\n    /// @param approved If True approves access. If False revokes access.\\n    /// @param v Part of the signature. (See EIP-191)\\n    /// @param r Part of the signature. (See EIP-191)\\n    /// @param s Part of the signature. (See EIP-191)\\n    // F4 - Check behaviour for all function arguments when wrong or extreme\\n    // F4: Don't allow masterContract 0 to be approved. Unknown contracts will have a masterContract of 0.\\n    // F4: User can't be 0 for signed approvals because the recoveredAddress will be 0 if ecrecover fails\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: masterC not set\\\"); // Important for security\\n\\n        // If no signature is provided, the fallback is executed\\n        if (r == 0 && s == 0 && v == 0) {\\n            require(user == msg.sender, \\\"MasterCMgr: user not sender\\\");\\n            require(masterContractOf[user] == address(0), \\\"MasterCMgr: user is clone\\\");\\n            require(whitelistedMasterContracts[masterContract], \\\"MasterCMgr: not whitelisted\\\");\\n        } else {\\n            // Important for security - any address without masterContract has address(0) as masterContract\\n            // So approving address(0) would approve every address, leading to full loss of funds\\n            // Also, ecrecover returns address(0) on failure. So we check this:\\n            require(user != address(0), \\\"MasterCMgr: User cannot be 0\\\");\\n\\n            // C10 - Protect signatures against replay, use nonce and chainId (SWC-121)\\n            // C10: nonce + chainId are used to prevent replays\\n            // C11 - All signatures strictly EIP-712 (SWC-117 SWC-122)\\n            // C11: signature is EIP-712 compliant\\n            // C12 - abi.encodePacked can't contain variable length user input (SWC-133)\\n            // C12: abi.encodePacked has fixed length parameters\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA,\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            APPROVAL_SIGNATURE_HASH,\\n                            approved\\n                                ? keccak256(\\\"Give FULL access to funds in (and approved to) BentoBox?\\\")\\n                                : keccak256(\\\"Revoke access to BentoBox?\\\"),\\n                            user,\\n                            masterContract,\\n                            approved,\\n                            nonces[user]++\\n                        )\\n                    )\\n                )\\n            );\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress == user, \\\"MasterCMgr: Invalid Signature\\\");\\n        }\\n\\n        // Effects\\n        masterContractApproved[masterContract][user] = approved;\\n        emit LogSetMasterContractApproval(masterContract, user, approved);\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringBatchable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BaseBoringBatchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /// @notice Allows batched call to self (this contract).\\n    /// @param calls An array of inputs for each call.\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n    /// @return successes An array indicating the success of a call, mapped one-to-one to `calls`.\\n    /// @return results An array with the returned data of each function call, mapped one-to-one to `calls`.\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results) {\\n        successes = new bool[](calls.length);\\n        results = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\n            require(success || !revertOnFail, _getRevertMsg(result));\\n            successes[i] = success;\\n            results[i] = result;\\n        }\\n    }\\n}\\n\\ncontract BoringBatchable is BaseBoringBatchable {\\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\\n    /// Lookup `IERC20.permit`.\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\n    function permitToken(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        token.permit(from, to, amount, deadline, v, r, s);\\n    }\\n}\\n\\n// File contracts/BentoBox.sol\\n// License-Identifier: UNLICENSED\\n\\n/// @title BentoBox\\n/// @author BoringCrypto, Keno\\n/// @notice The BentoBox is a vault for tokens. The stored tokens can be flash loaned and used in strategies.\\n/// Yield from this will go to the token depositors.\\n/// Rebasing tokens ARE NOT supported and WILL cause loss of funds.\\n/// Any funds transfered directly onto the BentoBox will be lost, use the deposit function instead.\\ncontract BentoBoxV1 is MasterContractManager, BoringBatchable {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n    using BoringERC20 for IERC20;\\n    using RebaseLibrary for Rebase;\\n\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n\\n    event LogDeposit(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogWithdraw(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogTransfer(IERC20 indexed token, address indexed from, address indexed to, uint256 share);\\n\\n    event LogFlashLoan(address indexed borrower, IERC20 indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\\n\\n    event LogStrategyTargetPercentage(IERC20 indexed token, uint256 targetPercentage);\\n    event LogStrategyQueued(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategySet(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategyInvest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyDivest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyProfit(IERC20 indexed token, uint256 amount);\\n    event LogStrategyLoss(IERC20 indexed token, uint256 amount);\\n\\n    // *************** //\\n    // *** STRUCTS *** //\\n    // *************** //\\n\\n    struct StrategyData {\\n        uint64 strategyStartDate;\\n        uint64 targetPercentage;\\n        uint128 balance; // the balance of the strategy that BentoBox thinks is in there\\n    }\\n\\n    // ******************************** //\\n    // *** CONSTANTS AND IMMUTABLES *** //\\n    // ******************************** //\\n\\n    // V2 - Can they be private?\\n    // V2: Private to save gas, to verify it's correct, check the constructor arguments\\n    IERC20 private immutable wethToken;\\n\\n    IERC20 private constant USE_ETHEREUM = IERC20(0);\\n    uint256 private constant FLASH_LOAN_FEE = 50; // 0.05%\\n    uint256 private constant FLASH_LOAN_FEE_PRECISION = 1e5;\\n    uint256 private constant STRATEGY_DELAY = 0 weeks;\\n    uint256 private constant MAX_TARGET_PERCENTAGE = 95; // 95%\\n    uint256 private constant MINIMUM_SHARE_BALANCE = 1000; // To prevent the ratio going off\\n\\n    // ***************** //\\n    // *** VARIABLES *** //\\n    // ***************** //\\n\\n    // Balance per token per address/contract in shares\\n    mapping(IERC20 => mapping(address => uint256)) public balanceOf;\\n\\n    // Rebase from amount to share\\n    mapping(IERC20 => Rebase) public totals;\\n\\n    mapping(IERC20 => IStrategy) public strategy;\\n    mapping(IERC20 => IStrategy) public pendingStrategy;\\n    mapping(IERC20 => StrategyData) public strategyData;\\n\\n    // ******************* //\\n    // *** CONSTRUCTOR *** //\\n    // ******************* //\\n\\n    constructor(IERC20 wethToken_) public {\\n        wethToken = wethToken_;\\n    }\\n\\n    // Just for testing purposes!!! Don't deploy this contract on production!!\\n    function setTokenTotal(\\n        IERC20 token,\\n        uint128 elastic,\\n        uint128 base\\n    ) public {\\n        Rebase memory total;\\n        total.elastic = elastic;\\n        total.base = base;\\n        totals[token] = total;\\n    }\\n\\n    // ***************** //\\n    // *** MODIFIERS *** //\\n    // ***************** //\\n\\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\\n    /// If 'from' is msg.sender, it's allowed.\\n    /// If 'from' is the BentoBox itself, it's allowed. Any ETH, token balances (above the known balances) or BentoBox balances\\n    /// can be taken by anyone.\\n    /// This is to enable skimming, not just for deposits, but also for withdrawals or transfers, enabling better composability.\\n    /// If 'from' is a clone of a masterContract AND the 'from' address has approved that masterContract, it's allowed.\\n    modifier allowed(address from) {\\n        if (from != msg.sender && from != address(this)) {\\n            // From is sender or you are skimming\\n            address masterContract = masterContractOf[msg.sender];\\n            require(masterContract != address(0), \\\"BentoBox: no masterContract\\\");\\n            require(masterContractApproved[masterContract][from], \\\"BentoBox: Transfer not approved\\\");\\n        }\\n        _;\\n    }\\n\\n    // ************************** //\\n    // *** INTERNAL FUNCTIONS *** //\\n    // ************************** //\\n\\n    /// @dev Returns the total balance of `token` this contracts holds,\\n    /// plus the total amount this contract thinks the strategy holds.\\n    function _tokenBalanceOf(IERC20 token) internal view returns (uint256 amount) {\\n        amount = token.balanceOf(address(this)).add(strategyData[token].balance);\\n    }\\n\\n    // ************************ //\\n    // *** PUBLIC FUNCTIONS *** //\\n    // ************************ //\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share) {\\n        share = totals[token].toBase(amount, roundUp);\\n    }\\n\\n    /// @dev Helper function represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        IERC20 token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount) {\\n        amount = totals[token].toElastic(share, roundUp);\\n    }\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public payable allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n\\n        // If a new token gets added, the tokenSupply call checks that this is a deployed contract. Needed for security.\\n        require(total.elastic != 0 || token.totalSupply() > 0, \\\"BentoBox: No tokens\\\");\\n        if (share == 0) {\\n            // value of the share may be lower than the amount due to rounding, that's ok\\n            share = total.toBase(amount, false);\\n            // Any deposit should lead to at least the minimum share balance, otherwise it's ignored (no amount taken)\\n            if (total.base.add(share.to128()) < MINIMUM_SHARE_BALANCE) {\\n                return (0, 0);\\n            }\\n        } else {\\n            // amount may be lower than the value of share due to rounding, in that case, add 1 to amount (Always round up)\\n            amount = total.toElastic(share, true);\\n        }\\n\\n        // In case of skimming, check that only the skimmable amount is taken.\\n        // For ETH, the full balance is available, so no need to check.\\n        // During flashloans the _tokenBalanceOf is lower than 'reality', so skimming deposits will mostly fail during a flashloan.\\n        require(\\n            from != address(this) || token_ == USE_ETHEREUM || amount <= _tokenBalanceOf(token).sub(total.elastic),\\n            \\\"BentoBox: Skim too much\\\"\\n        );\\n\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n        total.base = total.base.add(share.to128());\\n        total.elastic = total.elastic.add(amount.to128());\\n        totals[token] = total;\\n\\n        // Interactions\\n        // During the first deposit, we check that this token is 'real'\\n        if (token_ == USE_ETHEREUM) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the WETH implementation is faulty or malicious, it will block adding ETH (but we know the WETH implementation)\\n            IWETH(address(wethToken)).deposit{value: amount}();\\n        } else if (from != address(this)) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the token implementation is faulty or malicious, it may block adding tokens. Good.\\n            token.safeTransferFrom(from, address(this), amount);\\n        }\\n        emit LogDeposit(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n        if (share == 0) {\\n            // value of the share paid could be lower than the amount paid due to rounding, in that case, add a share (Always round up)\\n            share = total.toBase(amount, true);\\n        } else {\\n            // amount may be lower than the value of share due to rounding, that's ok\\n            amount = total.toElastic(share, false);\\n        }\\n\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        total.elastic = total.elastic.sub(amount.to128());\\n        total.base = total.base.sub(share.to128());\\n        // There have to be at least 1000 shares left to prevent reseting the share/amount ratio (unless it's fully emptied)\\n        require(total.base >= MINIMUM_SHARE_BALANCE || total.base == 0, \\\"BentoBox: cannot empty\\\");\\n        totals[token] = total;\\n\\n        // Interactions\\n        if (token_ == USE_ETHEREUM) {\\n            // X2, X3: A revert or big gas usage in the WETH contract could block withdrawals, but WETH9 is fine.\\n            IWETH(address(wethToken)).withdraw(amount);\\n            // X2, X3: A revert or big gas usage could block, however, the to address is under control of the caller.\\n            (bool success, ) = to.call{value: amount}(\\\"\\\");\\n            require(success, \\\"BentoBox: ETH transfer failed\\\");\\n        } else {\\n            // X2, X3: A malicious token could block withdrawal of just THAT token.\\n            //         masterContracts may want to take care not to rely on withdraw always succeeding.\\n            token.safeTransfer(to, amount);\\n        }\\n        emit LogWithdraw(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    // Clones of master contracts can transfer from any account that has approved them\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transferMultiple for gas optimization\\n    function transfer(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) public allowed(from) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n\\n        emit LogTransfer(token, from, to, share);\\n    }\\n\\n    /// @notice Transfer shares from a user account to multiple other ones.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param tos The receivers of the tokens.\\n    /// @param shares The amount of `token` in shares for each receiver in `tos`.\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transfer for gas optimization\\n    function transferMultiple(\\n        IERC20 token,\\n        address from,\\n        address[] calldata tos,\\n        uint256[] calldata shares\\n    ) public allowed(from) {\\n        // Checks\\n        require(tos[0] != address(0), \\\"BentoBox: to[0] not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        uint256 totalAmount;\\n        uint256 len = tos.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address to = tos[i];\\n            balanceOf[token][to] = balanceOf[token][to].add(shares[i]);\\n            totalAmount = totalAmount.add(shares[i]);\\n            emit LogTransfer(token, from, to, shares[i]);\\n        }\\n        balanceOf[token][from] = balanceOf[token][from].sub(totalAmount);\\n    }\\n\\n    /// @notice Flashloan ability.\\n    /// @param borrower The address of the contract that implements and conforms to `IFlashBorrower` and handles the flashloan.\\n    /// @param receiver Address of the token receiver.\\n    /// @param token The address of the token to receive.\\n    /// @param amount of the tokens to receive.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function flashLoan(\\n        IFlashBorrower borrower,\\n        address receiver,\\n        IERC20 token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public {\\n        uint256 fee = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n        token.safeTransfer(receiver, amount);\\n\\n        borrower.onFlashLoan(msg.sender, token, amount, fee, data);\\n\\n        require(_tokenBalanceOf(token) >= totals[token].addElastic(fee.to128()), \\\"BentoBox: Wrong amount\\\");\\n        emit LogFlashLoan(address(borrower), token, amount, fee, receiver);\\n    }\\n\\n    /// @notice Support for batched flashloans. Useful to request multiple different `tokens` in a single transaction.\\n    /// @param borrower The address of the contract that implements and conforms to `IBatchFlashBorrower` and handles the flashloan.\\n    /// @param receivers An array of the token receivers. A one-to-one mapping with `tokens` and `amounts`.\\n    /// @param tokens The addresses of the tokens.\\n    /// @param amounts of the tokens for each receiver.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function batchFlashLoan(\\n        IBatchFlashBorrower borrower,\\n        address[] calldata receivers,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public {\\n        uint256[] memory fees = new uint256[](tokens.length);\\n\\n        uint256 len = tokens.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 amount = amounts[i];\\n            fees[i] = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n\\n            tokens[i].safeTransfer(receivers[i], amounts[i]);\\n        }\\n\\n        borrower.onBatchFlashLoan(msg.sender, tokens, amounts, fees, data);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            IERC20 token = tokens[i];\\n            require(_tokenBalanceOf(token) >= totals[token].addElastic(fees[i].to128()), \\\"BentoBox: Wrong amount\\\");\\n            emit LogFlashLoan(address(borrower), token, amounts[i], fees[i], receivers[i]);\\n        }\\n    }\\n\\n    /// @notice Sets the target percentage of the strategy for `token`.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param targetPercentage_ The new target in percent. Must be lesser or equal to `MAX_TARGET_PERCENTAGE`.\\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) public onlyOwner {\\n        // Checks\\n        require(targetPercentage_ <= MAX_TARGET_PERCENTAGE, \\\"StrategyManager: Target too high\\\");\\n\\n        // Effects\\n        strategyData[token].targetPercentage = targetPercentage_;\\n        emit LogStrategyTargetPercentage(token, targetPercentage_);\\n    }\\n\\n    /// @notice Sets the contract address of a new strategy that conforms to `IStrategy` for `token`.\\n    /// Must be called twice with the same arguments.\\n    /// A new strategy becomes pending first and can be activated once `STRATEGY_DELAY` is over.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param newStrategy The address of the contract that conforms to `IStrategy`.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // C4 - Use block.timestamp only for long intervals (SWC-116)\\n    // C4: block.timestamp is used for a period of 2 weeks, which is long enough\\n    function setStrategy(IERC20 token, IStrategy newStrategy) public onlyOwner {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy pending = pendingStrategy[token];\\n        if (data.strategyStartDate == 0 || pending != newStrategy) {\\n            pendingStrategy[token] = newStrategy;\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: Our sun will swallow the earth well before this overflows\\n            data.strategyStartDate = (block.timestamp + STRATEGY_DELAY).to64();\\n            emit LogStrategyQueued(token, newStrategy);\\n        } else {\\n            require(data.strategyStartDate != 0 && block.timestamp >= data.strategyStartDate, \\\"StrategyManager: Too early\\\");\\n            if (address(strategy[token]) != address(0)) {\\n                int256 balanceChange = strategy[token].exit(data.balance);\\n                // Effects\\n                if (balanceChange > 0) {\\n                    uint256 add = uint256(balanceChange);\\n                    totals[token].addElastic(add);\\n                    emit LogStrategyProfit(token, add);\\n                } else if (balanceChange < 0) {\\n                    uint256 sub = uint256(-balanceChange);\\n                    totals[token].subElastic(sub);\\n                    emit LogStrategyLoss(token, sub);\\n                }\\n\\n                emit LogStrategyDivest(token, data.balance);\\n            }\\n            strategy[token] = pending;\\n            data.strategyStartDate = 0;\\n            data.balance = 0;\\n            pendingStrategy[token] = IStrategy(0);\\n            emit LogStrategySet(token, newStrategy);\\n        }\\n        strategyData[token] = data;\\n    }\\n\\n    /// @notice The actual process of yield farming. Executes the strategy of `token`.\\n    /// Optionally does housekeeping if `balance` is true.\\n    /// `maxChangeAmount` is relevant for skimming or withdrawing if `balance` is true.\\n    /// @param token The address of the token for which a strategy is deployed.\\n    /// @param balance True if housekeeping should be done.\\n    /// @param maxChangeAmount The maximum amount for either pulling or pushing from/to the `IStrategy` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // F5: Not followed to prevent reentrancy issues with flashloans and BentoBox skims?\\n    function harvest(\\n        IERC20 token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) public {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy _strategy = strategy[token];\\n        int256 balanceChange = _strategy.harvest(data.balance, msg.sender);\\n        if (balanceChange == 0 && !balance) {\\n            return;\\n        }\\n\\n        uint256 totalElastic = totals[token].elastic;\\n\\n        if (balanceChange > 0) {\\n            uint256 add = uint256(balanceChange);\\n            totalElastic = totalElastic.add(add);\\n            totals[token].elastic = totalElastic.to128();\\n            emit LogStrategyProfit(token, add);\\n        } else if (balanceChange < 0) {\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: balanceChange could overflow if it's max negative int128.\\n            // But tokens with balances that large are not supported by the BentoBox.\\n            uint256 sub = uint256(-balanceChange);\\n            totalElastic = totalElastic.sub(sub);\\n            totals[token].elastic = totalElastic.to128();\\n            data.balance = data.balance.sub(sub.to128());\\n            emit LogStrategyLoss(token, sub);\\n        }\\n\\n        if (balance) {\\n            uint256 targetBalance = totalElastic.mul(data.targetPercentage) / 100;\\n            // if data.balance == targetBalance there is nothing to update\\n            if (data.balance < targetBalance) {\\n                uint256 amountOut = targetBalance.sub(data.balance);\\n                if (maxChangeAmount != 0 && amountOut > maxChangeAmount) {\\n                    amountOut = maxChangeAmount;\\n                }\\n                token.safeTransfer(address(_strategy), amountOut);\\n                data.balance = data.balance.add(amountOut.to128());\\n                _strategy.skim(amountOut);\\n                emit LogStrategyInvest(token, amountOut);\\n            } else if (data.balance > targetBalance) {\\n                uint256 amountIn = data.balance.sub(targetBalance.to128());\\n                if (maxChangeAmount != 0 && amountIn > maxChangeAmount) {\\n                    amountIn = maxChangeAmount;\\n                }\\n\\n                uint256 actualAmountIn = _strategy.withdraw(amountIn);\\n\\n                data.balance = data.balance.sub(actualAmountIn.to128());\\n                emit LogStrategyDivest(token, actualAmountIn);\\n            }\\n        }\\n\\n        strategyData[token] = data;\\n    }\\n\\n    // Contract should be able to receive ETH deposits to support deposit & skim\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd8343e88ade6bf85fd34d3556aedb2b14fe07ca40396ae2ef6064c9d8da0d4d3\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"BoringFactory":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"masterContract","type":"address"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"},{"indexed":true,"internalType":"address","name":"cloneAddress","type":"address"}],"name":"LogDeploy","type":"event"},{"inputs":[{"internalType":"address","name":"masterContract","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bool","name":"useCreate2","type":"bool"}],"name":"deploy","outputs":[{"internalType":"address","name":"cloneAddress","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"masterContractOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"deploy(address,bytes,bool)":{"params":{"data":"Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.","masterContract":"The address of the contract to clone.","useCreate2":"Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt."},"returns":{"cloneAddress":"Address of the created clone contract."}}},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"608060405234801561001057600080fd5b506104dc806100206000396000f3fe6080604052600436106100295760003560e01c80631f54245b1461002e578063bafe4f1414610057575b600080fd5b61004161003c36600461035d565b610077565b60405161004e9190610403565b60405180910390f35b34801561006357600080fd5b5061004161007236600461033b565b6102e9565b600073ffffffffffffffffffffffffffffffffffffffff85166100cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100c690610471565b60405180910390fd5b606085901b821561015857600085856040516100ec9291906103f3565b604051809103902090506040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152816037826000f5935050506101b4565b6040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528160148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f09250505b73ffffffffffffffffffffffffffffffffffffffff8281166000818152602081905260409081902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016938a169390931790925590517f4ddf47d4000000000000000000000000000000000000000000000000000000008152634ddf47d49034906102479089908990600401610424565b6000604051808303818588803b15801561026057600080fd5b505af1158015610274573d6000803e3d6000fd5b50505050508173ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fd62166f3c2149208e51788b1401cc356bf5da1fc6c7886a32e18570f57d88b3b87876040516102d8929190610424565b60405180910390a350949350505050565b60006020819052908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b803573ffffffffffffffffffffffffffffffffffffffff8116811461033557600080fd5b92915050565b60006020828403121561034c578081fd5b6103568383610311565b9392505050565b60008060008060608587031215610372578283fd5b61037c8686610311565b9350602085013567ffffffffffffffff80821115610398578485fd5b818701915087601f8301126103ab578485fd5b8135818111156103b9578586fd5b8860208285010111156103ca578586fd5b602083019550809450505050604085013580151581146103e8578182fd5b939692955090935050565b6000828483379101908152919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60006020825282602083015282846040840137818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b6020808252818101527f426f72696e67466163746f72793a204e6f206d6173746572436f6e747261637460408201526060019056fea264697066735822122068165eedfa3f8e65a1be32031807d2eedf1716112cba068e46e22cd4a9ab030464736f6c634300060c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4DC DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x29 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1F54245B EQ PUSH2 0x2E JUMPI DUP1 PUSH4 0xBAFE4F14 EQ PUSH2 0x57 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x41 PUSH2 0x3C CALLDATASIZE PUSH1 0x4 PUSH2 0x35D JUMP JUMPDEST PUSH2 0x77 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4E SWAP2 SWAP1 PUSH2 0x403 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x41 PUSH2 0x72 CALLDATASIZE PUSH1 0x4 PUSH2 0x33B JUMP JUMPDEST PUSH2 0x2E9 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH2 0xCF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC6 SWAP1 PUSH2 0x471 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP6 SWAP1 SHL DUP3 ISZERO PUSH2 0x158 JUMPI PUSH1 0x0 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0xEC SWAP3 SWAP2 SWAP1 PUSH2 0x3F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP PUSH1 0x40 MLOAD PUSH32 0x3D602D80600A3D3981F3363D3D373D3D3D363D73000000000000000000000000 DUP2 MSTORE DUP3 PUSH1 0x14 DUP3 ADD MSTORE PUSH32 0x5AF43D82803E903D91602B57FD5BF30000000000000000000000000000000000 PUSH1 0x28 DUP3 ADD MSTORE DUP2 PUSH1 0x37 DUP3 PUSH1 0x0 CREATE2 SWAP4 POP POP POP PUSH2 0x1B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x3D602D80600A3D3981F3363D3D373D3D3D363D73000000000000000000000000 DUP2 MSTORE DUP2 PUSH1 0x14 DUP3 ADD MSTORE PUSH32 0x5AF43D82803E903D91602B57FD5BF30000000000000000000000000000000000 PUSH1 0x28 DUP3 ADD MSTORE PUSH1 0x37 DUP2 PUSH1 0x0 CREATE SWAP3 POP POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP4 DUP11 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH32 0x4DDF47D400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH4 0x4DDF47D4 SWAP1 CALLVALUE SWAP1 PUSH2 0x247 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x424 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x260 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x274 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xD62166F3C2149208E51788B1401CC356BF5DA1FC6C7886A32E18570F57D88B3B DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x2D8 SWAP3 SWAP2 SWAP1 PUSH2 0x424 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x335 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x34C JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x356 DUP4 DUP4 PUSH2 0x311 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x372 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x37C DUP7 DUP7 PUSH2 0x311 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x398 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3AB JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x3B9 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x3CA JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 POP DUP1 SWAP5 POP POP POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x3E8 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 PUSH1 0x20 DUP4 ADD MSTORE DUP3 DUP5 PUSH1 0x40 DUP5 ADD CALLDATACOPY DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x426F72696E67466163746F72793A204E6F206D6173746572436F6E7472616374 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH9 0x165EEDFA3F8E65A1BE ORIGIN SUB XOR SMOD 0xD2 0xEE 0xDF OR AND GT 0x2C 0xBA MOD DUP15 CHAINID 0xE2 0x2C 0xD4 0xA9 0xAB SUB DIV PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ","sourceMap":"15834:2449:0:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106100295760003560e01c80631f54245b1461002e578063bafe4f1414610057575b600080fd5b61004161003c36600461035d565b610077565b60405161004e9190610403565b60405180910390f35b34801561006357600080fd5b5061004161007236600461033b565b6102e9565b600073ffffffffffffffffffffffffffffffffffffffff85166100cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100c690610471565b60405180910390fd5b606085901b821561015857600085856040516100ec9291906103f3565b604051809103902090506040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152816037826000f5935050506101b4565b6040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528160148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f09250505b73ffffffffffffffffffffffffffffffffffffffff8281166000818152602081905260409081902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016938a169390931790925590517f4ddf47d4000000000000000000000000000000000000000000000000000000008152634ddf47d49034906102479089908990600401610424565b6000604051808303818588803b15801561026057600080fd5b505af1158015610274573d6000803e3d6000fd5b50505050508173ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fd62166f3c2149208e51788b1401cc356bf5da1fc6c7886a32e18570f57d88b3b87876040516102d8929190610424565b60405180910390a350949350505050565b60006020819052908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b803573ffffffffffffffffffffffffffffffffffffffff8116811461033557600080fd5b92915050565b60006020828403121561034c578081fd5b6103568383610311565b9392505050565b60008060008060608587031215610372578283fd5b61037c8686610311565b9350602085013567ffffffffffffffff80821115610398578485fd5b818701915087601f8301126103ab578485fd5b8135818111156103b9578586fd5b8860208285010111156103ca578586fd5b602083019550809450505050604085013580151581146103e8578182fd5b939692955090935050565b6000828483379101908152919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60006020825282602083015282846040840137818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b6020808252818101527f426f72696e67466163746f72793a204e6f206d6173746572436f6e747261637460408201526060019056fea264697066735822122068165eedfa3f8e65a1be32031807d2eedf1716112cba068e46e22cd4a9ab030464736f6c634300060c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x29 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1F54245B EQ PUSH2 0x2E JUMPI DUP1 PUSH4 0xBAFE4F14 EQ PUSH2 0x57 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x41 PUSH2 0x3C CALLDATASIZE PUSH1 0x4 PUSH2 0x35D JUMP JUMPDEST PUSH2 0x77 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4E SWAP2 SWAP1 PUSH2 0x403 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x41 PUSH2 0x72 CALLDATASIZE PUSH1 0x4 PUSH2 0x33B JUMP JUMPDEST PUSH2 0x2E9 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH2 0xCF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC6 SWAP1 PUSH2 0x471 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP6 SWAP1 SHL DUP3 ISZERO PUSH2 0x158 JUMPI PUSH1 0x0 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0xEC SWAP3 SWAP2 SWAP1 PUSH2 0x3F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP PUSH1 0x40 MLOAD PUSH32 0x3D602D80600A3D3981F3363D3D373D3D3D363D73000000000000000000000000 DUP2 MSTORE DUP3 PUSH1 0x14 DUP3 ADD MSTORE PUSH32 0x5AF43D82803E903D91602B57FD5BF30000000000000000000000000000000000 PUSH1 0x28 DUP3 ADD MSTORE DUP2 PUSH1 0x37 DUP3 PUSH1 0x0 CREATE2 SWAP4 POP POP POP PUSH2 0x1B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x3D602D80600A3D3981F3363D3D373D3D3D363D73000000000000000000000000 DUP2 MSTORE DUP2 PUSH1 0x14 DUP3 ADD MSTORE PUSH32 0x5AF43D82803E903D91602B57FD5BF30000000000000000000000000000000000 PUSH1 0x28 DUP3 ADD MSTORE PUSH1 0x37 DUP2 PUSH1 0x0 CREATE SWAP3 POP POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP4 DUP11 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH32 0x4DDF47D400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH4 0x4DDF47D4 SWAP1 CALLVALUE SWAP1 PUSH2 0x247 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x424 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x260 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x274 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xD62166F3C2149208E51788B1401CC356BF5DA1FC6C7886A32E18570F57D88B3B DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x2D8 SWAP3 SWAP2 SWAP1 PUSH2 0x424 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x335 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x34C JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x356 DUP4 DUP4 PUSH2 0x311 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x372 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x37C DUP7 DUP7 PUSH2 0x311 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x398 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3AB JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x3B9 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x3CA JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 POP DUP1 SWAP5 POP POP POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x3E8 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 PUSH1 0x20 DUP4 ADD MSTORE DUP3 DUP5 PUSH1 0x40 DUP5 ADD CALLDATACOPY DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x426F72696E67466163746F72793A204E6F206D6173746572436F6E7472616374 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH9 0x165EEDFA3F8E65A1BE ORIGIN SUB XOR SMOD 0xD2 0xEE 0xDF OR AND GT 0x2C 0xBA MOD DUP15 CHAINID 0xE2 0x2C 0xD4 0xA9 0xAB SUB DIV PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ","sourceMap":"15834:2449:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;16611:1670;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;16029:51;;;;;;;;;;-1:-1:-1;16029:51:0;;;;;:::i;:::-;;:::i;16611:1670::-;16743:20;16783:28;;;16775:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;16880:23;;;;16974:1114;;;;17115:12;17140:4;;17130:15;;;;;;;:::i;:::-;;;;;;;;17115:30;;17325:4;17319:11;17361:66;17354:5;17347:81;17470:11;17463:4;17456:5;17452:16;17445:37;17524:66;17517:4;17510:5;17506:16;17499:92;17648:4;17642;17635:5;17632:1;17624:29;17608:45;;;17288:379;;;;17743:4;17737:11;17779:66;17772:5;17765:81;17888:11;17881:4;17874:5;17870:16;17863:37;17942:66;17935:4;17928:5;17924:16;17917:92;18059:4;18052:5;18049:1;18042:22;18026:38;;;17706:372;18097:30;;;;:16;:30;;;;;;;;;;;;:47;;;;;;;;;;;;;;18155:58;;;;;:34;;18197:9;;18155:58;;18208:4;;;;18155:58;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18261:12;18229:45;;18239:14;18229:45;;;18255:4;;18229:45;;;;;;;:::i;:::-;;;;;;;;16611:1670;;;;;;;:::o;16029:51::-;;;;;;;;;;;;;;;;:::o;5:130:-1:-;72:20;;4667:42;4656:54;;5040:35;;5030:2;;5089:1;;5079:12;5030:2;57:78;;;;:::o;631:241::-;;735:2;723:9;714:7;710:23;706:32;703:2;;;-1:-1;;741:12;703:2;803:53;848:7;824:22;803:53;:::i;:::-;793:63;697:175;-1:-1;;;697:175::o;879:609::-;;;;;1033:2;1021:9;1012:7;1008:23;1004:32;1001:2;;;-1:-1;;1039:12;1001:2;1101:53;1146:7;1122:22;1101:53;:::i;:::-;1091:63;;1219:2;1208:9;1204:18;1191:32;1243:18;;1235:6;1232:30;1229:2;;;-1:-1;;1265:12;1229:2;1350:6;1339:9;1335:22;;;401:3;394:4;386:6;382:17;378:27;368:2;;-1:-1;;409:12;368:2;452:6;439:20;1243:18;471:6;468:30;465:2;;;-1:-1;;501:12;465:2;596:3;1219:2;576:17;537:6;562:32;;559:41;556:2;;;-1:-1;;603:12;556:2;1219;537:6;533:17;1285:82;;;;;;;;1404:2;1444:9;1440:22;206:20;5186:5;4568:13;4561:21;5164:5;5161:32;5151:2;;-1:-1;;5197:12;5151:2;995:493;;;;-1:-1;995:493;;-1:-1;;995:493::o;2625:291::-;;4804:6;4799:3;4794;4781:30;4842:16;;4835:27;;;4842:16;2769:147;-1:-1;2769:147::o;2923:222::-;4667:42;4656:54;;;;1566:37;;3050:2;3035:18;;3021:124::o;3152:326::-;;3307:2;3328:17;3321:47;4023:6;3307:2;3296:9;3292:18;4011:19;4804:6;4799:3;4051:14;3296:9;4051:14;4781:30;4842:16;;;4051:14;4842:16;;;4835:27;;;;4964:2;4944:14;;;4960:7;4940:28;1890:39;;;3278:200;-1:-1;3278:200::o;3485:416::-;3685:2;3699:47;;;3670:18;;;4011:19;2545:34;4051:14;;;2525:55;2599:12;;;3656:245::o"},"gasEstimates":{"creation":{"codeDepositCost":"248800","executionCost":"287","totalCost":"249087"},"external":{"deploy(address,bytes,bool)":"infinite","masterContractOf(address)":"1266"}},"methodIdentifiers":{"deploy(address,bytes,bool)":"1f54245b","masterContractOf(address)":"bafe4f14"}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"masterContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cloneAddress\",\"type\":\"address\"}],\"name\":\"LogDeploy\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"useCreate2\",\"type\":\"bool\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"cloneAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"masterContractOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deploy(address,bytes,bool)\":{\"params\":{\"data\":\"Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\",\"masterContract\":\"The address of the contract to clone.\",\"useCreate2\":\"Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\"},\"returns\":{\"cloneAddress\":\"Address of the created clone contract.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deploy(address,bytes,bool)\":{\"notice\":\"Deploys a given master Contract as a clone. Any ETH transferred with this call is forwarded to the new clone. Emits `LogDeploy`.\"},\"masterContractOf(address)\":{\"notice\":\"Mapping from clone contracts to their masterContract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/BentoBoxV1Flat.sol\":\"BoringFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/flat/BentoBoxV1Flat.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// The BentoBox\\n\\n//  \\u2584\\u2584\\u2584\\u2584\\u00b7 \\u2584\\u2584\\u2584 . \\u2590 \\u2584 \\u2584\\u2584\\u2584\\u2584\\u2584      \\u2584\\u2584\\u2584\\u2584\\u00b7       \\u2590\\u2584\\u2022 \\u2584\\n//  \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u2580\\u2584.\\u2580\\u00b7\\u2588\\u258c\\u2590\\u2588\\u2022\\u2588\\u2588  \\u25aa     \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u25aa      \\u2588\\u258c\\u2588\\u258c\\u25aa\\n//  \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584\\u2590\\u2580\\u2580\\u25aa\\u2584\\u2590\\u2588\\u2590\\u2590\\u258c \\u2590\\u2588.\\u25aa \\u2584\\u2588\\u2580\\u2584 \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584 \\u2584\\u2588\\u2580\\u2584  \\u00b7\\u2588\\u2588\\u00b7\\n//  \\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u2584\\u2584\\u258c\\u2588\\u2588\\u2590\\u2588\\u258c \\u2590\\u2588\\u258c\\u00b7\\u2590\\u2588\\u258c.\\u2590\\u258c\\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u258c.\\u2590\\u258c\\u25aa\\u2590\\u2588\\u00b7\\u2588\\u258c\\n//  \\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2580\\u2580 \\u2580\\u2580 \\u2588\\u25aa \\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u2022\\u2580\\u2580 \\u2580\\u2580\\n\\n// This contract stores funds, handles their transfers, supports flash loans and strategies.\\n\\n// Copyright (c) 2021 BoringCrypto - All rights reserved\\n// Twitter: @Boring_Crypto\\n\\n// Special thanks to Keno for all his hard work and support\\n\\n// Version 22-Mar-2021\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable not-rely-on-time\\n// solhint-disable no-inline-assembly\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function decimals() external view returns (uint256);\\n}\\n\\n// File contracts/interfaces/IFlashLoan.sol\\n// License-Identifier: MIT\\n\\ninterface IFlashBorrower {\\n    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param token The address of the token that is loaned.\\n    /// @param amount of the `token` that is loaned.\\n    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onFlashLoan(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IBatchFlashBorrower {\\n    /// @notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param tokens Array of addresses for ERC-20 tokens that is loaned.\\n    /// @param amounts A one-to-one map to `tokens` that is loaned.\\n    /// @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onBatchFlashLoan(\\n        address sender,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata fees,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File contracts/interfaces/IWETH.sol\\n// License-Identifier: MIT\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\\n// File contracts/interfaces/IStrategy.sol\\n// License-Identifier: MIT\\n\\ninterface IStrategy {\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\n    /// @param amount The amount of tokens to invest.\\n    function skim(uint256 amount) external;\\n\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\n    /// @dev The `actualAmount` should be very close to the amount.\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\n    /// @param amount The requested amount the caller wants to withdraw.\\n    /// @return actualAmount The real amount that is withdrawn.\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library using overflow-/underflow-safe math.\\nlibrary RebaseLibrary {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = elastic.mul(total.base) / total.elastic;\\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\\n                base = base.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = base.mul(total.elastic) / total.base;\\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\\n                elastic = elastic.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\\n    /// @return (Rebase) The new total.\\n    /// @return base in relationship to `elastic`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 base) {\\n        base = toBase(total, elastic, roundUp);\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return (total, base);\\n    }\\n\\n    /// @notice Sub `base` from `total` and update `total.elastic`.\\n    /// @return (Rebase) The new total.\\n    /// @return elastic in relationship to `base`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 elastic) {\\n        elastic = toElastic(total, base, roundUp);\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return (total, elastic);\\n    }\\n\\n    /// @notice Add `elastic` and `base` to `total`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Subtract `elastic` and `base` to `total`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Add `elastic` to `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.add(elastic.to128());\\n    }\\n\\n    /// @notice Subtract `elastic` from `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.sub(elastic.to128());\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() public {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IMasterContract {\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\n    /// Also kown as the constructor for cloned contracts.\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\n    /// @param data Can be abi encoded arguments or anything else.\\n    function init(bytes calldata data) external payable;\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringFactory.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BoringFactory {\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\n\\n    /// @notice Mapping from clone contracts to their masterContract.\\n    mapping(address => address) public masterContractOf;\\n\\n    /// @notice Deploys a given master Contract as a clone.\\n    /// Any ETH transferred with this call is forwarded to the new clone.\\n    /// Emits `LogDeploy`.\\n    /// @param masterContract The address of the contract to clone.\\n    /// @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\\n    /// @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\\n    /// @return cloneAddress Address of the created clone contract.\\n    function deploy(\\n        address masterContract,\\n        bytes calldata data,\\n        bool useCreate2\\n    ) public payable returns (address cloneAddress) {\\n        require(masterContract != address(0), \\\"BoringFactory: No masterContract\\\");\\n        bytes20 targetBytes = bytes20(masterContract); // Takes the first 20 bytes of the masterContract's address\\n\\n        if (useCreate2) {\\n            // each masterContract has different code already. So clones are distinguished by their data only.\\n            bytes32 salt = keccak256(data);\\n\\n            // Creates clone, more info here: https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create2(0, clone, 0x37, salt)\\n            }\\n        } else {\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create(0, clone, 0x37)\\n            }\\n        }\\n        masterContractOf[cloneAddress] = masterContract;\\n\\n        IMasterContract(cloneAddress).init{value: msg.value}(data);\\n\\n        emit LogDeploy(masterContract, data, cloneAddress);\\n    }\\n}\\n\\n// File contracts/MasterContractManager.sol\\n// License-Identifier: UNLICENSED\\n\\ncontract MasterContractManager is BoringOwnable, BoringFactory {\\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\\n    event LogRegisterProtocol(address indexed protocol);\\n\\n    /// @notice masterContract to user to approval state\\n    mapping(address => mapping(address => bool)) public masterContractApproved;\\n    /// @notice masterContract to whitelisted state for approval without signed message\\n    mapping(address => bool) public whitelistedMasterContracts;\\n    /// @notice user nonces for masterContract approvals\\n    mapping(address => uint256) public nonces;\\n\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n    // See https://eips.ethereum.org/EIPS/eip-191\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\n    bytes32 private constant APPROVAL_SIGNATURE_HASH =\\n        keccak256(\\\"SetMasterContractApproval(string warning,address user,address masterContract,bool approved,uint256 nonce)\\\");\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\n    }\\n\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, keccak256(\\\"BentoBox V1\\\"), chainId, address(this)));\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @notice Other contracts need to register with this master contract so that users can approve them for the BentoBox.\\n    function registerProtocol() public {\\n        masterContractOf[msg.sender] = msg.sender;\\n        emit LogRegisterProtocol(msg.sender);\\n    }\\n\\n    /// @notice Enables or disables a contract for approval without signed message.\\n    function whitelistMasterContract(address masterContract, bool approved) public onlyOwner {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: Cannot approve 0\\\");\\n\\n        // Effects\\n        whitelistedMasterContracts[masterContract] = approved;\\n        emit LogWhiteListMasterContract(masterContract, approved);\\n    }\\n\\n    /// @notice Approves or revokes a `masterContract` access to `user` funds.\\n    /// @param user The address of the user that approves or revokes access.\\n    /// @param masterContract The address who gains or loses access.\\n    /// @param approved If True approves access. If False revokes access.\\n    /// @param v Part of the signature. (See EIP-191)\\n    /// @param r Part of the signature. (See EIP-191)\\n    /// @param s Part of the signature. (See EIP-191)\\n    // F4 - Check behaviour for all function arguments when wrong or extreme\\n    // F4: Don't allow masterContract 0 to be approved. Unknown contracts will have a masterContract of 0.\\n    // F4: User can't be 0 for signed approvals because the recoveredAddress will be 0 if ecrecover fails\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: masterC not set\\\"); // Important for security\\n\\n        // If no signature is provided, the fallback is executed\\n        if (r == 0 && s == 0 && v == 0) {\\n            require(user == msg.sender, \\\"MasterCMgr: user not sender\\\");\\n            require(masterContractOf[user] == address(0), \\\"MasterCMgr: user is clone\\\");\\n            require(whitelistedMasterContracts[masterContract], \\\"MasterCMgr: not whitelisted\\\");\\n        } else {\\n            // Important for security - any address without masterContract has address(0) as masterContract\\n            // So approving address(0) would approve every address, leading to full loss of funds\\n            // Also, ecrecover returns address(0) on failure. So we check this:\\n            require(user != address(0), \\\"MasterCMgr: User cannot be 0\\\");\\n\\n            // C10 - Protect signatures against replay, use nonce and chainId (SWC-121)\\n            // C10: nonce + chainId are used to prevent replays\\n            // C11 - All signatures strictly EIP-712 (SWC-117 SWC-122)\\n            // C11: signature is EIP-712 compliant\\n            // C12 - abi.encodePacked can't contain variable length user input (SWC-133)\\n            // C12: abi.encodePacked has fixed length parameters\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA,\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            APPROVAL_SIGNATURE_HASH,\\n                            approved\\n                                ? keccak256(\\\"Give FULL access to funds in (and approved to) BentoBox?\\\")\\n                                : keccak256(\\\"Revoke access to BentoBox?\\\"),\\n                            user,\\n                            masterContract,\\n                            approved,\\n                            nonces[user]++\\n                        )\\n                    )\\n                )\\n            );\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress == user, \\\"MasterCMgr: Invalid Signature\\\");\\n        }\\n\\n        // Effects\\n        masterContractApproved[masterContract][user] = approved;\\n        emit LogSetMasterContractApproval(masterContract, user, approved);\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringBatchable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BaseBoringBatchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /// @notice Allows batched call to self (this contract).\\n    /// @param calls An array of inputs for each call.\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n    /// @return successes An array indicating the success of a call, mapped one-to-one to `calls`.\\n    /// @return results An array with the returned data of each function call, mapped one-to-one to `calls`.\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results) {\\n        successes = new bool[](calls.length);\\n        results = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\n            require(success || !revertOnFail, _getRevertMsg(result));\\n            successes[i] = success;\\n            results[i] = result;\\n        }\\n    }\\n}\\n\\ncontract BoringBatchable is BaseBoringBatchable {\\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\\n    /// Lookup `IERC20.permit`.\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\n    function permitToken(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        token.permit(from, to, amount, deadline, v, r, s);\\n    }\\n}\\n\\n// File contracts/BentoBox.sol\\n// License-Identifier: UNLICENSED\\n\\n/// @title BentoBox\\n/// @author BoringCrypto, Keno\\n/// @notice The BentoBox is a vault for tokens. The stored tokens can be flash loaned and used in strategies.\\n/// Yield from this will go to the token depositors.\\n/// Rebasing tokens ARE NOT supported and WILL cause loss of funds.\\n/// Any funds transfered directly onto the BentoBox will be lost, use the deposit function instead.\\ncontract BentoBoxV1 is MasterContractManager, BoringBatchable {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n    using BoringERC20 for IERC20;\\n    using RebaseLibrary for Rebase;\\n\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n\\n    event LogDeposit(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogWithdraw(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogTransfer(IERC20 indexed token, address indexed from, address indexed to, uint256 share);\\n\\n    event LogFlashLoan(address indexed borrower, IERC20 indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\\n\\n    event LogStrategyTargetPercentage(IERC20 indexed token, uint256 targetPercentage);\\n    event LogStrategyQueued(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategySet(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategyInvest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyDivest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyProfit(IERC20 indexed token, uint256 amount);\\n    event LogStrategyLoss(IERC20 indexed token, uint256 amount);\\n\\n    // *************** //\\n    // *** STRUCTS *** //\\n    // *************** //\\n\\n    struct StrategyData {\\n        uint64 strategyStartDate;\\n        uint64 targetPercentage;\\n        uint128 balance; // the balance of the strategy that BentoBox thinks is in there\\n    }\\n\\n    // ******************************** //\\n    // *** CONSTANTS AND IMMUTABLES *** //\\n    // ******************************** //\\n\\n    // V2 - Can they be private?\\n    // V2: Private to save gas, to verify it's correct, check the constructor arguments\\n    IERC20 private immutable wethToken;\\n\\n    IERC20 private constant USE_ETHEREUM = IERC20(0);\\n    uint256 private constant FLASH_LOAN_FEE = 50; // 0.05%\\n    uint256 private constant FLASH_LOAN_FEE_PRECISION = 1e5;\\n    uint256 private constant STRATEGY_DELAY = 0 weeks;\\n    uint256 private constant MAX_TARGET_PERCENTAGE = 95; // 95%\\n    uint256 private constant MINIMUM_SHARE_BALANCE = 1000; // To prevent the ratio going off\\n\\n    // ***************** //\\n    // *** VARIABLES *** //\\n    // ***************** //\\n\\n    // Balance per token per address/contract in shares\\n    mapping(IERC20 => mapping(address => uint256)) public balanceOf;\\n\\n    // Rebase from amount to share\\n    mapping(IERC20 => Rebase) public totals;\\n\\n    mapping(IERC20 => IStrategy) public strategy;\\n    mapping(IERC20 => IStrategy) public pendingStrategy;\\n    mapping(IERC20 => StrategyData) public strategyData;\\n\\n    // ******************* //\\n    // *** CONSTRUCTOR *** //\\n    // ******************* //\\n\\n    constructor(IERC20 wethToken_) public {\\n        wethToken = wethToken_;\\n    }\\n\\n    // Just for testing purposes!!! Don't deploy this contract on production!!\\n    function setTokenTotal(\\n        IERC20 token,\\n        uint128 elastic,\\n        uint128 base\\n    ) public {\\n        Rebase memory total;\\n        total.elastic = elastic;\\n        total.base = base;\\n        totals[token] = total;\\n    }\\n\\n    // ***************** //\\n    // *** MODIFIERS *** //\\n    // ***************** //\\n\\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\\n    /// If 'from' is msg.sender, it's allowed.\\n    /// If 'from' is the BentoBox itself, it's allowed. Any ETH, token balances (above the known balances) or BentoBox balances\\n    /// can be taken by anyone.\\n    /// This is to enable skimming, not just for deposits, but also for withdrawals or transfers, enabling better composability.\\n    /// If 'from' is a clone of a masterContract AND the 'from' address has approved that masterContract, it's allowed.\\n    modifier allowed(address from) {\\n        if (from != msg.sender && from != address(this)) {\\n            // From is sender or you are skimming\\n            address masterContract = masterContractOf[msg.sender];\\n            require(masterContract != address(0), \\\"BentoBox: no masterContract\\\");\\n            require(masterContractApproved[masterContract][from], \\\"BentoBox: Transfer not approved\\\");\\n        }\\n        _;\\n    }\\n\\n    // ************************** //\\n    // *** INTERNAL FUNCTIONS *** //\\n    // ************************** //\\n\\n    /// @dev Returns the total balance of `token` this contracts holds,\\n    /// plus the total amount this contract thinks the strategy holds.\\n    function _tokenBalanceOf(IERC20 token) internal view returns (uint256 amount) {\\n        amount = token.balanceOf(address(this)).add(strategyData[token].balance);\\n    }\\n\\n    // ************************ //\\n    // *** PUBLIC FUNCTIONS *** //\\n    // ************************ //\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share) {\\n        share = totals[token].toBase(amount, roundUp);\\n    }\\n\\n    /// @dev Helper function represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        IERC20 token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount) {\\n        amount = totals[token].toElastic(share, roundUp);\\n    }\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public payable allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n\\n        // If a new token gets added, the tokenSupply call checks that this is a deployed contract. Needed for security.\\n        require(total.elastic != 0 || token.totalSupply() > 0, \\\"BentoBox: No tokens\\\");\\n        if (share == 0) {\\n            // value of the share may be lower than the amount due to rounding, that's ok\\n            share = total.toBase(amount, false);\\n            // Any deposit should lead to at least the minimum share balance, otherwise it's ignored (no amount taken)\\n            if (total.base.add(share.to128()) < MINIMUM_SHARE_BALANCE) {\\n                return (0, 0);\\n            }\\n        } else {\\n            // amount may be lower than the value of share due to rounding, in that case, add 1 to amount (Always round up)\\n            amount = total.toElastic(share, true);\\n        }\\n\\n        // In case of skimming, check that only the skimmable amount is taken.\\n        // For ETH, the full balance is available, so no need to check.\\n        // During flashloans the _tokenBalanceOf is lower than 'reality', so skimming deposits will mostly fail during a flashloan.\\n        require(\\n            from != address(this) || token_ == USE_ETHEREUM || amount <= _tokenBalanceOf(token).sub(total.elastic),\\n            \\\"BentoBox: Skim too much\\\"\\n        );\\n\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n        total.base = total.base.add(share.to128());\\n        total.elastic = total.elastic.add(amount.to128());\\n        totals[token] = total;\\n\\n        // Interactions\\n        // During the first deposit, we check that this token is 'real'\\n        if (token_ == USE_ETHEREUM) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the WETH implementation is faulty or malicious, it will block adding ETH (but we know the WETH implementation)\\n            IWETH(address(wethToken)).deposit{value: amount}();\\n        } else if (from != address(this)) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the token implementation is faulty or malicious, it may block adding tokens. Good.\\n            token.safeTransferFrom(from, address(this), amount);\\n        }\\n        emit LogDeposit(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n        if (share == 0) {\\n            // value of the share paid could be lower than the amount paid due to rounding, in that case, add a share (Always round up)\\n            share = total.toBase(amount, true);\\n        } else {\\n            // amount may be lower than the value of share due to rounding, that's ok\\n            amount = total.toElastic(share, false);\\n        }\\n\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        total.elastic = total.elastic.sub(amount.to128());\\n        total.base = total.base.sub(share.to128());\\n        // There have to be at least 1000 shares left to prevent reseting the share/amount ratio (unless it's fully emptied)\\n        require(total.base >= MINIMUM_SHARE_BALANCE || total.base == 0, \\\"BentoBox: cannot empty\\\");\\n        totals[token] = total;\\n\\n        // Interactions\\n        if (token_ == USE_ETHEREUM) {\\n            // X2, X3: A revert or big gas usage in the WETH contract could block withdrawals, but WETH9 is fine.\\n            IWETH(address(wethToken)).withdraw(amount);\\n            // X2, X3: A revert or big gas usage could block, however, the to address is under control of the caller.\\n            (bool success, ) = to.call{value: amount}(\\\"\\\");\\n            require(success, \\\"BentoBox: ETH transfer failed\\\");\\n        } else {\\n            // X2, X3: A malicious token could block withdrawal of just THAT token.\\n            //         masterContracts may want to take care not to rely on withdraw always succeeding.\\n            token.safeTransfer(to, amount);\\n        }\\n        emit LogWithdraw(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    // Clones of master contracts can transfer from any account that has approved them\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transferMultiple for gas optimization\\n    function transfer(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) public allowed(from) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n\\n        emit LogTransfer(token, from, to, share);\\n    }\\n\\n    /// @notice Transfer shares from a user account to multiple other ones.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param tos The receivers of the tokens.\\n    /// @param shares The amount of `token` in shares for each receiver in `tos`.\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transfer for gas optimization\\n    function transferMultiple(\\n        IERC20 token,\\n        address from,\\n        address[] calldata tos,\\n        uint256[] calldata shares\\n    ) public allowed(from) {\\n        // Checks\\n        require(tos[0] != address(0), \\\"BentoBox: to[0] not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        uint256 totalAmount;\\n        uint256 len = tos.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address to = tos[i];\\n            balanceOf[token][to] = balanceOf[token][to].add(shares[i]);\\n            totalAmount = totalAmount.add(shares[i]);\\n            emit LogTransfer(token, from, to, shares[i]);\\n        }\\n        balanceOf[token][from] = balanceOf[token][from].sub(totalAmount);\\n    }\\n\\n    /// @notice Flashloan ability.\\n    /// @param borrower The address of the contract that implements and conforms to `IFlashBorrower` and handles the flashloan.\\n    /// @param receiver Address of the token receiver.\\n    /// @param token The address of the token to receive.\\n    /// @param amount of the tokens to receive.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function flashLoan(\\n        IFlashBorrower borrower,\\n        address receiver,\\n        IERC20 token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public {\\n        uint256 fee = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n        token.safeTransfer(receiver, amount);\\n\\n        borrower.onFlashLoan(msg.sender, token, amount, fee, data);\\n\\n        require(_tokenBalanceOf(token) >= totals[token].addElastic(fee.to128()), \\\"BentoBox: Wrong amount\\\");\\n        emit LogFlashLoan(address(borrower), token, amount, fee, receiver);\\n    }\\n\\n    /// @notice Support for batched flashloans. Useful to request multiple different `tokens` in a single transaction.\\n    /// @param borrower The address of the contract that implements and conforms to `IBatchFlashBorrower` and handles the flashloan.\\n    /// @param receivers An array of the token receivers. A one-to-one mapping with `tokens` and `amounts`.\\n    /// @param tokens The addresses of the tokens.\\n    /// @param amounts of the tokens for each receiver.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function batchFlashLoan(\\n        IBatchFlashBorrower borrower,\\n        address[] calldata receivers,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public {\\n        uint256[] memory fees = new uint256[](tokens.length);\\n\\n        uint256 len = tokens.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 amount = amounts[i];\\n            fees[i] = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n\\n            tokens[i].safeTransfer(receivers[i], amounts[i]);\\n        }\\n\\n        borrower.onBatchFlashLoan(msg.sender, tokens, amounts, fees, data);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            IERC20 token = tokens[i];\\n            require(_tokenBalanceOf(token) >= totals[token].addElastic(fees[i].to128()), \\\"BentoBox: Wrong amount\\\");\\n            emit LogFlashLoan(address(borrower), token, amounts[i], fees[i], receivers[i]);\\n        }\\n    }\\n\\n    /// @notice Sets the target percentage of the strategy for `token`.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param targetPercentage_ The new target in percent. Must be lesser or equal to `MAX_TARGET_PERCENTAGE`.\\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) public onlyOwner {\\n        // Checks\\n        require(targetPercentage_ <= MAX_TARGET_PERCENTAGE, \\\"StrategyManager: Target too high\\\");\\n\\n        // Effects\\n        strategyData[token].targetPercentage = targetPercentage_;\\n        emit LogStrategyTargetPercentage(token, targetPercentage_);\\n    }\\n\\n    /// @notice Sets the contract address of a new strategy that conforms to `IStrategy` for `token`.\\n    /// Must be called twice with the same arguments.\\n    /// A new strategy becomes pending first and can be activated once `STRATEGY_DELAY` is over.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param newStrategy The address of the contract that conforms to `IStrategy`.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // C4 - Use block.timestamp only for long intervals (SWC-116)\\n    // C4: block.timestamp is used for a period of 2 weeks, which is long enough\\n    function setStrategy(IERC20 token, IStrategy newStrategy) public onlyOwner {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy pending = pendingStrategy[token];\\n        if (data.strategyStartDate == 0 || pending != newStrategy) {\\n            pendingStrategy[token] = newStrategy;\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: Our sun will swallow the earth well before this overflows\\n            data.strategyStartDate = (block.timestamp + STRATEGY_DELAY).to64();\\n            emit LogStrategyQueued(token, newStrategy);\\n        } else {\\n            require(data.strategyStartDate != 0 && block.timestamp >= data.strategyStartDate, \\\"StrategyManager: Too early\\\");\\n            if (address(strategy[token]) != address(0)) {\\n                int256 balanceChange = strategy[token].exit(data.balance);\\n                // Effects\\n                if (balanceChange > 0) {\\n                    uint256 add = uint256(balanceChange);\\n                    totals[token].addElastic(add);\\n                    emit LogStrategyProfit(token, add);\\n                } else if (balanceChange < 0) {\\n                    uint256 sub = uint256(-balanceChange);\\n                    totals[token].subElastic(sub);\\n                    emit LogStrategyLoss(token, sub);\\n                }\\n\\n                emit LogStrategyDivest(token, data.balance);\\n            }\\n            strategy[token] = pending;\\n            data.strategyStartDate = 0;\\n            data.balance = 0;\\n            pendingStrategy[token] = IStrategy(0);\\n            emit LogStrategySet(token, newStrategy);\\n        }\\n        strategyData[token] = data;\\n    }\\n\\n    /// @notice The actual process of yield farming. Executes the strategy of `token`.\\n    /// Optionally does housekeeping if `balance` is true.\\n    /// `maxChangeAmount` is relevant for skimming or withdrawing if `balance` is true.\\n    /// @param token The address of the token for which a strategy is deployed.\\n    /// @param balance True if housekeeping should be done.\\n    /// @param maxChangeAmount The maximum amount for either pulling or pushing from/to the `IStrategy` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // F5: Not followed to prevent reentrancy issues with flashloans and BentoBox skims?\\n    function harvest(\\n        IERC20 token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) public {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy _strategy = strategy[token];\\n        int256 balanceChange = _strategy.harvest(data.balance, msg.sender);\\n        if (balanceChange == 0 && !balance) {\\n            return;\\n        }\\n\\n        uint256 totalElastic = totals[token].elastic;\\n\\n        if (balanceChange > 0) {\\n            uint256 add = uint256(balanceChange);\\n            totalElastic = totalElastic.add(add);\\n            totals[token].elastic = totalElastic.to128();\\n            emit LogStrategyProfit(token, add);\\n        } else if (balanceChange < 0) {\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: balanceChange could overflow if it's max negative int128.\\n            // But tokens with balances that large are not supported by the BentoBox.\\n            uint256 sub = uint256(-balanceChange);\\n            totalElastic = totalElastic.sub(sub);\\n            totals[token].elastic = totalElastic.to128();\\n            data.balance = data.balance.sub(sub.to128());\\n            emit LogStrategyLoss(token, sub);\\n        }\\n\\n        if (balance) {\\n            uint256 targetBalance = totalElastic.mul(data.targetPercentage) / 100;\\n            // if data.balance == targetBalance there is nothing to update\\n            if (data.balance < targetBalance) {\\n                uint256 amountOut = targetBalance.sub(data.balance);\\n                if (maxChangeAmount != 0 && amountOut > maxChangeAmount) {\\n                    amountOut = maxChangeAmount;\\n                }\\n                token.safeTransfer(address(_strategy), amountOut);\\n                data.balance = data.balance.add(amountOut.to128());\\n                _strategy.skim(amountOut);\\n                emit LogStrategyInvest(token, amountOut);\\n            } else if (data.balance > targetBalance) {\\n                uint256 amountIn = data.balance.sub(targetBalance.to128());\\n                if (maxChangeAmount != 0 && amountIn > maxChangeAmount) {\\n                    amountIn = maxChangeAmount;\\n                }\\n\\n                uint256 actualAmountIn = _strategy.withdraw(amountIn);\\n\\n                data.balance = data.balance.sub(actualAmountIn.to128());\\n                emit LogStrategyDivest(token, actualAmountIn);\\n            }\\n        }\\n\\n        strategyData[token] = data;\\n    }\\n\\n    // Contract should be able to receive ETH deposits to support deposit & skim\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd8343e88ade6bf85fd34d3556aedb2b14fe07ca40396ae2ef6064c9d8da0d4d3\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1051,"contract":"contracts/flat/BentoBoxV1Flat.sol:BoringFactory","label":"masterContractOf","offset":0,"slot":"0","type":"t_mapping(t_address,t_address)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_address)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address)","numberOfBytes":"32","value":"t_address"}}},"userdoc":{"kind":"user","methods":{"deploy(address,bytes,bool)":{"notice":"Deploys a given master Contract as a clone. Any ETH transferred with this call is forwarded to the new clone. Emits `LogDeploy`."},"masterContractOf(address)":{"notice":"Mapping from clone contracts to their masterContract."}},"version":1}},"BoringMath":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220048d403abc9c072986c64fb58872d2c0226695ac4cc014bb7d925a29550f380764736f6c634300060c0033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DIV DUP14 BLOCKHASH GASPRICE 0xBC SWAP13 SMOD 0x29 DUP7 0xC6 0x4F 0xB5 DUP9 PUSH19 0xD2C0226695AC4CC014BB7D925A29550F380764 PUSH20 0x6F6C634300060C00330000000000000000000000 ","sourceMap":"7242:949:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220048d403abc9c072986c64fb58872d2c0226695ac4cc014bb7d925a29550f380764736f6c634300060c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DIV DUP14 BLOCKHASH GASPRICE 0xBC SWAP13 SMOD 0x29 DUP7 0xC6 0x4F 0xB5 DUP9 PUSH19 0xD2C0226695AC4CC014BB7D925A29550F380764 PUSH20 0x6F6C634300060C00330000000000000000000000 ","sourceMap":"7242:949:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"add(uint256,uint256)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite","to128(uint256)":"infinite","to32(uint256)":"infinite","to64(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A library for performing overflow-/underflow-safe math, updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/BentoBoxV1Flat.sol\":\"BoringMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/flat/BentoBoxV1Flat.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// The BentoBox\\n\\n//  \\u2584\\u2584\\u2584\\u2584\\u00b7 \\u2584\\u2584\\u2584 . \\u2590 \\u2584 \\u2584\\u2584\\u2584\\u2584\\u2584      \\u2584\\u2584\\u2584\\u2584\\u00b7       \\u2590\\u2584\\u2022 \\u2584\\n//  \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u2580\\u2584.\\u2580\\u00b7\\u2588\\u258c\\u2590\\u2588\\u2022\\u2588\\u2588  \\u25aa     \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u25aa      \\u2588\\u258c\\u2588\\u258c\\u25aa\\n//  \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584\\u2590\\u2580\\u2580\\u25aa\\u2584\\u2590\\u2588\\u2590\\u2590\\u258c \\u2590\\u2588.\\u25aa \\u2584\\u2588\\u2580\\u2584 \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584 \\u2584\\u2588\\u2580\\u2584  \\u00b7\\u2588\\u2588\\u00b7\\n//  \\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u2584\\u2584\\u258c\\u2588\\u2588\\u2590\\u2588\\u258c \\u2590\\u2588\\u258c\\u00b7\\u2590\\u2588\\u258c.\\u2590\\u258c\\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u258c.\\u2590\\u258c\\u25aa\\u2590\\u2588\\u00b7\\u2588\\u258c\\n//  \\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2580\\u2580 \\u2580\\u2580 \\u2588\\u25aa \\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u2022\\u2580\\u2580 \\u2580\\u2580\\n\\n// This contract stores funds, handles their transfers, supports flash loans and strategies.\\n\\n// Copyright (c) 2021 BoringCrypto - All rights reserved\\n// Twitter: @Boring_Crypto\\n\\n// Special thanks to Keno for all his hard work and support\\n\\n// Version 22-Mar-2021\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable not-rely-on-time\\n// solhint-disable no-inline-assembly\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function decimals() external view returns (uint256);\\n}\\n\\n// File contracts/interfaces/IFlashLoan.sol\\n// License-Identifier: MIT\\n\\ninterface IFlashBorrower {\\n    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param token The address of the token that is loaned.\\n    /// @param amount of the `token` that is loaned.\\n    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onFlashLoan(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IBatchFlashBorrower {\\n    /// @notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param tokens Array of addresses for ERC-20 tokens that is loaned.\\n    /// @param amounts A one-to-one map to `tokens` that is loaned.\\n    /// @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onBatchFlashLoan(\\n        address sender,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata fees,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File contracts/interfaces/IWETH.sol\\n// License-Identifier: MIT\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\\n// File contracts/interfaces/IStrategy.sol\\n// License-Identifier: MIT\\n\\ninterface IStrategy {\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\n    /// @param amount The amount of tokens to invest.\\n    function skim(uint256 amount) external;\\n\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\n    /// @dev The `actualAmount` should be very close to the amount.\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\n    /// @param amount The requested amount the caller wants to withdraw.\\n    /// @return actualAmount The real amount that is withdrawn.\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library using overflow-/underflow-safe math.\\nlibrary RebaseLibrary {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = elastic.mul(total.base) / total.elastic;\\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\\n                base = base.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = base.mul(total.elastic) / total.base;\\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\\n                elastic = elastic.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\\n    /// @return (Rebase) The new total.\\n    /// @return base in relationship to `elastic`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 base) {\\n        base = toBase(total, elastic, roundUp);\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return (total, base);\\n    }\\n\\n    /// @notice Sub `base` from `total` and update `total.elastic`.\\n    /// @return (Rebase) The new total.\\n    /// @return elastic in relationship to `base`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 elastic) {\\n        elastic = toElastic(total, base, roundUp);\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return (total, elastic);\\n    }\\n\\n    /// @notice Add `elastic` and `base` to `total`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Subtract `elastic` and `base` to `total`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Add `elastic` to `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.add(elastic.to128());\\n    }\\n\\n    /// @notice Subtract `elastic` from `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.sub(elastic.to128());\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() public {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IMasterContract {\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\n    /// Also kown as the constructor for cloned contracts.\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\n    /// @param data Can be abi encoded arguments or anything else.\\n    function init(bytes calldata data) external payable;\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringFactory.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BoringFactory {\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\n\\n    /// @notice Mapping from clone contracts to their masterContract.\\n    mapping(address => address) public masterContractOf;\\n\\n    /// @notice Deploys a given master Contract as a clone.\\n    /// Any ETH transferred with this call is forwarded to the new clone.\\n    /// Emits `LogDeploy`.\\n    /// @param masterContract The address of the contract to clone.\\n    /// @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\\n    /// @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\\n    /// @return cloneAddress Address of the created clone contract.\\n    function deploy(\\n        address masterContract,\\n        bytes calldata data,\\n        bool useCreate2\\n    ) public payable returns (address cloneAddress) {\\n        require(masterContract != address(0), \\\"BoringFactory: No masterContract\\\");\\n        bytes20 targetBytes = bytes20(masterContract); // Takes the first 20 bytes of the masterContract's address\\n\\n        if (useCreate2) {\\n            // each masterContract has different code already. So clones are distinguished by their data only.\\n            bytes32 salt = keccak256(data);\\n\\n            // Creates clone, more info here: https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create2(0, clone, 0x37, salt)\\n            }\\n        } else {\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create(0, clone, 0x37)\\n            }\\n        }\\n        masterContractOf[cloneAddress] = masterContract;\\n\\n        IMasterContract(cloneAddress).init{value: msg.value}(data);\\n\\n        emit LogDeploy(masterContract, data, cloneAddress);\\n    }\\n}\\n\\n// File contracts/MasterContractManager.sol\\n// License-Identifier: UNLICENSED\\n\\ncontract MasterContractManager is BoringOwnable, BoringFactory {\\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\\n    event LogRegisterProtocol(address indexed protocol);\\n\\n    /// @notice masterContract to user to approval state\\n    mapping(address => mapping(address => bool)) public masterContractApproved;\\n    /// @notice masterContract to whitelisted state for approval without signed message\\n    mapping(address => bool) public whitelistedMasterContracts;\\n    /// @notice user nonces for masterContract approvals\\n    mapping(address => uint256) public nonces;\\n\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n    // See https://eips.ethereum.org/EIPS/eip-191\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\n    bytes32 private constant APPROVAL_SIGNATURE_HASH =\\n        keccak256(\\\"SetMasterContractApproval(string warning,address user,address masterContract,bool approved,uint256 nonce)\\\");\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\n    }\\n\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, keccak256(\\\"BentoBox V1\\\"), chainId, address(this)));\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @notice Other contracts need to register with this master contract so that users can approve them for the BentoBox.\\n    function registerProtocol() public {\\n        masterContractOf[msg.sender] = msg.sender;\\n        emit LogRegisterProtocol(msg.sender);\\n    }\\n\\n    /// @notice Enables or disables a contract for approval without signed message.\\n    function whitelistMasterContract(address masterContract, bool approved) public onlyOwner {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: Cannot approve 0\\\");\\n\\n        // Effects\\n        whitelistedMasterContracts[masterContract] = approved;\\n        emit LogWhiteListMasterContract(masterContract, approved);\\n    }\\n\\n    /// @notice Approves or revokes a `masterContract` access to `user` funds.\\n    /// @param user The address of the user that approves or revokes access.\\n    /// @param masterContract The address who gains or loses access.\\n    /// @param approved If True approves access. If False revokes access.\\n    /// @param v Part of the signature. (See EIP-191)\\n    /// @param r Part of the signature. (See EIP-191)\\n    /// @param s Part of the signature. (See EIP-191)\\n    // F4 - Check behaviour for all function arguments when wrong or extreme\\n    // F4: Don't allow masterContract 0 to be approved. Unknown contracts will have a masterContract of 0.\\n    // F4: User can't be 0 for signed approvals because the recoveredAddress will be 0 if ecrecover fails\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: masterC not set\\\"); // Important for security\\n\\n        // If no signature is provided, the fallback is executed\\n        if (r == 0 && s == 0 && v == 0) {\\n            require(user == msg.sender, \\\"MasterCMgr: user not sender\\\");\\n            require(masterContractOf[user] == address(0), \\\"MasterCMgr: user is clone\\\");\\n            require(whitelistedMasterContracts[masterContract], \\\"MasterCMgr: not whitelisted\\\");\\n        } else {\\n            // Important for security - any address without masterContract has address(0) as masterContract\\n            // So approving address(0) would approve every address, leading to full loss of funds\\n            // Also, ecrecover returns address(0) on failure. So we check this:\\n            require(user != address(0), \\\"MasterCMgr: User cannot be 0\\\");\\n\\n            // C10 - Protect signatures against replay, use nonce and chainId (SWC-121)\\n            // C10: nonce + chainId are used to prevent replays\\n            // C11 - All signatures strictly EIP-712 (SWC-117 SWC-122)\\n            // C11: signature is EIP-712 compliant\\n            // C12 - abi.encodePacked can't contain variable length user input (SWC-133)\\n            // C12: abi.encodePacked has fixed length parameters\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA,\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            APPROVAL_SIGNATURE_HASH,\\n                            approved\\n                                ? keccak256(\\\"Give FULL access to funds in (and approved to) BentoBox?\\\")\\n                                : keccak256(\\\"Revoke access to BentoBox?\\\"),\\n                            user,\\n                            masterContract,\\n                            approved,\\n                            nonces[user]++\\n                        )\\n                    )\\n                )\\n            );\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress == user, \\\"MasterCMgr: Invalid Signature\\\");\\n        }\\n\\n        // Effects\\n        masterContractApproved[masterContract][user] = approved;\\n        emit LogSetMasterContractApproval(masterContract, user, approved);\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringBatchable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BaseBoringBatchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /// @notice Allows batched call to self (this contract).\\n    /// @param calls An array of inputs for each call.\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n    /// @return successes An array indicating the success of a call, mapped one-to-one to `calls`.\\n    /// @return results An array with the returned data of each function call, mapped one-to-one to `calls`.\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results) {\\n        successes = new bool[](calls.length);\\n        results = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\n            require(success || !revertOnFail, _getRevertMsg(result));\\n            successes[i] = success;\\n            results[i] = result;\\n        }\\n    }\\n}\\n\\ncontract BoringBatchable is BaseBoringBatchable {\\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\\n    /// Lookup `IERC20.permit`.\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\n    function permitToken(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        token.permit(from, to, amount, deadline, v, r, s);\\n    }\\n}\\n\\n// File contracts/BentoBox.sol\\n// License-Identifier: UNLICENSED\\n\\n/// @title BentoBox\\n/// @author BoringCrypto, Keno\\n/// @notice The BentoBox is a vault for tokens. The stored tokens can be flash loaned and used in strategies.\\n/// Yield from this will go to the token depositors.\\n/// Rebasing tokens ARE NOT supported and WILL cause loss of funds.\\n/// Any funds transfered directly onto the BentoBox will be lost, use the deposit function instead.\\ncontract BentoBoxV1 is MasterContractManager, BoringBatchable {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n    using BoringERC20 for IERC20;\\n    using RebaseLibrary for Rebase;\\n\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n\\n    event LogDeposit(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogWithdraw(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogTransfer(IERC20 indexed token, address indexed from, address indexed to, uint256 share);\\n\\n    event LogFlashLoan(address indexed borrower, IERC20 indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\\n\\n    event LogStrategyTargetPercentage(IERC20 indexed token, uint256 targetPercentage);\\n    event LogStrategyQueued(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategySet(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategyInvest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyDivest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyProfit(IERC20 indexed token, uint256 amount);\\n    event LogStrategyLoss(IERC20 indexed token, uint256 amount);\\n\\n    // *************** //\\n    // *** STRUCTS *** //\\n    // *************** //\\n\\n    struct StrategyData {\\n        uint64 strategyStartDate;\\n        uint64 targetPercentage;\\n        uint128 balance; // the balance of the strategy that BentoBox thinks is in there\\n    }\\n\\n    // ******************************** //\\n    // *** CONSTANTS AND IMMUTABLES *** //\\n    // ******************************** //\\n\\n    // V2 - Can they be private?\\n    // V2: Private to save gas, to verify it's correct, check the constructor arguments\\n    IERC20 private immutable wethToken;\\n\\n    IERC20 private constant USE_ETHEREUM = IERC20(0);\\n    uint256 private constant FLASH_LOAN_FEE = 50; // 0.05%\\n    uint256 private constant FLASH_LOAN_FEE_PRECISION = 1e5;\\n    uint256 private constant STRATEGY_DELAY = 0 weeks;\\n    uint256 private constant MAX_TARGET_PERCENTAGE = 95; // 95%\\n    uint256 private constant MINIMUM_SHARE_BALANCE = 1000; // To prevent the ratio going off\\n\\n    // ***************** //\\n    // *** VARIABLES *** //\\n    // ***************** //\\n\\n    // Balance per token per address/contract in shares\\n    mapping(IERC20 => mapping(address => uint256)) public balanceOf;\\n\\n    // Rebase from amount to share\\n    mapping(IERC20 => Rebase) public totals;\\n\\n    mapping(IERC20 => IStrategy) public strategy;\\n    mapping(IERC20 => IStrategy) public pendingStrategy;\\n    mapping(IERC20 => StrategyData) public strategyData;\\n\\n    // ******************* //\\n    // *** CONSTRUCTOR *** //\\n    // ******************* //\\n\\n    constructor(IERC20 wethToken_) public {\\n        wethToken = wethToken_;\\n    }\\n\\n    // Just for testing purposes!!! Don't deploy this contract on production!!\\n    function setTokenTotal(\\n        IERC20 token,\\n        uint128 elastic,\\n        uint128 base\\n    ) public {\\n        Rebase memory total;\\n        total.elastic = elastic;\\n        total.base = base;\\n        totals[token] = total;\\n    }\\n\\n    // ***************** //\\n    // *** MODIFIERS *** //\\n    // ***************** //\\n\\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\\n    /// If 'from' is msg.sender, it's allowed.\\n    /// If 'from' is the BentoBox itself, it's allowed. Any ETH, token balances (above the known balances) or BentoBox balances\\n    /// can be taken by anyone.\\n    /// This is to enable skimming, not just for deposits, but also for withdrawals or transfers, enabling better composability.\\n    /// If 'from' is a clone of a masterContract AND the 'from' address has approved that masterContract, it's allowed.\\n    modifier allowed(address from) {\\n        if (from != msg.sender && from != address(this)) {\\n            // From is sender or you are skimming\\n            address masterContract = masterContractOf[msg.sender];\\n            require(masterContract != address(0), \\\"BentoBox: no masterContract\\\");\\n            require(masterContractApproved[masterContract][from], \\\"BentoBox: Transfer not approved\\\");\\n        }\\n        _;\\n    }\\n\\n    // ************************** //\\n    // *** INTERNAL FUNCTIONS *** //\\n    // ************************** //\\n\\n    /// @dev Returns the total balance of `token` this contracts holds,\\n    /// plus the total amount this contract thinks the strategy holds.\\n    function _tokenBalanceOf(IERC20 token) internal view returns (uint256 amount) {\\n        amount = token.balanceOf(address(this)).add(strategyData[token].balance);\\n    }\\n\\n    // ************************ //\\n    // *** PUBLIC FUNCTIONS *** //\\n    // ************************ //\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share) {\\n        share = totals[token].toBase(amount, roundUp);\\n    }\\n\\n    /// @dev Helper function represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        IERC20 token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount) {\\n        amount = totals[token].toElastic(share, roundUp);\\n    }\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public payable allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n\\n        // If a new token gets added, the tokenSupply call checks that this is a deployed contract. Needed for security.\\n        require(total.elastic != 0 || token.totalSupply() > 0, \\\"BentoBox: No tokens\\\");\\n        if (share == 0) {\\n            // value of the share may be lower than the amount due to rounding, that's ok\\n            share = total.toBase(amount, false);\\n            // Any deposit should lead to at least the minimum share balance, otherwise it's ignored (no amount taken)\\n            if (total.base.add(share.to128()) < MINIMUM_SHARE_BALANCE) {\\n                return (0, 0);\\n            }\\n        } else {\\n            // amount may be lower than the value of share due to rounding, in that case, add 1 to amount (Always round up)\\n            amount = total.toElastic(share, true);\\n        }\\n\\n        // In case of skimming, check that only the skimmable amount is taken.\\n        // For ETH, the full balance is available, so no need to check.\\n        // During flashloans the _tokenBalanceOf is lower than 'reality', so skimming deposits will mostly fail during a flashloan.\\n        require(\\n            from != address(this) || token_ == USE_ETHEREUM || amount <= _tokenBalanceOf(token).sub(total.elastic),\\n            \\\"BentoBox: Skim too much\\\"\\n        );\\n\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n        total.base = total.base.add(share.to128());\\n        total.elastic = total.elastic.add(amount.to128());\\n        totals[token] = total;\\n\\n        // Interactions\\n        // During the first deposit, we check that this token is 'real'\\n        if (token_ == USE_ETHEREUM) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the WETH implementation is faulty or malicious, it will block adding ETH (but we know the WETH implementation)\\n            IWETH(address(wethToken)).deposit{value: amount}();\\n        } else if (from != address(this)) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the token implementation is faulty or malicious, it may block adding tokens. Good.\\n            token.safeTransferFrom(from, address(this), amount);\\n        }\\n        emit LogDeposit(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n        if (share == 0) {\\n            // value of the share paid could be lower than the amount paid due to rounding, in that case, add a share (Always round up)\\n            share = total.toBase(amount, true);\\n        } else {\\n            // amount may be lower than the value of share due to rounding, that's ok\\n            amount = total.toElastic(share, false);\\n        }\\n\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        total.elastic = total.elastic.sub(amount.to128());\\n        total.base = total.base.sub(share.to128());\\n        // There have to be at least 1000 shares left to prevent reseting the share/amount ratio (unless it's fully emptied)\\n        require(total.base >= MINIMUM_SHARE_BALANCE || total.base == 0, \\\"BentoBox: cannot empty\\\");\\n        totals[token] = total;\\n\\n        // Interactions\\n        if (token_ == USE_ETHEREUM) {\\n            // X2, X3: A revert or big gas usage in the WETH contract could block withdrawals, but WETH9 is fine.\\n            IWETH(address(wethToken)).withdraw(amount);\\n            // X2, X3: A revert or big gas usage could block, however, the to address is under control of the caller.\\n            (bool success, ) = to.call{value: amount}(\\\"\\\");\\n            require(success, \\\"BentoBox: ETH transfer failed\\\");\\n        } else {\\n            // X2, X3: A malicious token could block withdrawal of just THAT token.\\n            //         masterContracts may want to take care not to rely on withdraw always succeeding.\\n            token.safeTransfer(to, amount);\\n        }\\n        emit LogWithdraw(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    // Clones of master contracts can transfer from any account that has approved them\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transferMultiple for gas optimization\\n    function transfer(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) public allowed(from) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n\\n        emit LogTransfer(token, from, to, share);\\n    }\\n\\n    /// @notice Transfer shares from a user account to multiple other ones.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param tos The receivers of the tokens.\\n    /// @param shares The amount of `token` in shares for each receiver in `tos`.\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transfer for gas optimization\\n    function transferMultiple(\\n        IERC20 token,\\n        address from,\\n        address[] calldata tos,\\n        uint256[] calldata shares\\n    ) public allowed(from) {\\n        // Checks\\n        require(tos[0] != address(0), \\\"BentoBox: to[0] not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        uint256 totalAmount;\\n        uint256 len = tos.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address to = tos[i];\\n            balanceOf[token][to] = balanceOf[token][to].add(shares[i]);\\n            totalAmount = totalAmount.add(shares[i]);\\n            emit LogTransfer(token, from, to, shares[i]);\\n        }\\n        balanceOf[token][from] = balanceOf[token][from].sub(totalAmount);\\n    }\\n\\n    /// @notice Flashloan ability.\\n    /// @param borrower The address of the contract that implements and conforms to `IFlashBorrower` and handles the flashloan.\\n    /// @param receiver Address of the token receiver.\\n    /// @param token The address of the token to receive.\\n    /// @param amount of the tokens to receive.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function flashLoan(\\n        IFlashBorrower borrower,\\n        address receiver,\\n        IERC20 token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public {\\n        uint256 fee = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n        token.safeTransfer(receiver, amount);\\n\\n        borrower.onFlashLoan(msg.sender, token, amount, fee, data);\\n\\n        require(_tokenBalanceOf(token) >= totals[token].addElastic(fee.to128()), \\\"BentoBox: Wrong amount\\\");\\n        emit LogFlashLoan(address(borrower), token, amount, fee, receiver);\\n    }\\n\\n    /// @notice Support for batched flashloans. Useful to request multiple different `tokens` in a single transaction.\\n    /// @param borrower The address of the contract that implements and conforms to `IBatchFlashBorrower` and handles the flashloan.\\n    /// @param receivers An array of the token receivers. A one-to-one mapping with `tokens` and `amounts`.\\n    /// @param tokens The addresses of the tokens.\\n    /// @param amounts of the tokens for each receiver.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function batchFlashLoan(\\n        IBatchFlashBorrower borrower,\\n        address[] calldata receivers,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public {\\n        uint256[] memory fees = new uint256[](tokens.length);\\n\\n        uint256 len = tokens.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 amount = amounts[i];\\n            fees[i] = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n\\n            tokens[i].safeTransfer(receivers[i], amounts[i]);\\n        }\\n\\n        borrower.onBatchFlashLoan(msg.sender, tokens, amounts, fees, data);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            IERC20 token = tokens[i];\\n            require(_tokenBalanceOf(token) >= totals[token].addElastic(fees[i].to128()), \\\"BentoBox: Wrong amount\\\");\\n            emit LogFlashLoan(address(borrower), token, amounts[i], fees[i], receivers[i]);\\n        }\\n    }\\n\\n    /// @notice Sets the target percentage of the strategy for `token`.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param targetPercentage_ The new target in percent. Must be lesser or equal to `MAX_TARGET_PERCENTAGE`.\\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) public onlyOwner {\\n        // Checks\\n        require(targetPercentage_ <= MAX_TARGET_PERCENTAGE, \\\"StrategyManager: Target too high\\\");\\n\\n        // Effects\\n        strategyData[token].targetPercentage = targetPercentage_;\\n        emit LogStrategyTargetPercentage(token, targetPercentage_);\\n    }\\n\\n    /// @notice Sets the contract address of a new strategy that conforms to `IStrategy` for `token`.\\n    /// Must be called twice with the same arguments.\\n    /// A new strategy becomes pending first and can be activated once `STRATEGY_DELAY` is over.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param newStrategy The address of the contract that conforms to `IStrategy`.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // C4 - Use block.timestamp only for long intervals (SWC-116)\\n    // C4: block.timestamp is used for a period of 2 weeks, which is long enough\\n    function setStrategy(IERC20 token, IStrategy newStrategy) public onlyOwner {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy pending = pendingStrategy[token];\\n        if (data.strategyStartDate == 0 || pending != newStrategy) {\\n            pendingStrategy[token] = newStrategy;\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: Our sun will swallow the earth well before this overflows\\n            data.strategyStartDate = (block.timestamp + STRATEGY_DELAY).to64();\\n            emit LogStrategyQueued(token, newStrategy);\\n        } else {\\n            require(data.strategyStartDate != 0 && block.timestamp >= data.strategyStartDate, \\\"StrategyManager: Too early\\\");\\n            if (address(strategy[token]) != address(0)) {\\n                int256 balanceChange = strategy[token].exit(data.balance);\\n                // Effects\\n                if (balanceChange > 0) {\\n                    uint256 add = uint256(balanceChange);\\n                    totals[token].addElastic(add);\\n                    emit LogStrategyProfit(token, add);\\n                } else if (balanceChange < 0) {\\n                    uint256 sub = uint256(-balanceChange);\\n                    totals[token].subElastic(sub);\\n                    emit LogStrategyLoss(token, sub);\\n                }\\n\\n                emit LogStrategyDivest(token, data.balance);\\n            }\\n            strategy[token] = pending;\\n            data.strategyStartDate = 0;\\n            data.balance = 0;\\n            pendingStrategy[token] = IStrategy(0);\\n            emit LogStrategySet(token, newStrategy);\\n        }\\n        strategyData[token] = data;\\n    }\\n\\n    /// @notice The actual process of yield farming. Executes the strategy of `token`.\\n    /// Optionally does housekeeping if `balance` is true.\\n    /// `maxChangeAmount` is relevant for skimming or withdrawing if `balance` is true.\\n    /// @param token The address of the token for which a strategy is deployed.\\n    /// @param balance True if housekeeping should be done.\\n    /// @param maxChangeAmount The maximum amount for either pulling or pushing from/to the `IStrategy` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // F5: Not followed to prevent reentrancy issues with flashloans and BentoBox skims?\\n    function harvest(\\n        IERC20 token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) public {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy _strategy = strategy[token];\\n        int256 balanceChange = _strategy.harvest(data.balance, msg.sender);\\n        if (balanceChange == 0 && !balance) {\\n            return;\\n        }\\n\\n        uint256 totalElastic = totals[token].elastic;\\n\\n        if (balanceChange > 0) {\\n            uint256 add = uint256(balanceChange);\\n            totalElastic = totalElastic.add(add);\\n            totals[token].elastic = totalElastic.to128();\\n            emit LogStrategyProfit(token, add);\\n        } else if (balanceChange < 0) {\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: balanceChange could overflow if it's max negative int128.\\n            // But tokens with balances that large are not supported by the BentoBox.\\n            uint256 sub = uint256(-balanceChange);\\n            totalElastic = totalElastic.sub(sub);\\n            totals[token].elastic = totalElastic.to128();\\n            data.balance = data.balance.sub(sub.to128());\\n            emit LogStrategyLoss(token, sub);\\n        }\\n\\n        if (balance) {\\n            uint256 targetBalance = totalElastic.mul(data.targetPercentage) / 100;\\n            // if data.balance == targetBalance there is nothing to update\\n            if (data.balance < targetBalance) {\\n                uint256 amountOut = targetBalance.sub(data.balance);\\n                if (maxChangeAmount != 0 && amountOut > maxChangeAmount) {\\n                    amountOut = maxChangeAmount;\\n                }\\n                token.safeTransfer(address(_strategy), amountOut);\\n                data.balance = data.balance.add(amountOut.to128());\\n                _strategy.skim(amountOut);\\n                emit LogStrategyInvest(token, amountOut);\\n            } else if (data.balance > targetBalance) {\\n                uint256 amountIn = data.balance.sub(targetBalance.to128());\\n                if (maxChangeAmount != 0 && amountIn > maxChangeAmount) {\\n                    amountIn = maxChangeAmount;\\n                }\\n\\n                uint256 actualAmountIn = _strategy.withdraw(amountIn);\\n\\n                data.balance = data.balance.sub(actualAmountIn.to128());\\n                emit LogStrategyDivest(token, actualAmountIn);\\n            }\\n        }\\n\\n        strategyData[token] = data;\\n    }\\n\\n    // Contract should be able to receive ETH deposits to support deposit & skim\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd8343e88ade6bf85fd34d3556aedb2b14fe07ca40396ae2ef6064c9d8da0d4d3\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"A library for performing overflow-/underflow-safe math, updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).","version":1}},"BoringMath128":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220015fcde92dcb141c064a34a24959a0a9800d1c10b18c5d5489f9971cfa4a486364736f6c634300060c0033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADD 0x5F 0xCD 0xE9 0x2D 0xCB EQ SHR MOD 0x4A CALLVALUE LOG2 0x49 MSIZE LOG0 0xA9 DUP1 0xD SHR LT 0xB1 DUP13 0x5D SLOAD DUP10 0xF9 SWAP8 SHR STATICCALL 0x4A 0x48 PUSH4 0x64736F6C PUSH4 0x4300060C STOP CALLER ","sourceMap":"8292:311:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220015fcde92dcb141c064a34a24959a0a9800d1c10b18c5d5489f9971cfa4a486364736f6c634300060c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADD 0x5F 0xCD 0xE9 0x2D 0xCB EQ SHR MOD 0x4A CALLVALUE LOG2 0x49 MSIZE LOG0 0xA9 DUP1 0xD SHR LT 0xB1 DUP13 0x5D SLOAD DUP10 0xF9 SWAP8 SHR STATICCALL 0x4A 0x48 PUSH4 0x64736F6C PUSH4 0x4300060C STOP CALLER ","sourceMap":"8292:311:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"add(uint128,uint128)":"infinite","sub(uint128,uint128)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A library for performing overflow-/underflow-safe addition and subtraction on uint128.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/BentoBoxV1Flat.sol\":\"BoringMath128\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/flat/BentoBoxV1Flat.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// The BentoBox\\n\\n//  \\u2584\\u2584\\u2584\\u2584\\u00b7 \\u2584\\u2584\\u2584 . \\u2590 \\u2584 \\u2584\\u2584\\u2584\\u2584\\u2584      \\u2584\\u2584\\u2584\\u2584\\u00b7       \\u2590\\u2584\\u2022 \\u2584\\n//  \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u2580\\u2584.\\u2580\\u00b7\\u2588\\u258c\\u2590\\u2588\\u2022\\u2588\\u2588  \\u25aa     \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u25aa      \\u2588\\u258c\\u2588\\u258c\\u25aa\\n//  \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584\\u2590\\u2580\\u2580\\u25aa\\u2584\\u2590\\u2588\\u2590\\u2590\\u258c \\u2590\\u2588.\\u25aa \\u2584\\u2588\\u2580\\u2584 \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584 \\u2584\\u2588\\u2580\\u2584  \\u00b7\\u2588\\u2588\\u00b7\\n//  \\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u2584\\u2584\\u258c\\u2588\\u2588\\u2590\\u2588\\u258c \\u2590\\u2588\\u258c\\u00b7\\u2590\\u2588\\u258c.\\u2590\\u258c\\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u258c.\\u2590\\u258c\\u25aa\\u2590\\u2588\\u00b7\\u2588\\u258c\\n//  \\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2580\\u2580 \\u2580\\u2580 \\u2588\\u25aa \\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u2022\\u2580\\u2580 \\u2580\\u2580\\n\\n// This contract stores funds, handles their transfers, supports flash loans and strategies.\\n\\n// Copyright (c) 2021 BoringCrypto - All rights reserved\\n// Twitter: @Boring_Crypto\\n\\n// Special thanks to Keno for all his hard work and support\\n\\n// Version 22-Mar-2021\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable not-rely-on-time\\n// solhint-disable no-inline-assembly\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function decimals() external view returns (uint256);\\n}\\n\\n// File contracts/interfaces/IFlashLoan.sol\\n// License-Identifier: MIT\\n\\ninterface IFlashBorrower {\\n    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param token The address of the token that is loaned.\\n    /// @param amount of the `token` that is loaned.\\n    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onFlashLoan(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IBatchFlashBorrower {\\n    /// @notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param tokens Array of addresses for ERC-20 tokens that is loaned.\\n    /// @param amounts A one-to-one map to `tokens` that is loaned.\\n    /// @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onBatchFlashLoan(\\n        address sender,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata fees,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File contracts/interfaces/IWETH.sol\\n// License-Identifier: MIT\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\\n// File contracts/interfaces/IStrategy.sol\\n// License-Identifier: MIT\\n\\ninterface IStrategy {\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\n    /// @param amount The amount of tokens to invest.\\n    function skim(uint256 amount) external;\\n\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\n    /// @dev The `actualAmount` should be very close to the amount.\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\n    /// @param amount The requested amount the caller wants to withdraw.\\n    /// @return actualAmount The real amount that is withdrawn.\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library using overflow-/underflow-safe math.\\nlibrary RebaseLibrary {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = elastic.mul(total.base) / total.elastic;\\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\\n                base = base.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = base.mul(total.elastic) / total.base;\\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\\n                elastic = elastic.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\\n    /// @return (Rebase) The new total.\\n    /// @return base in relationship to `elastic`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 base) {\\n        base = toBase(total, elastic, roundUp);\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return (total, base);\\n    }\\n\\n    /// @notice Sub `base` from `total` and update `total.elastic`.\\n    /// @return (Rebase) The new total.\\n    /// @return elastic in relationship to `base`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 elastic) {\\n        elastic = toElastic(total, base, roundUp);\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return (total, elastic);\\n    }\\n\\n    /// @notice Add `elastic` and `base` to `total`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Subtract `elastic` and `base` to `total`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Add `elastic` to `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.add(elastic.to128());\\n    }\\n\\n    /// @notice Subtract `elastic` from `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.sub(elastic.to128());\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() public {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IMasterContract {\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\n    /// Also kown as the constructor for cloned contracts.\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\n    /// @param data Can be abi encoded arguments or anything else.\\n    function init(bytes calldata data) external payable;\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringFactory.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BoringFactory {\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\n\\n    /// @notice Mapping from clone contracts to their masterContract.\\n    mapping(address => address) public masterContractOf;\\n\\n    /// @notice Deploys a given master Contract as a clone.\\n    /// Any ETH transferred with this call is forwarded to the new clone.\\n    /// Emits `LogDeploy`.\\n    /// @param masterContract The address of the contract to clone.\\n    /// @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\\n    /// @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\\n    /// @return cloneAddress Address of the created clone contract.\\n    function deploy(\\n        address masterContract,\\n        bytes calldata data,\\n        bool useCreate2\\n    ) public payable returns (address cloneAddress) {\\n        require(masterContract != address(0), \\\"BoringFactory: No masterContract\\\");\\n        bytes20 targetBytes = bytes20(masterContract); // Takes the first 20 bytes of the masterContract's address\\n\\n        if (useCreate2) {\\n            // each masterContract has different code already. So clones are distinguished by their data only.\\n            bytes32 salt = keccak256(data);\\n\\n            // Creates clone, more info here: https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create2(0, clone, 0x37, salt)\\n            }\\n        } else {\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create(0, clone, 0x37)\\n            }\\n        }\\n        masterContractOf[cloneAddress] = masterContract;\\n\\n        IMasterContract(cloneAddress).init{value: msg.value}(data);\\n\\n        emit LogDeploy(masterContract, data, cloneAddress);\\n    }\\n}\\n\\n// File contracts/MasterContractManager.sol\\n// License-Identifier: UNLICENSED\\n\\ncontract MasterContractManager is BoringOwnable, BoringFactory {\\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\\n    event LogRegisterProtocol(address indexed protocol);\\n\\n    /// @notice masterContract to user to approval state\\n    mapping(address => mapping(address => bool)) public masterContractApproved;\\n    /// @notice masterContract to whitelisted state for approval without signed message\\n    mapping(address => bool) public whitelistedMasterContracts;\\n    /// @notice user nonces for masterContract approvals\\n    mapping(address => uint256) public nonces;\\n\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n    // See https://eips.ethereum.org/EIPS/eip-191\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\n    bytes32 private constant APPROVAL_SIGNATURE_HASH =\\n        keccak256(\\\"SetMasterContractApproval(string warning,address user,address masterContract,bool approved,uint256 nonce)\\\");\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\n    }\\n\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, keccak256(\\\"BentoBox V1\\\"), chainId, address(this)));\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @notice Other contracts need to register with this master contract so that users can approve them for the BentoBox.\\n    function registerProtocol() public {\\n        masterContractOf[msg.sender] = msg.sender;\\n        emit LogRegisterProtocol(msg.sender);\\n    }\\n\\n    /// @notice Enables or disables a contract for approval without signed message.\\n    function whitelistMasterContract(address masterContract, bool approved) public onlyOwner {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: Cannot approve 0\\\");\\n\\n        // Effects\\n        whitelistedMasterContracts[masterContract] = approved;\\n        emit LogWhiteListMasterContract(masterContract, approved);\\n    }\\n\\n    /// @notice Approves or revokes a `masterContract` access to `user` funds.\\n    /// @param user The address of the user that approves or revokes access.\\n    /// @param masterContract The address who gains or loses access.\\n    /// @param approved If True approves access. If False revokes access.\\n    /// @param v Part of the signature. (See EIP-191)\\n    /// @param r Part of the signature. (See EIP-191)\\n    /// @param s Part of the signature. (See EIP-191)\\n    // F4 - Check behaviour for all function arguments when wrong or extreme\\n    // F4: Don't allow masterContract 0 to be approved. Unknown contracts will have a masterContract of 0.\\n    // F4: User can't be 0 for signed approvals because the recoveredAddress will be 0 if ecrecover fails\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: masterC not set\\\"); // Important for security\\n\\n        // If no signature is provided, the fallback is executed\\n        if (r == 0 && s == 0 && v == 0) {\\n            require(user == msg.sender, \\\"MasterCMgr: user not sender\\\");\\n            require(masterContractOf[user] == address(0), \\\"MasterCMgr: user is clone\\\");\\n            require(whitelistedMasterContracts[masterContract], \\\"MasterCMgr: not whitelisted\\\");\\n        } else {\\n            // Important for security - any address without masterContract has address(0) as masterContract\\n            // So approving address(0) would approve every address, leading to full loss of funds\\n            // Also, ecrecover returns address(0) on failure. So we check this:\\n            require(user != address(0), \\\"MasterCMgr: User cannot be 0\\\");\\n\\n            // C10 - Protect signatures against replay, use nonce and chainId (SWC-121)\\n            // C10: nonce + chainId are used to prevent replays\\n            // C11 - All signatures strictly EIP-712 (SWC-117 SWC-122)\\n            // C11: signature is EIP-712 compliant\\n            // C12 - abi.encodePacked can't contain variable length user input (SWC-133)\\n            // C12: abi.encodePacked has fixed length parameters\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA,\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            APPROVAL_SIGNATURE_HASH,\\n                            approved\\n                                ? keccak256(\\\"Give FULL access to funds in (and approved to) BentoBox?\\\")\\n                                : keccak256(\\\"Revoke access to BentoBox?\\\"),\\n                            user,\\n                            masterContract,\\n                            approved,\\n                            nonces[user]++\\n                        )\\n                    )\\n                )\\n            );\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress == user, \\\"MasterCMgr: Invalid Signature\\\");\\n        }\\n\\n        // Effects\\n        masterContractApproved[masterContract][user] = approved;\\n        emit LogSetMasterContractApproval(masterContract, user, approved);\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringBatchable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BaseBoringBatchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /// @notice Allows batched call to self (this contract).\\n    /// @param calls An array of inputs for each call.\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n    /// @return successes An array indicating the success of a call, mapped one-to-one to `calls`.\\n    /// @return results An array with the returned data of each function call, mapped one-to-one to `calls`.\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results) {\\n        successes = new bool[](calls.length);\\n        results = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\n            require(success || !revertOnFail, _getRevertMsg(result));\\n            successes[i] = success;\\n            results[i] = result;\\n        }\\n    }\\n}\\n\\ncontract BoringBatchable is BaseBoringBatchable {\\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\\n    /// Lookup `IERC20.permit`.\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\n    function permitToken(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        token.permit(from, to, amount, deadline, v, r, s);\\n    }\\n}\\n\\n// File contracts/BentoBox.sol\\n// License-Identifier: UNLICENSED\\n\\n/// @title BentoBox\\n/// @author BoringCrypto, Keno\\n/// @notice The BentoBox is a vault for tokens. The stored tokens can be flash loaned and used in strategies.\\n/// Yield from this will go to the token depositors.\\n/// Rebasing tokens ARE NOT supported and WILL cause loss of funds.\\n/// Any funds transfered directly onto the BentoBox will be lost, use the deposit function instead.\\ncontract BentoBoxV1 is MasterContractManager, BoringBatchable {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n    using BoringERC20 for IERC20;\\n    using RebaseLibrary for Rebase;\\n\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n\\n    event LogDeposit(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogWithdraw(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogTransfer(IERC20 indexed token, address indexed from, address indexed to, uint256 share);\\n\\n    event LogFlashLoan(address indexed borrower, IERC20 indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\\n\\n    event LogStrategyTargetPercentage(IERC20 indexed token, uint256 targetPercentage);\\n    event LogStrategyQueued(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategySet(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategyInvest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyDivest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyProfit(IERC20 indexed token, uint256 amount);\\n    event LogStrategyLoss(IERC20 indexed token, uint256 amount);\\n\\n    // *************** //\\n    // *** STRUCTS *** //\\n    // *************** //\\n\\n    struct StrategyData {\\n        uint64 strategyStartDate;\\n        uint64 targetPercentage;\\n        uint128 balance; // the balance of the strategy that BentoBox thinks is in there\\n    }\\n\\n    // ******************************** //\\n    // *** CONSTANTS AND IMMUTABLES *** //\\n    // ******************************** //\\n\\n    // V2 - Can they be private?\\n    // V2: Private to save gas, to verify it's correct, check the constructor arguments\\n    IERC20 private immutable wethToken;\\n\\n    IERC20 private constant USE_ETHEREUM = IERC20(0);\\n    uint256 private constant FLASH_LOAN_FEE = 50; // 0.05%\\n    uint256 private constant FLASH_LOAN_FEE_PRECISION = 1e5;\\n    uint256 private constant STRATEGY_DELAY = 0 weeks;\\n    uint256 private constant MAX_TARGET_PERCENTAGE = 95; // 95%\\n    uint256 private constant MINIMUM_SHARE_BALANCE = 1000; // To prevent the ratio going off\\n\\n    // ***************** //\\n    // *** VARIABLES *** //\\n    // ***************** //\\n\\n    // Balance per token per address/contract in shares\\n    mapping(IERC20 => mapping(address => uint256)) public balanceOf;\\n\\n    // Rebase from amount to share\\n    mapping(IERC20 => Rebase) public totals;\\n\\n    mapping(IERC20 => IStrategy) public strategy;\\n    mapping(IERC20 => IStrategy) public pendingStrategy;\\n    mapping(IERC20 => StrategyData) public strategyData;\\n\\n    // ******************* //\\n    // *** CONSTRUCTOR *** //\\n    // ******************* //\\n\\n    constructor(IERC20 wethToken_) public {\\n        wethToken = wethToken_;\\n    }\\n\\n    // Just for testing purposes!!! Don't deploy this contract on production!!\\n    function setTokenTotal(\\n        IERC20 token,\\n        uint128 elastic,\\n        uint128 base\\n    ) public {\\n        Rebase memory total;\\n        total.elastic = elastic;\\n        total.base = base;\\n        totals[token] = total;\\n    }\\n\\n    // ***************** //\\n    // *** MODIFIERS *** //\\n    // ***************** //\\n\\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\\n    /// If 'from' is msg.sender, it's allowed.\\n    /// If 'from' is the BentoBox itself, it's allowed. Any ETH, token balances (above the known balances) or BentoBox balances\\n    /// can be taken by anyone.\\n    /// This is to enable skimming, not just for deposits, but also for withdrawals or transfers, enabling better composability.\\n    /// If 'from' is a clone of a masterContract AND the 'from' address has approved that masterContract, it's allowed.\\n    modifier allowed(address from) {\\n        if (from != msg.sender && from != address(this)) {\\n            // From is sender or you are skimming\\n            address masterContract = masterContractOf[msg.sender];\\n            require(masterContract != address(0), \\\"BentoBox: no masterContract\\\");\\n            require(masterContractApproved[masterContract][from], \\\"BentoBox: Transfer not approved\\\");\\n        }\\n        _;\\n    }\\n\\n    // ************************** //\\n    // *** INTERNAL FUNCTIONS *** //\\n    // ************************** //\\n\\n    /// @dev Returns the total balance of `token` this contracts holds,\\n    /// plus the total amount this contract thinks the strategy holds.\\n    function _tokenBalanceOf(IERC20 token) internal view returns (uint256 amount) {\\n        amount = token.balanceOf(address(this)).add(strategyData[token].balance);\\n    }\\n\\n    // ************************ //\\n    // *** PUBLIC FUNCTIONS *** //\\n    // ************************ //\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share) {\\n        share = totals[token].toBase(amount, roundUp);\\n    }\\n\\n    /// @dev Helper function represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        IERC20 token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount) {\\n        amount = totals[token].toElastic(share, roundUp);\\n    }\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public payable allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n\\n        // If a new token gets added, the tokenSupply call checks that this is a deployed contract. Needed for security.\\n        require(total.elastic != 0 || token.totalSupply() > 0, \\\"BentoBox: No tokens\\\");\\n        if (share == 0) {\\n            // value of the share may be lower than the amount due to rounding, that's ok\\n            share = total.toBase(amount, false);\\n            // Any deposit should lead to at least the minimum share balance, otherwise it's ignored (no amount taken)\\n            if (total.base.add(share.to128()) < MINIMUM_SHARE_BALANCE) {\\n                return (0, 0);\\n            }\\n        } else {\\n            // amount may be lower than the value of share due to rounding, in that case, add 1 to amount (Always round up)\\n            amount = total.toElastic(share, true);\\n        }\\n\\n        // In case of skimming, check that only the skimmable amount is taken.\\n        // For ETH, the full balance is available, so no need to check.\\n        // During flashloans the _tokenBalanceOf is lower than 'reality', so skimming deposits will mostly fail during a flashloan.\\n        require(\\n            from != address(this) || token_ == USE_ETHEREUM || amount <= _tokenBalanceOf(token).sub(total.elastic),\\n            \\\"BentoBox: Skim too much\\\"\\n        );\\n\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n        total.base = total.base.add(share.to128());\\n        total.elastic = total.elastic.add(amount.to128());\\n        totals[token] = total;\\n\\n        // Interactions\\n        // During the first deposit, we check that this token is 'real'\\n        if (token_ == USE_ETHEREUM) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the WETH implementation is faulty or malicious, it will block adding ETH (but we know the WETH implementation)\\n            IWETH(address(wethToken)).deposit{value: amount}();\\n        } else if (from != address(this)) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the token implementation is faulty or malicious, it may block adding tokens. Good.\\n            token.safeTransferFrom(from, address(this), amount);\\n        }\\n        emit LogDeposit(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n        if (share == 0) {\\n            // value of the share paid could be lower than the amount paid due to rounding, in that case, add a share (Always round up)\\n            share = total.toBase(amount, true);\\n        } else {\\n            // amount may be lower than the value of share due to rounding, that's ok\\n            amount = total.toElastic(share, false);\\n        }\\n\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        total.elastic = total.elastic.sub(amount.to128());\\n        total.base = total.base.sub(share.to128());\\n        // There have to be at least 1000 shares left to prevent reseting the share/amount ratio (unless it's fully emptied)\\n        require(total.base >= MINIMUM_SHARE_BALANCE || total.base == 0, \\\"BentoBox: cannot empty\\\");\\n        totals[token] = total;\\n\\n        // Interactions\\n        if (token_ == USE_ETHEREUM) {\\n            // X2, X3: A revert or big gas usage in the WETH contract could block withdrawals, but WETH9 is fine.\\n            IWETH(address(wethToken)).withdraw(amount);\\n            // X2, X3: A revert or big gas usage could block, however, the to address is under control of the caller.\\n            (bool success, ) = to.call{value: amount}(\\\"\\\");\\n            require(success, \\\"BentoBox: ETH transfer failed\\\");\\n        } else {\\n            // X2, X3: A malicious token could block withdrawal of just THAT token.\\n            //         masterContracts may want to take care not to rely on withdraw always succeeding.\\n            token.safeTransfer(to, amount);\\n        }\\n        emit LogWithdraw(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    // Clones of master contracts can transfer from any account that has approved them\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transferMultiple for gas optimization\\n    function transfer(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) public allowed(from) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n\\n        emit LogTransfer(token, from, to, share);\\n    }\\n\\n    /// @notice Transfer shares from a user account to multiple other ones.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param tos The receivers of the tokens.\\n    /// @param shares The amount of `token` in shares for each receiver in `tos`.\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transfer for gas optimization\\n    function transferMultiple(\\n        IERC20 token,\\n        address from,\\n        address[] calldata tos,\\n        uint256[] calldata shares\\n    ) public allowed(from) {\\n        // Checks\\n        require(tos[0] != address(0), \\\"BentoBox: to[0] not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        uint256 totalAmount;\\n        uint256 len = tos.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address to = tos[i];\\n            balanceOf[token][to] = balanceOf[token][to].add(shares[i]);\\n            totalAmount = totalAmount.add(shares[i]);\\n            emit LogTransfer(token, from, to, shares[i]);\\n        }\\n        balanceOf[token][from] = balanceOf[token][from].sub(totalAmount);\\n    }\\n\\n    /// @notice Flashloan ability.\\n    /// @param borrower The address of the contract that implements and conforms to `IFlashBorrower` and handles the flashloan.\\n    /// @param receiver Address of the token receiver.\\n    /// @param token The address of the token to receive.\\n    /// @param amount of the tokens to receive.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function flashLoan(\\n        IFlashBorrower borrower,\\n        address receiver,\\n        IERC20 token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public {\\n        uint256 fee = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n        token.safeTransfer(receiver, amount);\\n\\n        borrower.onFlashLoan(msg.sender, token, amount, fee, data);\\n\\n        require(_tokenBalanceOf(token) >= totals[token].addElastic(fee.to128()), \\\"BentoBox: Wrong amount\\\");\\n        emit LogFlashLoan(address(borrower), token, amount, fee, receiver);\\n    }\\n\\n    /// @notice Support for batched flashloans. Useful to request multiple different `tokens` in a single transaction.\\n    /// @param borrower The address of the contract that implements and conforms to `IBatchFlashBorrower` and handles the flashloan.\\n    /// @param receivers An array of the token receivers. A one-to-one mapping with `tokens` and `amounts`.\\n    /// @param tokens The addresses of the tokens.\\n    /// @param amounts of the tokens for each receiver.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function batchFlashLoan(\\n        IBatchFlashBorrower borrower,\\n        address[] calldata receivers,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public {\\n        uint256[] memory fees = new uint256[](tokens.length);\\n\\n        uint256 len = tokens.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 amount = amounts[i];\\n            fees[i] = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n\\n            tokens[i].safeTransfer(receivers[i], amounts[i]);\\n        }\\n\\n        borrower.onBatchFlashLoan(msg.sender, tokens, amounts, fees, data);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            IERC20 token = tokens[i];\\n            require(_tokenBalanceOf(token) >= totals[token].addElastic(fees[i].to128()), \\\"BentoBox: Wrong amount\\\");\\n            emit LogFlashLoan(address(borrower), token, amounts[i], fees[i], receivers[i]);\\n        }\\n    }\\n\\n    /// @notice Sets the target percentage of the strategy for `token`.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param targetPercentage_ The new target in percent. Must be lesser or equal to `MAX_TARGET_PERCENTAGE`.\\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) public onlyOwner {\\n        // Checks\\n        require(targetPercentage_ <= MAX_TARGET_PERCENTAGE, \\\"StrategyManager: Target too high\\\");\\n\\n        // Effects\\n        strategyData[token].targetPercentage = targetPercentage_;\\n        emit LogStrategyTargetPercentage(token, targetPercentage_);\\n    }\\n\\n    /// @notice Sets the contract address of a new strategy that conforms to `IStrategy` for `token`.\\n    /// Must be called twice with the same arguments.\\n    /// A new strategy becomes pending first and can be activated once `STRATEGY_DELAY` is over.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param newStrategy The address of the contract that conforms to `IStrategy`.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // C4 - Use block.timestamp only for long intervals (SWC-116)\\n    // C4: block.timestamp is used for a period of 2 weeks, which is long enough\\n    function setStrategy(IERC20 token, IStrategy newStrategy) public onlyOwner {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy pending = pendingStrategy[token];\\n        if (data.strategyStartDate == 0 || pending != newStrategy) {\\n            pendingStrategy[token] = newStrategy;\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: Our sun will swallow the earth well before this overflows\\n            data.strategyStartDate = (block.timestamp + STRATEGY_DELAY).to64();\\n            emit LogStrategyQueued(token, newStrategy);\\n        } else {\\n            require(data.strategyStartDate != 0 && block.timestamp >= data.strategyStartDate, \\\"StrategyManager: Too early\\\");\\n            if (address(strategy[token]) != address(0)) {\\n                int256 balanceChange = strategy[token].exit(data.balance);\\n                // Effects\\n                if (balanceChange > 0) {\\n                    uint256 add = uint256(balanceChange);\\n                    totals[token].addElastic(add);\\n                    emit LogStrategyProfit(token, add);\\n                } else if (balanceChange < 0) {\\n                    uint256 sub = uint256(-balanceChange);\\n                    totals[token].subElastic(sub);\\n                    emit LogStrategyLoss(token, sub);\\n                }\\n\\n                emit LogStrategyDivest(token, data.balance);\\n            }\\n            strategy[token] = pending;\\n            data.strategyStartDate = 0;\\n            data.balance = 0;\\n            pendingStrategy[token] = IStrategy(0);\\n            emit LogStrategySet(token, newStrategy);\\n        }\\n        strategyData[token] = data;\\n    }\\n\\n    /// @notice The actual process of yield farming. Executes the strategy of `token`.\\n    /// Optionally does housekeeping if `balance` is true.\\n    /// `maxChangeAmount` is relevant for skimming or withdrawing if `balance` is true.\\n    /// @param token The address of the token for which a strategy is deployed.\\n    /// @param balance True if housekeeping should be done.\\n    /// @param maxChangeAmount The maximum amount for either pulling or pushing from/to the `IStrategy` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // F5: Not followed to prevent reentrancy issues with flashloans and BentoBox skims?\\n    function harvest(\\n        IERC20 token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) public {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy _strategy = strategy[token];\\n        int256 balanceChange = _strategy.harvest(data.balance, msg.sender);\\n        if (balanceChange == 0 && !balance) {\\n            return;\\n        }\\n\\n        uint256 totalElastic = totals[token].elastic;\\n\\n        if (balanceChange > 0) {\\n            uint256 add = uint256(balanceChange);\\n            totalElastic = totalElastic.add(add);\\n            totals[token].elastic = totalElastic.to128();\\n            emit LogStrategyProfit(token, add);\\n        } else if (balanceChange < 0) {\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: balanceChange could overflow if it's max negative int128.\\n            // But tokens with balances that large are not supported by the BentoBox.\\n            uint256 sub = uint256(-balanceChange);\\n            totalElastic = totalElastic.sub(sub);\\n            totals[token].elastic = totalElastic.to128();\\n            data.balance = data.balance.sub(sub.to128());\\n            emit LogStrategyLoss(token, sub);\\n        }\\n\\n        if (balance) {\\n            uint256 targetBalance = totalElastic.mul(data.targetPercentage) / 100;\\n            // if data.balance == targetBalance there is nothing to update\\n            if (data.balance < targetBalance) {\\n                uint256 amountOut = targetBalance.sub(data.balance);\\n                if (maxChangeAmount != 0 && amountOut > maxChangeAmount) {\\n                    amountOut = maxChangeAmount;\\n                }\\n                token.safeTransfer(address(_strategy), amountOut);\\n                data.balance = data.balance.add(amountOut.to128());\\n                _strategy.skim(amountOut);\\n                emit LogStrategyInvest(token, amountOut);\\n            } else if (data.balance > targetBalance) {\\n                uint256 amountIn = data.balance.sub(targetBalance.to128());\\n                if (maxChangeAmount != 0 && amountIn > maxChangeAmount) {\\n                    amountIn = maxChangeAmount;\\n                }\\n\\n                uint256 actualAmountIn = _strategy.withdraw(amountIn);\\n\\n                data.balance = data.balance.sub(actualAmountIn.to128());\\n                emit LogStrategyDivest(token, actualAmountIn);\\n            }\\n        }\\n\\n        strategyData[token] = data;\\n    }\\n\\n    // Contract should be able to receive ETH deposits to support deposit & skim\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd8343e88ade6bf85fd34d3556aedb2b14fe07ca40396ae2ef6064c9d8da0d4d3\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"A library for performing overflow-/underflow-safe addition and subtraction on uint128.","version":1}},"BoringMath32":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206a6a801c9e4937bf0f12c90eb9c8850ac4bb0683848282a9b3ccfebec100ceda64736f6c634300060c0033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH11 0x6A801C9E4937BF0F12C90E 0xB9 0xC8 DUP6 EXP 0xC4 0xBB MOD DUP4 DUP5 DUP3 DUP3 0xA9 0xB3 0xCC INVALID 0xBE 0xC1 STOP 0xCE 0xDA PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ","sourceMap":"9107:304:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206a6a801c9e4937bf0f12c90eb9c8850ac4bb0683848282a9b3ccfebec100ceda64736f6c634300060c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH11 0x6A801C9E4937BF0F12C90E 0xB9 0xC8 DUP6 EXP 0xC4 0xBB MOD DUP4 DUP5 DUP3 DUP3 0xA9 0xB3 0xCC INVALID 0xBE 0xC1 STOP 0xCE 0xDA PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ","sourceMap":"9107:304:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"add(uint32,uint32)":"infinite","sub(uint32,uint32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A library for performing overflow-/underflow-safe addition and subtraction on uint32.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/BentoBoxV1Flat.sol\":\"BoringMath32\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/flat/BentoBoxV1Flat.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// The BentoBox\\n\\n//  \\u2584\\u2584\\u2584\\u2584\\u00b7 \\u2584\\u2584\\u2584 . \\u2590 \\u2584 \\u2584\\u2584\\u2584\\u2584\\u2584      \\u2584\\u2584\\u2584\\u2584\\u00b7       \\u2590\\u2584\\u2022 \\u2584\\n//  \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u2580\\u2584.\\u2580\\u00b7\\u2588\\u258c\\u2590\\u2588\\u2022\\u2588\\u2588  \\u25aa     \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u25aa      \\u2588\\u258c\\u2588\\u258c\\u25aa\\n//  \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584\\u2590\\u2580\\u2580\\u25aa\\u2584\\u2590\\u2588\\u2590\\u2590\\u258c \\u2590\\u2588.\\u25aa \\u2584\\u2588\\u2580\\u2584 \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584 \\u2584\\u2588\\u2580\\u2584  \\u00b7\\u2588\\u2588\\u00b7\\n//  \\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u2584\\u2584\\u258c\\u2588\\u2588\\u2590\\u2588\\u258c \\u2590\\u2588\\u258c\\u00b7\\u2590\\u2588\\u258c.\\u2590\\u258c\\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u258c.\\u2590\\u258c\\u25aa\\u2590\\u2588\\u00b7\\u2588\\u258c\\n//  \\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2580\\u2580 \\u2580\\u2580 \\u2588\\u25aa \\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u2022\\u2580\\u2580 \\u2580\\u2580\\n\\n// This contract stores funds, handles their transfers, supports flash loans and strategies.\\n\\n// Copyright (c) 2021 BoringCrypto - All rights reserved\\n// Twitter: @Boring_Crypto\\n\\n// Special thanks to Keno for all his hard work and support\\n\\n// Version 22-Mar-2021\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable not-rely-on-time\\n// solhint-disable no-inline-assembly\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function decimals() external view returns (uint256);\\n}\\n\\n// File contracts/interfaces/IFlashLoan.sol\\n// License-Identifier: MIT\\n\\ninterface IFlashBorrower {\\n    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param token The address of the token that is loaned.\\n    /// @param amount of the `token` that is loaned.\\n    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onFlashLoan(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IBatchFlashBorrower {\\n    /// @notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param tokens Array of addresses for ERC-20 tokens that is loaned.\\n    /// @param amounts A one-to-one map to `tokens` that is loaned.\\n    /// @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onBatchFlashLoan(\\n        address sender,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata fees,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File contracts/interfaces/IWETH.sol\\n// License-Identifier: MIT\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\\n// File contracts/interfaces/IStrategy.sol\\n// License-Identifier: MIT\\n\\ninterface IStrategy {\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\n    /// @param amount The amount of tokens to invest.\\n    function skim(uint256 amount) external;\\n\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\n    /// @dev The `actualAmount` should be very close to the amount.\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\n    /// @param amount The requested amount the caller wants to withdraw.\\n    /// @return actualAmount The real amount that is withdrawn.\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library using overflow-/underflow-safe math.\\nlibrary RebaseLibrary {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = elastic.mul(total.base) / total.elastic;\\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\\n                base = base.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = base.mul(total.elastic) / total.base;\\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\\n                elastic = elastic.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\\n    /// @return (Rebase) The new total.\\n    /// @return base in relationship to `elastic`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 base) {\\n        base = toBase(total, elastic, roundUp);\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return (total, base);\\n    }\\n\\n    /// @notice Sub `base` from `total` and update `total.elastic`.\\n    /// @return (Rebase) The new total.\\n    /// @return elastic in relationship to `base`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 elastic) {\\n        elastic = toElastic(total, base, roundUp);\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return (total, elastic);\\n    }\\n\\n    /// @notice Add `elastic` and `base` to `total`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Subtract `elastic` and `base` to `total`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Add `elastic` to `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.add(elastic.to128());\\n    }\\n\\n    /// @notice Subtract `elastic` from `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.sub(elastic.to128());\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() public {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IMasterContract {\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\n    /// Also kown as the constructor for cloned contracts.\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\n    /// @param data Can be abi encoded arguments or anything else.\\n    function init(bytes calldata data) external payable;\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringFactory.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BoringFactory {\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\n\\n    /// @notice Mapping from clone contracts to their masterContract.\\n    mapping(address => address) public masterContractOf;\\n\\n    /// @notice Deploys a given master Contract as a clone.\\n    /// Any ETH transferred with this call is forwarded to the new clone.\\n    /// Emits `LogDeploy`.\\n    /// @param masterContract The address of the contract to clone.\\n    /// @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\\n    /// @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\\n    /// @return cloneAddress Address of the created clone contract.\\n    function deploy(\\n        address masterContract,\\n        bytes calldata data,\\n        bool useCreate2\\n    ) public payable returns (address cloneAddress) {\\n        require(masterContract != address(0), \\\"BoringFactory: No masterContract\\\");\\n        bytes20 targetBytes = bytes20(masterContract); // Takes the first 20 bytes of the masterContract's address\\n\\n        if (useCreate2) {\\n            // each masterContract has different code already. So clones are distinguished by their data only.\\n            bytes32 salt = keccak256(data);\\n\\n            // Creates clone, more info here: https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create2(0, clone, 0x37, salt)\\n            }\\n        } else {\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create(0, clone, 0x37)\\n            }\\n        }\\n        masterContractOf[cloneAddress] = masterContract;\\n\\n        IMasterContract(cloneAddress).init{value: msg.value}(data);\\n\\n        emit LogDeploy(masterContract, data, cloneAddress);\\n    }\\n}\\n\\n// File contracts/MasterContractManager.sol\\n// License-Identifier: UNLICENSED\\n\\ncontract MasterContractManager is BoringOwnable, BoringFactory {\\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\\n    event LogRegisterProtocol(address indexed protocol);\\n\\n    /// @notice masterContract to user to approval state\\n    mapping(address => mapping(address => bool)) public masterContractApproved;\\n    /// @notice masterContract to whitelisted state for approval without signed message\\n    mapping(address => bool) public whitelistedMasterContracts;\\n    /// @notice user nonces for masterContract approvals\\n    mapping(address => uint256) public nonces;\\n\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n    // See https://eips.ethereum.org/EIPS/eip-191\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\n    bytes32 private constant APPROVAL_SIGNATURE_HASH =\\n        keccak256(\\\"SetMasterContractApproval(string warning,address user,address masterContract,bool approved,uint256 nonce)\\\");\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\n    }\\n\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, keccak256(\\\"BentoBox V1\\\"), chainId, address(this)));\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @notice Other contracts need to register with this master contract so that users can approve them for the BentoBox.\\n    function registerProtocol() public {\\n        masterContractOf[msg.sender] = msg.sender;\\n        emit LogRegisterProtocol(msg.sender);\\n    }\\n\\n    /// @notice Enables or disables a contract for approval without signed message.\\n    function whitelistMasterContract(address masterContract, bool approved) public onlyOwner {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: Cannot approve 0\\\");\\n\\n        // Effects\\n        whitelistedMasterContracts[masterContract] = approved;\\n        emit LogWhiteListMasterContract(masterContract, approved);\\n    }\\n\\n    /// @notice Approves or revokes a `masterContract` access to `user` funds.\\n    /// @param user The address of the user that approves or revokes access.\\n    /// @param masterContract The address who gains or loses access.\\n    /// @param approved If True approves access. If False revokes access.\\n    /// @param v Part of the signature. (See EIP-191)\\n    /// @param r Part of the signature. (See EIP-191)\\n    /// @param s Part of the signature. (See EIP-191)\\n    // F4 - Check behaviour for all function arguments when wrong or extreme\\n    // F4: Don't allow masterContract 0 to be approved. Unknown contracts will have a masterContract of 0.\\n    // F4: User can't be 0 for signed approvals because the recoveredAddress will be 0 if ecrecover fails\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: masterC not set\\\"); // Important for security\\n\\n        // If no signature is provided, the fallback is executed\\n        if (r == 0 && s == 0 && v == 0) {\\n            require(user == msg.sender, \\\"MasterCMgr: user not sender\\\");\\n            require(masterContractOf[user] == address(0), \\\"MasterCMgr: user is clone\\\");\\n            require(whitelistedMasterContracts[masterContract], \\\"MasterCMgr: not whitelisted\\\");\\n        } else {\\n            // Important for security - any address without masterContract has address(0) as masterContract\\n            // So approving address(0) would approve every address, leading to full loss of funds\\n            // Also, ecrecover returns address(0) on failure. So we check this:\\n            require(user != address(0), \\\"MasterCMgr: User cannot be 0\\\");\\n\\n            // C10 - Protect signatures against replay, use nonce and chainId (SWC-121)\\n            // C10: nonce + chainId are used to prevent replays\\n            // C11 - All signatures strictly EIP-712 (SWC-117 SWC-122)\\n            // C11: signature is EIP-712 compliant\\n            // C12 - abi.encodePacked can't contain variable length user input (SWC-133)\\n            // C12: abi.encodePacked has fixed length parameters\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA,\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            APPROVAL_SIGNATURE_HASH,\\n                            approved\\n                                ? keccak256(\\\"Give FULL access to funds in (and approved to) BentoBox?\\\")\\n                                : keccak256(\\\"Revoke access to BentoBox?\\\"),\\n                            user,\\n                            masterContract,\\n                            approved,\\n                            nonces[user]++\\n                        )\\n                    )\\n                )\\n            );\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress == user, \\\"MasterCMgr: Invalid Signature\\\");\\n        }\\n\\n        // Effects\\n        masterContractApproved[masterContract][user] = approved;\\n        emit LogSetMasterContractApproval(masterContract, user, approved);\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringBatchable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BaseBoringBatchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /// @notice Allows batched call to self (this contract).\\n    /// @param calls An array of inputs for each call.\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n    /// @return successes An array indicating the success of a call, mapped one-to-one to `calls`.\\n    /// @return results An array with the returned data of each function call, mapped one-to-one to `calls`.\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results) {\\n        successes = new bool[](calls.length);\\n        results = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\n            require(success || !revertOnFail, _getRevertMsg(result));\\n            successes[i] = success;\\n            results[i] = result;\\n        }\\n    }\\n}\\n\\ncontract BoringBatchable is BaseBoringBatchable {\\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\\n    /// Lookup `IERC20.permit`.\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\n    function permitToken(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        token.permit(from, to, amount, deadline, v, r, s);\\n    }\\n}\\n\\n// File contracts/BentoBox.sol\\n// License-Identifier: UNLICENSED\\n\\n/// @title BentoBox\\n/// @author BoringCrypto, Keno\\n/// @notice The BentoBox is a vault for tokens. The stored tokens can be flash loaned and used in strategies.\\n/// Yield from this will go to the token depositors.\\n/// Rebasing tokens ARE NOT supported and WILL cause loss of funds.\\n/// Any funds transfered directly onto the BentoBox will be lost, use the deposit function instead.\\ncontract BentoBoxV1 is MasterContractManager, BoringBatchable {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n    using BoringERC20 for IERC20;\\n    using RebaseLibrary for Rebase;\\n\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n\\n    event LogDeposit(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogWithdraw(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogTransfer(IERC20 indexed token, address indexed from, address indexed to, uint256 share);\\n\\n    event LogFlashLoan(address indexed borrower, IERC20 indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\\n\\n    event LogStrategyTargetPercentage(IERC20 indexed token, uint256 targetPercentage);\\n    event LogStrategyQueued(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategySet(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategyInvest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyDivest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyProfit(IERC20 indexed token, uint256 amount);\\n    event LogStrategyLoss(IERC20 indexed token, uint256 amount);\\n\\n    // *************** //\\n    // *** STRUCTS *** //\\n    // *************** //\\n\\n    struct StrategyData {\\n        uint64 strategyStartDate;\\n        uint64 targetPercentage;\\n        uint128 balance; // the balance of the strategy that BentoBox thinks is in there\\n    }\\n\\n    // ******************************** //\\n    // *** CONSTANTS AND IMMUTABLES *** //\\n    // ******************************** //\\n\\n    // V2 - Can they be private?\\n    // V2: Private to save gas, to verify it's correct, check the constructor arguments\\n    IERC20 private immutable wethToken;\\n\\n    IERC20 private constant USE_ETHEREUM = IERC20(0);\\n    uint256 private constant FLASH_LOAN_FEE = 50; // 0.05%\\n    uint256 private constant FLASH_LOAN_FEE_PRECISION = 1e5;\\n    uint256 private constant STRATEGY_DELAY = 0 weeks;\\n    uint256 private constant MAX_TARGET_PERCENTAGE = 95; // 95%\\n    uint256 private constant MINIMUM_SHARE_BALANCE = 1000; // To prevent the ratio going off\\n\\n    // ***************** //\\n    // *** VARIABLES *** //\\n    // ***************** //\\n\\n    // Balance per token per address/contract in shares\\n    mapping(IERC20 => mapping(address => uint256)) public balanceOf;\\n\\n    // Rebase from amount to share\\n    mapping(IERC20 => Rebase) public totals;\\n\\n    mapping(IERC20 => IStrategy) public strategy;\\n    mapping(IERC20 => IStrategy) public pendingStrategy;\\n    mapping(IERC20 => StrategyData) public strategyData;\\n\\n    // ******************* //\\n    // *** CONSTRUCTOR *** //\\n    // ******************* //\\n\\n    constructor(IERC20 wethToken_) public {\\n        wethToken = wethToken_;\\n    }\\n\\n    // Just for testing purposes!!! Don't deploy this contract on production!!\\n    function setTokenTotal(\\n        IERC20 token,\\n        uint128 elastic,\\n        uint128 base\\n    ) public {\\n        Rebase memory total;\\n        total.elastic = elastic;\\n        total.base = base;\\n        totals[token] = total;\\n    }\\n\\n    // ***************** //\\n    // *** MODIFIERS *** //\\n    // ***************** //\\n\\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\\n    /// If 'from' is msg.sender, it's allowed.\\n    /// If 'from' is the BentoBox itself, it's allowed. Any ETH, token balances (above the known balances) or BentoBox balances\\n    /// can be taken by anyone.\\n    /// This is to enable skimming, not just for deposits, but also for withdrawals or transfers, enabling better composability.\\n    /// If 'from' is a clone of a masterContract AND the 'from' address has approved that masterContract, it's allowed.\\n    modifier allowed(address from) {\\n        if (from != msg.sender && from != address(this)) {\\n            // From is sender or you are skimming\\n            address masterContract = masterContractOf[msg.sender];\\n            require(masterContract != address(0), \\\"BentoBox: no masterContract\\\");\\n            require(masterContractApproved[masterContract][from], \\\"BentoBox: Transfer not approved\\\");\\n        }\\n        _;\\n    }\\n\\n    // ************************** //\\n    // *** INTERNAL FUNCTIONS *** //\\n    // ************************** //\\n\\n    /// @dev Returns the total balance of `token` this contracts holds,\\n    /// plus the total amount this contract thinks the strategy holds.\\n    function _tokenBalanceOf(IERC20 token) internal view returns (uint256 amount) {\\n        amount = token.balanceOf(address(this)).add(strategyData[token].balance);\\n    }\\n\\n    // ************************ //\\n    // *** PUBLIC FUNCTIONS *** //\\n    // ************************ //\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share) {\\n        share = totals[token].toBase(amount, roundUp);\\n    }\\n\\n    /// @dev Helper function represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        IERC20 token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount) {\\n        amount = totals[token].toElastic(share, roundUp);\\n    }\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public payable allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n\\n        // If a new token gets added, the tokenSupply call checks that this is a deployed contract. Needed for security.\\n        require(total.elastic != 0 || token.totalSupply() > 0, \\\"BentoBox: No tokens\\\");\\n        if (share == 0) {\\n            // value of the share may be lower than the amount due to rounding, that's ok\\n            share = total.toBase(amount, false);\\n            // Any deposit should lead to at least the minimum share balance, otherwise it's ignored (no amount taken)\\n            if (total.base.add(share.to128()) < MINIMUM_SHARE_BALANCE) {\\n                return (0, 0);\\n            }\\n        } else {\\n            // amount may be lower than the value of share due to rounding, in that case, add 1 to amount (Always round up)\\n            amount = total.toElastic(share, true);\\n        }\\n\\n        // In case of skimming, check that only the skimmable amount is taken.\\n        // For ETH, the full balance is available, so no need to check.\\n        // During flashloans the _tokenBalanceOf is lower than 'reality', so skimming deposits will mostly fail during a flashloan.\\n        require(\\n            from != address(this) || token_ == USE_ETHEREUM || amount <= _tokenBalanceOf(token).sub(total.elastic),\\n            \\\"BentoBox: Skim too much\\\"\\n        );\\n\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n        total.base = total.base.add(share.to128());\\n        total.elastic = total.elastic.add(amount.to128());\\n        totals[token] = total;\\n\\n        // Interactions\\n        // During the first deposit, we check that this token is 'real'\\n        if (token_ == USE_ETHEREUM) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the WETH implementation is faulty or malicious, it will block adding ETH (but we know the WETH implementation)\\n            IWETH(address(wethToken)).deposit{value: amount}();\\n        } else if (from != address(this)) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the token implementation is faulty or malicious, it may block adding tokens. Good.\\n            token.safeTransferFrom(from, address(this), amount);\\n        }\\n        emit LogDeposit(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n        if (share == 0) {\\n            // value of the share paid could be lower than the amount paid due to rounding, in that case, add a share (Always round up)\\n            share = total.toBase(amount, true);\\n        } else {\\n            // amount may be lower than the value of share due to rounding, that's ok\\n            amount = total.toElastic(share, false);\\n        }\\n\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        total.elastic = total.elastic.sub(amount.to128());\\n        total.base = total.base.sub(share.to128());\\n        // There have to be at least 1000 shares left to prevent reseting the share/amount ratio (unless it's fully emptied)\\n        require(total.base >= MINIMUM_SHARE_BALANCE || total.base == 0, \\\"BentoBox: cannot empty\\\");\\n        totals[token] = total;\\n\\n        // Interactions\\n        if (token_ == USE_ETHEREUM) {\\n            // X2, X3: A revert or big gas usage in the WETH contract could block withdrawals, but WETH9 is fine.\\n            IWETH(address(wethToken)).withdraw(amount);\\n            // X2, X3: A revert or big gas usage could block, however, the to address is under control of the caller.\\n            (bool success, ) = to.call{value: amount}(\\\"\\\");\\n            require(success, \\\"BentoBox: ETH transfer failed\\\");\\n        } else {\\n            // X2, X3: A malicious token could block withdrawal of just THAT token.\\n            //         masterContracts may want to take care not to rely on withdraw always succeeding.\\n            token.safeTransfer(to, amount);\\n        }\\n        emit LogWithdraw(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    // Clones of master contracts can transfer from any account that has approved them\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transferMultiple for gas optimization\\n    function transfer(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) public allowed(from) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n\\n        emit LogTransfer(token, from, to, share);\\n    }\\n\\n    /// @notice Transfer shares from a user account to multiple other ones.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param tos The receivers of the tokens.\\n    /// @param shares The amount of `token` in shares for each receiver in `tos`.\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transfer for gas optimization\\n    function transferMultiple(\\n        IERC20 token,\\n        address from,\\n        address[] calldata tos,\\n        uint256[] calldata shares\\n    ) public allowed(from) {\\n        // Checks\\n        require(tos[0] != address(0), \\\"BentoBox: to[0] not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        uint256 totalAmount;\\n        uint256 len = tos.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address to = tos[i];\\n            balanceOf[token][to] = balanceOf[token][to].add(shares[i]);\\n            totalAmount = totalAmount.add(shares[i]);\\n            emit LogTransfer(token, from, to, shares[i]);\\n        }\\n        balanceOf[token][from] = balanceOf[token][from].sub(totalAmount);\\n    }\\n\\n    /// @notice Flashloan ability.\\n    /// @param borrower The address of the contract that implements and conforms to `IFlashBorrower` and handles the flashloan.\\n    /// @param receiver Address of the token receiver.\\n    /// @param token The address of the token to receive.\\n    /// @param amount of the tokens to receive.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function flashLoan(\\n        IFlashBorrower borrower,\\n        address receiver,\\n        IERC20 token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public {\\n        uint256 fee = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n        token.safeTransfer(receiver, amount);\\n\\n        borrower.onFlashLoan(msg.sender, token, amount, fee, data);\\n\\n        require(_tokenBalanceOf(token) >= totals[token].addElastic(fee.to128()), \\\"BentoBox: Wrong amount\\\");\\n        emit LogFlashLoan(address(borrower), token, amount, fee, receiver);\\n    }\\n\\n    /// @notice Support for batched flashloans. Useful to request multiple different `tokens` in a single transaction.\\n    /// @param borrower The address of the contract that implements and conforms to `IBatchFlashBorrower` and handles the flashloan.\\n    /// @param receivers An array of the token receivers. A one-to-one mapping with `tokens` and `amounts`.\\n    /// @param tokens The addresses of the tokens.\\n    /// @param amounts of the tokens for each receiver.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function batchFlashLoan(\\n        IBatchFlashBorrower borrower,\\n        address[] calldata receivers,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public {\\n        uint256[] memory fees = new uint256[](tokens.length);\\n\\n        uint256 len = tokens.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 amount = amounts[i];\\n            fees[i] = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n\\n            tokens[i].safeTransfer(receivers[i], amounts[i]);\\n        }\\n\\n        borrower.onBatchFlashLoan(msg.sender, tokens, amounts, fees, data);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            IERC20 token = tokens[i];\\n            require(_tokenBalanceOf(token) >= totals[token].addElastic(fees[i].to128()), \\\"BentoBox: Wrong amount\\\");\\n            emit LogFlashLoan(address(borrower), token, amounts[i], fees[i], receivers[i]);\\n        }\\n    }\\n\\n    /// @notice Sets the target percentage of the strategy for `token`.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param targetPercentage_ The new target in percent. Must be lesser or equal to `MAX_TARGET_PERCENTAGE`.\\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) public onlyOwner {\\n        // Checks\\n        require(targetPercentage_ <= MAX_TARGET_PERCENTAGE, \\\"StrategyManager: Target too high\\\");\\n\\n        // Effects\\n        strategyData[token].targetPercentage = targetPercentage_;\\n        emit LogStrategyTargetPercentage(token, targetPercentage_);\\n    }\\n\\n    /// @notice Sets the contract address of a new strategy that conforms to `IStrategy` for `token`.\\n    /// Must be called twice with the same arguments.\\n    /// A new strategy becomes pending first and can be activated once `STRATEGY_DELAY` is over.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param newStrategy The address of the contract that conforms to `IStrategy`.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // C4 - Use block.timestamp only for long intervals (SWC-116)\\n    // C4: block.timestamp is used for a period of 2 weeks, which is long enough\\n    function setStrategy(IERC20 token, IStrategy newStrategy) public onlyOwner {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy pending = pendingStrategy[token];\\n        if (data.strategyStartDate == 0 || pending != newStrategy) {\\n            pendingStrategy[token] = newStrategy;\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: Our sun will swallow the earth well before this overflows\\n            data.strategyStartDate = (block.timestamp + STRATEGY_DELAY).to64();\\n            emit LogStrategyQueued(token, newStrategy);\\n        } else {\\n            require(data.strategyStartDate != 0 && block.timestamp >= data.strategyStartDate, \\\"StrategyManager: Too early\\\");\\n            if (address(strategy[token]) != address(0)) {\\n                int256 balanceChange = strategy[token].exit(data.balance);\\n                // Effects\\n                if (balanceChange > 0) {\\n                    uint256 add = uint256(balanceChange);\\n                    totals[token].addElastic(add);\\n                    emit LogStrategyProfit(token, add);\\n                } else if (balanceChange < 0) {\\n                    uint256 sub = uint256(-balanceChange);\\n                    totals[token].subElastic(sub);\\n                    emit LogStrategyLoss(token, sub);\\n                }\\n\\n                emit LogStrategyDivest(token, data.balance);\\n            }\\n            strategy[token] = pending;\\n            data.strategyStartDate = 0;\\n            data.balance = 0;\\n            pendingStrategy[token] = IStrategy(0);\\n            emit LogStrategySet(token, newStrategy);\\n        }\\n        strategyData[token] = data;\\n    }\\n\\n    /// @notice The actual process of yield farming. Executes the strategy of `token`.\\n    /// Optionally does housekeeping if `balance` is true.\\n    /// `maxChangeAmount` is relevant for skimming or withdrawing if `balance` is true.\\n    /// @param token The address of the token for which a strategy is deployed.\\n    /// @param balance True if housekeeping should be done.\\n    /// @param maxChangeAmount The maximum amount for either pulling or pushing from/to the `IStrategy` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // F5: Not followed to prevent reentrancy issues with flashloans and BentoBox skims?\\n    function harvest(\\n        IERC20 token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) public {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy _strategy = strategy[token];\\n        int256 balanceChange = _strategy.harvest(data.balance, msg.sender);\\n        if (balanceChange == 0 && !balance) {\\n            return;\\n        }\\n\\n        uint256 totalElastic = totals[token].elastic;\\n\\n        if (balanceChange > 0) {\\n            uint256 add = uint256(balanceChange);\\n            totalElastic = totalElastic.add(add);\\n            totals[token].elastic = totalElastic.to128();\\n            emit LogStrategyProfit(token, add);\\n        } else if (balanceChange < 0) {\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: balanceChange could overflow if it's max negative int128.\\n            // But tokens with balances that large are not supported by the BentoBox.\\n            uint256 sub = uint256(-balanceChange);\\n            totalElastic = totalElastic.sub(sub);\\n            totals[token].elastic = totalElastic.to128();\\n            data.balance = data.balance.sub(sub.to128());\\n            emit LogStrategyLoss(token, sub);\\n        }\\n\\n        if (balance) {\\n            uint256 targetBalance = totalElastic.mul(data.targetPercentage) / 100;\\n            // if data.balance == targetBalance there is nothing to update\\n            if (data.balance < targetBalance) {\\n                uint256 amountOut = targetBalance.sub(data.balance);\\n                if (maxChangeAmount != 0 && amountOut > maxChangeAmount) {\\n                    amountOut = maxChangeAmount;\\n                }\\n                token.safeTransfer(address(_strategy), amountOut);\\n                data.balance = data.balance.add(amountOut.to128());\\n                _strategy.skim(amountOut);\\n                emit LogStrategyInvest(token, amountOut);\\n            } else if (data.balance > targetBalance) {\\n                uint256 amountIn = data.balance.sub(targetBalance.to128());\\n                if (maxChangeAmount != 0 && amountIn > maxChangeAmount) {\\n                    amountIn = maxChangeAmount;\\n                }\\n\\n                uint256 actualAmountIn = _strategy.withdraw(amountIn);\\n\\n                data.balance = data.balance.sub(actualAmountIn.to128());\\n                emit LogStrategyDivest(token, actualAmountIn);\\n            }\\n        }\\n\\n        strategyData[token] = data;\\n    }\\n\\n    // Contract should be able to receive ETH deposits to support deposit & skim\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd8343e88ade6bf85fd34d3556aedb2b14fe07ca40396ae2ef6064c9d8da0d4d3\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"A library for performing overflow-/underflow-safe addition and subtraction on uint32.","version":1}},"BoringMath64":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203d6a113453a33b09ff20dfdd411fcbb133d8c3109f3d179e6315ba1e6446b3cd64736f6c634300060c0033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATASIZE PUSH11 0x113453A33B09FF20DFDD41 0x1F 0xCB 0xB1 CALLER 0xD8 0xC3 LT SWAP16 RETURNDATASIZE OR SWAP15 PUSH4 0x15BA1E64 CHAINID 0xB3 0xCD PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ","sourceMap":"8703:304:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203d6a113453a33b09ff20dfdd411fcbb133d8c3109f3d179e6315ba1e6446b3cd64736f6c634300060c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATASIZE PUSH11 0x113453A33B09FF20DFDD41 0x1F 0xCB 0xB1 CALLER 0xD8 0xC3 LT SWAP16 RETURNDATASIZE OR SWAP15 PUSH4 0x15BA1E64 CHAINID 0xB3 0xCD PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ","sourceMap":"8703:304:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"add(uint64,uint64)":"infinite","sub(uint64,uint64)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A library for performing overflow-/underflow-safe addition and subtraction on uint64.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/BentoBoxV1Flat.sol\":\"BoringMath64\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/flat/BentoBoxV1Flat.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// The BentoBox\\n\\n//  \\u2584\\u2584\\u2584\\u2584\\u00b7 \\u2584\\u2584\\u2584 . \\u2590 \\u2584 \\u2584\\u2584\\u2584\\u2584\\u2584      \\u2584\\u2584\\u2584\\u2584\\u00b7       \\u2590\\u2584\\u2022 \\u2584\\n//  \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u2580\\u2584.\\u2580\\u00b7\\u2588\\u258c\\u2590\\u2588\\u2022\\u2588\\u2588  \\u25aa     \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u25aa      \\u2588\\u258c\\u2588\\u258c\\u25aa\\n//  \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584\\u2590\\u2580\\u2580\\u25aa\\u2584\\u2590\\u2588\\u2590\\u2590\\u258c \\u2590\\u2588.\\u25aa \\u2584\\u2588\\u2580\\u2584 \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584 \\u2584\\u2588\\u2580\\u2584  \\u00b7\\u2588\\u2588\\u00b7\\n//  \\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u2584\\u2584\\u258c\\u2588\\u2588\\u2590\\u2588\\u258c \\u2590\\u2588\\u258c\\u00b7\\u2590\\u2588\\u258c.\\u2590\\u258c\\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u258c.\\u2590\\u258c\\u25aa\\u2590\\u2588\\u00b7\\u2588\\u258c\\n//  \\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2580\\u2580 \\u2580\\u2580 \\u2588\\u25aa \\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u2022\\u2580\\u2580 \\u2580\\u2580\\n\\n// This contract stores funds, handles their transfers, supports flash loans and strategies.\\n\\n// Copyright (c) 2021 BoringCrypto - All rights reserved\\n// Twitter: @Boring_Crypto\\n\\n// Special thanks to Keno for all his hard work and support\\n\\n// Version 22-Mar-2021\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable not-rely-on-time\\n// solhint-disable no-inline-assembly\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function decimals() external view returns (uint256);\\n}\\n\\n// File contracts/interfaces/IFlashLoan.sol\\n// License-Identifier: MIT\\n\\ninterface IFlashBorrower {\\n    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param token The address of the token that is loaned.\\n    /// @param amount of the `token` that is loaned.\\n    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onFlashLoan(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IBatchFlashBorrower {\\n    /// @notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param tokens Array of addresses for ERC-20 tokens that is loaned.\\n    /// @param amounts A one-to-one map to `tokens` that is loaned.\\n    /// @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onBatchFlashLoan(\\n        address sender,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata fees,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File contracts/interfaces/IWETH.sol\\n// License-Identifier: MIT\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\\n// File contracts/interfaces/IStrategy.sol\\n// License-Identifier: MIT\\n\\ninterface IStrategy {\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\n    /// @param amount The amount of tokens to invest.\\n    function skim(uint256 amount) external;\\n\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\n    /// @dev The `actualAmount` should be very close to the amount.\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\n    /// @param amount The requested amount the caller wants to withdraw.\\n    /// @return actualAmount The real amount that is withdrawn.\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library using overflow-/underflow-safe math.\\nlibrary RebaseLibrary {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = elastic.mul(total.base) / total.elastic;\\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\\n                base = base.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = base.mul(total.elastic) / total.base;\\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\\n                elastic = elastic.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\\n    /// @return (Rebase) The new total.\\n    /// @return base in relationship to `elastic`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 base) {\\n        base = toBase(total, elastic, roundUp);\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return (total, base);\\n    }\\n\\n    /// @notice Sub `base` from `total` and update `total.elastic`.\\n    /// @return (Rebase) The new total.\\n    /// @return elastic in relationship to `base`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 elastic) {\\n        elastic = toElastic(total, base, roundUp);\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return (total, elastic);\\n    }\\n\\n    /// @notice Add `elastic` and `base` to `total`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Subtract `elastic` and `base` to `total`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Add `elastic` to `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.add(elastic.to128());\\n    }\\n\\n    /// @notice Subtract `elastic` from `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.sub(elastic.to128());\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() public {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IMasterContract {\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\n    /// Also kown as the constructor for cloned contracts.\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\n    /// @param data Can be abi encoded arguments or anything else.\\n    function init(bytes calldata data) external payable;\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringFactory.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BoringFactory {\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\n\\n    /// @notice Mapping from clone contracts to their masterContract.\\n    mapping(address => address) public masterContractOf;\\n\\n    /// @notice Deploys a given master Contract as a clone.\\n    /// Any ETH transferred with this call is forwarded to the new clone.\\n    /// Emits `LogDeploy`.\\n    /// @param masterContract The address of the contract to clone.\\n    /// @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\\n    /// @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\\n    /// @return cloneAddress Address of the created clone contract.\\n    function deploy(\\n        address masterContract,\\n        bytes calldata data,\\n        bool useCreate2\\n    ) public payable returns (address cloneAddress) {\\n        require(masterContract != address(0), \\\"BoringFactory: No masterContract\\\");\\n        bytes20 targetBytes = bytes20(masterContract); // Takes the first 20 bytes of the masterContract's address\\n\\n        if (useCreate2) {\\n            // each masterContract has different code already. So clones are distinguished by their data only.\\n            bytes32 salt = keccak256(data);\\n\\n            // Creates clone, more info here: https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create2(0, clone, 0x37, salt)\\n            }\\n        } else {\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create(0, clone, 0x37)\\n            }\\n        }\\n        masterContractOf[cloneAddress] = masterContract;\\n\\n        IMasterContract(cloneAddress).init{value: msg.value}(data);\\n\\n        emit LogDeploy(masterContract, data, cloneAddress);\\n    }\\n}\\n\\n// File contracts/MasterContractManager.sol\\n// License-Identifier: UNLICENSED\\n\\ncontract MasterContractManager is BoringOwnable, BoringFactory {\\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\\n    event LogRegisterProtocol(address indexed protocol);\\n\\n    /// @notice masterContract to user to approval state\\n    mapping(address => mapping(address => bool)) public masterContractApproved;\\n    /// @notice masterContract to whitelisted state for approval without signed message\\n    mapping(address => bool) public whitelistedMasterContracts;\\n    /// @notice user nonces for masterContract approvals\\n    mapping(address => uint256) public nonces;\\n\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n    // See https://eips.ethereum.org/EIPS/eip-191\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\n    bytes32 private constant APPROVAL_SIGNATURE_HASH =\\n        keccak256(\\\"SetMasterContractApproval(string warning,address user,address masterContract,bool approved,uint256 nonce)\\\");\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\n    }\\n\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, keccak256(\\\"BentoBox V1\\\"), chainId, address(this)));\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @notice Other contracts need to register with this master contract so that users can approve them for the BentoBox.\\n    function registerProtocol() public {\\n        masterContractOf[msg.sender] = msg.sender;\\n        emit LogRegisterProtocol(msg.sender);\\n    }\\n\\n    /// @notice Enables or disables a contract for approval without signed message.\\n    function whitelistMasterContract(address masterContract, bool approved) public onlyOwner {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: Cannot approve 0\\\");\\n\\n        // Effects\\n        whitelistedMasterContracts[masterContract] = approved;\\n        emit LogWhiteListMasterContract(masterContract, approved);\\n    }\\n\\n    /// @notice Approves or revokes a `masterContract` access to `user` funds.\\n    /// @param user The address of the user that approves or revokes access.\\n    /// @param masterContract The address who gains or loses access.\\n    /// @param approved If True approves access. If False revokes access.\\n    /// @param v Part of the signature. (See EIP-191)\\n    /// @param r Part of the signature. (See EIP-191)\\n    /// @param s Part of the signature. (See EIP-191)\\n    // F4 - Check behaviour for all function arguments when wrong or extreme\\n    // F4: Don't allow masterContract 0 to be approved. Unknown contracts will have a masterContract of 0.\\n    // F4: User can't be 0 for signed approvals because the recoveredAddress will be 0 if ecrecover fails\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: masterC not set\\\"); // Important for security\\n\\n        // If no signature is provided, the fallback is executed\\n        if (r == 0 && s == 0 && v == 0) {\\n            require(user == msg.sender, \\\"MasterCMgr: user not sender\\\");\\n            require(masterContractOf[user] == address(0), \\\"MasterCMgr: user is clone\\\");\\n            require(whitelistedMasterContracts[masterContract], \\\"MasterCMgr: not whitelisted\\\");\\n        } else {\\n            // Important for security - any address without masterContract has address(0) as masterContract\\n            // So approving address(0) would approve every address, leading to full loss of funds\\n            // Also, ecrecover returns address(0) on failure. So we check this:\\n            require(user != address(0), \\\"MasterCMgr: User cannot be 0\\\");\\n\\n            // C10 - Protect signatures against replay, use nonce and chainId (SWC-121)\\n            // C10: nonce + chainId are used to prevent replays\\n            // C11 - All signatures strictly EIP-712 (SWC-117 SWC-122)\\n            // C11: signature is EIP-712 compliant\\n            // C12 - abi.encodePacked can't contain variable length user input (SWC-133)\\n            // C12: abi.encodePacked has fixed length parameters\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA,\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            APPROVAL_SIGNATURE_HASH,\\n                            approved\\n                                ? keccak256(\\\"Give FULL access to funds in (and approved to) BentoBox?\\\")\\n                                : keccak256(\\\"Revoke access to BentoBox?\\\"),\\n                            user,\\n                            masterContract,\\n                            approved,\\n                            nonces[user]++\\n                        )\\n                    )\\n                )\\n            );\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress == user, \\\"MasterCMgr: Invalid Signature\\\");\\n        }\\n\\n        // Effects\\n        masterContractApproved[masterContract][user] = approved;\\n        emit LogSetMasterContractApproval(masterContract, user, approved);\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringBatchable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BaseBoringBatchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /// @notice Allows batched call to self (this contract).\\n    /// @param calls An array of inputs for each call.\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n    /// @return successes An array indicating the success of a call, mapped one-to-one to `calls`.\\n    /// @return results An array with the returned data of each function call, mapped one-to-one to `calls`.\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results) {\\n        successes = new bool[](calls.length);\\n        results = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\n            require(success || !revertOnFail, _getRevertMsg(result));\\n            successes[i] = success;\\n            results[i] = result;\\n        }\\n    }\\n}\\n\\ncontract BoringBatchable is BaseBoringBatchable {\\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\\n    /// Lookup `IERC20.permit`.\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\n    function permitToken(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        token.permit(from, to, amount, deadline, v, r, s);\\n    }\\n}\\n\\n// File contracts/BentoBox.sol\\n// License-Identifier: UNLICENSED\\n\\n/// @title BentoBox\\n/// @author BoringCrypto, Keno\\n/// @notice The BentoBox is a vault for tokens. The stored tokens can be flash loaned and used in strategies.\\n/// Yield from this will go to the token depositors.\\n/// Rebasing tokens ARE NOT supported and WILL cause loss of funds.\\n/// Any funds transfered directly onto the BentoBox will be lost, use the deposit function instead.\\ncontract BentoBoxV1 is MasterContractManager, BoringBatchable {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n    using BoringERC20 for IERC20;\\n    using RebaseLibrary for Rebase;\\n\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n\\n    event LogDeposit(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogWithdraw(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogTransfer(IERC20 indexed token, address indexed from, address indexed to, uint256 share);\\n\\n    event LogFlashLoan(address indexed borrower, IERC20 indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\\n\\n    event LogStrategyTargetPercentage(IERC20 indexed token, uint256 targetPercentage);\\n    event LogStrategyQueued(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategySet(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategyInvest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyDivest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyProfit(IERC20 indexed token, uint256 amount);\\n    event LogStrategyLoss(IERC20 indexed token, uint256 amount);\\n\\n    // *************** //\\n    // *** STRUCTS *** //\\n    // *************** //\\n\\n    struct StrategyData {\\n        uint64 strategyStartDate;\\n        uint64 targetPercentage;\\n        uint128 balance; // the balance of the strategy that BentoBox thinks is in there\\n    }\\n\\n    // ******************************** //\\n    // *** CONSTANTS AND IMMUTABLES *** //\\n    // ******************************** //\\n\\n    // V2 - Can they be private?\\n    // V2: Private to save gas, to verify it's correct, check the constructor arguments\\n    IERC20 private immutable wethToken;\\n\\n    IERC20 private constant USE_ETHEREUM = IERC20(0);\\n    uint256 private constant FLASH_LOAN_FEE = 50; // 0.05%\\n    uint256 private constant FLASH_LOAN_FEE_PRECISION = 1e5;\\n    uint256 private constant STRATEGY_DELAY = 0 weeks;\\n    uint256 private constant MAX_TARGET_PERCENTAGE = 95; // 95%\\n    uint256 private constant MINIMUM_SHARE_BALANCE = 1000; // To prevent the ratio going off\\n\\n    // ***************** //\\n    // *** VARIABLES *** //\\n    // ***************** //\\n\\n    // Balance per token per address/contract in shares\\n    mapping(IERC20 => mapping(address => uint256)) public balanceOf;\\n\\n    // Rebase from amount to share\\n    mapping(IERC20 => Rebase) public totals;\\n\\n    mapping(IERC20 => IStrategy) public strategy;\\n    mapping(IERC20 => IStrategy) public pendingStrategy;\\n    mapping(IERC20 => StrategyData) public strategyData;\\n\\n    // ******************* //\\n    // *** CONSTRUCTOR *** //\\n    // ******************* //\\n\\n    constructor(IERC20 wethToken_) public {\\n        wethToken = wethToken_;\\n    }\\n\\n    // Just for testing purposes!!! Don't deploy this contract on production!!\\n    function setTokenTotal(\\n        IERC20 token,\\n        uint128 elastic,\\n        uint128 base\\n    ) public {\\n        Rebase memory total;\\n        total.elastic = elastic;\\n        total.base = base;\\n        totals[token] = total;\\n    }\\n\\n    // ***************** //\\n    // *** MODIFIERS *** //\\n    // ***************** //\\n\\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\\n    /// If 'from' is msg.sender, it's allowed.\\n    /// If 'from' is the BentoBox itself, it's allowed. Any ETH, token balances (above the known balances) or BentoBox balances\\n    /// can be taken by anyone.\\n    /// This is to enable skimming, not just for deposits, but also for withdrawals or transfers, enabling better composability.\\n    /// If 'from' is a clone of a masterContract AND the 'from' address has approved that masterContract, it's allowed.\\n    modifier allowed(address from) {\\n        if (from != msg.sender && from != address(this)) {\\n            // From is sender or you are skimming\\n            address masterContract = masterContractOf[msg.sender];\\n            require(masterContract != address(0), \\\"BentoBox: no masterContract\\\");\\n            require(masterContractApproved[masterContract][from], \\\"BentoBox: Transfer not approved\\\");\\n        }\\n        _;\\n    }\\n\\n    // ************************** //\\n    // *** INTERNAL FUNCTIONS *** //\\n    // ************************** //\\n\\n    /// @dev Returns the total balance of `token` this contracts holds,\\n    /// plus the total amount this contract thinks the strategy holds.\\n    function _tokenBalanceOf(IERC20 token) internal view returns (uint256 amount) {\\n        amount = token.balanceOf(address(this)).add(strategyData[token].balance);\\n    }\\n\\n    // ************************ //\\n    // *** PUBLIC FUNCTIONS *** //\\n    // ************************ //\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share) {\\n        share = totals[token].toBase(amount, roundUp);\\n    }\\n\\n    /// @dev Helper function represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        IERC20 token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount) {\\n        amount = totals[token].toElastic(share, roundUp);\\n    }\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public payable allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n\\n        // If a new token gets added, the tokenSupply call checks that this is a deployed contract. Needed for security.\\n        require(total.elastic != 0 || token.totalSupply() > 0, \\\"BentoBox: No tokens\\\");\\n        if (share == 0) {\\n            // value of the share may be lower than the amount due to rounding, that's ok\\n            share = total.toBase(amount, false);\\n            // Any deposit should lead to at least the minimum share balance, otherwise it's ignored (no amount taken)\\n            if (total.base.add(share.to128()) < MINIMUM_SHARE_BALANCE) {\\n                return (0, 0);\\n            }\\n        } else {\\n            // amount may be lower than the value of share due to rounding, in that case, add 1 to amount (Always round up)\\n            amount = total.toElastic(share, true);\\n        }\\n\\n        // In case of skimming, check that only the skimmable amount is taken.\\n        // For ETH, the full balance is available, so no need to check.\\n        // During flashloans the _tokenBalanceOf is lower than 'reality', so skimming deposits will mostly fail during a flashloan.\\n        require(\\n            from != address(this) || token_ == USE_ETHEREUM || amount <= _tokenBalanceOf(token).sub(total.elastic),\\n            \\\"BentoBox: Skim too much\\\"\\n        );\\n\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n        total.base = total.base.add(share.to128());\\n        total.elastic = total.elastic.add(amount.to128());\\n        totals[token] = total;\\n\\n        // Interactions\\n        // During the first deposit, we check that this token is 'real'\\n        if (token_ == USE_ETHEREUM) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the WETH implementation is faulty or malicious, it will block adding ETH (but we know the WETH implementation)\\n            IWETH(address(wethToken)).deposit{value: amount}();\\n        } else if (from != address(this)) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the token implementation is faulty or malicious, it may block adding tokens. Good.\\n            token.safeTransferFrom(from, address(this), amount);\\n        }\\n        emit LogDeposit(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n        if (share == 0) {\\n            // value of the share paid could be lower than the amount paid due to rounding, in that case, add a share (Always round up)\\n            share = total.toBase(amount, true);\\n        } else {\\n            // amount may be lower than the value of share due to rounding, that's ok\\n            amount = total.toElastic(share, false);\\n        }\\n\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        total.elastic = total.elastic.sub(amount.to128());\\n        total.base = total.base.sub(share.to128());\\n        // There have to be at least 1000 shares left to prevent reseting the share/amount ratio (unless it's fully emptied)\\n        require(total.base >= MINIMUM_SHARE_BALANCE || total.base == 0, \\\"BentoBox: cannot empty\\\");\\n        totals[token] = total;\\n\\n        // Interactions\\n        if (token_ == USE_ETHEREUM) {\\n            // X2, X3: A revert or big gas usage in the WETH contract could block withdrawals, but WETH9 is fine.\\n            IWETH(address(wethToken)).withdraw(amount);\\n            // X2, X3: A revert or big gas usage could block, however, the to address is under control of the caller.\\n            (bool success, ) = to.call{value: amount}(\\\"\\\");\\n            require(success, \\\"BentoBox: ETH transfer failed\\\");\\n        } else {\\n            // X2, X3: A malicious token could block withdrawal of just THAT token.\\n            //         masterContracts may want to take care not to rely on withdraw always succeeding.\\n            token.safeTransfer(to, amount);\\n        }\\n        emit LogWithdraw(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    // Clones of master contracts can transfer from any account that has approved them\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transferMultiple for gas optimization\\n    function transfer(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) public allowed(from) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n\\n        emit LogTransfer(token, from, to, share);\\n    }\\n\\n    /// @notice Transfer shares from a user account to multiple other ones.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param tos The receivers of the tokens.\\n    /// @param shares The amount of `token` in shares for each receiver in `tos`.\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transfer for gas optimization\\n    function transferMultiple(\\n        IERC20 token,\\n        address from,\\n        address[] calldata tos,\\n        uint256[] calldata shares\\n    ) public allowed(from) {\\n        // Checks\\n        require(tos[0] != address(0), \\\"BentoBox: to[0] not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        uint256 totalAmount;\\n        uint256 len = tos.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address to = tos[i];\\n            balanceOf[token][to] = balanceOf[token][to].add(shares[i]);\\n            totalAmount = totalAmount.add(shares[i]);\\n            emit LogTransfer(token, from, to, shares[i]);\\n        }\\n        balanceOf[token][from] = balanceOf[token][from].sub(totalAmount);\\n    }\\n\\n    /// @notice Flashloan ability.\\n    /// @param borrower The address of the contract that implements and conforms to `IFlashBorrower` and handles the flashloan.\\n    /// @param receiver Address of the token receiver.\\n    /// @param token The address of the token to receive.\\n    /// @param amount of the tokens to receive.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function flashLoan(\\n        IFlashBorrower borrower,\\n        address receiver,\\n        IERC20 token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public {\\n        uint256 fee = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n        token.safeTransfer(receiver, amount);\\n\\n        borrower.onFlashLoan(msg.sender, token, amount, fee, data);\\n\\n        require(_tokenBalanceOf(token) >= totals[token].addElastic(fee.to128()), \\\"BentoBox: Wrong amount\\\");\\n        emit LogFlashLoan(address(borrower), token, amount, fee, receiver);\\n    }\\n\\n    /// @notice Support for batched flashloans. Useful to request multiple different `tokens` in a single transaction.\\n    /// @param borrower The address of the contract that implements and conforms to `IBatchFlashBorrower` and handles the flashloan.\\n    /// @param receivers An array of the token receivers. A one-to-one mapping with `tokens` and `amounts`.\\n    /// @param tokens The addresses of the tokens.\\n    /// @param amounts of the tokens for each receiver.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function batchFlashLoan(\\n        IBatchFlashBorrower borrower,\\n        address[] calldata receivers,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public {\\n        uint256[] memory fees = new uint256[](tokens.length);\\n\\n        uint256 len = tokens.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 amount = amounts[i];\\n            fees[i] = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n\\n            tokens[i].safeTransfer(receivers[i], amounts[i]);\\n        }\\n\\n        borrower.onBatchFlashLoan(msg.sender, tokens, amounts, fees, data);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            IERC20 token = tokens[i];\\n            require(_tokenBalanceOf(token) >= totals[token].addElastic(fees[i].to128()), \\\"BentoBox: Wrong amount\\\");\\n            emit LogFlashLoan(address(borrower), token, amounts[i], fees[i], receivers[i]);\\n        }\\n    }\\n\\n    /// @notice Sets the target percentage of the strategy for `token`.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param targetPercentage_ The new target in percent. Must be lesser or equal to `MAX_TARGET_PERCENTAGE`.\\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) public onlyOwner {\\n        // Checks\\n        require(targetPercentage_ <= MAX_TARGET_PERCENTAGE, \\\"StrategyManager: Target too high\\\");\\n\\n        // Effects\\n        strategyData[token].targetPercentage = targetPercentage_;\\n        emit LogStrategyTargetPercentage(token, targetPercentage_);\\n    }\\n\\n    /// @notice Sets the contract address of a new strategy that conforms to `IStrategy` for `token`.\\n    /// Must be called twice with the same arguments.\\n    /// A new strategy becomes pending first and can be activated once `STRATEGY_DELAY` is over.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param newStrategy The address of the contract that conforms to `IStrategy`.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // C4 - Use block.timestamp only for long intervals (SWC-116)\\n    // C4: block.timestamp is used for a period of 2 weeks, which is long enough\\n    function setStrategy(IERC20 token, IStrategy newStrategy) public onlyOwner {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy pending = pendingStrategy[token];\\n        if (data.strategyStartDate == 0 || pending != newStrategy) {\\n            pendingStrategy[token] = newStrategy;\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: Our sun will swallow the earth well before this overflows\\n            data.strategyStartDate = (block.timestamp + STRATEGY_DELAY).to64();\\n            emit LogStrategyQueued(token, newStrategy);\\n        } else {\\n            require(data.strategyStartDate != 0 && block.timestamp >= data.strategyStartDate, \\\"StrategyManager: Too early\\\");\\n            if (address(strategy[token]) != address(0)) {\\n                int256 balanceChange = strategy[token].exit(data.balance);\\n                // Effects\\n                if (balanceChange > 0) {\\n                    uint256 add = uint256(balanceChange);\\n                    totals[token].addElastic(add);\\n                    emit LogStrategyProfit(token, add);\\n                } else if (balanceChange < 0) {\\n                    uint256 sub = uint256(-balanceChange);\\n                    totals[token].subElastic(sub);\\n                    emit LogStrategyLoss(token, sub);\\n                }\\n\\n                emit LogStrategyDivest(token, data.balance);\\n            }\\n            strategy[token] = pending;\\n            data.strategyStartDate = 0;\\n            data.balance = 0;\\n            pendingStrategy[token] = IStrategy(0);\\n            emit LogStrategySet(token, newStrategy);\\n        }\\n        strategyData[token] = data;\\n    }\\n\\n    /// @notice The actual process of yield farming. Executes the strategy of `token`.\\n    /// Optionally does housekeeping if `balance` is true.\\n    /// `maxChangeAmount` is relevant for skimming or withdrawing if `balance` is true.\\n    /// @param token The address of the token for which a strategy is deployed.\\n    /// @param balance True if housekeeping should be done.\\n    /// @param maxChangeAmount The maximum amount for either pulling or pushing from/to the `IStrategy` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // F5: Not followed to prevent reentrancy issues with flashloans and BentoBox skims?\\n    function harvest(\\n        IERC20 token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) public {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy _strategy = strategy[token];\\n        int256 balanceChange = _strategy.harvest(data.balance, msg.sender);\\n        if (balanceChange == 0 && !balance) {\\n            return;\\n        }\\n\\n        uint256 totalElastic = totals[token].elastic;\\n\\n        if (balanceChange > 0) {\\n            uint256 add = uint256(balanceChange);\\n            totalElastic = totalElastic.add(add);\\n            totals[token].elastic = totalElastic.to128();\\n            emit LogStrategyProfit(token, add);\\n        } else if (balanceChange < 0) {\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: balanceChange could overflow if it's max negative int128.\\n            // But tokens with balances that large are not supported by the BentoBox.\\n            uint256 sub = uint256(-balanceChange);\\n            totalElastic = totalElastic.sub(sub);\\n            totals[token].elastic = totalElastic.to128();\\n            data.balance = data.balance.sub(sub.to128());\\n            emit LogStrategyLoss(token, sub);\\n        }\\n\\n        if (balance) {\\n            uint256 targetBalance = totalElastic.mul(data.targetPercentage) / 100;\\n            // if data.balance == targetBalance there is nothing to update\\n            if (data.balance < targetBalance) {\\n                uint256 amountOut = targetBalance.sub(data.balance);\\n                if (maxChangeAmount != 0 && amountOut > maxChangeAmount) {\\n                    amountOut = maxChangeAmount;\\n                }\\n                token.safeTransfer(address(_strategy), amountOut);\\n                data.balance = data.balance.add(amountOut.to128());\\n                _strategy.skim(amountOut);\\n                emit LogStrategyInvest(token, amountOut);\\n            } else if (data.balance > targetBalance) {\\n                uint256 amountIn = data.balance.sub(targetBalance.to128());\\n                if (maxChangeAmount != 0 && amountIn > maxChangeAmount) {\\n                    amountIn = maxChangeAmount;\\n                }\\n\\n                uint256 actualAmountIn = _strategy.withdraw(amountIn);\\n\\n                data.balance = data.balance.sub(actualAmountIn.to128());\\n                emit LogStrategyDivest(token, actualAmountIn);\\n            }\\n        }\\n\\n        strategyData[token] = data;\\n    }\\n\\n    // Contract should be able to receive ETH deposits to support deposit & skim\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd8343e88ade6bf85fd34d3556aedb2b14fe07ca40396ae2ef6064c9d8da0d4d3\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"A library for performing overflow-/underflow-safe addition and subtraction on uint64.","version":1}},"BoringOwnable":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"claimOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pendingOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"},{"internalType":"bool","name":"direct","type":"bool"},{"internalType":"bool","name":"renounce","type":"bool"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"transferOwnership(address,bool,bool)":{"params":{"direct":"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.","newOwner":"Address of the new owner.","renounce":"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."}}},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"608060405234801561001057600080fd5b50600080546001600160a01b0319163390811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36104b18061005f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063078dfbe7146100515780634e71e0c8146100665780638da5cb5b1461006e578063e30c39781461008c575b600080fd5b61006461005f366004610346565b610094565b005b610064610228565b61007661030e565b60405161008391906103a8565b60405180910390f35b61007661032a565b60005473ffffffffffffffffffffffffffffffffffffffff1633146100ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e590610400565b60405180910390fd5b81156101e25773ffffffffffffffffffffffffffffffffffffffff83161515806101155750805b61014b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e5906103c9565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff85167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155600180549091169055610223565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790555b505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633811461027a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e590610435565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff9092167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179055600180549091169055565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60008060006060848603121561035a578283fd5b833573ffffffffffffffffffffffffffffffffffffffff8116811461037d578384fd5b9250602084013561038d8161046a565b9150604084013561039d8161046a565b809150509250925092565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60208082526015908201527f4f776e61626c653a207a65726f20616464726573730000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604082015260600190565b801515811461047857600080fd5b5056fea26469706673582212208cbc134504ae9a1788863357586c22a871a43f887ba3b1cf95c7f2856125b5bf64736f6c634300060c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 PUSH2 0x4B1 DUP1 PUSH2 0x5F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x78DFBE7 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x4E71E0C8 EQ PUSH2 0x66 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x6E JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x8C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x64 PUSH2 0x5F CALLDATASIZE PUSH1 0x4 PUSH2 0x346 JUMP JUMPDEST PUSH2 0x94 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x64 PUSH2 0x228 JUMP JUMPDEST PUSH2 0x76 PUSH2 0x30E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x83 SWAP2 SWAP1 PUSH2 0x3A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x76 PUSH2 0x32A JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xEE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE5 SWAP1 PUSH2 0x400 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x1E2 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO ISZERO DUP1 PUSH2 0x115 JUMPI POP DUP1 JUMPDEST PUSH2 0x14B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE5 SWAP1 PUSH2 0x3C9 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH2 0x223 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND OR SWAP1 SSTORE JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP2 EQ PUSH2 0x27A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE5 SWAP1 PUSH2 0x435 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x35A JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x37D JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x38D DUP2 PUSH2 0x46A JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x39D DUP2 PUSH2 0x46A JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A207A65726F20616464726573730000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C657220213D2070656E64696E67206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x478 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP13 0xBC SGT GASLIMIT DIV 0xAE SWAP11 OR DUP9 DUP7 CALLER JUMPI PC PUSH13 0x22A871A43F887BA3B1CF95C7F2 DUP6 PUSH2 0x25B5 0xBF PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ","sourceMap":"13404:1862:0:-:0;;;13608:115;;;;;;;;;-1:-1:-1;13639:5:0;:18;;-1:-1:-1;;;;;;13639:18:0;13647:10;13639:18;;;;;13672:44;;13647:10;;13639:5;13672:44;;13639:5;;13672:44;13404:1862;;;;;;"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061004c5760003560e01c8063078dfbe7146100515780634e71e0c8146100665780638da5cb5b1461006e578063e30c39781461008c575b600080fd5b61006461005f366004610346565b610094565b005b610064610228565b61007661030e565b60405161008391906103a8565b60405180910390f35b61007661032a565b60005473ffffffffffffffffffffffffffffffffffffffff1633146100ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e590610400565b60405180910390fd5b81156101e25773ffffffffffffffffffffffffffffffffffffffff83161515806101155750805b61014b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e5906103c9565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff85167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155600180549091169055610223565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790555b505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633811461027a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e590610435565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff9092167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179055600180549091169055565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60008060006060848603121561035a578283fd5b833573ffffffffffffffffffffffffffffffffffffffff8116811461037d578384fd5b9250602084013561038d8161046a565b9150604084013561039d8161046a565b809150509250925092565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60208082526015908201527f4f776e61626c653a207a65726f20616464726573730000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604082015260600190565b801515811461047857600080fd5b5056fea26469706673582212208cbc134504ae9a1788863357586c22a871a43f887ba3b1cf95c7f2856125b5bf64736f6c634300060c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x78DFBE7 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x4E71E0C8 EQ PUSH2 0x66 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x6E JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x8C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x64 PUSH2 0x5F CALLDATASIZE PUSH1 0x4 PUSH2 0x346 JUMP JUMPDEST PUSH2 0x94 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x64 PUSH2 0x228 JUMP JUMPDEST PUSH2 0x76 PUSH2 0x30E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x83 SWAP2 SWAP1 PUSH2 0x3A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x76 PUSH2 0x32A JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xEE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE5 SWAP1 PUSH2 0x400 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x1E2 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO ISZERO DUP1 PUSH2 0x115 JUMPI POP DUP1 JUMPDEST PUSH2 0x14B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE5 SWAP1 PUSH2 0x3C9 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH2 0x223 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND OR SWAP1 SSTORE JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP2 EQ PUSH2 0x27A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE5 SWAP1 PUSH2 0x435 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x35A JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x37D JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x38D DUP2 PUSH2 0x46A JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x39D DUP2 PUSH2 0x46A JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A207A65726F20616464726573730000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C657220213D2070656E64696E67206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x478 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP13 0xBC SGT GASLIMIT DIV 0xAE SWAP11 OR DUP9 DUP7 CALLER JUMPI PC PUSH13 0x22A871A43F887BA3B1CF95C7F2 DUP6 PUSH2 0x25B5 0xBF PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ","sourceMap":"13404:1862:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14182:489;;;;;;:::i;:::-;;:::i;:::-;;14750:330;;;:::i;13346:20::-;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;13372:27;;;:::i;14182:489::-;15204:5;;;;15190:10;:19;15182:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;14316:6:::1;14312:353;;;14368:22;::::0;::::1;::::0;::::1;::::0;:34:::1;;;14394:8;14368:34;14360:68;;;;;;;;;;;;:::i;:::-;14492:5;::::0;;14471:37:::1;::::0;::::1;::::0;;::::1;::::0;14492:5;::::1;::::0;14471:37:::1;::::0;::::1;14522:5;:16:::0;;::::1;::::0;::::1;::::0;;;::::1;;::::0;;;;14552:25;;;;::::1;::::0;;14312:353:::1;;;14631:12;:23:::0;;;::::1;;::::0;::::1;;::::0;;14312:353:::1;14182:489:::0;;;:::o;14750:330::-;14817:12;;;;14866:10;:27;;14858:72;;;;;;;;;;;;:::i;:::-;14986:5;;;14965:42;;;;;;;14986:5;;;14965:42;;;15017:5;:21;;;;;;;;;;;;;;15048:25;;;;;;;14750:330::o;13346:20::-;;;;;;:::o;13372:27::-;;;;;;:::o;273:479:-1:-;;;;405:2;393:9;384:7;380:23;376:32;373:2;;;-1:-1;;411:12;373:2;85:6;72:20;3824:42;3966:5;3813:54;3941:5;3938:35;3928:2;;-1:-1;;3977:12;3928:2;463:63;-1:-1;563:2;599:22;;206:20;231:30;206:20;231:30;:::i;:::-;571:60;-1:-1;668:2;704:22;;206:20;231:30;206:20;231:30;:::i;:::-;676:60;;;;367:385;;;;;:::o;1891:222::-;3824:42;3813:54;;;;830:37;;2018:2;2003:18;;1989:124::o;2120:416::-;2320:2;2334:47;;;1104:2;2305:18;;;3493:19;1140:23;3533:14;;;1120:44;1183:12;;;2291:245::o;2543:416::-;2743:2;2757:47;;;2728:18;;;3493:19;1470:34;3533:14;;;1450:55;1524:12;;;2714:245::o;2966:416::-;3166:2;3180:47;;;3151:18;;;3493:19;1811:34;3533:14;;;1791:55;1865:12;;;3137:245::o;4003:111::-;4084:5;3725:13;3718:21;4062:5;4059:32;4049:2;;4105:1;;4095:12;4049:2;4043:71;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"240200","executionCost":"22649","totalCost":"262849"},"external":{"claimOwnership()":"44971","owner()":"1068","pendingOwner()":"1090","transferOwnership(address,bool,bool)":"infinite"}},"methodIdentifiers":{"claimOwnership()":"4e71e0c8","owner()":"8da5cb5b","pendingOwner()":"e30c3978","transferOwnership(address,bool,bool)":"078dfbe7"}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"transferOwnership(address,bool,bool)\":{\"params\":{\"direct\":\"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\",\"newOwner\":\"Address of the new owner.\",\"renounce\":\"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimOwnership()\":{\"notice\":\"Needs to be called by `pendingOwner` to claim ownership.\"},\"constructor\":\"`owner` defaults to msg.sender on construction.\",\"transferOwnership(address,bool,bool)\":{\"notice\":\"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/BentoBoxV1Flat.sol\":\"BoringOwnable\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/flat/BentoBoxV1Flat.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// The BentoBox\\n\\n//  \\u2584\\u2584\\u2584\\u2584\\u00b7 \\u2584\\u2584\\u2584 . \\u2590 \\u2584 \\u2584\\u2584\\u2584\\u2584\\u2584      \\u2584\\u2584\\u2584\\u2584\\u00b7       \\u2590\\u2584\\u2022 \\u2584\\n//  \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u2580\\u2584.\\u2580\\u00b7\\u2588\\u258c\\u2590\\u2588\\u2022\\u2588\\u2588  \\u25aa     \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u25aa      \\u2588\\u258c\\u2588\\u258c\\u25aa\\n//  \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584\\u2590\\u2580\\u2580\\u25aa\\u2584\\u2590\\u2588\\u2590\\u2590\\u258c \\u2590\\u2588.\\u25aa \\u2584\\u2588\\u2580\\u2584 \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584 \\u2584\\u2588\\u2580\\u2584  \\u00b7\\u2588\\u2588\\u00b7\\n//  \\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u2584\\u2584\\u258c\\u2588\\u2588\\u2590\\u2588\\u258c \\u2590\\u2588\\u258c\\u00b7\\u2590\\u2588\\u258c.\\u2590\\u258c\\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u258c.\\u2590\\u258c\\u25aa\\u2590\\u2588\\u00b7\\u2588\\u258c\\n//  \\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2580\\u2580 \\u2580\\u2580 \\u2588\\u25aa \\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u2022\\u2580\\u2580 \\u2580\\u2580\\n\\n// This contract stores funds, handles their transfers, supports flash loans and strategies.\\n\\n// Copyright (c) 2021 BoringCrypto - All rights reserved\\n// Twitter: @Boring_Crypto\\n\\n// Special thanks to Keno for all his hard work and support\\n\\n// Version 22-Mar-2021\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable not-rely-on-time\\n// solhint-disable no-inline-assembly\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function decimals() external view returns (uint256);\\n}\\n\\n// File contracts/interfaces/IFlashLoan.sol\\n// License-Identifier: MIT\\n\\ninterface IFlashBorrower {\\n    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param token The address of the token that is loaned.\\n    /// @param amount of the `token` that is loaned.\\n    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onFlashLoan(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IBatchFlashBorrower {\\n    /// @notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param tokens Array of addresses for ERC-20 tokens that is loaned.\\n    /// @param amounts A one-to-one map to `tokens` that is loaned.\\n    /// @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onBatchFlashLoan(\\n        address sender,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata fees,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File contracts/interfaces/IWETH.sol\\n// License-Identifier: MIT\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\\n// File contracts/interfaces/IStrategy.sol\\n// License-Identifier: MIT\\n\\ninterface IStrategy {\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\n    /// @param amount The amount of tokens to invest.\\n    function skim(uint256 amount) external;\\n\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\n    /// @dev The `actualAmount` should be very close to the amount.\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\n    /// @param amount The requested amount the caller wants to withdraw.\\n    /// @return actualAmount The real amount that is withdrawn.\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library using overflow-/underflow-safe math.\\nlibrary RebaseLibrary {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = elastic.mul(total.base) / total.elastic;\\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\\n                base = base.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = base.mul(total.elastic) / total.base;\\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\\n                elastic = elastic.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\\n    /// @return (Rebase) The new total.\\n    /// @return base in relationship to `elastic`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 base) {\\n        base = toBase(total, elastic, roundUp);\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return (total, base);\\n    }\\n\\n    /// @notice Sub `base` from `total` and update `total.elastic`.\\n    /// @return (Rebase) The new total.\\n    /// @return elastic in relationship to `base`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 elastic) {\\n        elastic = toElastic(total, base, roundUp);\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return (total, elastic);\\n    }\\n\\n    /// @notice Add `elastic` and `base` to `total`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Subtract `elastic` and `base` to `total`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Add `elastic` to `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.add(elastic.to128());\\n    }\\n\\n    /// @notice Subtract `elastic` from `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.sub(elastic.to128());\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() public {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IMasterContract {\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\n    /// Also kown as the constructor for cloned contracts.\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\n    /// @param data Can be abi encoded arguments or anything else.\\n    function init(bytes calldata data) external payable;\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringFactory.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BoringFactory {\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\n\\n    /// @notice Mapping from clone contracts to their masterContract.\\n    mapping(address => address) public masterContractOf;\\n\\n    /// @notice Deploys a given master Contract as a clone.\\n    /// Any ETH transferred with this call is forwarded to the new clone.\\n    /// Emits `LogDeploy`.\\n    /// @param masterContract The address of the contract to clone.\\n    /// @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\\n    /// @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\\n    /// @return cloneAddress Address of the created clone contract.\\n    function deploy(\\n        address masterContract,\\n        bytes calldata data,\\n        bool useCreate2\\n    ) public payable returns (address cloneAddress) {\\n        require(masterContract != address(0), \\\"BoringFactory: No masterContract\\\");\\n        bytes20 targetBytes = bytes20(masterContract); // Takes the first 20 bytes of the masterContract's address\\n\\n        if (useCreate2) {\\n            // each masterContract has different code already. So clones are distinguished by their data only.\\n            bytes32 salt = keccak256(data);\\n\\n            // Creates clone, more info here: https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create2(0, clone, 0x37, salt)\\n            }\\n        } else {\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create(0, clone, 0x37)\\n            }\\n        }\\n        masterContractOf[cloneAddress] = masterContract;\\n\\n        IMasterContract(cloneAddress).init{value: msg.value}(data);\\n\\n        emit LogDeploy(masterContract, data, cloneAddress);\\n    }\\n}\\n\\n// File contracts/MasterContractManager.sol\\n// License-Identifier: UNLICENSED\\n\\ncontract MasterContractManager is BoringOwnable, BoringFactory {\\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\\n    event LogRegisterProtocol(address indexed protocol);\\n\\n    /// @notice masterContract to user to approval state\\n    mapping(address => mapping(address => bool)) public masterContractApproved;\\n    /// @notice masterContract to whitelisted state for approval without signed message\\n    mapping(address => bool) public whitelistedMasterContracts;\\n    /// @notice user nonces for masterContract approvals\\n    mapping(address => uint256) public nonces;\\n\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n    // See https://eips.ethereum.org/EIPS/eip-191\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\n    bytes32 private constant APPROVAL_SIGNATURE_HASH =\\n        keccak256(\\\"SetMasterContractApproval(string warning,address user,address masterContract,bool approved,uint256 nonce)\\\");\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\n    }\\n\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, keccak256(\\\"BentoBox V1\\\"), chainId, address(this)));\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @notice Other contracts need to register with this master contract so that users can approve them for the BentoBox.\\n    function registerProtocol() public {\\n        masterContractOf[msg.sender] = msg.sender;\\n        emit LogRegisterProtocol(msg.sender);\\n    }\\n\\n    /// @notice Enables or disables a contract for approval without signed message.\\n    function whitelistMasterContract(address masterContract, bool approved) public onlyOwner {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: Cannot approve 0\\\");\\n\\n        // Effects\\n        whitelistedMasterContracts[masterContract] = approved;\\n        emit LogWhiteListMasterContract(masterContract, approved);\\n    }\\n\\n    /// @notice Approves or revokes a `masterContract` access to `user` funds.\\n    /// @param user The address of the user that approves or revokes access.\\n    /// @param masterContract The address who gains or loses access.\\n    /// @param approved If True approves access. If False revokes access.\\n    /// @param v Part of the signature. (See EIP-191)\\n    /// @param r Part of the signature. (See EIP-191)\\n    /// @param s Part of the signature. (See EIP-191)\\n    // F4 - Check behaviour for all function arguments when wrong or extreme\\n    // F4: Don't allow masterContract 0 to be approved. Unknown contracts will have a masterContract of 0.\\n    // F4: User can't be 0 for signed approvals because the recoveredAddress will be 0 if ecrecover fails\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: masterC not set\\\"); // Important for security\\n\\n        // If no signature is provided, the fallback is executed\\n        if (r == 0 && s == 0 && v == 0) {\\n            require(user == msg.sender, \\\"MasterCMgr: user not sender\\\");\\n            require(masterContractOf[user] == address(0), \\\"MasterCMgr: user is clone\\\");\\n            require(whitelistedMasterContracts[masterContract], \\\"MasterCMgr: not whitelisted\\\");\\n        } else {\\n            // Important for security - any address without masterContract has address(0) as masterContract\\n            // So approving address(0) would approve every address, leading to full loss of funds\\n            // Also, ecrecover returns address(0) on failure. So we check this:\\n            require(user != address(0), \\\"MasterCMgr: User cannot be 0\\\");\\n\\n            // C10 - Protect signatures against replay, use nonce and chainId (SWC-121)\\n            // C10: nonce + chainId are used to prevent replays\\n            // C11 - All signatures strictly EIP-712 (SWC-117 SWC-122)\\n            // C11: signature is EIP-712 compliant\\n            // C12 - abi.encodePacked can't contain variable length user input (SWC-133)\\n            // C12: abi.encodePacked has fixed length parameters\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA,\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            APPROVAL_SIGNATURE_HASH,\\n                            approved\\n                                ? keccak256(\\\"Give FULL access to funds in (and approved to) BentoBox?\\\")\\n                                : keccak256(\\\"Revoke access to BentoBox?\\\"),\\n                            user,\\n                            masterContract,\\n                            approved,\\n                            nonces[user]++\\n                        )\\n                    )\\n                )\\n            );\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress == user, \\\"MasterCMgr: Invalid Signature\\\");\\n        }\\n\\n        // Effects\\n        masterContractApproved[masterContract][user] = approved;\\n        emit LogSetMasterContractApproval(masterContract, user, approved);\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringBatchable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BaseBoringBatchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /// @notice Allows batched call to self (this contract).\\n    /// @param calls An array of inputs for each call.\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n    /// @return successes An array indicating the success of a call, mapped one-to-one to `calls`.\\n    /// @return results An array with the returned data of each function call, mapped one-to-one to `calls`.\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results) {\\n        successes = new bool[](calls.length);\\n        results = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\n            require(success || !revertOnFail, _getRevertMsg(result));\\n            successes[i] = success;\\n            results[i] = result;\\n        }\\n    }\\n}\\n\\ncontract BoringBatchable is BaseBoringBatchable {\\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\\n    /// Lookup `IERC20.permit`.\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\n    function permitToken(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        token.permit(from, to, amount, deadline, v, r, s);\\n    }\\n}\\n\\n// File contracts/BentoBox.sol\\n// License-Identifier: UNLICENSED\\n\\n/// @title BentoBox\\n/// @author BoringCrypto, Keno\\n/// @notice The BentoBox is a vault for tokens. The stored tokens can be flash loaned and used in strategies.\\n/// Yield from this will go to the token depositors.\\n/// Rebasing tokens ARE NOT supported and WILL cause loss of funds.\\n/// Any funds transfered directly onto the BentoBox will be lost, use the deposit function instead.\\ncontract BentoBoxV1 is MasterContractManager, BoringBatchable {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n    using BoringERC20 for IERC20;\\n    using RebaseLibrary for Rebase;\\n\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n\\n    event LogDeposit(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogWithdraw(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogTransfer(IERC20 indexed token, address indexed from, address indexed to, uint256 share);\\n\\n    event LogFlashLoan(address indexed borrower, IERC20 indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\\n\\n    event LogStrategyTargetPercentage(IERC20 indexed token, uint256 targetPercentage);\\n    event LogStrategyQueued(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategySet(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategyInvest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyDivest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyProfit(IERC20 indexed token, uint256 amount);\\n    event LogStrategyLoss(IERC20 indexed token, uint256 amount);\\n\\n    // *************** //\\n    // *** STRUCTS *** //\\n    // *************** //\\n\\n    struct StrategyData {\\n        uint64 strategyStartDate;\\n        uint64 targetPercentage;\\n        uint128 balance; // the balance of the strategy that BentoBox thinks is in there\\n    }\\n\\n    // ******************************** //\\n    // *** CONSTANTS AND IMMUTABLES *** //\\n    // ******************************** //\\n\\n    // V2 - Can they be private?\\n    // V2: Private to save gas, to verify it's correct, check the constructor arguments\\n    IERC20 private immutable wethToken;\\n\\n    IERC20 private constant USE_ETHEREUM = IERC20(0);\\n    uint256 private constant FLASH_LOAN_FEE = 50; // 0.05%\\n    uint256 private constant FLASH_LOAN_FEE_PRECISION = 1e5;\\n    uint256 private constant STRATEGY_DELAY = 0 weeks;\\n    uint256 private constant MAX_TARGET_PERCENTAGE = 95; // 95%\\n    uint256 private constant MINIMUM_SHARE_BALANCE = 1000; // To prevent the ratio going off\\n\\n    // ***************** //\\n    // *** VARIABLES *** //\\n    // ***************** //\\n\\n    // Balance per token per address/contract in shares\\n    mapping(IERC20 => mapping(address => uint256)) public balanceOf;\\n\\n    // Rebase from amount to share\\n    mapping(IERC20 => Rebase) public totals;\\n\\n    mapping(IERC20 => IStrategy) public strategy;\\n    mapping(IERC20 => IStrategy) public pendingStrategy;\\n    mapping(IERC20 => StrategyData) public strategyData;\\n\\n    // ******************* //\\n    // *** CONSTRUCTOR *** //\\n    // ******************* //\\n\\n    constructor(IERC20 wethToken_) public {\\n        wethToken = wethToken_;\\n    }\\n\\n    // Just for testing purposes!!! Don't deploy this contract on production!!\\n    function setTokenTotal(\\n        IERC20 token,\\n        uint128 elastic,\\n        uint128 base\\n    ) public {\\n        Rebase memory total;\\n        total.elastic = elastic;\\n        total.base = base;\\n        totals[token] = total;\\n    }\\n\\n    // ***************** //\\n    // *** MODIFIERS *** //\\n    // ***************** //\\n\\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\\n    /// If 'from' is msg.sender, it's allowed.\\n    /// If 'from' is the BentoBox itself, it's allowed. Any ETH, token balances (above the known balances) or BentoBox balances\\n    /// can be taken by anyone.\\n    /// This is to enable skimming, not just for deposits, but also for withdrawals or transfers, enabling better composability.\\n    /// If 'from' is a clone of a masterContract AND the 'from' address has approved that masterContract, it's allowed.\\n    modifier allowed(address from) {\\n        if (from != msg.sender && from != address(this)) {\\n            // From is sender or you are skimming\\n            address masterContract = masterContractOf[msg.sender];\\n            require(masterContract != address(0), \\\"BentoBox: no masterContract\\\");\\n            require(masterContractApproved[masterContract][from], \\\"BentoBox: Transfer not approved\\\");\\n        }\\n        _;\\n    }\\n\\n    // ************************** //\\n    // *** INTERNAL FUNCTIONS *** //\\n    // ************************** //\\n\\n    /// @dev Returns the total balance of `token` this contracts holds,\\n    /// plus the total amount this contract thinks the strategy holds.\\n    function _tokenBalanceOf(IERC20 token) internal view returns (uint256 amount) {\\n        amount = token.balanceOf(address(this)).add(strategyData[token].balance);\\n    }\\n\\n    // ************************ //\\n    // *** PUBLIC FUNCTIONS *** //\\n    // ************************ //\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share) {\\n        share = totals[token].toBase(amount, roundUp);\\n    }\\n\\n    /// @dev Helper function represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        IERC20 token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount) {\\n        amount = totals[token].toElastic(share, roundUp);\\n    }\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public payable allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n\\n        // If a new token gets added, the tokenSupply call checks that this is a deployed contract. Needed for security.\\n        require(total.elastic != 0 || token.totalSupply() > 0, \\\"BentoBox: No tokens\\\");\\n        if (share == 0) {\\n            // value of the share may be lower than the amount due to rounding, that's ok\\n            share = total.toBase(amount, false);\\n            // Any deposit should lead to at least the minimum share balance, otherwise it's ignored (no amount taken)\\n            if (total.base.add(share.to128()) < MINIMUM_SHARE_BALANCE) {\\n                return (0, 0);\\n            }\\n        } else {\\n            // amount may be lower than the value of share due to rounding, in that case, add 1 to amount (Always round up)\\n            amount = total.toElastic(share, true);\\n        }\\n\\n        // In case of skimming, check that only the skimmable amount is taken.\\n        // For ETH, the full balance is available, so no need to check.\\n        // During flashloans the _tokenBalanceOf is lower than 'reality', so skimming deposits will mostly fail during a flashloan.\\n        require(\\n            from != address(this) || token_ == USE_ETHEREUM || amount <= _tokenBalanceOf(token).sub(total.elastic),\\n            \\\"BentoBox: Skim too much\\\"\\n        );\\n\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n        total.base = total.base.add(share.to128());\\n        total.elastic = total.elastic.add(amount.to128());\\n        totals[token] = total;\\n\\n        // Interactions\\n        // During the first deposit, we check that this token is 'real'\\n        if (token_ == USE_ETHEREUM) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the WETH implementation is faulty or malicious, it will block adding ETH (but we know the WETH implementation)\\n            IWETH(address(wethToken)).deposit{value: amount}();\\n        } else if (from != address(this)) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the token implementation is faulty or malicious, it may block adding tokens. Good.\\n            token.safeTransferFrom(from, address(this), amount);\\n        }\\n        emit LogDeposit(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n        if (share == 0) {\\n            // value of the share paid could be lower than the amount paid due to rounding, in that case, add a share (Always round up)\\n            share = total.toBase(amount, true);\\n        } else {\\n            // amount may be lower than the value of share due to rounding, that's ok\\n            amount = total.toElastic(share, false);\\n        }\\n\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        total.elastic = total.elastic.sub(amount.to128());\\n        total.base = total.base.sub(share.to128());\\n        // There have to be at least 1000 shares left to prevent reseting the share/amount ratio (unless it's fully emptied)\\n        require(total.base >= MINIMUM_SHARE_BALANCE || total.base == 0, \\\"BentoBox: cannot empty\\\");\\n        totals[token] = total;\\n\\n        // Interactions\\n        if (token_ == USE_ETHEREUM) {\\n            // X2, X3: A revert or big gas usage in the WETH contract could block withdrawals, but WETH9 is fine.\\n            IWETH(address(wethToken)).withdraw(amount);\\n            // X2, X3: A revert or big gas usage could block, however, the to address is under control of the caller.\\n            (bool success, ) = to.call{value: amount}(\\\"\\\");\\n            require(success, \\\"BentoBox: ETH transfer failed\\\");\\n        } else {\\n            // X2, X3: A malicious token could block withdrawal of just THAT token.\\n            //         masterContracts may want to take care not to rely on withdraw always succeeding.\\n            token.safeTransfer(to, amount);\\n        }\\n        emit LogWithdraw(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    // Clones of master contracts can transfer from any account that has approved them\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transferMultiple for gas optimization\\n    function transfer(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) public allowed(from) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n\\n        emit LogTransfer(token, from, to, share);\\n    }\\n\\n    /// @notice Transfer shares from a user account to multiple other ones.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param tos The receivers of the tokens.\\n    /// @param shares The amount of `token` in shares for each receiver in `tos`.\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transfer for gas optimization\\n    function transferMultiple(\\n        IERC20 token,\\n        address from,\\n        address[] calldata tos,\\n        uint256[] calldata shares\\n    ) public allowed(from) {\\n        // Checks\\n        require(tos[0] != address(0), \\\"BentoBox: to[0] not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        uint256 totalAmount;\\n        uint256 len = tos.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address to = tos[i];\\n            balanceOf[token][to] = balanceOf[token][to].add(shares[i]);\\n            totalAmount = totalAmount.add(shares[i]);\\n            emit LogTransfer(token, from, to, shares[i]);\\n        }\\n        balanceOf[token][from] = balanceOf[token][from].sub(totalAmount);\\n    }\\n\\n    /// @notice Flashloan ability.\\n    /// @param borrower The address of the contract that implements and conforms to `IFlashBorrower` and handles the flashloan.\\n    /// @param receiver Address of the token receiver.\\n    /// @param token The address of the token to receive.\\n    /// @param amount of the tokens to receive.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function flashLoan(\\n        IFlashBorrower borrower,\\n        address receiver,\\n        IERC20 token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public {\\n        uint256 fee = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n        token.safeTransfer(receiver, amount);\\n\\n        borrower.onFlashLoan(msg.sender, token, amount, fee, data);\\n\\n        require(_tokenBalanceOf(token) >= totals[token].addElastic(fee.to128()), \\\"BentoBox: Wrong amount\\\");\\n        emit LogFlashLoan(address(borrower), token, amount, fee, receiver);\\n    }\\n\\n    /// @notice Support for batched flashloans. Useful to request multiple different `tokens` in a single transaction.\\n    /// @param borrower The address of the contract that implements and conforms to `IBatchFlashBorrower` and handles the flashloan.\\n    /// @param receivers An array of the token receivers. A one-to-one mapping with `tokens` and `amounts`.\\n    /// @param tokens The addresses of the tokens.\\n    /// @param amounts of the tokens for each receiver.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function batchFlashLoan(\\n        IBatchFlashBorrower borrower,\\n        address[] calldata receivers,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public {\\n        uint256[] memory fees = new uint256[](tokens.length);\\n\\n        uint256 len = tokens.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 amount = amounts[i];\\n            fees[i] = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n\\n            tokens[i].safeTransfer(receivers[i], amounts[i]);\\n        }\\n\\n        borrower.onBatchFlashLoan(msg.sender, tokens, amounts, fees, data);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            IERC20 token = tokens[i];\\n            require(_tokenBalanceOf(token) >= totals[token].addElastic(fees[i].to128()), \\\"BentoBox: Wrong amount\\\");\\n            emit LogFlashLoan(address(borrower), token, amounts[i], fees[i], receivers[i]);\\n        }\\n    }\\n\\n    /// @notice Sets the target percentage of the strategy for `token`.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param targetPercentage_ The new target in percent. Must be lesser or equal to `MAX_TARGET_PERCENTAGE`.\\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) public onlyOwner {\\n        // Checks\\n        require(targetPercentage_ <= MAX_TARGET_PERCENTAGE, \\\"StrategyManager: Target too high\\\");\\n\\n        // Effects\\n        strategyData[token].targetPercentage = targetPercentage_;\\n        emit LogStrategyTargetPercentage(token, targetPercentage_);\\n    }\\n\\n    /// @notice Sets the contract address of a new strategy that conforms to `IStrategy` for `token`.\\n    /// Must be called twice with the same arguments.\\n    /// A new strategy becomes pending first and can be activated once `STRATEGY_DELAY` is over.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param newStrategy The address of the contract that conforms to `IStrategy`.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // C4 - Use block.timestamp only for long intervals (SWC-116)\\n    // C4: block.timestamp is used for a period of 2 weeks, which is long enough\\n    function setStrategy(IERC20 token, IStrategy newStrategy) public onlyOwner {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy pending = pendingStrategy[token];\\n        if (data.strategyStartDate == 0 || pending != newStrategy) {\\n            pendingStrategy[token] = newStrategy;\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: Our sun will swallow the earth well before this overflows\\n            data.strategyStartDate = (block.timestamp + STRATEGY_DELAY).to64();\\n            emit LogStrategyQueued(token, newStrategy);\\n        } else {\\n            require(data.strategyStartDate != 0 && block.timestamp >= data.strategyStartDate, \\\"StrategyManager: Too early\\\");\\n            if (address(strategy[token]) != address(0)) {\\n                int256 balanceChange = strategy[token].exit(data.balance);\\n                // Effects\\n                if (balanceChange > 0) {\\n                    uint256 add = uint256(balanceChange);\\n                    totals[token].addElastic(add);\\n                    emit LogStrategyProfit(token, add);\\n                } else if (balanceChange < 0) {\\n                    uint256 sub = uint256(-balanceChange);\\n                    totals[token].subElastic(sub);\\n                    emit LogStrategyLoss(token, sub);\\n                }\\n\\n                emit LogStrategyDivest(token, data.balance);\\n            }\\n            strategy[token] = pending;\\n            data.strategyStartDate = 0;\\n            data.balance = 0;\\n            pendingStrategy[token] = IStrategy(0);\\n            emit LogStrategySet(token, newStrategy);\\n        }\\n        strategyData[token] = data;\\n    }\\n\\n    /// @notice The actual process of yield farming. Executes the strategy of `token`.\\n    /// Optionally does housekeeping if `balance` is true.\\n    /// `maxChangeAmount` is relevant for skimming or withdrawing if `balance` is true.\\n    /// @param token The address of the token for which a strategy is deployed.\\n    /// @param balance True if housekeeping should be done.\\n    /// @param maxChangeAmount The maximum amount for either pulling or pushing from/to the `IStrategy` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // F5: Not followed to prevent reentrancy issues with flashloans and BentoBox skims?\\n    function harvest(\\n        IERC20 token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) public {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy _strategy = strategy[token];\\n        int256 balanceChange = _strategy.harvest(data.balance, msg.sender);\\n        if (balanceChange == 0 && !balance) {\\n            return;\\n        }\\n\\n        uint256 totalElastic = totals[token].elastic;\\n\\n        if (balanceChange > 0) {\\n            uint256 add = uint256(balanceChange);\\n            totalElastic = totalElastic.add(add);\\n            totals[token].elastic = totalElastic.to128();\\n            emit LogStrategyProfit(token, add);\\n        } else if (balanceChange < 0) {\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: balanceChange could overflow if it's max negative int128.\\n            // But tokens with balances that large are not supported by the BentoBox.\\n            uint256 sub = uint256(-balanceChange);\\n            totalElastic = totalElastic.sub(sub);\\n            totals[token].elastic = totalElastic.to128();\\n            data.balance = data.balance.sub(sub.to128());\\n            emit LogStrategyLoss(token, sub);\\n        }\\n\\n        if (balance) {\\n            uint256 targetBalance = totalElastic.mul(data.targetPercentage) / 100;\\n            // if data.balance == targetBalance there is nothing to update\\n            if (data.balance < targetBalance) {\\n                uint256 amountOut = targetBalance.sub(data.balance);\\n                if (maxChangeAmount != 0 && amountOut > maxChangeAmount) {\\n                    amountOut = maxChangeAmount;\\n                }\\n                token.safeTransfer(address(_strategy), amountOut);\\n                data.balance = data.balance.add(amountOut.to128());\\n                _strategy.skim(amountOut);\\n                emit LogStrategyInvest(token, amountOut);\\n            } else if (data.balance > targetBalance) {\\n                uint256 amountIn = data.balance.sub(targetBalance.to128());\\n                if (maxChangeAmount != 0 && amountIn > maxChangeAmount) {\\n                    amountIn = maxChangeAmount;\\n                }\\n\\n                uint256 actualAmountIn = _strategy.withdraw(amountIn);\\n\\n                data.balance = data.balance.sub(actualAmountIn.to128());\\n                emit LogStrategyDivest(token, actualAmountIn);\\n            }\\n        }\\n\\n        strategyData[token] = data;\\n    }\\n\\n    // Contract should be able to receive ETH deposits to support deposit & skim\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd8343e88ade6bf85fd34d3556aedb2b14fe07ca40396ae2ef6064c9d8da0d4d3\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":905,"contract":"contracts/flat/BentoBoxV1Flat.sol:BoringOwnable","label":"owner","offset":0,"slot":"0","type":"t_address"},{"astId":907,"contract":"contracts/flat/BentoBoxV1Flat.sol:BoringOwnable","label":"pendingOwner","offset":0,"slot":"1","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{"claimOwnership()":{"notice":"Needs to be called by `pendingOwner` to claim ownership."},"constructor":"`owner` defaults to msg.sender on construction.","transferOwnership(address,bool,bool)":{"notice":"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`."}},"version":1}},"BoringOwnableData":{"abi":[{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pendingOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"608060405234801561001057600080fd5b5060e68061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80638da5cb5b146037578063e30c3978146051575b600080fd5b603d6057565b60405160489190608f565b60405180910390f35b603d6073565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff9190911681526020019056fea2646970667358221220b3c2c61b53480b99b997f3fb3902abe5be6c2f46df433755e76e9ed68d4b9fe164736f6c634300060c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xE6 DUP1 PUSH2 0x1F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x32 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B EQ PUSH1 0x37 JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH1 0x51 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3D PUSH1 0x57 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x48 SWAP2 SWAP1 PUSH1 0x8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x3D PUSH1 0x73 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB3 0xC2 0xC6 SHL MSTORE8 0x48 SIGNEXTEND SWAP10 0xB9 SWAP8 RETURN 0xFB CODECOPY MUL 0xAB 0xE5 0xBE PUSH13 0x2F46DF433755E76E9ED68D4B9F 0xE1 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ","sourceMap":"13313:89:0:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"6080604052348015600f57600080fd5b506004361060325760003560e01c80638da5cb5b146037578063e30c3978146051575b600080fd5b603d6057565b60405160489190608f565b60405180910390f35b603d6073565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff9190911681526020019056fea2646970667358221220b3c2c61b53480b99b997f3fb3902abe5be6c2f46df433755e76e9ed68d4b9fe164736f6c634300060c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x32 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B EQ PUSH1 0x37 JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH1 0x51 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3D PUSH1 0x57 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x48 SWAP2 SWAP1 PUSH1 0x8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x3D PUSH1 0x73 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB3 0xC2 0xC6 SHL MSTORE8 0x48 SIGNEXTEND SWAP10 0xB9 SWAP8 RETURN 0xFB CODECOPY MUL 0xAB 0xE5 0xBE PUSH13 0x2F46DF433755E76E9ED68D4B9F 0xE1 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ","sourceMap":"13313:89:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13346:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;13372:27;;;:::i;13346:20::-;;;;;;:::o;13372:27::-;;;;;;:::o;125:222:-1:-;525:42;514:54;;;;76:37;;252:2;237:18;;223:124::o"},"gasEstimates":{"creation":{"codeDepositCost":"46000","executionCost":"99","totalCost":"46099"},"external":{"owner()":"1024","pendingOwner()":"1046"}},"methodIdentifiers":{"owner()":"8da5cb5b","pendingOwner()":"e30c3978"}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/BentoBoxV1Flat.sol\":\"BoringOwnableData\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/flat/BentoBoxV1Flat.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// The BentoBox\\n\\n//  \\u2584\\u2584\\u2584\\u2584\\u00b7 \\u2584\\u2584\\u2584 . \\u2590 \\u2584 \\u2584\\u2584\\u2584\\u2584\\u2584      \\u2584\\u2584\\u2584\\u2584\\u00b7       \\u2590\\u2584\\u2022 \\u2584\\n//  \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u2580\\u2584.\\u2580\\u00b7\\u2588\\u258c\\u2590\\u2588\\u2022\\u2588\\u2588  \\u25aa     \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u25aa      \\u2588\\u258c\\u2588\\u258c\\u25aa\\n//  \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584\\u2590\\u2580\\u2580\\u25aa\\u2584\\u2590\\u2588\\u2590\\u2590\\u258c \\u2590\\u2588.\\u25aa \\u2584\\u2588\\u2580\\u2584 \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584 \\u2584\\u2588\\u2580\\u2584  \\u00b7\\u2588\\u2588\\u00b7\\n//  \\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u2584\\u2584\\u258c\\u2588\\u2588\\u2590\\u2588\\u258c \\u2590\\u2588\\u258c\\u00b7\\u2590\\u2588\\u258c.\\u2590\\u258c\\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u258c.\\u2590\\u258c\\u25aa\\u2590\\u2588\\u00b7\\u2588\\u258c\\n//  \\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2580\\u2580 \\u2580\\u2580 \\u2588\\u25aa \\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u2022\\u2580\\u2580 \\u2580\\u2580\\n\\n// This contract stores funds, handles their transfers, supports flash loans and strategies.\\n\\n// Copyright (c) 2021 BoringCrypto - All rights reserved\\n// Twitter: @Boring_Crypto\\n\\n// Special thanks to Keno for all his hard work and support\\n\\n// Version 22-Mar-2021\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable not-rely-on-time\\n// solhint-disable no-inline-assembly\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function decimals() external view returns (uint256);\\n}\\n\\n// File contracts/interfaces/IFlashLoan.sol\\n// License-Identifier: MIT\\n\\ninterface IFlashBorrower {\\n    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param token The address of the token that is loaned.\\n    /// @param amount of the `token` that is loaned.\\n    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onFlashLoan(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IBatchFlashBorrower {\\n    /// @notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param tokens Array of addresses for ERC-20 tokens that is loaned.\\n    /// @param amounts A one-to-one map to `tokens` that is loaned.\\n    /// @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onBatchFlashLoan(\\n        address sender,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata fees,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File contracts/interfaces/IWETH.sol\\n// License-Identifier: MIT\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\\n// File contracts/interfaces/IStrategy.sol\\n// License-Identifier: MIT\\n\\ninterface IStrategy {\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\n    /// @param amount The amount of tokens to invest.\\n    function skim(uint256 amount) external;\\n\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\n    /// @dev The `actualAmount` should be very close to the amount.\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\n    /// @param amount The requested amount the caller wants to withdraw.\\n    /// @return actualAmount The real amount that is withdrawn.\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library using overflow-/underflow-safe math.\\nlibrary RebaseLibrary {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = elastic.mul(total.base) / total.elastic;\\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\\n                base = base.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = base.mul(total.elastic) / total.base;\\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\\n                elastic = elastic.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\\n    /// @return (Rebase) The new total.\\n    /// @return base in relationship to `elastic`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 base) {\\n        base = toBase(total, elastic, roundUp);\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return (total, base);\\n    }\\n\\n    /// @notice Sub `base` from `total` and update `total.elastic`.\\n    /// @return (Rebase) The new total.\\n    /// @return elastic in relationship to `base`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 elastic) {\\n        elastic = toElastic(total, base, roundUp);\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return (total, elastic);\\n    }\\n\\n    /// @notice Add `elastic` and `base` to `total`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Subtract `elastic` and `base` to `total`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Add `elastic` to `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.add(elastic.to128());\\n    }\\n\\n    /// @notice Subtract `elastic` from `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.sub(elastic.to128());\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() public {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IMasterContract {\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\n    /// Also kown as the constructor for cloned contracts.\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\n    /// @param data Can be abi encoded arguments or anything else.\\n    function init(bytes calldata data) external payable;\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringFactory.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BoringFactory {\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\n\\n    /// @notice Mapping from clone contracts to their masterContract.\\n    mapping(address => address) public masterContractOf;\\n\\n    /// @notice Deploys a given master Contract as a clone.\\n    /// Any ETH transferred with this call is forwarded to the new clone.\\n    /// Emits `LogDeploy`.\\n    /// @param masterContract The address of the contract to clone.\\n    /// @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\\n    /// @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\\n    /// @return cloneAddress Address of the created clone contract.\\n    function deploy(\\n        address masterContract,\\n        bytes calldata data,\\n        bool useCreate2\\n    ) public payable returns (address cloneAddress) {\\n        require(masterContract != address(0), \\\"BoringFactory: No masterContract\\\");\\n        bytes20 targetBytes = bytes20(masterContract); // Takes the first 20 bytes of the masterContract's address\\n\\n        if (useCreate2) {\\n            // each masterContract has different code already. So clones are distinguished by their data only.\\n            bytes32 salt = keccak256(data);\\n\\n            // Creates clone, more info here: https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create2(0, clone, 0x37, salt)\\n            }\\n        } else {\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create(0, clone, 0x37)\\n            }\\n        }\\n        masterContractOf[cloneAddress] = masterContract;\\n\\n        IMasterContract(cloneAddress).init{value: msg.value}(data);\\n\\n        emit LogDeploy(masterContract, data, cloneAddress);\\n    }\\n}\\n\\n// File contracts/MasterContractManager.sol\\n// License-Identifier: UNLICENSED\\n\\ncontract MasterContractManager is BoringOwnable, BoringFactory {\\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\\n    event LogRegisterProtocol(address indexed protocol);\\n\\n    /// @notice masterContract to user to approval state\\n    mapping(address => mapping(address => bool)) public masterContractApproved;\\n    /// @notice masterContract to whitelisted state for approval without signed message\\n    mapping(address => bool) public whitelistedMasterContracts;\\n    /// @notice user nonces for masterContract approvals\\n    mapping(address => uint256) public nonces;\\n\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n    // See https://eips.ethereum.org/EIPS/eip-191\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\n    bytes32 private constant APPROVAL_SIGNATURE_HASH =\\n        keccak256(\\\"SetMasterContractApproval(string warning,address user,address masterContract,bool approved,uint256 nonce)\\\");\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\n    }\\n\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, keccak256(\\\"BentoBox V1\\\"), chainId, address(this)));\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @notice Other contracts need to register with this master contract so that users can approve them for the BentoBox.\\n    function registerProtocol() public {\\n        masterContractOf[msg.sender] = msg.sender;\\n        emit LogRegisterProtocol(msg.sender);\\n    }\\n\\n    /// @notice Enables or disables a contract for approval without signed message.\\n    function whitelistMasterContract(address masterContract, bool approved) public onlyOwner {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: Cannot approve 0\\\");\\n\\n        // Effects\\n        whitelistedMasterContracts[masterContract] = approved;\\n        emit LogWhiteListMasterContract(masterContract, approved);\\n    }\\n\\n    /// @notice Approves or revokes a `masterContract` access to `user` funds.\\n    /// @param user The address of the user that approves or revokes access.\\n    /// @param masterContract The address who gains or loses access.\\n    /// @param approved If True approves access. If False revokes access.\\n    /// @param v Part of the signature. (See EIP-191)\\n    /// @param r Part of the signature. (See EIP-191)\\n    /// @param s Part of the signature. (See EIP-191)\\n    // F4 - Check behaviour for all function arguments when wrong or extreme\\n    // F4: Don't allow masterContract 0 to be approved. Unknown contracts will have a masterContract of 0.\\n    // F4: User can't be 0 for signed approvals because the recoveredAddress will be 0 if ecrecover fails\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: masterC not set\\\"); // Important for security\\n\\n        // If no signature is provided, the fallback is executed\\n        if (r == 0 && s == 0 && v == 0) {\\n            require(user == msg.sender, \\\"MasterCMgr: user not sender\\\");\\n            require(masterContractOf[user] == address(0), \\\"MasterCMgr: user is clone\\\");\\n            require(whitelistedMasterContracts[masterContract], \\\"MasterCMgr: not whitelisted\\\");\\n        } else {\\n            // Important for security - any address without masterContract has address(0) as masterContract\\n            // So approving address(0) would approve every address, leading to full loss of funds\\n            // Also, ecrecover returns address(0) on failure. So we check this:\\n            require(user != address(0), \\\"MasterCMgr: User cannot be 0\\\");\\n\\n            // C10 - Protect signatures against replay, use nonce and chainId (SWC-121)\\n            // C10: nonce + chainId are used to prevent replays\\n            // C11 - All signatures strictly EIP-712 (SWC-117 SWC-122)\\n            // C11: signature is EIP-712 compliant\\n            // C12 - abi.encodePacked can't contain variable length user input (SWC-133)\\n            // C12: abi.encodePacked has fixed length parameters\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA,\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            APPROVAL_SIGNATURE_HASH,\\n                            approved\\n                                ? keccak256(\\\"Give FULL access to funds in (and approved to) BentoBox?\\\")\\n                                : keccak256(\\\"Revoke access to BentoBox?\\\"),\\n                            user,\\n                            masterContract,\\n                            approved,\\n                            nonces[user]++\\n                        )\\n                    )\\n                )\\n            );\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress == user, \\\"MasterCMgr: Invalid Signature\\\");\\n        }\\n\\n        // Effects\\n        masterContractApproved[masterContract][user] = approved;\\n        emit LogSetMasterContractApproval(masterContract, user, approved);\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringBatchable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BaseBoringBatchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /// @notice Allows batched call to self (this contract).\\n    /// @param calls An array of inputs for each call.\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n    /// @return successes An array indicating the success of a call, mapped one-to-one to `calls`.\\n    /// @return results An array with the returned data of each function call, mapped one-to-one to `calls`.\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results) {\\n        successes = new bool[](calls.length);\\n        results = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\n            require(success || !revertOnFail, _getRevertMsg(result));\\n            successes[i] = success;\\n            results[i] = result;\\n        }\\n    }\\n}\\n\\ncontract BoringBatchable is BaseBoringBatchable {\\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\\n    /// Lookup `IERC20.permit`.\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\n    function permitToken(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        token.permit(from, to, amount, deadline, v, r, s);\\n    }\\n}\\n\\n// File contracts/BentoBox.sol\\n// License-Identifier: UNLICENSED\\n\\n/// @title BentoBox\\n/// @author BoringCrypto, Keno\\n/// @notice The BentoBox is a vault for tokens. The stored tokens can be flash loaned and used in strategies.\\n/// Yield from this will go to the token depositors.\\n/// Rebasing tokens ARE NOT supported and WILL cause loss of funds.\\n/// Any funds transfered directly onto the BentoBox will be lost, use the deposit function instead.\\ncontract BentoBoxV1 is MasterContractManager, BoringBatchable {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n    using BoringERC20 for IERC20;\\n    using RebaseLibrary for Rebase;\\n\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n\\n    event LogDeposit(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogWithdraw(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogTransfer(IERC20 indexed token, address indexed from, address indexed to, uint256 share);\\n\\n    event LogFlashLoan(address indexed borrower, IERC20 indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\\n\\n    event LogStrategyTargetPercentage(IERC20 indexed token, uint256 targetPercentage);\\n    event LogStrategyQueued(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategySet(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategyInvest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyDivest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyProfit(IERC20 indexed token, uint256 amount);\\n    event LogStrategyLoss(IERC20 indexed token, uint256 amount);\\n\\n    // *************** //\\n    // *** STRUCTS *** //\\n    // *************** //\\n\\n    struct StrategyData {\\n        uint64 strategyStartDate;\\n        uint64 targetPercentage;\\n        uint128 balance; // the balance of the strategy that BentoBox thinks is in there\\n    }\\n\\n    // ******************************** //\\n    // *** CONSTANTS AND IMMUTABLES *** //\\n    // ******************************** //\\n\\n    // V2 - Can they be private?\\n    // V2: Private to save gas, to verify it's correct, check the constructor arguments\\n    IERC20 private immutable wethToken;\\n\\n    IERC20 private constant USE_ETHEREUM = IERC20(0);\\n    uint256 private constant FLASH_LOAN_FEE = 50; // 0.05%\\n    uint256 private constant FLASH_LOAN_FEE_PRECISION = 1e5;\\n    uint256 private constant STRATEGY_DELAY = 0 weeks;\\n    uint256 private constant MAX_TARGET_PERCENTAGE = 95; // 95%\\n    uint256 private constant MINIMUM_SHARE_BALANCE = 1000; // To prevent the ratio going off\\n\\n    // ***************** //\\n    // *** VARIABLES *** //\\n    // ***************** //\\n\\n    // Balance per token per address/contract in shares\\n    mapping(IERC20 => mapping(address => uint256)) public balanceOf;\\n\\n    // Rebase from amount to share\\n    mapping(IERC20 => Rebase) public totals;\\n\\n    mapping(IERC20 => IStrategy) public strategy;\\n    mapping(IERC20 => IStrategy) public pendingStrategy;\\n    mapping(IERC20 => StrategyData) public strategyData;\\n\\n    // ******************* //\\n    // *** CONSTRUCTOR *** //\\n    // ******************* //\\n\\n    constructor(IERC20 wethToken_) public {\\n        wethToken = wethToken_;\\n    }\\n\\n    // Just for testing purposes!!! Don't deploy this contract on production!!\\n    function setTokenTotal(\\n        IERC20 token,\\n        uint128 elastic,\\n        uint128 base\\n    ) public {\\n        Rebase memory total;\\n        total.elastic = elastic;\\n        total.base = base;\\n        totals[token] = total;\\n    }\\n\\n    // ***************** //\\n    // *** MODIFIERS *** //\\n    // ***************** //\\n\\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\\n    /// If 'from' is msg.sender, it's allowed.\\n    /// If 'from' is the BentoBox itself, it's allowed. Any ETH, token balances (above the known balances) or BentoBox balances\\n    /// can be taken by anyone.\\n    /// This is to enable skimming, not just for deposits, but also for withdrawals or transfers, enabling better composability.\\n    /// If 'from' is a clone of a masterContract AND the 'from' address has approved that masterContract, it's allowed.\\n    modifier allowed(address from) {\\n        if (from != msg.sender && from != address(this)) {\\n            // From is sender or you are skimming\\n            address masterContract = masterContractOf[msg.sender];\\n            require(masterContract != address(0), \\\"BentoBox: no masterContract\\\");\\n            require(masterContractApproved[masterContract][from], \\\"BentoBox: Transfer not approved\\\");\\n        }\\n        _;\\n    }\\n\\n    // ************************** //\\n    // *** INTERNAL FUNCTIONS *** //\\n    // ************************** //\\n\\n    /// @dev Returns the total balance of `token` this contracts holds,\\n    /// plus the total amount this contract thinks the strategy holds.\\n    function _tokenBalanceOf(IERC20 token) internal view returns (uint256 amount) {\\n        amount = token.balanceOf(address(this)).add(strategyData[token].balance);\\n    }\\n\\n    // ************************ //\\n    // *** PUBLIC FUNCTIONS *** //\\n    // ************************ //\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share) {\\n        share = totals[token].toBase(amount, roundUp);\\n    }\\n\\n    /// @dev Helper function represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        IERC20 token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount) {\\n        amount = totals[token].toElastic(share, roundUp);\\n    }\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public payable allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n\\n        // If a new token gets added, the tokenSupply call checks that this is a deployed contract. Needed for security.\\n        require(total.elastic != 0 || token.totalSupply() > 0, \\\"BentoBox: No tokens\\\");\\n        if (share == 0) {\\n            // value of the share may be lower than the amount due to rounding, that's ok\\n            share = total.toBase(amount, false);\\n            // Any deposit should lead to at least the minimum share balance, otherwise it's ignored (no amount taken)\\n            if (total.base.add(share.to128()) < MINIMUM_SHARE_BALANCE) {\\n                return (0, 0);\\n            }\\n        } else {\\n            // amount may be lower than the value of share due to rounding, in that case, add 1 to amount (Always round up)\\n            amount = total.toElastic(share, true);\\n        }\\n\\n        // In case of skimming, check that only the skimmable amount is taken.\\n        // For ETH, the full balance is available, so no need to check.\\n        // During flashloans the _tokenBalanceOf is lower than 'reality', so skimming deposits will mostly fail during a flashloan.\\n        require(\\n            from != address(this) || token_ == USE_ETHEREUM || amount <= _tokenBalanceOf(token).sub(total.elastic),\\n            \\\"BentoBox: Skim too much\\\"\\n        );\\n\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n        total.base = total.base.add(share.to128());\\n        total.elastic = total.elastic.add(amount.to128());\\n        totals[token] = total;\\n\\n        // Interactions\\n        // During the first deposit, we check that this token is 'real'\\n        if (token_ == USE_ETHEREUM) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the WETH implementation is faulty or malicious, it will block adding ETH (but we know the WETH implementation)\\n            IWETH(address(wethToken)).deposit{value: amount}();\\n        } else if (from != address(this)) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the token implementation is faulty or malicious, it may block adding tokens. Good.\\n            token.safeTransferFrom(from, address(this), amount);\\n        }\\n        emit LogDeposit(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n        if (share == 0) {\\n            // value of the share paid could be lower than the amount paid due to rounding, in that case, add a share (Always round up)\\n            share = total.toBase(amount, true);\\n        } else {\\n            // amount may be lower than the value of share due to rounding, that's ok\\n            amount = total.toElastic(share, false);\\n        }\\n\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        total.elastic = total.elastic.sub(amount.to128());\\n        total.base = total.base.sub(share.to128());\\n        // There have to be at least 1000 shares left to prevent reseting the share/amount ratio (unless it's fully emptied)\\n        require(total.base >= MINIMUM_SHARE_BALANCE || total.base == 0, \\\"BentoBox: cannot empty\\\");\\n        totals[token] = total;\\n\\n        // Interactions\\n        if (token_ == USE_ETHEREUM) {\\n            // X2, X3: A revert or big gas usage in the WETH contract could block withdrawals, but WETH9 is fine.\\n            IWETH(address(wethToken)).withdraw(amount);\\n            // X2, X3: A revert or big gas usage could block, however, the to address is under control of the caller.\\n            (bool success, ) = to.call{value: amount}(\\\"\\\");\\n            require(success, \\\"BentoBox: ETH transfer failed\\\");\\n        } else {\\n            // X2, X3: A malicious token could block withdrawal of just THAT token.\\n            //         masterContracts may want to take care not to rely on withdraw always succeeding.\\n            token.safeTransfer(to, amount);\\n        }\\n        emit LogWithdraw(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    // Clones of master contracts can transfer from any account that has approved them\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transferMultiple for gas optimization\\n    function transfer(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) public allowed(from) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n\\n        emit LogTransfer(token, from, to, share);\\n    }\\n\\n    /// @notice Transfer shares from a user account to multiple other ones.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param tos The receivers of the tokens.\\n    /// @param shares The amount of `token` in shares for each receiver in `tos`.\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transfer for gas optimization\\n    function transferMultiple(\\n        IERC20 token,\\n        address from,\\n        address[] calldata tos,\\n        uint256[] calldata shares\\n    ) public allowed(from) {\\n        // Checks\\n        require(tos[0] != address(0), \\\"BentoBox: to[0] not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        uint256 totalAmount;\\n        uint256 len = tos.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address to = tos[i];\\n            balanceOf[token][to] = balanceOf[token][to].add(shares[i]);\\n            totalAmount = totalAmount.add(shares[i]);\\n            emit LogTransfer(token, from, to, shares[i]);\\n        }\\n        balanceOf[token][from] = balanceOf[token][from].sub(totalAmount);\\n    }\\n\\n    /// @notice Flashloan ability.\\n    /// @param borrower The address of the contract that implements and conforms to `IFlashBorrower` and handles the flashloan.\\n    /// @param receiver Address of the token receiver.\\n    /// @param token The address of the token to receive.\\n    /// @param amount of the tokens to receive.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function flashLoan(\\n        IFlashBorrower borrower,\\n        address receiver,\\n        IERC20 token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public {\\n        uint256 fee = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n        token.safeTransfer(receiver, amount);\\n\\n        borrower.onFlashLoan(msg.sender, token, amount, fee, data);\\n\\n        require(_tokenBalanceOf(token) >= totals[token].addElastic(fee.to128()), \\\"BentoBox: Wrong amount\\\");\\n        emit LogFlashLoan(address(borrower), token, amount, fee, receiver);\\n    }\\n\\n    /// @notice Support for batched flashloans. Useful to request multiple different `tokens` in a single transaction.\\n    /// @param borrower The address of the contract that implements and conforms to `IBatchFlashBorrower` and handles the flashloan.\\n    /// @param receivers An array of the token receivers. A one-to-one mapping with `tokens` and `amounts`.\\n    /// @param tokens The addresses of the tokens.\\n    /// @param amounts of the tokens for each receiver.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function batchFlashLoan(\\n        IBatchFlashBorrower borrower,\\n        address[] calldata receivers,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public {\\n        uint256[] memory fees = new uint256[](tokens.length);\\n\\n        uint256 len = tokens.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 amount = amounts[i];\\n            fees[i] = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n\\n            tokens[i].safeTransfer(receivers[i], amounts[i]);\\n        }\\n\\n        borrower.onBatchFlashLoan(msg.sender, tokens, amounts, fees, data);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            IERC20 token = tokens[i];\\n            require(_tokenBalanceOf(token) >= totals[token].addElastic(fees[i].to128()), \\\"BentoBox: Wrong amount\\\");\\n            emit LogFlashLoan(address(borrower), token, amounts[i], fees[i], receivers[i]);\\n        }\\n    }\\n\\n    /// @notice Sets the target percentage of the strategy for `token`.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param targetPercentage_ The new target in percent. Must be lesser or equal to `MAX_TARGET_PERCENTAGE`.\\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) public onlyOwner {\\n        // Checks\\n        require(targetPercentage_ <= MAX_TARGET_PERCENTAGE, \\\"StrategyManager: Target too high\\\");\\n\\n        // Effects\\n        strategyData[token].targetPercentage = targetPercentage_;\\n        emit LogStrategyTargetPercentage(token, targetPercentage_);\\n    }\\n\\n    /// @notice Sets the contract address of a new strategy that conforms to `IStrategy` for `token`.\\n    /// Must be called twice with the same arguments.\\n    /// A new strategy becomes pending first and can be activated once `STRATEGY_DELAY` is over.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param newStrategy The address of the contract that conforms to `IStrategy`.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // C4 - Use block.timestamp only for long intervals (SWC-116)\\n    // C4: block.timestamp is used for a period of 2 weeks, which is long enough\\n    function setStrategy(IERC20 token, IStrategy newStrategy) public onlyOwner {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy pending = pendingStrategy[token];\\n        if (data.strategyStartDate == 0 || pending != newStrategy) {\\n            pendingStrategy[token] = newStrategy;\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: Our sun will swallow the earth well before this overflows\\n            data.strategyStartDate = (block.timestamp + STRATEGY_DELAY).to64();\\n            emit LogStrategyQueued(token, newStrategy);\\n        } else {\\n            require(data.strategyStartDate != 0 && block.timestamp >= data.strategyStartDate, \\\"StrategyManager: Too early\\\");\\n            if (address(strategy[token]) != address(0)) {\\n                int256 balanceChange = strategy[token].exit(data.balance);\\n                // Effects\\n                if (balanceChange > 0) {\\n                    uint256 add = uint256(balanceChange);\\n                    totals[token].addElastic(add);\\n                    emit LogStrategyProfit(token, add);\\n                } else if (balanceChange < 0) {\\n                    uint256 sub = uint256(-balanceChange);\\n                    totals[token].subElastic(sub);\\n                    emit LogStrategyLoss(token, sub);\\n                }\\n\\n                emit LogStrategyDivest(token, data.balance);\\n            }\\n            strategy[token] = pending;\\n            data.strategyStartDate = 0;\\n            data.balance = 0;\\n            pendingStrategy[token] = IStrategy(0);\\n            emit LogStrategySet(token, newStrategy);\\n        }\\n        strategyData[token] = data;\\n    }\\n\\n    /// @notice The actual process of yield farming. Executes the strategy of `token`.\\n    /// Optionally does housekeeping if `balance` is true.\\n    /// `maxChangeAmount` is relevant for skimming or withdrawing if `balance` is true.\\n    /// @param token The address of the token for which a strategy is deployed.\\n    /// @param balance True if housekeeping should be done.\\n    /// @param maxChangeAmount The maximum amount for either pulling or pushing from/to the `IStrategy` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // F5: Not followed to prevent reentrancy issues with flashloans and BentoBox skims?\\n    function harvest(\\n        IERC20 token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) public {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy _strategy = strategy[token];\\n        int256 balanceChange = _strategy.harvest(data.balance, msg.sender);\\n        if (balanceChange == 0 && !balance) {\\n            return;\\n        }\\n\\n        uint256 totalElastic = totals[token].elastic;\\n\\n        if (balanceChange > 0) {\\n            uint256 add = uint256(balanceChange);\\n            totalElastic = totalElastic.add(add);\\n            totals[token].elastic = totalElastic.to128();\\n            emit LogStrategyProfit(token, add);\\n        } else if (balanceChange < 0) {\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: balanceChange could overflow if it's max negative int128.\\n            // But tokens with balances that large are not supported by the BentoBox.\\n            uint256 sub = uint256(-balanceChange);\\n            totalElastic = totalElastic.sub(sub);\\n            totals[token].elastic = totalElastic.to128();\\n            data.balance = data.balance.sub(sub.to128());\\n            emit LogStrategyLoss(token, sub);\\n        }\\n\\n        if (balance) {\\n            uint256 targetBalance = totalElastic.mul(data.targetPercentage) / 100;\\n            // if data.balance == targetBalance there is nothing to update\\n            if (data.balance < targetBalance) {\\n                uint256 amountOut = targetBalance.sub(data.balance);\\n                if (maxChangeAmount != 0 && amountOut > maxChangeAmount) {\\n                    amountOut = maxChangeAmount;\\n                }\\n                token.safeTransfer(address(_strategy), amountOut);\\n                data.balance = data.balance.add(amountOut.to128());\\n                _strategy.skim(amountOut);\\n                emit LogStrategyInvest(token, amountOut);\\n            } else if (data.balance > targetBalance) {\\n                uint256 amountIn = data.balance.sub(targetBalance.to128());\\n                if (maxChangeAmount != 0 && amountIn > maxChangeAmount) {\\n                    amountIn = maxChangeAmount;\\n                }\\n\\n                uint256 actualAmountIn = _strategy.withdraw(amountIn);\\n\\n                data.balance = data.balance.sub(actualAmountIn.to128());\\n                emit LogStrategyDivest(token, actualAmountIn);\\n            }\\n        }\\n\\n        strategyData[token] = data;\\n    }\\n\\n    // Contract should be able to receive ETH deposits to support deposit & skim\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd8343e88ade6bf85fd34d3556aedb2b14fe07ca40396ae2ef6064c9d8da0d4d3\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":905,"contract":"contracts/flat/BentoBoxV1Flat.sol:BoringOwnableData","label":"owner","offset":0,"slot":"0","type":"t_address"},{"astId":907,"contract":"contracts/flat/BentoBoxV1Flat.sol:BoringOwnableData","label":"pendingOwner","offset":0,"slot":"1","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}},"IBatchFlashBorrower":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"uint256[]","name":"fees","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onBatchFlashLoan","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"onBatchFlashLoan(address,address[],uint256[],uint256[],bytes)":{"params":{"amounts":"A one-to-one map to `tokens` that is loaned.","data":"Additional data that was passed to the flashloan function.","fees":"A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.","sender":"The address of the invoker of this flashloan.","tokens":"Array of addresses for ERC-20 tokens that is loaned."}}},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onBatchFlashLoan(address,address[],uint256[],uint256[],bytes)":"d9d17623"}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onBatchFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onBatchFlashLoan(address,address[],uint256[],uint256[],bytes)\":{\"params\":{\"amounts\":\"A one-to-one map to `tokens` that is loaned.\",\"data\":\"Additional data that was passed to the flashloan function.\",\"fees\":\"A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\",\"sender\":\"The address of the invoker of this flashloan.\",\"tokens\":\"Array of addresses for ERC-20 tokens that is loaned.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onBatchFlashLoan(address,address[],uint256[],uint256[],bytes)\":{\"notice\":\"The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/BentoBoxV1Flat.sol\":\"IBatchFlashBorrower\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/flat/BentoBoxV1Flat.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// The BentoBox\\n\\n//  \\u2584\\u2584\\u2584\\u2584\\u00b7 \\u2584\\u2584\\u2584 . \\u2590 \\u2584 \\u2584\\u2584\\u2584\\u2584\\u2584      \\u2584\\u2584\\u2584\\u2584\\u00b7       \\u2590\\u2584\\u2022 \\u2584\\n//  \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u2580\\u2584.\\u2580\\u00b7\\u2588\\u258c\\u2590\\u2588\\u2022\\u2588\\u2588  \\u25aa     \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u25aa      \\u2588\\u258c\\u2588\\u258c\\u25aa\\n//  \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584\\u2590\\u2580\\u2580\\u25aa\\u2584\\u2590\\u2588\\u2590\\u2590\\u258c \\u2590\\u2588.\\u25aa \\u2584\\u2588\\u2580\\u2584 \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584 \\u2584\\u2588\\u2580\\u2584  \\u00b7\\u2588\\u2588\\u00b7\\n//  \\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u2584\\u2584\\u258c\\u2588\\u2588\\u2590\\u2588\\u258c \\u2590\\u2588\\u258c\\u00b7\\u2590\\u2588\\u258c.\\u2590\\u258c\\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u258c.\\u2590\\u258c\\u25aa\\u2590\\u2588\\u00b7\\u2588\\u258c\\n//  \\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2580\\u2580 \\u2580\\u2580 \\u2588\\u25aa \\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u2022\\u2580\\u2580 \\u2580\\u2580\\n\\n// This contract stores funds, handles their transfers, supports flash loans and strategies.\\n\\n// Copyright (c) 2021 BoringCrypto - All rights reserved\\n// Twitter: @Boring_Crypto\\n\\n// Special thanks to Keno for all his hard work and support\\n\\n// Version 22-Mar-2021\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable not-rely-on-time\\n// solhint-disable no-inline-assembly\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function decimals() external view returns (uint256);\\n}\\n\\n// File contracts/interfaces/IFlashLoan.sol\\n// License-Identifier: MIT\\n\\ninterface IFlashBorrower {\\n    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param token The address of the token that is loaned.\\n    /// @param amount of the `token` that is loaned.\\n    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onFlashLoan(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IBatchFlashBorrower {\\n    /// @notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param tokens Array of addresses for ERC-20 tokens that is loaned.\\n    /// @param amounts A one-to-one map to `tokens` that is loaned.\\n    /// @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onBatchFlashLoan(\\n        address sender,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata fees,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File contracts/interfaces/IWETH.sol\\n// License-Identifier: MIT\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\\n// File contracts/interfaces/IStrategy.sol\\n// License-Identifier: MIT\\n\\ninterface IStrategy {\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\n    /// @param amount The amount of tokens to invest.\\n    function skim(uint256 amount) external;\\n\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\n    /// @dev The `actualAmount` should be very close to the amount.\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\n    /// @param amount The requested amount the caller wants to withdraw.\\n    /// @return actualAmount The real amount that is withdrawn.\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library using overflow-/underflow-safe math.\\nlibrary RebaseLibrary {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = elastic.mul(total.base) / total.elastic;\\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\\n                base = base.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = base.mul(total.elastic) / total.base;\\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\\n                elastic = elastic.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\\n    /// @return (Rebase) The new total.\\n    /// @return base in relationship to `elastic`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 base) {\\n        base = toBase(total, elastic, roundUp);\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return (total, base);\\n    }\\n\\n    /// @notice Sub `base` from `total` and update `total.elastic`.\\n    /// @return (Rebase) The new total.\\n    /// @return elastic in relationship to `base`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 elastic) {\\n        elastic = toElastic(total, base, roundUp);\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return (total, elastic);\\n    }\\n\\n    /// @notice Add `elastic` and `base` to `total`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Subtract `elastic` and `base` to `total`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Add `elastic` to `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.add(elastic.to128());\\n    }\\n\\n    /// @notice Subtract `elastic` from `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.sub(elastic.to128());\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() public {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IMasterContract {\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\n    /// Also kown as the constructor for cloned contracts.\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\n    /// @param data Can be abi encoded arguments or anything else.\\n    function init(bytes calldata data) external payable;\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringFactory.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BoringFactory {\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\n\\n    /// @notice Mapping from clone contracts to their masterContract.\\n    mapping(address => address) public masterContractOf;\\n\\n    /// @notice Deploys a given master Contract as a clone.\\n    /// Any ETH transferred with this call is forwarded to the new clone.\\n    /// Emits `LogDeploy`.\\n    /// @param masterContract The address of the contract to clone.\\n    /// @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\\n    /// @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\\n    /// @return cloneAddress Address of the created clone contract.\\n    function deploy(\\n        address masterContract,\\n        bytes calldata data,\\n        bool useCreate2\\n    ) public payable returns (address cloneAddress) {\\n        require(masterContract != address(0), \\\"BoringFactory: No masterContract\\\");\\n        bytes20 targetBytes = bytes20(masterContract); // Takes the first 20 bytes of the masterContract's address\\n\\n        if (useCreate2) {\\n            // each masterContract has different code already. So clones are distinguished by their data only.\\n            bytes32 salt = keccak256(data);\\n\\n            // Creates clone, more info here: https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create2(0, clone, 0x37, salt)\\n            }\\n        } else {\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create(0, clone, 0x37)\\n            }\\n        }\\n        masterContractOf[cloneAddress] = masterContract;\\n\\n        IMasterContract(cloneAddress).init{value: msg.value}(data);\\n\\n        emit LogDeploy(masterContract, data, cloneAddress);\\n    }\\n}\\n\\n// File contracts/MasterContractManager.sol\\n// License-Identifier: UNLICENSED\\n\\ncontract MasterContractManager is BoringOwnable, BoringFactory {\\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\\n    event LogRegisterProtocol(address indexed protocol);\\n\\n    /// @notice masterContract to user to approval state\\n    mapping(address => mapping(address => bool)) public masterContractApproved;\\n    /// @notice masterContract to whitelisted state for approval without signed message\\n    mapping(address => bool) public whitelistedMasterContracts;\\n    /// @notice user nonces for masterContract approvals\\n    mapping(address => uint256) public nonces;\\n\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n    // See https://eips.ethereum.org/EIPS/eip-191\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\n    bytes32 private constant APPROVAL_SIGNATURE_HASH =\\n        keccak256(\\\"SetMasterContractApproval(string warning,address user,address masterContract,bool approved,uint256 nonce)\\\");\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\n    }\\n\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, keccak256(\\\"BentoBox V1\\\"), chainId, address(this)));\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @notice Other contracts need to register with this master contract so that users can approve them for the BentoBox.\\n    function registerProtocol() public {\\n        masterContractOf[msg.sender] = msg.sender;\\n        emit LogRegisterProtocol(msg.sender);\\n    }\\n\\n    /// @notice Enables or disables a contract for approval without signed message.\\n    function whitelistMasterContract(address masterContract, bool approved) public onlyOwner {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: Cannot approve 0\\\");\\n\\n        // Effects\\n        whitelistedMasterContracts[masterContract] = approved;\\n        emit LogWhiteListMasterContract(masterContract, approved);\\n    }\\n\\n    /// @notice Approves or revokes a `masterContract` access to `user` funds.\\n    /// @param user The address of the user that approves or revokes access.\\n    /// @param masterContract The address who gains or loses access.\\n    /// @param approved If True approves access. If False revokes access.\\n    /// @param v Part of the signature. (See EIP-191)\\n    /// @param r Part of the signature. (See EIP-191)\\n    /// @param s Part of the signature. (See EIP-191)\\n    // F4 - Check behaviour for all function arguments when wrong or extreme\\n    // F4: Don't allow masterContract 0 to be approved. Unknown contracts will have a masterContract of 0.\\n    // F4: User can't be 0 for signed approvals because the recoveredAddress will be 0 if ecrecover fails\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: masterC not set\\\"); // Important for security\\n\\n        // If no signature is provided, the fallback is executed\\n        if (r == 0 && s == 0 && v == 0) {\\n            require(user == msg.sender, \\\"MasterCMgr: user not sender\\\");\\n            require(masterContractOf[user] == address(0), \\\"MasterCMgr: user is clone\\\");\\n            require(whitelistedMasterContracts[masterContract], \\\"MasterCMgr: not whitelisted\\\");\\n        } else {\\n            // Important for security - any address without masterContract has address(0) as masterContract\\n            // So approving address(0) would approve every address, leading to full loss of funds\\n            // Also, ecrecover returns address(0) on failure. So we check this:\\n            require(user != address(0), \\\"MasterCMgr: User cannot be 0\\\");\\n\\n            // C10 - Protect signatures against replay, use nonce and chainId (SWC-121)\\n            // C10: nonce + chainId are used to prevent replays\\n            // C11 - All signatures strictly EIP-712 (SWC-117 SWC-122)\\n            // C11: signature is EIP-712 compliant\\n            // C12 - abi.encodePacked can't contain variable length user input (SWC-133)\\n            // C12: abi.encodePacked has fixed length parameters\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA,\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            APPROVAL_SIGNATURE_HASH,\\n                            approved\\n                                ? keccak256(\\\"Give FULL access to funds in (and approved to) BentoBox?\\\")\\n                                : keccak256(\\\"Revoke access to BentoBox?\\\"),\\n                            user,\\n                            masterContract,\\n                            approved,\\n                            nonces[user]++\\n                        )\\n                    )\\n                )\\n            );\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress == user, \\\"MasterCMgr: Invalid Signature\\\");\\n        }\\n\\n        // Effects\\n        masterContractApproved[masterContract][user] = approved;\\n        emit LogSetMasterContractApproval(masterContract, user, approved);\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringBatchable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BaseBoringBatchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /// @notice Allows batched call to self (this contract).\\n    /// @param calls An array of inputs for each call.\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n    /// @return successes An array indicating the success of a call, mapped one-to-one to `calls`.\\n    /// @return results An array with the returned data of each function call, mapped one-to-one to `calls`.\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results) {\\n        successes = new bool[](calls.length);\\n        results = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\n            require(success || !revertOnFail, _getRevertMsg(result));\\n            successes[i] = success;\\n            results[i] = result;\\n        }\\n    }\\n}\\n\\ncontract BoringBatchable is BaseBoringBatchable {\\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\\n    /// Lookup `IERC20.permit`.\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\n    function permitToken(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        token.permit(from, to, amount, deadline, v, r, s);\\n    }\\n}\\n\\n// File contracts/BentoBox.sol\\n// License-Identifier: UNLICENSED\\n\\n/// @title BentoBox\\n/// @author BoringCrypto, Keno\\n/// @notice The BentoBox is a vault for tokens. The stored tokens can be flash loaned and used in strategies.\\n/// Yield from this will go to the token depositors.\\n/// Rebasing tokens ARE NOT supported and WILL cause loss of funds.\\n/// Any funds transfered directly onto the BentoBox will be lost, use the deposit function instead.\\ncontract BentoBoxV1 is MasterContractManager, BoringBatchable {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n    using BoringERC20 for IERC20;\\n    using RebaseLibrary for Rebase;\\n\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n\\n    event LogDeposit(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogWithdraw(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogTransfer(IERC20 indexed token, address indexed from, address indexed to, uint256 share);\\n\\n    event LogFlashLoan(address indexed borrower, IERC20 indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\\n\\n    event LogStrategyTargetPercentage(IERC20 indexed token, uint256 targetPercentage);\\n    event LogStrategyQueued(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategySet(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategyInvest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyDivest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyProfit(IERC20 indexed token, uint256 amount);\\n    event LogStrategyLoss(IERC20 indexed token, uint256 amount);\\n\\n    // *************** //\\n    // *** STRUCTS *** //\\n    // *************** //\\n\\n    struct StrategyData {\\n        uint64 strategyStartDate;\\n        uint64 targetPercentage;\\n        uint128 balance; // the balance of the strategy that BentoBox thinks is in there\\n    }\\n\\n    // ******************************** //\\n    // *** CONSTANTS AND IMMUTABLES *** //\\n    // ******************************** //\\n\\n    // V2 - Can they be private?\\n    // V2: Private to save gas, to verify it's correct, check the constructor arguments\\n    IERC20 private immutable wethToken;\\n\\n    IERC20 private constant USE_ETHEREUM = IERC20(0);\\n    uint256 private constant FLASH_LOAN_FEE = 50; // 0.05%\\n    uint256 private constant FLASH_LOAN_FEE_PRECISION = 1e5;\\n    uint256 private constant STRATEGY_DELAY = 0 weeks;\\n    uint256 private constant MAX_TARGET_PERCENTAGE = 95; // 95%\\n    uint256 private constant MINIMUM_SHARE_BALANCE = 1000; // To prevent the ratio going off\\n\\n    // ***************** //\\n    // *** VARIABLES *** //\\n    // ***************** //\\n\\n    // Balance per token per address/contract in shares\\n    mapping(IERC20 => mapping(address => uint256)) public balanceOf;\\n\\n    // Rebase from amount to share\\n    mapping(IERC20 => Rebase) public totals;\\n\\n    mapping(IERC20 => IStrategy) public strategy;\\n    mapping(IERC20 => IStrategy) public pendingStrategy;\\n    mapping(IERC20 => StrategyData) public strategyData;\\n\\n    // ******************* //\\n    // *** CONSTRUCTOR *** //\\n    // ******************* //\\n\\n    constructor(IERC20 wethToken_) public {\\n        wethToken = wethToken_;\\n    }\\n\\n    // Just for testing purposes!!! Don't deploy this contract on production!!\\n    function setTokenTotal(\\n        IERC20 token,\\n        uint128 elastic,\\n        uint128 base\\n    ) public {\\n        Rebase memory total;\\n        total.elastic = elastic;\\n        total.base = base;\\n        totals[token] = total;\\n    }\\n\\n    // ***************** //\\n    // *** MODIFIERS *** //\\n    // ***************** //\\n\\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\\n    /// If 'from' is msg.sender, it's allowed.\\n    /// If 'from' is the BentoBox itself, it's allowed. Any ETH, token balances (above the known balances) or BentoBox balances\\n    /// can be taken by anyone.\\n    /// This is to enable skimming, not just for deposits, but also for withdrawals or transfers, enabling better composability.\\n    /// If 'from' is a clone of a masterContract AND the 'from' address has approved that masterContract, it's allowed.\\n    modifier allowed(address from) {\\n        if (from != msg.sender && from != address(this)) {\\n            // From is sender or you are skimming\\n            address masterContract = masterContractOf[msg.sender];\\n            require(masterContract != address(0), \\\"BentoBox: no masterContract\\\");\\n            require(masterContractApproved[masterContract][from], \\\"BentoBox: Transfer not approved\\\");\\n        }\\n        _;\\n    }\\n\\n    // ************************** //\\n    // *** INTERNAL FUNCTIONS *** //\\n    // ************************** //\\n\\n    /// @dev Returns the total balance of `token` this contracts holds,\\n    /// plus the total amount this contract thinks the strategy holds.\\n    function _tokenBalanceOf(IERC20 token) internal view returns (uint256 amount) {\\n        amount = token.balanceOf(address(this)).add(strategyData[token].balance);\\n    }\\n\\n    // ************************ //\\n    // *** PUBLIC FUNCTIONS *** //\\n    // ************************ //\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share) {\\n        share = totals[token].toBase(amount, roundUp);\\n    }\\n\\n    /// @dev Helper function represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        IERC20 token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount) {\\n        amount = totals[token].toElastic(share, roundUp);\\n    }\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public payable allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n\\n        // If a new token gets added, the tokenSupply call checks that this is a deployed contract. Needed for security.\\n        require(total.elastic != 0 || token.totalSupply() > 0, \\\"BentoBox: No tokens\\\");\\n        if (share == 0) {\\n            // value of the share may be lower than the amount due to rounding, that's ok\\n            share = total.toBase(amount, false);\\n            // Any deposit should lead to at least the minimum share balance, otherwise it's ignored (no amount taken)\\n            if (total.base.add(share.to128()) < MINIMUM_SHARE_BALANCE) {\\n                return (0, 0);\\n            }\\n        } else {\\n            // amount may be lower than the value of share due to rounding, in that case, add 1 to amount (Always round up)\\n            amount = total.toElastic(share, true);\\n        }\\n\\n        // In case of skimming, check that only the skimmable amount is taken.\\n        // For ETH, the full balance is available, so no need to check.\\n        // During flashloans the _tokenBalanceOf is lower than 'reality', so skimming deposits will mostly fail during a flashloan.\\n        require(\\n            from != address(this) || token_ == USE_ETHEREUM || amount <= _tokenBalanceOf(token).sub(total.elastic),\\n            \\\"BentoBox: Skim too much\\\"\\n        );\\n\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n        total.base = total.base.add(share.to128());\\n        total.elastic = total.elastic.add(amount.to128());\\n        totals[token] = total;\\n\\n        // Interactions\\n        // During the first deposit, we check that this token is 'real'\\n        if (token_ == USE_ETHEREUM) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the WETH implementation is faulty or malicious, it will block adding ETH (but we know the WETH implementation)\\n            IWETH(address(wethToken)).deposit{value: amount}();\\n        } else if (from != address(this)) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the token implementation is faulty or malicious, it may block adding tokens. Good.\\n            token.safeTransferFrom(from, address(this), amount);\\n        }\\n        emit LogDeposit(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n        if (share == 0) {\\n            // value of the share paid could be lower than the amount paid due to rounding, in that case, add a share (Always round up)\\n            share = total.toBase(amount, true);\\n        } else {\\n            // amount may be lower than the value of share due to rounding, that's ok\\n            amount = total.toElastic(share, false);\\n        }\\n\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        total.elastic = total.elastic.sub(amount.to128());\\n        total.base = total.base.sub(share.to128());\\n        // There have to be at least 1000 shares left to prevent reseting the share/amount ratio (unless it's fully emptied)\\n        require(total.base >= MINIMUM_SHARE_BALANCE || total.base == 0, \\\"BentoBox: cannot empty\\\");\\n        totals[token] = total;\\n\\n        // Interactions\\n        if (token_ == USE_ETHEREUM) {\\n            // X2, X3: A revert or big gas usage in the WETH contract could block withdrawals, but WETH9 is fine.\\n            IWETH(address(wethToken)).withdraw(amount);\\n            // X2, X3: A revert or big gas usage could block, however, the to address is under control of the caller.\\n            (bool success, ) = to.call{value: amount}(\\\"\\\");\\n            require(success, \\\"BentoBox: ETH transfer failed\\\");\\n        } else {\\n            // X2, X3: A malicious token could block withdrawal of just THAT token.\\n            //         masterContracts may want to take care not to rely on withdraw always succeeding.\\n            token.safeTransfer(to, amount);\\n        }\\n        emit LogWithdraw(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    // Clones of master contracts can transfer from any account that has approved them\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transferMultiple for gas optimization\\n    function transfer(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) public allowed(from) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n\\n        emit LogTransfer(token, from, to, share);\\n    }\\n\\n    /// @notice Transfer shares from a user account to multiple other ones.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param tos The receivers of the tokens.\\n    /// @param shares The amount of `token` in shares for each receiver in `tos`.\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transfer for gas optimization\\n    function transferMultiple(\\n        IERC20 token,\\n        address from,\\n        address[] calldata tos,\\n        uint256[] calldata shares\\n    ) public allowed(from) {\\n        // Checks\\n        require(tos[0] != address(0), \\\"BentoBox: to[0] not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        uint256 totalAmount;\\n        uint256 len = tos.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address to = tos[i];\\n            balanceOf[token][to] = balanceOf[token][to].add(shares[i]);\\n            totalAmount = totalAmount.add(shares[i]);\\n            emit LogTransfer(token, from, to, shares[i]);\\n        }\\n        balanceOf[token][from] = balanceOf[token][from].sub(totalAmount);\\n    }\\n\\n    /// @notice Flashloan ability.\\n    /// @param borrower The address of the contract that implements and conforms to `IFlashBorrower` and handles the flashloan.\\n    /// @param receiver Address of the token receiver.\\n    /// @param token The address of the token to receive.\\n    /// @param amount of the tokens to receive.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function flashLoan(\\n        IFlashBorrower borrower,\\n        address receiver,\\n        IERC20 token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public {\\n        uint256 fee = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n        token.safeTransfer(receiver, amount);\\n\\n        borrower.onFlashLoan(msg.sender, token, amount, fee, data);\\n\\n        require(_tokenBalanceOf(token) >= totals[token].addElastic(fee.to128()), \\\"BentoBox: Wrong amount\\\");\\n        emit LogFlashLoan(address(borrower), token, amount, fee, receiver);\\n    }\\n\\n    /// @notice Support for batched flashloans. Useful to request multiple different `tokens` in a single transaction.\\n    /// @param borrower The address of the contract that implements and conforms to `IBatchFlashBorrower` and handles the flashloan.\\n    /// @param receivers An array of the token receivers. A one-to-one mapping with `tokens` and `amounts`.\\n    /// @param tokens The addresses of the tokens.\\n    /// @param amounts of the tokens for each receiver.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function batchFlashLoan(\\n        IBatchFlashBorrower borrower,\\n        address[] calldata receivers,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public {\\n        uint256[] memory fees = new uint256[](tokens.length);\\n\\n        uint256 len = tokens.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 amount = amounts[i];\\n            fees[i] = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n\\n            tokens[i].safeTransfer(receivers[i], amounts[i]);\\n        }\\n\\n        borrower.onBatchFlashLoan(msg.sender, tokens, amounts, fees, data);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            IERC20 token = tokens[i];\\n            require(_tokenBalanceOf(token) >= totals[token].addElastic(fees[i].to128()), \\\"BentoBox: Wrong amount\\\");\\n            emit LogFlashLoan(address(borrower), token, amounts[i], fees[i], receivers[i]);\\n        }\\n    }\\n\\n    /// @notice Sets the target percentage of the strategy for `token`.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param targetPercentage_ The new target in percent. Must be lesser or equal to `MAX_TARGET_PERCENTAGE`.\\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) public onlyOwner {\\n        // Checks\\n        require(targetPercentage_ <= MAX_TARGET_PERCENTAGE, \\\"StrategyManager: Target too high\\\");\\n\\n        // Effects\\n        strategyData[token].targetPercentage = targetPercentage_;\\n        emit LogStrategyTargetPercentage(token, targetPercentage_);\\n    }\\n\\n    /// @notice Sets the contract address of a new strategy that conforms to `IStrategy` for `token`.\\n    /// Must be called twice with the same arguments.\\n    /// A new strategy becomes pending first and can be activated once `STRATEGY_DELAY` is over.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param newStrategy The address of the contract that conforms to `IStrategy`.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // C4 - Use block.timestamp only for long intervals (SWC-116)\\n    // C4: block.timestamp is used for a period of 2 weeks, which is long enough\\n    function setStrategy(IERC20 token, IStrategy newStrategy) public onlyOwner {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy pending = pendingStrategy[token];\\n        if (data.strategyStartDate == 0 || pending != newStrategy) {\\n            pendingStrategy[token] = newStrategy;\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: Our sun will swallow the earth well before this overflows\\n            data.strategyStartDate = (block.timestamp + STRATEGY_DELAY).to64();\\n            emit LogStrategyQueued(token, newStrategy);\\n        } else {\\n            require(data.strategyStartDate != 0 && block.timestamp >= data.strategyStartDate, \\\"StrategyManager: Too early\\\");\\n            if (address(strategy[token]) != address(0)) {\\n                int256 balanceChange = strategy[token].exit(data.balance);\\n                // Effects\\n                if (balanceChange > 0) {\\n                    uint256 add = uint256(balanceChange);\\n                    totals[token].addElastic(add);\\n                    emit LogStrategyProfit(token, add);\\n                } else if (balanceChange < 0) {\\n                    uint256 sub = uint256(-balanceChange);\\n                    totals[token].subElastic(sub);\\n                    emit LogStrategyLoss(token, sub);\\n                }\\n\\n                emit LogStrategyDivest(token, data.balance);\\n            }\\n            strategy[token] = pending;\\n            data.strategyStartDate = 0;\\n            data.balance = 0;\\n            pendingStrategy[token] = IStrategy(0);\\n            emit LogStrategySet(token, newStrategy);\\n        }\\n        strategyData[token] = data;\\n    }\\n\\n    /// @notice The actual process of yield farming. Executes the strategy of `token`.\\n    /// Optionally does housekeeping if `balance` is true.\\n    /// `maxChangeAmount` is relevant for skimming or withdrawing if `balance` is true.\\n    /// @param token The address of the token for which a strategy is deployed.\\n    /// @param balance True if housekeeping should be done.\\n    /// @param maxChangeAmount The maximum amount for either pulling or pushing from/to the `IStrategy` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // F5: Not followed to prevent reentrancy issues with flashloans and BentoBox skims?\\n    function harvest(\\n        IERC20 token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) public {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy _strategy = strategy[token];\\n        int256 balanceChange = _strategy.harvest(data.balance, msg.sender);\\n        if (balanceChange == 0 && !balance) {\\n            return;\\n        }\\n\\n        uint256 totalElastic = totals[token].elastic;\\n\\n        if (balanceChange > 0) {\\n            uint256 add = uint256(balanceChange);\\n            totalElastic = totalElastic.add(add);\\n            totals[token].elastic = totalElastic.to128();\\n            emit LogStrategyProfit(token, add);\\n        } else if (balanceChange < 0) {\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: balanceChange could overflow if it's max negative int128.\\n            // But tokens with balances that large are not supported by the BentoBox.\\n            uint256 sub = uint256(-balanceChange);\\n            totalElastic = totalElastic.sub(sub);\\n            totals[token].elastic = totalElastic.to128();\\n            data.balance = data.balance.sub(sub.to128());\\n            emit LogStrategyLoss(token, sub);\\n        }\\n\\n        if (balance) {\\n            uint256 targetBalance = totalElastic.mul(data.targetPercentage) / 100;\\n            // if data.balance == targetBalance there is nothing to update\\n            if (data.balance < targetBalance) {\\n                uint256 amountOut = targetBalance.sub(data.balance);\\n                if (maxChangeAmount != 0 && amountOut > maxChangeAmount) {\\n                    amountOut = maxChangeAmount;\\n                }\\n                token.safeTransfer(address(_strategy), amountOut);\\n                data.balance = data.balance.add(amountOut.to128());\\n                _strategy.skim(amountOut);\\n                emit LogStrategyInvest(token, amountOut);\\n            } else if (data.balance > targetBalance) {\\n                uint256 amountIn = data.balance.sub(targetBalance.to128());\\n                if (maxChangeAmount != 0 && amountIn > maxChangeAmount) {\\n                    amountIn = maxChangeAmount;\\n                }\\n\\n                uint256 actualAmountIn = _strategy.withdraw(amountIn);\\n\\n                data.balance = data.balance.sub(actualAmountIn.to128());\\n                emit LogStrategyDivest(token, actualAmountIn);\\n            }\\n        }\\n\\n        strategyData[token] = data;\\n    }\\n\\n    // Contract should be able to receive ETH deposits to support deposit & skim\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd8343e88ade6bf85fd34d3556aedb2b14fe07ca40396ae2ef6064c9d8da0d4d3\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"onBatchFlashLoan(address,address[],uint256[],uint256[],bytes)":{"notice":"The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns."}},"version":1}},"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","totalSupply()":"18160ddd"}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"EIP 2612\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/BentoBoxV1Flat.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/flat/BentoBoxV1Flat.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// The BentoBox\\n\\n//  \\u2584\\u2584\\u2584\\u2584\\u00b7 \\u2584\\u2584\\u2584 . \\u2590 \\u2584 \\u2584\\u2584\\u2584\\u2584\\u2584      \\u2584\\u2584\\u2584\\u2584\\u00b7       \\u2590\\u2584\\u2022 \\u2584\\n//  \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u2580\\u2584.\\u2580\\u00b7\\u2588\\u258c\\u2590\\u2588\\u2022\\u2588\\u2588  \\u25aa     \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u25aa      \\u2588\\u258c\\u2588\\u258c\\u25aa\\n//  \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584\\u2590\\u2580\\u2580\\u25aa\\u2584\\u2590\\u2588\\u2590\\u2590\\u258c \\u2590\\u2588.\\u25aa \\u2584\\u2588\\u2580\\u2584 \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584 \\u2584\\u2588\\u2580\\u2584  \\u00b7\\u2588\\u2588\\u00b7\\n//  \\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u2584\\u2584\\u258c\\u2588\\u2588\\u2590\\u2588\\u258c \\u2590\\u2588\\u258c\\u00b7\\u2590\\u2588\\u258c.\\u2590\\u258c\\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u258c.\\u2590\\u258c\\u25aa\\u2590\\u2588\\u00b7\\u2588\\u258c\\n//  \\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2580\\u2580 \\u2580\\u2580 \\u2588\\u25aa \\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u2022\\u2580\\u2580 \\u2580\\u2580\\n\\n// This contract stores funds, handles their transfers, supports flash loans and strategies.\\n\\n// Copyright (c) 2021 BoringCrypto - All rights reserved\\n// Twitter: @Boring_Crypto\\n\\n// Special thanks to Keno for all his hard work and support\\n\\n// Version 22-Mar-2021\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable not-rely-on-time\\n// solhint-disable no-inline-assembly\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function decimals() external view returns (uint256);\\n}\\n\\n// File contracts/interfaces/IFlashLoan.sol\\n// License-Identifier: MIT\\n\\ninterface IFlashBorrower {\\n    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param token The address of the token that is loaned.\\n    /// @param amount of the `token` that is loaned.\\n    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onFlashLoan(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IBatchFlashBorrower {\\n    /// @notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param tokens Array of addresses for ERC-20 tokens that is loaned.\\n    /// @param amounts A one-to-one map to `tokens` that is loaned.\\n    /// @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onBatchFlashLoan(\\n        address sender,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata fees,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File contracts/interfaces/IWETH.sol\\n// License-Identifier: MIT\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\\n// File contracts/interfaces/IStrategy.sol\\n// License-Identifier: MIT\\n\\ninterface IStrategy {\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\n    /// @param amount The amount of tokens to invest.\\n    function skim(uint256 amount) external;\\n\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\n    /// @dev The `actualAmount` should be very close to the amount.\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\n    /// @param amount The requested amount the caller wants to withdraw.\\n    /// @return actualAmount The real amount that is withdrawn.\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library using overflow-/underflow-safe math.\\nlibrary RebaseLibrary {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = elastic.mul(total.base) / total.elastic;\\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\\n                base = base.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = base.mul(total.elastic) / total.base;\\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\\n                elastic = elastic.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\\n    /// @return (Rebase) The new total.\\n    /// @return base in relationship to `elastic`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 base) {\\n        base = toBase(total, elastic, roundUp);\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return (total, base);\\n    }\\n\\n    /// @notice Sub `base` from `total` and update `total.elastic`.\\n    /// @return (Rebase) The new total.\\n    /// @return elastic in relationship to `base`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 elastic) {\\n        elastic = toElastic(total, base, roundUp);\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return (total, elastic);\\n    }\\n\\n    /// @notice Add `elastic` and `base` to `total`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Subtract `elastic` and `base` to `total`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Add `elastic` to `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.add(elastic.to128());\\n    }\\n\\n    /// @notice Subtract `elastic` from `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.sub(elastic.to128());\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() public {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IMasterContract {\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\n    /// Also kown as the constructor for cloned contracts.\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\n    /// @param data Can be abi encoded arguments or anything else.\\n    function init(bytes calldata data) external payable;\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringFactory.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BoringFactory {\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\n\\n    /// @notice Mapping from clone contracts to their masterContract.\\n    mapping(address => address) public masterContractOf;\\n\\n    /// @notice Deploys a given master Contract as a clone.\\n    /// Any ETH transferred with this call is forwarded to the new clone.\\n    /// Emits `LogDeploy`.\\n    /// @param masterContract The address of the contract to clone.\\n    /// @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\\n    /// @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\\n    /// @return cloneAddress Address of the created clone contract.\\n    function deploy(\\n        address masterContract,\\n        bytes calldata data,\\n        bool useCreate2\\n    ) public payable returns (address cloneAddress) {\\n        require(masterContract != address(0), \\\"BoringFactory: No masterContract\\\");\\n        bytes20 targetBytes = bytes20(masterContract); // Takes the first 20 bytes of the masterContract's address\\n\\n        if (useCreate2) {\\n            // each masterContract has different code already. So clones are distinguished by their data only.\\n            bytes32 salt = keccak256(data);\\n\\n            // Creates clone, more info here: https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create2(0, clone, 0x37, salt)\\n            }\\n        } else {\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create(0, clone, 0x37)\\n            }\\n        }\\n        masterContractOf[cloneAddress] = masterContract;\\n\\n        IMasterContract(cloneAddress).init{value: msg.value}(data);\\n\\n        emit LogDeploy(masterContract, data, cloneAddress);\\n    }\\n}\\n\\n// File contracts/MasterContractManager.sol\\n// License-Identifier: UNLICENSED\\n\\ncontract MasterContractManager is BoringOwnable, BoringFactory {\\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\\n    event LogRegisterProtocol(address indexed protocol);\\n\\n    /// @notice masterContract to user to approval state\\n    mapping(address => mapping(address => bool)) public masterContractApproved;\\n    /// @notice masterContract to whitelisted state for approval without signed message\\n    mapping(address => bool) public whitelistedMasterContracts;\\n    /// @notice user nonces for masterContract approvals\\n    mapping(address => uint256) public nonces;\\n\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n    // See https://eips.ethereum.org/EIPS/eip-191\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\n    bytes32 private constant APPROVAL_SIGNATURE_HASH =\\n        keccak256(\\\"SetMasterContractApproval(string warning,address user,address masterContract,bool approved,uint256 nonce)\\\");\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\n    }\\n\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, keccak256(\\\"BentoBox V1\\\"), chainId, address(this)));\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @notice Other contracts need to register with this master contract so that users can approve them for the BentoBox.\\n    function registerProtocol() public {\\n        masterContractOf[msg.sender] = msg.sender;\\n        emit LogRegisterProtocol(msg.sender);\\n    }\\n\\n    /// @notice Enables or disables a contract for approval without signed message.\\n    function whitelistMasterContract(address masterContract, bool approved) public onlyOwner {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: Cannot approve 0\\\");\\n\\n        // Effects\\n        whitelistedMasterContracts[masterContract] = approved;\\n        emit LogWhiteListMasterContract(masterContract, approved);\\n    }\\n\\n    /// @notice Approves or revokes a `masterContract` access to `user` funds.\\n    /// @param user The address of the user that approves or revokes access.\\n    /// @param masterContract The address who gains or loses access.\\n    /// @param approved If True approves access. If False revokes access.\\n    /// @param v Part of the signature. (See EIP-191)\\n    /// @param r Part of the signature. (See EIP-191)\\n    /// @param s Part of the signature. (See EIP-191)\\n    // F4 - Check behaviour for all function arguments when wrong or extreme\\n    // F4: Don't allow masterContract 0 to be approved. Unknown contracts will have a masterContract of 0.\\n    // F4: User can't be 0 for signed approvals because the recoveredAddress will be 0 if ecrecover fails\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: masterC not set\\\"); // Important for security\\n\\n        // If no signature is provided, the fallback is executed\\n        if (r == 0 && s == 0 && v == 0) {\\n            require(user == msg.sender, \\\"MasterCMgr: user not sender\\\");\\n            require(masterContractOf[user] == address(0), \\\"MasterCMgr: user is clone\\\");\\n            require(whitelistedMasterContracts[masterContract], \\\"MasterCMgr: not whitelisted\\\");\\n        } else {\\n            // Important for security - any address without masterContract has address(0) as masterContract\\n            // So approving address(0) would approve every address, leading to full loss of funds\\n            // Also, ecrecover returns address(0) on failure. So we check this:\\n            require(user != address(0), \\\"MasterCMgr: User cannot be 0\\\");\\n\\n            // C10 - Protect signatures against replay, use nonce and chainId (SWC-121)\\n            // C10: nonce + chainId are used to prevent replays\\n            // C11 - All signatures strictly EIP-712 (SWC-117 SWC-122)\\n            // C11: signature is EIP-712 compliant\\n            // C12 - abi.encodePacked can't contain variable length user input (SWC-133)\\n            // C12: abi.encodePacked has fixed length parameters\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA,\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            APPROVAL_SIGNATURE_HASH,\\n                            approved\\n                                ? keccak256(\\\"Give FULL access to funds in (and approved to) BentoBox?\\\")\\n                                : keccak256(\\\"Revoke access to BentoBox?\\\"),\\n                            user,\\n                            masterContract,\\n                            approved,\\n                            nonces[user]++\\n                        )\\n                    )\\n                )\\n            );\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress == user, \\\"MasterCMgr: Invalid Signature\\\");\\n        }\\n\\n        // Effects\\n        masterContractApproved[masterContract][user] = approved;\\n        emit LogSetMasterContractApproval(masterContract, user, approved);\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringBatchable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BaseBoringBatchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /// @notice Allows batched call to self (this contract).\\n    /// @param calls An array of inputs for each call.\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n    /// @return successes An array indicating the success of a call, mapped one-to-one to `calls`.\\n    /// @return results An array with the returned data of each function call, mapped one-to-one to `calls`.\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results) {\\n        successes = new bool[](calls.length);\\n        results = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\n            require(success || !revertOnFail, _getRevertMsg(result));\\n            successes[i] = success;\\n            results[i] = result;\\n        }\\n    }\\n}\\n\\ncontract BoringBatchable is BaseBoringBatchable {\\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\\n    /// Lookup `IERC20.permit`.\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\n    function permitToken(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        token.permit(from, to, amount, deadline, v, r, s);\\n    }\\n}\\n\\n// File contracts/BentoBox.sol\\n// License-Identifier: UNLICENSED\\n\\n/// @title BentoBox\\n/// @author BoringCrypto, Keno\\n/// @notice The BentoBox is a vault for tokens. The stored tokens can be flash loaned and used in strategies.\\n/// Yield from this will go to the token depositors.\\n/// Rebasing tokens ARE NOT supported and WILL cause loss of funds.\\n/// Any funds transfered directly onto the BentoBox will be lost, use the deposit function instead.\\ncontract BentoBoxV1 is MasterContractManager, BoringBatchable {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n    using BoringERC20 for IERC20;\\n    using RebaseLibrary for Rebase;\\n\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n\\n    event LogDeposit(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogWithdraw(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogTransfer(IERC20 indexed token, address indexed from, address indexed to, uint256 share);\\n\\n    event LogFlashLoan(address indexed borrower, IERC20 indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\\n\\n    event LogStrategyTargetPercentage(IERC20 indexed token, uint256 targetPercentage);\\n    event LogStrategyQueued(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategySet(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategyInvest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyDivest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyProfit(IERC20 indexed token, uint256 amount);\\n    event LogStrategyLoss(IERC20 indexed token, uint256 amount);\\n\\n    // *************** //\\n    // *** STRUCTS *** //\\n    // *************** //\\n\\n    struct StrategyData {\\n        uint64 strategyStartDate;\\n        uint64 targetPercentage;\\n        uint128 balance; // the balance of the strategy that BentoBox thinks is in there\\n    }\\n\\n    // ******************************** //\\n    // *** CONSTANTS AND IMMUTABLES *** //\\n    // ******************************** //\\n\\n    // V2 - Can they be private?\\n    // V2: Private to save gas, to verify it's correct, check the constructor arguments\\n    IERC20 private immutable wethToken;\\n\\n    IERC20 private constant USE_ETHEREUM = IERC20(0);\\n    uint256 private constant FLASH_LOAN_FEE = 50; // 0.05%\\n    uint256 private constant FLASH_LOAN_FEE_PRECISION = 1e5;\\n    uint256 private constant STRATEGY_DELAY = 0 weeks;\\n    uint256 private constant MAX_TARGET_PERCENTAGE = 95; // 95%\\n    uint256 private constant MINIMUM_SHARE_BALANCE = 1000; // To prevent the ratio going off\\n\\n    // ***************** //\\n    // *** VARIABLES *** //\\n    // ***************** //\\n\\n    // Balance per token per address/contract in shares\\n    mapping(IERC20 => mapping(address => uint256)) public balanceOf;\\n\\n    // Rebase from amount to share\\n    mapping(IERC20 => Rebase) public totals;\\n\\n    mapping(IERC20 => IStrategy) public strategy;\\n    mapping(IERC20 => IStrategy) public pendingStrategy;\\n    mapping(IERC20 => StrategyData) public strategyData;\\n\\n    // ******************* //\\n    // *** CONSTRUCTOR *** //\\n    // ******************* //\\n\\n    constructor(IERC20 wethToken_) public {\\n        wethToken = wethToken_;\\n    }\\n\\n    // Just for testing purposes!!! Don't deploy this contract on production!!\\n    function setTokenTotal(\\n        IERC20 token,\\n        uint128 elastic,\\n        uint128 base\\n    ) public {\\n        Rebase memory total;\\n        total.elastic = elastic;\\n        total.base = base;\\n        totals[token] = total;\\n    }\\n\\n    // ***************** //\\n    // *** MODIFIERS *** //\\n    // ***************** //\\n\\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\\n    /// If 'from' is msg.sender, it's allowed.\\n    /// If 'from' is the BentoBox itself, it's allowed. Any ETH, token balances (above the known balances) or BentoBox balances\\n    /// can be taken by anyone.\\n    /// This is to enable skimming, not just for deposits, but also for withdrawals or transfers, enabling better composability.\\n    /// If 'from' is a clone of a masterContract AND the 'from' address has approved that masterContract, it's allowed.\\n    modifier allowed(address from) {\\n        if (from != msg.sender && from != address(this)) {\\n            // From is sender or you are skimming\\n            address masterContract = masterContractOf[msg.sender];\\n            require(masterContract != address(0), \\\"BentoBox: no masterContract\\\");\\n            require(masterContractApproved[masterContract][from], \\\"BentoBox: Transfer not approved\\\");\\n        }\\n        _;\\n    }\\n\\n    // ************************** //\\n    // *** INTERNAL FUNCTIONS *** //\\n    // ************************** //\\n\\n    /// @dev Returns the total balance of `token` this contracts holds,\\n    /// plus the total amount this contract thinks the strategy holds.\\n    function _tokenBalanceOf(IERC20 token) internal view returns (uint256 amount) {\\n        amount = token.balanceOf(address(this)).add(strategyData[token].balance);\\n    }\\n\\n    // ************************ //\\n    // *** PUBLIC FUNCTIONS *** //\\n    // ************************ //\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share) {\\n        share = totals[token].toBase(amount, roundUp);\\n    }\\n\\n    /// @dev Helper function represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        IERC20 token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount) {\\n        amount = totals[token].toElastic(share, roundUp);\\n    }\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public payable allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n\\n        // If a new token gets added, the tokenSupply call checks that this is a deployed contract. Needed for security.\\n        require(total.elastic != 0 || token.totalSupply() > 0, \\\"BentoBox: No tokens\\\");\\n        if (share == 0) {\\n            // value of the share may be lower than the amount due to rounding, that's ok\\n            share = total.toBase(amount, false);\\n            // Any deposit should lead to at least the minimum share balance, otherwise it's ignored (no amount taken)\\n            if (total.base.add(share.to128()) < MINIMUM_SHARE_BALANCE) {\\n                return (0, 0);\\n            }\\n        } else {\\n            // amount may be lower than the value of share due to rounding, in that case, add 1 to amount (Always round up)\\n            amount = total.toElastic(share, true);\\n        }\\n\\n        // In case of skimming, check that only the skimmable amount is taken.\\n        // For ETH, the full balance is available, so no need to check.\\n        // During flashloans the _tokenBalanceOf is lower than 'reality', so skimming deposits will mostly fail during a flashloan.\\n        require(\\n            from != address(this) || token_ == USE_ETHEREUM || amount <= _tokenBalanceOf(token).sub(total.elastic),\\n            \\\"BentoBox: Skim too much\\\"\\n        );\\n\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n        total.base = total.base.add(share.to128());\\n        total.elastic = total.elastic.add(amount.to128());\\n        totals[token] = total;\\n\\n        // Interactions\\n        // During the first deposit, we check that this token is 'real'\\n        if (token_ == USE_ETHEREUM) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the WETH implementation is faulty or malicious, it will block adding ETH (but we know the WETH implementation)\\n            IWETH(address(wethToken)).deposit{value: amount}();\\n        } else if (from != address(this)) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the token implementation is faulty or malicious, it may block adding tokens. Good.\\n            token.safeTransferFrom(from, address(this), amount);\\n        }\\n        emit LogDeposit(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n        if (share == 0) {\\n            // value of the share paid could be lower than the amount paid due to rounding, in that case, add a share (Always round up)\\n            share = total.toBase(amount, true);\\n        } else {\\n            // amount may be lower than the value of share due to rounding, that's ok\\n            amount = total.toElastic(share, false);\\n        }\\n\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        total.elastic = total.elastic.sub(amount.to128());\\n        total.base = total.base.sub(share.to128());\\n        // There have to be at least 1000 shares left to prevent reseting the share/amount ratio (unless it's fully emptied)\\n        require(total.base >= MINIMUM_SHARE_BALANCE || total.base == 0, \\\"BentoBox: cannot empty\\\");\\n        totals[token] = total;\\n\\n        // Interactions\\n        if (token_ == USE_ETHEREUM) {\\n            // X2, X3: A revert or big gas usage in the WETH contract could block withdrawals, but WETH9 is fine.\\n            IWETH(address(wethToken)).withdraw(amount);\\n            // X2, X3: A revert or big gas usage could block, however, the to address is under control of the caller.\\n            (bool success, ) = to.call{value: amount}(\\\"\\\");\\n            require(success, \\\"BentoBox: ETH transfer failed\\\");\\n        } else {\\n            // X2, X3: A malicious token could block withdrawal of just THAT token.\\n            //         masterContracts may want to take care not to rely on withdraw always succeeding.\\n            token.safeTransfer(to, amount);\\n        }\\n        emit LogWithdraw(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    // Clones of master contracts can transfer from any account that has approved them\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transferMultiple for gas optimization\\n    function transfer(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) public allowed(from) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n\\n        emit LogTransfer(token, from, to, share);\\n    }\\n\\n    /// @notice Transfer shares from a user account to multiple other ones.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param tos The receivers of the tokens.\\n    /// @param shares The amount of `token` in shares for each receiver in `tos`.\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transfer for gas optimization\\n    function transferMultiple(\\n        IERC20 token,\\n        address from,\\n        address[] calldata tos,\\n        uint256[] calldata shares\\n    ) public allowed(from) {\\n        // Checks\\n        require(tos[0] != address(0), \\\"BentoBox: to[0] not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        uint256 totalAmount;\\n        uint256 len = tos.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address to = tos[i];\\n            balanceOf[token][to] = balanceOf[token][to].add(shares[i]);\\n            totalAmount = totalAmount.add(shares[i]);\\n            emit LogTransfer(token, from, to, shares[i]);\\n        }\\n        balanceOf[token][from] = balanceOf[token][from].sub(totalAmount);\\n    }\\n\\n    /// @notice Flashloan ability.\\n    /// @param borrower The address of the contract that implements and conforms to `IFlashBorrower` and handles the flashloan.\\n    /// @param receiver Address of the token receiver.\\n    /// @param token The address of the token to receive.\\n    /// @param amount of the tokens to receive.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function flashLoan(\\n        IFlashBorrower borrower,\\n        address receiver,\\n        IERC20 token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public {\\n        uint256 fee = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n        token.safeTransfer(receiver, amount);\\n\\n        borrower.onFlashLoan(msg.sender, token, amount, fee, data);\\n\\n        require(_tokenBalanceOf(token) >= totals[token].addElastic(fee.to128()), \\\"BentoBox: Wrong amount\\\");\\n        emit LogFlashLoan(address(borrower), token, amount, fee, receiver);\\n    }\\n\\n    /// @notice Support for batched flashloans. Useful to request multiple different `tokens` in a single transaction.\\n    /// @param borrower The address of the contract that implements and conforms to `IBatchFlashBorrower` and handles the flashloan.\\n    /// @param receivers An array of the token receivers. A one-to-one mapping with `tokens` and `amounts`.\\n    /// @param tokens The addresses of the tokens.\\n    /// @param amounts of the tokens for each receiver.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function batchFlashLoan(\\n        IBatchFlashBorrower borrower,\\n        address[] calldata receivers,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public {\\n        uint256[] memory fees = new uint256[](tokens.length);\\n\\n        uint256 len = tokens.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 amount = amounts[i];\\n            fees[i] = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n\\n            tokens[i].safeTransfer(receivers[i], amounts[i]);\\n        }\\n\\n        borrower.onBatchFlashLoan(msg.sender, tokens, amounts, fees, data);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            IERC20 token = tokens[i];\\n            require(_tokenBalanceOf(token) >= totals[token].addElastic(fees[i].to128()), \\\"BentoBox: Wrong amount\\\");\\n            emit LogFlashLoan(address(borrower), token, amounts[i], fees[i], receivers[i]);\\n        }\\n    }\\n\\n    /// @notice Sets the target percentage of the strategy for `token`.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param targetPercentage_ The new target in percent. Must be lesser or equal to `MAX_TARGET_PERCENTAGE`.\\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) public onlyOwner {\\n        // Checks\\n        require(targetPercentage_ <= MAX_TARGET_PERCENTAGE, \\\"StrategyManager: Target too high\\\");\\n\\n        // Effects\\n        strategyData[token].targetPercentage = targetPercentage_;\\n        emit LogStrategyTargetPercentage(token, targetPercentage_);\\n    }\\n\\n    /// @notice Sets the contract address of a new strategy that conforms to `IStrategy` for `token`.\\n    /// Must be called twice with the same arguments.\\n    /// A new strategy becomes pending first and can be activated once `STRATEGY_DELAY` is over.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param newStrategy The address of the contract that conforms to `IStrategy`.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // C4 - Use block.timestamp only for long intervals (SWC-116)\\n    // C4: block.timestamp is used for a period of 2 weeks, which is long enough\\n    function setStrategy(IERC20 token, IStrategy newStrategy) public onlyOwner {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy pending = pendingStrategy[token];\\n        if (data.strategyStartDate == 0 || pending != newStrategy) {\\n            pendingStrategy[token] = newStrategy;\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: Our sun will swallow the earth well before this overflows\\n            data.strategyStartDate = (block.timestamp + STRATEGY_DELAY).to64();\\n            emit LogStrategyQueued(token, newStrategy);\\n        } else {\\n            require(data.strategyStartDate != 0 && block.timestamp >= data.strategyStartDate, \\\"StrategyManager: Too early\\\");\\n            if (address(strategy[token]) != address(0)) {\\n                int256 balanceChange = strategy[token].exit(data.balance);\\n                // Effects\\n                if (balanceChange > 0) {\\n                    uint256 add = uint256(balanceChange);\\n                    totals[token].addElastic(add);\\n                    emit LogStrategyProfit(token, add);\\n                } else if (balanceChange < 0) {\\n                    uint256 sub = uint256(-balanceChange);\\n                    totals[token].subElastic(sub);\\n                    emit LogStrategyLoss(token, sub);\\n                }\\n\\n                emit LogStrategyDivest(token, data.balance);\\n            }\\n            strategy[token] = pending;\\n            data.strategyStartDate = 0;\\n            data.balance = 0;\\n            pendingStrategy[token] = IStrategy(0);\\n            emit LogStrategySet(token, newStrategy);\\n        }\\n        strategyData[token] = data;\\n    }\\n\\n    /// @notice The actual process of yield farming. Executes the strategy of `token`.\\n    /// Optionally does housekeeping if `balance` is true.\\n    /// `maxChangeAmount` is relevant for skimming or withdrawing if `balance` is true.\\n    /// @param token The address of the token for which a strategy is deployed.\\n    /// @param balance True if housekeeping should be done.\\n    /// @param maxChangeAmount The maximum amount for either pulling or pushing from/to the `IStrategy` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // F5: Not followed to prevent reentrancy issues with flashloans and BentoBox skims?\\n    function harvest(\\n        IERC20 token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) public {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy _strategy = strategy[token];\\n        int256 balanceChange = _strategy.harvest(data.balance, msg.sender);\\n        if (balanceChange == 0 && !balance) {\\n            return;\\n        }\\n\\n        uint256 totalElastic = totals[token].elastic;\\n\\n        if (balanceChange > 0) {\\n            uint256 add = uint256(balanceChange);\\n            totalElastic = totalElastic.add(add);\\n            totals[token].elastic = totalElastic.to128();\\n            emit LogStrategyProfit(token, add);\\n        } else if (balanceChange < 0) {\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: balanceChange could overflow if it's max negative int128.\\n            // But tokens with balances that large are not supported by the BentoBox.\\n            uint256 sub = uint256(-balanceChange);\\n            totalElastic = totalElastic.sub(sub);\\n            totals[token].elastic = totalElastic.to128();\\n            data.balance = data.balance.sub(sub.to128());\\n            emit LogStrategyLoss(token, sub);\\n        }\\n\\n        if (balance) {\\n            uint256 targetBalance = totalElastic.mul(data.targetPercentage) / 100;\\n            // if data.balance == targetBalance there is nothing to update\\n            if (data.balance < targetBalance) {\\n                uint256 amountOut = targetBalance.sub(data.balance);\\n                if (maxChangeAmount != 0 && amountOut > maxChangeAmount) {\\n                    amountOut = maxChangeAmount;\\n                }\\n                token.safeTransfer(address(_strategy), amountOut);\\n                data.balance = data.balance.add(amountOut.to128());\\n                _strategy.skim(amountOut);\\n                emit LogStrategyInvest(token, amountOut);\\n            } else if (data.balance > targetBalance) {\\n                uint256 amountIn = data.balance.sub(targetBalance.to128());\\n                if (maxChangeAmount != 0 && amountIn > maxChangeAmount) {\\n                    amountIn = maxChangeAmount;\\n                }\\n\\n                uint256 actualAmountIn = _strategy.withdraw(amountIn);\\n\\n                data.balance = data.balance.sub(actualAmountIn.to128());\\n                emit LogStrategyDivest(token, actualAmountIn);\\n            }\\n        }\\n\\n        strategyData[token] = data;\\n    }\\n\\n    // Contract should be able to receive ETH deposits to support deposit & skim\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd8343e88ade6bf85fd34d3556aedb2b14fe07ca40396ae2ef6064c9d8da0d4d3\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"notice":"EIP 2612"}},"version":1}},"IFlashBorrower":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onFlashLoan","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"onFlashLoan(address,address,uint256,uint256,bytes)":{"params":{"amount":"of the `token` that is loaned.","data":"Additional data that was passed to the flashloan function.","fee":"The fee that needs to be paid on top for this loan. Needs to be the same as `token`.","sender":"The address of the invoker of this flashloan.","token":"The address of the token that is loaned."}}},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onFlashLoan(address,address,uint256,uint256,bytes)":"23e30c8b"}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onFlashLoan(address,address,uint256,uint256,bytes)\":{\"params\":{\"amount\":\"of the `token` that is loaned.\",\"data\":\"Additional data that was passed to the flashloan function.\",\"fee\":\"The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\",\"sender\":\"The address of the invoker of this flashloan.\",\"token\":\"The address of the token that is loaned.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onFlashLoan(address,address,uint256,uint256,bytes)\":{\"notice\":\"The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/BentoBoxV1Flat.sol\":\"IFlashBorrower\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/flat/BentoBoxV1Flat.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// The BentoBox\\n\\n//  \\u2584\\u2584\\u2584\\u2584\\u00b7 \\u2584\\u2584\\u2584 . \\u2590 \\u2584 \\u2584\\u2584\\u2584\\u2584\\u2584      \\u2584\\u2584\\u2584\\u2584\\u00b7       \\u2590\\u2584\\u2022 \\u2584\\n//  \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u2580\\u2584.\\u2580\\u00b7\\u2588\\u258c\\u2590\\u2588\\u2022\\u2588\\u2588  \\u25aa     \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u25aa      \\u2588\\u258c\\u2588\\u258c\\u25aa\\n//  \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584\\u2590\\u2580\\u2580\\u25aa\\u2584\\u2590\\u2588\\u2590\\u2590\\u258c \\u2590\\u2588.\\u25aa \\u2584\\u2588\\u2580\\u2584 \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584 \\u2584\\u2588\\u2580\\u2584  \\u00b7\\u2588\\u2588\\u00b7\\n//  \\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u2584\\u2584\\u258c\\u2588\\u2588\\u2590\\u2588\\u258c \\u2590\\u2588\\u258c\\u00b7\\u2590\\u2588\\u258c.\\u2590\\u258c\\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u258c.\\u2590\\u258c\\u25aa\\u2590\\u2588\\u00b7\\u2588\\u258c\\n//  \\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2580\\u2580 \\u2580\\u2580 \\u2588\\u25aa \\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u2022\\u2580\\u2580 \\u2580\\u2580\\n\\n// This contract stores funds, handles their transfers, supports flash loans and strategies.\\n\\n// Copyright (c) 2021 BoringCrypto - All rights reserved\\n// Twitter: @Boring_Crypto\\n\\n// Special thanks to Keno for all his hard work and support\\n\\n// Version 22-Mar-2021\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable not-rely-on-time\\n// solhint-disable no-inline-assembly\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function decimals() external view returns (uint256);\\n}\\n\\n// File contracts/interfaces/IFlashLoan.sol\\n// License-Identifier: MIT\\n\\ninterface IFlashBorrower {\\n    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param token The address of the token that is loaned.\\n    /// @param amount of the `token` that is loaned.\\n    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onFlashLoan(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IBatchFlashBorrower {\\n    /// @notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param tokens Array of addresses for ERC-20 tokens that is loaned.\\n    /// @param amounts A one-to-one map to `tokens` that is loaned.\\n    /// @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onBatchFlashLoan(\\n        address sender,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata fees,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File contracts/interfaces/IWETH.sol\\n// License-Identifier: MIT\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\\n// File contracts/interfaces/IStrategy.sol\\n// License-Identifier: MIT\\n\\ninterface IStrategy {\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\n    /// @param amount The amount of tokens to invest.\\n    function skim(uint256 amount) external;\\n\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\n    /// @dev The `actualAmount` should be very close to the amount.\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\n    /// @param amount The requested amount the caller wants to withdraw.\\n    /// @return actualAmount The real amount that is withdrawn.\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library using overflow-/underflow-safe math.\\nlibrary RebaseLibrary {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = elastic.mul(total.base) / total.elastic;\\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\\n                base = base.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = base.mul(total.elastic) / total.base;\\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\\n                elastic = elastic.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\\n    /// @return (Rebase) The new total.\\n    /// @return base in relationship to `elastic`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 base) {\\n        base = toBase(total, elastic, roundUp);\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return (total, base);\\n    }\\n\\n    /// @notice Sub `base` from `total` and update `total.elastic`.\\n    /// @return (Rebase) The new total.\\n    /// @return elastic in relationship to `base`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 elastic) {\\n        elastic = toElastic(total, base, roundUp);\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return (total, elastic);\\n    }\\n\\n    /// @notice Add `elastic` and `base` to `total`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Subtract `elastic` and `base` to `total`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Add `elastic` to `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.add(elastic.to128());\\n    }\\n\\n    /// @notice Subtract `elastic` from `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.sub(elastic.to128());\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() public {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IMasterContract {\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\n    /// Also kown as the constructor for cloned contracts.\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\n    /// @param data Can be abi encoded arguments or anything else.\\n    function init(bytes calldata data) external payable;\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringFactory.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BoringFactory {\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\n\\n    /// @notice Mapping from clone contracts to their masterContract.\\n    mapping(address => address) public masterContractOf;\\n\\n    /// @notice Deploys a given master Contract as a clone.\\n    /// Any ETH transferred with this call is forwarded to the new clone.\\n    /// Emits `LogDeploy`.\\n    /// @param masterContract The address of the contract to clone.\\n    /// @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\\n    /// @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\\n    /// @return cloneAddress Address of the created clone contract.\\n    function deploy(\\n        address masterContract,\\n        bytes calldata data,\\n        bool useCreate2\\n    ) public payable returns (address cloneAddress) {\\n        require(masterContract != address(0), \\\"BoringFactory: No masterContract\\\");\\n        bytes20 targetBytes = bytes20(masterContract); // Takes the first 20 bytes of the masterContract's address\\n\\n        if (useCreate2) {\\n            // each masterContract has different code already. So clones are distinguished by their data only.\\n            bytes32 salt = keccak256(data);\\n\\n            // Creates clone, more info here: https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create2(0, clone, 0x37, salt)\\n            }\\n        } else {\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create(0, clone, 0x37)\\n            }\\n        }\\n        masterContractOf[cloneAddress] = masterContract;\\n\\n        IMasterContract(cloneAddress).init{value: msg.value}(data);\\n\\n        emit LogDeploy(masterContract, data, cloneAddress);\\n    }\\n}\\n\\n// File contracts/MasterContractManager.sol\\n// License-Identifier: UNLICENSED\\n\\ncontract MasterContractManager is BoringOwnable, BoringFactory {\\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\\n    event LogRegisterProtocol(address indexed protocol);\\n\\n    /// @notice masterContract to user to approval state\\n    mapping(address => mapping(address => bool)) public masterContractApproved;\\n    /// @notice masterContract to whitelisted state for approval without signed message\\n    mapping(address => bool) public whitelistedMasterContracts;\\n    /// @notice user nonces for masterContract approvals\\n    mapping(address => uint256) public nonces;\\n\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n    // See https://eips.ethereum.org/EIPS/eip-191\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\n    bytes32 private constant APPROVAL_SIGNATURE_HASH =\\n        keccak256(\\\"SetMasterContractApproval(string warning,address user,address masterContract,bool approved,uint256 nonce)\\\");\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\n    }\\n\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, keccak256(\\\"BentoBox V1\\\"), chainId, address(this)));\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @notice Other contracts need to register with this master contract so that users can approve them for the BentoBox.\\n    function registerProtocol() public {\\n        masterContractOf[msg.sender] = msg.sender;\\n        emit LogRegisterProtocol(msg.sender);\\n    }\\n\\n    /// @notice Enables or disables a contract for approval without signed message.\\n    function whitelistMasterContract(address masterContract, bool approved) public onlyOwner {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: Cannot approve 0\\\");\\n\\n        // Effects\\n        whitelistedMasterContracts[masterContract] = approved;\\n        emit LogWhiteListMasterContract(masterContract, approved);\\n    }\\n\\n    /// @notice Approves or revokes a `masterContract` access to `user` funds.\\n    /// @param user The address of the user that approves or revokes access.\\n    /// @param masterContract The address who gains or loses access.\\n    /// @param approved If True approves access. If False revokes access.\\n    /// @param v Part of the signature. (See EIP-191)\\n    /// @param r Part of the signature. (See EIP-191)\\n    /// @param s Part of the signature. (See EIP-191)\\n    // F4 - Check behaviour for all function arguments when wrong or extreme\\n    // F4: Don't allow masterContract 0 to be approved. Unknown contracts will have a masterContract of 0.\\n    // F4: User can't be 0 for signed approvals because the recoveredAddress will be 0 if ecrecover fails\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: masterC not set\\\"); // Important for security\\n\\n        // If no signature is provided, the fallback is executed\\n        if (r == 0 && s == 0 && v == 0) {\\n            require(user == msg.sender, \\\"MasterCMgr: user not sender\\\");\\n            require(masterContractOf[user] == address(0), \\\"MasterCMgr: user is clone\\\");\\n            require(whitelistedMasterContracts[masterContract], \\\"MasterCMgr: not whitelisted\\\");\\n        } else {\\n            // Important for security - any address without masterContract has address(0) as masterContract\\n            // So approving address(0) would approve every address, leading to full loss of funds\\n            // Also, ecrecover returns address(0) on failure. So we check this:\\n            require(user != address(0), \\\"MasterCMgr: User cannot be 0\\\");\\n\\n            // C10 - Protect signatures against replay, use nonce and chainId (SWC-121)\\n            // C10: nonce + chainId are used to prevent replays\\n            // C11 - All signatures strictly EIP-712 (SWC-117 SWC-122)\\n            // C11: signature is EIP-712 compliant\\n            // C12 - abi.encodePacked can't contain variable length user input (SWC-133)\\n            // C12: abi.encodePacked has fixed length parameters\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA,\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            APPROVAL_SIGNATURE_HASH,\\n                            approved\\n                                ? keccak256(\\\"Give FULL access to funds in (and approved to) BentoBox?\\\")\\n                                : keccak256(\\\"Revoke access to BentoBox?\\\"),\\n                            user,\\n                            masterContract,\\n                            approved,\\n                            nonces[user]++\\n                        )\\n                    )\\n                )\\n            );\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress == user, \\\"MasterCMgr: Invalid Signature\\\");\\n        }\\n\\n        // Effects\\n        masterContractApproved[masterContract][user] = approved;\\n        emit LogSetMasterContractApproval(masterContract, user, approved);\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringBatchable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BaseBoringBatchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /// @notice Allows batched call to self (this contract).\\n    /// @param calls An array of inputs for each call.\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n    /// @return successes An array indicating the success of a call, mapped one-to-one to `calls`.\\n    /// @return results An array with the returned data of each function call, mapped one-to-one to `calls`.\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results) {\\n        successes = new bool[](calls.length);\\n        results = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\n            require(success || !revertOnFail, _getRevertMsg(result));\\n            successes[i] = success;\\n            results[i] = result;\\n        }\\n    }\\n}\\n\\ncontract BoringBatchable is BaseBoringBatchable {\\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\\n    /// Lookup `IERC20.permit`.\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\n    function permitToken(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        token.permit(from, to, amount, deadline, v, r, s);\\n    }\\n}\\n\\n// File contracts/BentoBox.sol\\n// License-Identifier: UNLICENSED\\n\\n/// @title BentoBox\\n/// @author BoringCrypto, Keno\\n/// @notice The BentoBox is a vault for tokens. The stored tokens can be flash loaned and used in strategies.\\n/// Yield from this will go to the token depositors.\\n/// Rebasing tokens ARE NOT supported and WILL cause loss of funds.\\n/// Any funds transfered directly onto the BentoBox will be lost, use the deposit function instead.\\ncontract BentoBoxV1 is MasterContractManager, BoringBatchable {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n    using BoringERC20 for IERC20;\\n    using RebaseLibrary for Rebase;\\n\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n\\n    event LogDeposit(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogWithdraw(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogTransfer(IERC20 indexed token, address indexed from, address indexed to, uint256 share);\\n\\n    event LogFlashLoan(address indexed borrower, IERC20 indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\\n\\n    event LogStrategyTargetPercentage(IERC20 indexed token, uint256 targetPercentage);\\n    event LogStrategyQueued(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategySet(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategyInvest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyDivest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyProfit(IERC20 indexed token, uint256 amount);\\n    event LogStrategyLoss(IERC20 indexed token, uint256 amount);\\n\\n    // *************** //\\n    // *** STRUCTS *** //\\n    // *************** //\\n\\n    struct StrategyData {\\n        uint64 strategyStartDate;\\n        uint64 targetPercentage;\\n        uint128 balance; // the balance of the strategy that BentoBox thinks is in there\\n    }\\n\\n    // ******************************** //\\n    // *** CONSTANTS AND IMMUTABLES *** //\\n    // ******************************** //\\n\\n    // V2 - Can they be private?\\n    // V2: Private to save gas, to verify it's correct, check the constructor arguments\\n    IERC20 private immutable wethToken;\\n\\n    IERC20 private constant USE_ETHEREUM = IERC20(0);\\n    uint256 private constant FLASH_LOAN_FEE = 50; // 0.05%\\n    uint256 private constant FLASH_LOAN_FEE_PRECISION = 1e5;\\n    uint256 private constant STRATEGY_DELAY = 0 weeks;\\n    uint256 private constant MAX_TARGET_PERCENTAGE = 95; // 95%\\n    uint256 private constant MINIMUM_SHARE_BALANCE = 1000; // To prevent the ratio going off\\n\\n    // ***************** //\\n    // *** VARIABLES *** //\\n    // ***************** //\\n\\n    // Balance per token per address/contract in shares\\n    mapping(IERC20 => mapping(address => uint256)) public balanceOf;\\n\\n    // Rebase from amount to share\\n    mapping(IERC20 => Rebase) public totals;\\n\\n    mapping(IERC20 => IStrategy) public strategy;\\n    mapping(IERC20 => IStrategy) public pendingStrategy;\\n    mapping(IERC20 => StrategyData) public strategyData;\\n\\n    // ******************* //\\n    // *** CONSTRUCTOR *** //\\n    // ******************* //\\n\\n    constructor(IERC20 wethToken_) public {\\n        wethToken = wethToken_;\\n    }\\n\\n    // Just for testing purposes!!! Don't deploy this contract on production!!\\n    function setTokenTotal(\\n        IERC20 token,\\n        uint128 elastic,\\n        uint128 base\\n    ) public {\\n        Rebase memory total;\\n        total.elastic = elastic;\\n        total.base = base;\\n        totals[token] = total;\\n    }\\n\\n    // ***************** //\\n    // *** MODIFIERS *** //\\n    // ***************** //\\n\\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\\n    /// If 'from' is msg.sender, it's allowed.\\n    /// If 'from' is the BentoBox itself, it's allowed. Any ETH, token balances (above the known balances) or BentoBox balances\\n    /// can be taken by anyone.\\n    /// This is to enable skimming, not just for deposits, but also for withdrawals or transfers, enabling better composability.\\n    /// If 'from' is a clone of a masterContract AND the 'from' address has approved that masterContract, it's allowed.\\n    modifier allowed(address from) {\\n        if (from != msg.sender && from != address(this)) {\\n            // From is sender or you are skimming\\n            address masterContract = masterContractOf[msg.sender];\\n            require(masterContract != address(0), \\\"BentoBox: no masterContract\\\");\\n            require(masterContractApproved[masterContract][from], \\\"BentoBox: Transfer not approved\\\");\\n        }\\n        _;\\n    }\\n\\n    // ************************** //\\n    // *** INTERNAL FUNCTIONS *** //\\n    // ************************** //\\n\\n    /// @dev Returns the total balance of `token` this contracts holds,\\n    /// plus the total amount this contract thinks the strategy holds.\\n    function _tokenBalanceOf(IERC20 token) internal view returns (uint256 amount) {\\n        amount = token.balanceOf(address(this)).add(strategyData[token].balance);\\n    }\\n\\n    // ************************ //\\n    // *** PUBLIC FUNCTIONS *** //\\n    // ************************ //\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share) {\\n        share = totals[token].toBase(amount, roundUp);\\n    }\\n\\n    /// @dev Helper function represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        IERC20 token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount) {\\n        amount = totals[token].toElastic(share, roundUp);\\n    }\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public payable allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n\\n        // If a new token gets added, the tokenSupply call checks that this is a deployed contract. Needed for security.\\n        require(total.elastic != 0 || token.totalSupply() > 0, \\\"BentoBox: No tokens\\\");\\n        if (share == 0) {\\n            // value of the share may be lower than the amount due to rounding, that's ok\\n            share = total.toBase(amount, false);\\n            // Any deposit should lead to at least the minimum share balance, otherwise it's ignored (no amount taken)\\n            if (total.base.add(share.to128()) < MINIMUM_SHARE_BALANCE) {\\n                return (0, 0);\\n            }\\n        } else {\\n            // amount may be lower than the value of share due to rounding, in that case, add 1 to amount (Always round up)\\n            amount = total.toElastic(share, true);\\n        }\\n\\n        // In case of skimming, check that only the skimmable amount is taken.\\n        // For ETH, the full balance is available, so no need to check.\\n        // During flashloans the _tokenBalanceOf is lower than 'reality', so skimming deposits will mostly fail during a flashloan.\\n        require(\\n            from != address(this) || token_ == USE_ETHEREUM || amount <= _tokenBalanceOf(token).sub(total.elastic),\\n            \\\"BentoBox: Skim too much\\\"\\n        );\\n\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n        total.base = total.base.add(share.to128());\\n        total.elastic = total.elastic.add(amount.to128());\\n        totals[token] = total;\\n\\n        // Interactions\\n        // During the first deposit, we check that this token is 'real'\\n        if (token_ == USE_ETHEREUM) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the WETH implementation is faulty or malicious, it will block adding ETH (but we know the WETH implementation)\\n            IWETH(address(wethToken)).deposit{value: amount}();\\n        } else if (from != address(this)) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the token implementation is faulty or malicious, it may block adding tokens. Good.\\n            token.safeTransferFrom(from, address(this), amount);\\n        }\\n        emit LogDeposit(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n        if (share == 0) {\\n            // value of the share paid could be lower than the amount paid due to rounding, in that case, add a share (Always round up)\\n            share = total.toBase(amount, true);\\n        } else {\\n            // amount may be lower than the value of share due to rounding, that's ok\\n            amount = total.toElastic(share, false);\\n        }\\n\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        total.elastic = total.elastic.sub(amount.to128());\\n        total.base = total.base.sub(share.to128());\\n        // There have to be at least 1000 shares left to prevent reseting the share/amount ratio (unless it's fully emptied)\\n        require(total.base >= MINIMUM_SHARE_BALANCE || total.base == 0, \\\"BentoBox: cannot empty\\\");\\n        totals[token] = total;\\n\\n        // Interactions\\n        if (token_ == USE_ETHEREUM) {\\n            // X2, X3: A revert or big gas usage in the WETH contract could block withdrawals, but WETH9 is fine.\\n            IWETH(address(wethToken)).withdraw(amount);\\n            // X2, X3: A revert or big gas usage could block, however, the to address is under control of the caller.\\n            (bool success, ) = to.call{value: amount}(\\\"\\\");\\n            require(success, \\\"BentoBox: ETH transfer failed\\\");\\n        } else {\\n            // X2, X3: A malicious token could block withdrawal of just THAT token.\\n            //         masterContracts may want to take care not to rely on withdraw always succeeding.\\n            token.safeTransfer(to, amount);\\n        }\\n        emit LogWithdraw(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    // Clones of master contracts can transfer from any account that has approved them\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transferMultiple for gas optimization\\n    function transfer(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) public allowed(from) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n\\n        emit LogTransfer(token, from, to, share);\\n    }\\n\\n    /// @notice Transfer shares from a user account to multiple other ones.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param tos The receivers of the tokens.\\n    /// @param shares The amount of `token` in shares for each receiver in `tos`.\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transfer for gas optimization\\n    function transferMultiple(\\n        IERC20 token,\\n        address from,\\n        address[] calldata tos,\\n        uint256[] calldata shares\\n    ) public allowed(from) {\\n        // Checks\\n        require(tos[0] != address(0), \\\"BentoBox: to[0] not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        uint256 totalAmount;\\n        uint256 len = tos.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address to = tos[i];\\n            balanceOf[token][to] = balanceOf[token][to].add(shares[i]);\\n            totalAmount = totalAmount.add(shares[i]);\\n            emit LogTransfer(token, from, to, shares[i]);\\n        }\\n        balanceOf[token][from] = balanceOf[token][from].sub(totalAmount);\\n    }\\n\\n    /// @notice Flashloan ability.\\n    /// @param borrower The address of the contract that implements and conforms to `IFlashBorrower` and handles the flashloan.\\n    /// @param receiver Address of the token receiver.\\n    /// @param token The address of the token to receive.\\n    /// @param amount of the tokens to receive.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function flashLoan(\\n        IFlashBorrower borrower,\\n        address receiver,\\n        IERC20 token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public {\\n        uint256 fee = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n        token.safeTransfer(receiver, amount);\\n\\n        borrower.onFlashLoan(msg.sender, token, amount, fee, data);\\n\\n        require(_tokenBalanceOf(token) >= totals[token].addElastic(fee.to128()), \\\"BentoBox: Wrong amount\\\");\\n        emit LogFlashLoan(address(borrower), token, amount, fee, receiver);\\n    }\\n\\n    /// @notice Support for batched flashloans. Useful to request multiple different `tokens` in a single transaction.\\n    /// @param borrower The address of the contract that implements and conforms to `IBatchFlashBorrower` and handles the flashloan.\\n    /// @param receivers An array of the token receivers. A one-to-one mapping with `tokens` and `amounts`.\\n    /// @param tokens The addresses of the tokens.\\n    /// @param amounts of the tokens for each receiver.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function batchFlashLoan(\\n        IBatchFlashBorrower borrower,\\n        address[] calldata receivers,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public {\\n        uint256[] memory fees = new uint256[](tokens.length);\\n\\n        uint256 len = tokens.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 amount = amounts[i];\\n            fees[i] = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n\\n            tokens[i].safeTransfer(receivers[i], amounts[i]);\\n        }\\n\\n        borrower.onBatchFlashLoan(msg.sender, tokens, amounts, fees, data);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            IERC20 token = tokens[i];\\n            require(_tokenBalanceOf(token) >= totals[token].addElastic(fees[i].to128()), \\\"BentoBox: Wrong amount\\\");\\n            emit LogFlashLoan(address(borrower), token, amounts[i], fees[i], receivers[i]);\\n        }\\n    }\\n\\n    /// @notice Sets the target percentage of the strategy for `token`.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param targetPercentage_ The new target in percent. Must be lesser or equal to `MAX_TARGET_PERCENTAGE`.\\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) public onlyOwner {\\n        // Checks\\n        require(targetPercentage_ <= MAX_TARGET_PERCENTAGE, \\\"StrategyManager: Target too high\\\");\\n\\n        // Effects\\n        strategyData[token].targetPercentage = targetPercentage_;\\n        emit LogStrategyTargetPercentage(token, targetPercentage_);\\n    }\\n\\n    /// @notice Sets the contract address of a new strategy that conforms to `IStrategy` for `token`.\\n    /// Must be called twice with the same arguments.\\n    /// A new strategy becomes pending first and can be activated once `STRATEGY_DELAY` is over.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param newStrategy The address of the contract that conforms to `IStrategy`.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // C4 - Use block.timestamp only for long intervals (SWC-116)\\n    // C4: block.timestamp is used for a period of 2 weeks, which is long enough\\n    function setStrategy(IERC20 token, IStrategy newStrategy) public onlyOwner {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy pending = pendingStrategy[token];\\n        if (data.strategyStartDate == 0 || pending != newStrategy) {\\n            pendingStrategy[token] = newStrategy;\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: Our sun will swallow the earth well before this overflows\\n            data.strategyStartDate = (block.timestamp + STRATEGY_DELAY).to64();\\n            emit LogStrategyQueued(token, newStrategy);\\n        } else {\\n            require(data.strategyStartDate != 0 && block.timestamp >= data.strategyStartDate, \\\"StrategyManager: Too early\\\");\\n            if (address(strategy[token]) != address(0)) {\\n                int256 balanceChange = strategy[token].exit(data.balance);\\n                // Effects\\n                if (balanceChange > 0) {\\n                    uint256 add = uint256(balanceChange);\\n                    totals[token].addElastic(add);\\n                    emit LogStrategyProfit(token, add);\\n                } else if (balanceChange < 0) {\\n                    uint256 sub = uint256(-balanceChange);\\n                    totals[token].subElastic(sub);\\n                    emit LogStrategyLoss(token, sub);\\n                }\\n\\n                emit LogStrategyDivest(token, data.balance);\\n            }\\n            strategy[token] = pending;\\n            data.strategyStartDate = 0;\\n            data.balance = 0;\\n            pendingStrategy[token] = IStrategy(0);\\n            emit LogStrategySet(token, newStrategy);\\n        }\\n        strategyData[token] = data;\\n    }\\n\\n    /// @notice The actual process of yield farming. Executes the strategy of `token`.\\n    /// Optionally does housekeeping if `balance` is true.\\n    /// `maxChangeAmount` is relevant for skimming or withdrawing if `balance` is true.\\n    /// @param token The address of the token for which a strategy is deployed.\\n    /// @param balance True if housekeeping should be done.\\n    /// @param maxChangeAmount The maximum amount for either pulling or pushing from/to the `IStrategy` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // F5: Not followed to prevent reentrancy issues with flashloans and BentoBox skims?\\n    function harvest(\\n        IERC20 token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) public {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy _strategy = strategy[token];\\n        int256 balanceChange = _strategy.harvest(data.balance, msg.sender);\\n        if (balanceChange == 0 && !balance) {\\n            return;\\n        }\\n\\n        uint256 totalElastic = totals[token].elastic;\\n\\n        if (balanceChange > 0) {\\n            uint256 add = uint256(balanceChange);\\n            totalElastic = totalElastic.add(add);\\n            totals[token].elastic = totalElastic.to128();\\n            emit LogStrategyProfit(token, add);\\n        } else if (balanceChange < 0) {\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: balanceChange could overflow if it's max negative int128.\\n            // But tokens with balances that large are not supported by the BentoBox.\\n            uint256 sub = uint256(-balanceChange);\\n            totalElastic = totalElastic.sub(sub);\\n            totals[token].elastic = totalElastic.to128();\\n            data.balance = data.balance.sub(sub.to128());\\n            emit LogStrategyLoss(token, sub);\\n        }\\n\\n        if (balance) {\\n            uint256 targetBalance = totalElastic.mul(data.targetPercentage) / 100;\\n            // if data.balance == targetBalance there is nothing to update\\n            if (data.balance < targetBalance) {\\n                uint256 amountOut = targetBalance.sub(data.balance);\\n                if (maxChangeAmount != 0 && amountOut > maxChangeAmount) {\\n                    amountOut = maxChangeAmount;\\n                }\\n                token.safeTransfer(address(_strategy), amountOut);\\n                data.balance = data.balance.add(amountOut.to128());\\n                _strategy.skim(amountOut);\\n                emit LogStrategyInvest(token, amountOut);\\n            } else if (data.balance > targetBalance) {\\n                uint256 amountIn = data.balance.sub(targetBalance.to128());\\n                if (maxChangeAmount != 0 && amountIn > maxChangeAmount) {\\n                    amountIn = maxChangeAmount;\\n                }\\n\\n                uint256 actualAmountIn = _strategy.withdraw(amountIn);\\n\\n                data.balance = data.balance.sub(actualAmountIn.to128());\\n                emit LogStrategyDivest(token, actualAmountIn);\\n            }\\n        }\\n\\n        strategyData[token] = data;\\n    }\\n\\n    // Contract should be able to receive ETH deposits to support deposit & skim\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd8343e88ade6bf85fd34d3556aedb2b14fe07ca40396ae2ef6064c9d8da0d4d3\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"onFlashLoan(address,address,uint256,uint256,bytes)":{"notice":"The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns."}},"version":1}},"IMasterContract":{"abi":[{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"init","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"kind":"dev","methods":{"init(bytes)":{"params":{"data":"Can be abi encoded arguments or anything else."}}},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"init(bytes)":"4ddf47d4"}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"init(bytes)\":{\"params\":{\"data\":\"Can be abi encoded arguments or anything else.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"init(bytes)\":{\"notice\":\"Init function that gets called from `BoringFactory.deploy`. Also kown as the constructor for cloned contracts. Any ETH send to `BoringFactory.deploy` ends up here.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/BentoBoxV1Flat.sol\":\"IMasterContract\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/flat/BentoBoxV1Flat.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// The BentoBox\\n\\n//  \\u2584\\u2584\\u2584\\u2584\\u00b7 \\u2584\\u2584\\u2584 . \\u2590 \\u2584 \\u2584\\u2584\\u2584\\u2584\\u2584      \\u2584\\u2584\\u2584\\u2584\\u00b7       \\u2590\\u2584\\u2022 \\u2584\\n//  \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u2580\\u2584.\\u2580\\u00b7\\u2588\\u258c\\u2590\\u2588\\u2022\\u2588\\u2588  \\u25aa     \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u25aa      \\u2588\\u258c\\u2588\\u258c\\u25aa\\n//  \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584\\u2590\\u2580\\u2580\\u25aa\\u2584\\u2590\\u2588\\u2590\\u2590\\u258c \\u2590\\u2588.\\u25aa \\u2584\\u2588\\u2580\\u2584 \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584 \\u2584\\u2588\\u2580\\u2584  \\u00b7\\u2588\\u2588\\u00b7\\n//  \\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u2584\\u2584\\u258c\\u2588\\u2588\\u2590\\u2588\\u258c \\u2590\\u2588\\u258c\\u00b7\\u2590\\u2588\\u258c.\\u2590\\u258c\\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u258c.\\u2590\\u258c\\u25aa\\u2590\\u2588\\u00b7\\u2588\\u258c\\n//  \\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2580\\u2580 \\u2580\\u2580 \\u2588\\u25aa \\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u2022\\u2580\\u2580 \\u2580\\u2580\\n\\n// This contract stores funds, handles their transfers, supports flash loans and strategies.\\n\\n// Copyright (c) 2021 BoringCrypto - All rights reserved\\n// Twitter: @Boring_Crypto\\n\\n// Special thanks to Keno for all his hard work and support\\n\\n// Version 22-Mar-2021\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable not-rely-on-time\\n// solhint-disable no-inline-assembly\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function decimals() external view returns (uint256);\\n}\\n\\n// File contracts/interfaces/IFlashLoan.sol\\n// License-Identifier: MIT\\n\\ninterface IFlashBorrower {\\n    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param token The address of the token that is loaned.\\n    /// @param amount of the `token` that is loaned.\\n    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onFlashLoan(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IBatchFlashBorrower {\\n    /// @notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param tokens Array of addresses for ERC-20 tokens that is loaned.\\n    /// @param amounts A one-to-one map to `tokens` that is loaned.\\n    /// @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onBatchFlashLoan(\\n        address sender,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata fees,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File contracts/interfaces/IWETH.sol\\n// License-Identifier: MIT\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\\n// File contracts/interfaces/IStrategy.sol\\n// License-Identifier: MIT\\n\\ninterface IStrategy {\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\n    /// @param amount The amount of tokens to invest.\\n    function skim(uint256 amount) external;\\n\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\n    /// @dev The `actualAmount` should be very close to the amount.\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\n    /// @param amount The requested amount the caller wants to withdraw.\\n    /// @return actualAmount The real amount that is withdrawn.\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library using overflow-/underflow-safe math.\\nlibrary RebaseLibrary {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = elastic.mul(total.base) / total.elastic;\\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\\n                base = base.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = base.mul(total.elastic) / total.base;\\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\\n                elastic = elastic.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\\n    /// @return (Rebase) The new total.\\n    /// @return base in relationship to `elastic`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 base) {\\n        base = toBase(total, elastic, roundUp);\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return (total, base);\\n    }\\n\\n    /// @notice Sub `base` from `total` and update `total.elastic`.\\n    /// @return (Rebase) The new total.\\n    /// @return elastic in relationship to `base`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 elastic) {\\n        elastic = toElastic(total, base, roundUp);\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return (total, elastic);\\n    }\\n\\n    /// @notice Add `elastic` and `base` to `total`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Subtract `elastic` and `base` to `total`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Add `elastic` to `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.add(elastic.to128());\\n    }\\n\\n    /// @notice Subtract `elastic` from `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.sub(elastic.to128());\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() public {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IMasterContract {\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\n    /// Also kown as the constructor for cloned contracts.\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\n    /// @param data Can be abi encoded arguments or anything else.\\n    function init(bytes calldata data) external payable;\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringFactory.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BoringFactory {\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\n\\n    /// @notice Mapping from clone contracts to their masterContract.\\n    mapping(address => address) public masterContractOf;\\n\\n    /// @notice Deploys a given master Contract as a clone.\\n    /// Any ETH transferred with this call is forwarded to the new clone.\\n    /// Emits `LogDeploy`.\\n    /// @param masterContract The address of the contract to clone.\\n    /// @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\\n    /// @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\\n    /// @return cloneAddress Address of the created clone contract.\\n    function deploy(\\n        address masterContract,\\n        bytes calldata data,\\n        bool useCreate2\\n    ) public payable returns (address cloneAddress) {\\n        require(masterContract != address(0), \\\"BoringFactory: No masterContract\\\");\\n        bytes20 targetBytes = bytes20(masterContract); // Takes the first 20 bytes of the masterContract's address\\n\\n        if (useCreate2) {\\n            // each masterContract has different code already. So clones are distinguished by their data only.\\n            bytes32 salt = keccak256(data);\\n\\n            // Creates clone, more info here: https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create2(0, clone, 0x37, salt)\\n            }\\n        } else {\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create(0, clone, 0x37)\\n            }\\n        }\\n        masterContractOf[cloneAddress] = masterContract;\\n\\n        IMasterContract(cloneAddress).init{value: msg.value}(data);\\n\\n        emit LogDeploy(masterContract, data, cloneAddress);\\n    }\\n}\\n\\n// File contracts/MasterContractManager.sol\\n// License-Identifier: UNLICENSED\\n\\ncontract MasterContractManager is BoringOwnable, BoringFactory {\\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\\n    event LogRegisterProtocol(address indexed protocol);\\n\\n    /// @notice masterContract to user to approval state\\n    mapping(address => mapping(address => bool)) public masterContractApproved;\\n    /// @notice masterContract to whitelisted state for approval without signed message\\n    mapping(address => bool) public whitelistedMasterContracts;\\n    /// @notice user nonces for masterContract approvals\\n    mapping(address => uint256) public nonces;\\n\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n    // See https://eips.ethereum.org/EIPS/eip-191\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\n    bytes32 private constant APPROVAL_SIGNATURE_HASH =\\n        keccak256(\\\"SetMasterContractApproval(string warning,address user,address masterContract,bool approved,uint256 nonce)\\\");\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\n    }\\n\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, keccak256(\\\"BentoBox V1\\\"), chainId, address(this)));\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @notice Other contracts need to register with this master contract so that users can approve them for the BentoBox.\\n    function registerProtocol() public {\\n        masterContractOf[msg.sender] = msg.sender;\\n        emit LogRegisterProtocol(msg.sender);\\n    }\\n\\n    /// @notice Enables or disables a contract for approval without signed message.\\n    function whitelistMasterContract(address masterContract, bool approved) public onlyOwner {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: Cannot approve 0\\\");\\n\\n        // Effects\\n        whitelistedMasterContracts[masterContract] = approved;\\n        emit LogWhiteListMasterContract(masterContract, approved);\\n    }\\n\\n    /// @notice Approves or revokes a `masterContract` access to `user` funds.\\n    /// @param user The address of the user that approves or revokes access.\\n    /// @param masterContract The address who gains or loses access.\\n    /// @param approved If True approves access. If False revokes access.\\n    /// @param v Part of the signature. (See EIP-191)\\n    /// @param r Part of the signature. (See EIP-191)\\n    /// @param s Part of the signature. (See EIP-191)\\n    // F4 - Check behaviour for all function arguments when wrong or extreme\\n    // F4: Don't allow masterContract 0 to be approved. Unknown contracts will have a masterContract of 0.\\n    // F4: User can't be 0 for signed approvals because the recoveredAddress will be 0 if ecrecover fails\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: masterC not set\\\"); // Important for security\\n\\n        // If no signature is provided, the fallback is executed\\n        if (r == 0 && s == 0 && v == 0) {\\n            require(user == msg.sender, \\\"MasterCMgr: user not sender\\\");\\n            require(masterContractOf[user] == address(0), \\\"MasterCMgr: user is clone\\\");\\n            require(whitelistedMasterContracts[masterContract], \\\"MasterCMgr: not whitelisted\\\");\\n        } else {\\n            // Important for security - any address without masterContract has address(0) as masterContract\\n            // So approving address(0) would approve every address, leading to full loss of funds\\n            // Also, ecrecover returns address(0) on failure. So we check this:\\n            require(user != address(0), \\\"MasterCMgr: User cannot be 0\\\");\\n\\n            // C10 - Protect signatures against replay, use nonce and chainId (SWC-121)\\n            // C10: nonce + chainId are used to prevent replays\\n            // C11 - All signatures strictly EIP-712 (SWC-117 SWC-122)\\n            // C11: signature is EIP-712 compliant\\n            // C12 - abi.encodePacked can't contain variable length user input (SWC-133)\\n            // C12: abi.encodePacked has fixed length parameters\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA,\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            APPROVAL_SIGNATURE_HASH,\\n                            approved\\n                                ? keccak256(\\\"Give FULL access to funds in (and approved to) BentoBox?\\\")\\n                                : keccak256(\\\"Revoke access to BentoBox?\\\"),\\n                            user,\\n                            masterContract,\\n                            approved,\\n                            nonces[user]++\\n                        )\\n                    )\\n                )\\n            );\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress == user, \\\"MasterCMgr: Invalid Signature\\\");\\n        }\\n\\n        // Effects\\n        masterContractApproved[masterContract][user] = approved;\\n        emit LogSetMasterContractApproval(masterContract, user, approved);\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringBatchable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BaseBoringBatchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /// @notice Allows batched call to self (this contract).\\n    /// @param calls An array of inputs for each call.\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n    /// @return successes An array indicating the success of a call, mapped one-to-one to `calls`.\\n    /// @return results An array with the returned data of each function call, mapped one-to-one to `calls`.\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results) {\\n        successes = new bool[](calls.length);\\n        results = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\n            require(success || !revertOnFail, _getRevertMsg(result));\\n            successes[i] = success;\\n            results[i] = result;\\n        }\\n    }\\n}\\n\\ncontract BoringBatchable is BaseBoringBatchable {\\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\\n    /// Lookup `IERC20.permit`.\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\n    function permitToken(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        token.permit(from, to, amount, deadline, v, r, s);\\n    }\\n}\\n\\n// File contracts/BentoBox.sol\\n// License-Identifier: UNLICENSED\\n\\n/// @title BentoBox\\n/// @author BoringCrypto, Keno\\n/// @notice The BentoBox is a vault for tokens. The stored tokens can be flash loaned and used in strategies.\\n/// Yield from this will go to the token depositors.\\n/// Rebasing tokens ARE NOT supported and WILL cause loss of funds.\\n/// Any funds transfered directly onto the BentoBox will be lost, use the deposit function instead.\\ncontract BentoBoxV1 is MasterContractManager, BoringBatchable {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n    using BoringERC20 for IERC20;\\n    using RebaseLibrary for Rebase;\\n\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n\\n    event LogDeposit(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogWithdraw(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogTransfer(IERC20 indexed token, address indexed from, address indexed to, uint256 share);\\n\\n    event LogFlashLoan(address indexed borrower, IERC20 indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\\n\\n    event LogStrategyTargetPercentage(IERC20 indexed token, uint256 targetPercentage);\\n    event LogStrategyQueued(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategySet(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategyInvest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyDivest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyProfit(IERC20 indexed token, uint256 amount);\\n    event LogStrategyLoss(IERC20 indexed token, uint256 amount);\\n\\n    // *************** //\\n    // *** STRUCTS *** //\\n    // *************** //\\n\\n    struct StrategyData {\\n        uint64 strategyStartDate;\\n        uint64 targetPercentage;\\n        uint128 balance; // the balance of the strategy that BentoBox thinks is in there\\n    }\\n\\n    // ******************************** //\\n    // *** CONSTANTS AND IMMUTABLES *** //\\n    // ******************************** //\\n\\n    // V2 - Can they be private?\\n    // V2: Private to save gas, to verify it's correct, check the constructor arguments\\n    IERC20 private immutable wethToken;\\n\\n    IERC20 private constant USE_ETHEREUM = IERC20(0);\\n    uint256 private constant FLASH_LOAN_FEE = 50; // 0.05%\\n    uint256 private constant FLASH_LOAN_FEE_PRECISION = 1e5;\\n    uint256 private constant STRATEGY_DELAY = 0 weeks;\\n    uint256 private constant MAX_TARGET_PERCENTAGE = 95; // 95%\\n    uint256 private constant MINIMUM_SHARE_BALANCE = 1000; // To prevent the ratio going off\\n\\n    // ***************** //\\n    // *** VARIABLES *** //\\n    // ***************** //\\n\\n    // Balance per token per address/contract in shares\\n    mapping(IERC20 => mapping(address => uint256)) public balanceOf;\\n\\n    // Rebase from amount to share\\n    mapping(IERC20 => Rebase) public totals;\\n\\n    mapping(IERC20 => IStrategy) public strategy;\\n    mapping(IERC20 => IStrategy) public pendingStrategy;\\n    mapping(IERC20 => StrategyData) public strategyData;\\n\\n    // ******************* //\\n    // *** CONSTRUCTOR *** //\\n    // ******************* //\\n\\n    constructor(IERC20 wethToken_) public {\\n        wethToken = wethToken_;\\n    }\\n\\n    // Just for testing purposes!!! Don't deploy this contract on production!!\\n    function setTokenTotal(\\n        IERC20 token,\\n        uint128 elastic,\\n        uint128 base\\n    ) public {\\n        Rebase memory total;\\n        total.elastic = elastic;\\n        total.base = base;\\n        totals[token] = total;\\n    }\\n\\n    // ***************** //\\n    // *** MODIFIERS *** //\\n    // ***************** //\\n\\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\\n    /// If 'from' is msg.sender, it's allowed.\\n    /// If 'from' is the BentoBox itself, it's allowed. Any ETH, token balances (above the known balances) or BentoBox balances\\n    /// can be taken by anyone.\\n    /// This is to enable skimming, not just for deposits, but also for withdrawals or transfers, enabling better composability.\\n    /// If 'from' is a clone of a masterContract AND the 'from' address has approved that masterContract, it's allowed.\\n    modifier allowed(address from) {\\n        if (from != msg.sender && from != address(this)) {\\n            // From is sender or you are skimming\\n            address masterContract = masterContractOf[msg.sender];\\n            require(masterContract != address(0), \\\"BentoBox: no masterContract\\\");\\n            require(masterContractApproved[masterContract][from], \\\"BentoBox: Transfer not approved\\\");\\n        }\\n        _;\\n    }\\n\\n    // ************************** //\\n    // *** INTERNAL FUNCTIONS *** //\\n    // ************************** //\\n\\n    /// @dev Returns the total balance of `token` this contracts holds,\\n    /// plus the total amount this contract thinks the strategy holds.\\n    function _tokenBalanceOf(IERC20 token) internal view returns (uint256 amount) {\\n        amount = token.balanceOf(address(this)).add(strategyData[token].balance);\\n    }\\n\\n    // ************************ //\\n    // *** PUBLIC FUNCTIONS *** //\\n    // ************************ //\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share) {\\n        share = totals[token].toBase(amount, roundUp);\\n    }\\n\\n    /// @dev Helper function represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        IERC20 token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount) {\\n        amount = totals[token].toElastic(share, roundUp);\\n    }\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public payable allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n\\n        // If a new token gets added, the tokenSupply call checks that this is a deployed contract. Needed for security.\\n        require(total.elastic != 0 || token.totalSupply() > 0, \\\"BentoBox: No tokens\\\");\\n        if (share == 0) {\\n            // value of the share may be lower than the amount due to rounding, that's ok\\n            share = total.toBase(amount, false);\\n            // Any deposit should lead to at least the minimum share balance, otherwise it's ignored (no amount taken)\\n            if (total.base.add(share.to128()) < MINIMUM_SHARE_BALANCE) {\\n                return (0, 0);\\n            }\\n        } else {\\n            // amount may be lower than the value of share due to rounding, in that case, add 1 to amount (Always round up)\\n            amount = total.toElastic(share, true);\\n        }\\n\\n        // In case of skimming, check that only the skimmable amount is taken.\\n        // For ETH, the full balance is available, so no need to check.\\n        // During flashloans the _tokenBalanceOf is lower than 'reality', so skimming deposits will mostly fail during a flashloan.\\n        require(\\n            from != address(this) || token_ == USE_ETHEREUM || amount <= _tokenBalanceOf(token).sub(total.elastic),\\n            \\\"BentoBox: Skim too much\\\"\\n        );\\n\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n        total.base = total.base.add(share.to128());\\n        total.elastic = total.elastic.add(amount.to128());\\n        totals[token] = total;\\n\\n        // Interactions\\n        // During the first deposit, we check that this token is 'real'\\n        if (token_ == USE_ETHEREUM) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the WETH implementation is faulty or malicious, it will block adding ETH (but we know the WETH implementation)\\n            IWETH(address(wethToken)).deposit{value: amount}();\\n        } else if (from != address(this)) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the token implementation is faulty or malicious, it may block adding tokens. Good.\\n            token.safeTransferFrom(from, address(this), amount);\\n        }\\n        emit LogDeposit(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n        if (share == 0) {\\n            // value of the share paid could be lower than the amount paid due to rounding, in that case, add a share (Always round up)\\n            share = total.toBase(amount, true);\\n        } else {\\n            // amount may be lower than the value of share due to rounding, that's ok\\n            amount = total.toElastic(share, false);\\n        }\\n\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        total.elastic = total.elastic.sub(amount.to128());\\n        total.base = total.base.sub(share.to128());\\n        // There have to be at least 1000 shares left to prevent reseting the share/amount ratio (unless it's fully emptied)\\n        require(total.base >= MINIMUM_SHARE_BALANCE || total.base == 0, \\\"BentoBox: cannot empty\\\");\\n        totals[token] = total;\\n\\n        // Interactions\\n        if (token_ == USE_ETHEREUM) {\\n            // X2, X3: A revert or big gas usage in the WETH contract could block withdrawals, but WETH9 is fine.\\n            IWETH(address(wethToken)).withdraw(amount);\\n            // X2, X3: A revert or big gas usage could block, however, the to address is under control of the caller.\\n            (bool success, ) = to.call{value: amount}(\\\"\\\");\\n            require(success, \\\"BentoBox: ETH transfer failed\\\");\\n        } else {\\n            // X2, X3: A malicious token could block withdrawal of just THAT token.\\n            //         masterContracts may want to take care not to rely on withdraw always succeeding.\\n            token.safeTransfer(to, amount);\\n        }\\n        emit LogWithdraw(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    // Clones of master contracts can transfer from any account that has approved them\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transferMultiple for gas optimization\\n    function transfer(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) public allowed(from) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n\\n        emit LogTransfer(token, from, to, share);\\n    }\\n\\n    /// @notice Transfer shares from a user account to multiple other ones.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param tos The receivers of the tokens.\\n    /// @param shares The amount of `token` in shares for each receiver in `tos`.\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transfer for gas optimization\\n    function transferMultiple(\\n        IERC20 token,\\n        address from,\\n        address[] calldata tos,\\n        uint256[] calldata shares\\n    ) public allowed(from) {\\n        // Checks\\n        require(tos[0] != address(0), \\\"BentoBox: to[0] not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        uint256 totalAmount;\\n        uint256 len = tos.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address to = tos[i];\\n            balanceOf[token][to] = balanceOf[token][to].add(shares[i]);\\n            totalAmount = totalAmount.add(shares[i]);\\n            emit LogTransfer(token, from, to, shares[i]);\\n        }\\n        balanceOf[token][from] = balanceOf[token][from].sub(totalAmount);\\n    }\\n\\n    /// @notice Flashloan ability.\\n    /// @param borrower The address of the contract that implements and conforms to `IFlashBorrower` and handles the flashloan.\\n    /// @param receiver Address of the token receiver.\\n    /// @param token The address of the token to receive.\\n    /// @param amount of the tokens to receive.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function flashLoan(\\n        IFlashBorrower borrower,\\n        address receiver,\\n        IERC20 token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public {\\n        uint256 fee = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n        token.safeTransfer(receiver, amount);\\n\\n        borrower.onFlashLoan(msg.sender, token, amount, fee, data);\\n\\n        require(_tokenBalanceOf(token) >= totals[token].addElastic(fee.to128()), \\\"BentoBox: Wrong amount\\\");\\n        emit LogFlashLoan(address(borrower), token, amount, fee, receiver);\\n    }\\n\\n    /// @notice Support for batched flashloans. Useful to request multiple different `tokens` in a single transaction.\\n    /// @param borrower The address of the contract that implements and conforms to `IBatchFlashBorrower` and handles the flashloan.\\n    /// @param receivers An array of the token receivers. A one-to-one mapping with `tokens` and `amounts`.\\n    /// @param tokens The addresses of the tokens.\\n    /// @param amounts of the tokens for each receiver.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function batchFlashLoan(\\n        IBatchFlashBorrower borrower,\\n        address[] calldata receivers,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public {\\n        uint256[] memory fees = new uint256[](tokens.length);\\n\\n        uint256 len = tokens.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 amount = amounts[i];\\n            fees[i] = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n\\n            tokens[i].safeTransfer(receivers[i], amounts[i]);\\n        }\\n\\n        borrower.onBatchFlashLoan(msg.sender, tokens, amounts, fees, data);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            IERC20 token = tokens[i];\\n            require(_tokenBalanceOf(token) >= totals[token].addElastic(fees[i].to128()), \\\"BentoBox: Wrong amount\\\");\\n            emit LogFlashLoan(address(borrower), token, amounts[i], fees[i], receivers[i]);\\n        }\\n    }\\n\\n    /// @notice Sets the target percentage of the strategy for `token`.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param targetPercentage_ The new target in percent. Must be lesser or equal to `MAX_TARGET_PERCENTAGE`.\\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) public onlyOwner {\\n        // Checks\\n        require(targetPercentage_ <= MAX_TARGET_PERCENTAGE, \\\"StrategyManager: Target too high\\\");\\n\\n        // Effects\\n        strategyData[token].targetPercentage = targetPercentage_;\\n        emit LogStrategyTargetPercentage(token, targetPercentage_);\\n    }\\n\\n    /// @notice Sets the contract address of a new strategy that conforms to `IStrategy` for `token`.\\n    /// Must be called twice with the same arguments.\\n    /// A new strategy becomes pending first and can be activated once `STRATEGY_DELAY` is over.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param newStrategy The address of the contract that conforms to `IStrategy`.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // C4 - Use block.timestamp only for long intervals (SWC-116)\\n    // C4: block.timestamp is used for a period of 2 weeks, which is long enough\\n    function setStrategy(IERC20 token, IStrategy newStrategy) public onlyOwner {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy pending = pendingStrategy[token];\\n        if (data.strategyStartDate == 0 || pending != newStrategy) {\\n            pendingStrategy[token] = newStrategy;\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: Our sun will swallow the earth well before this overflows\\n            data.strategyStartDate = (block.timestamp + STRATEGY_DELAY).to64();\\n            emit LogStrategyQueued(token, newStrategy);\\n        } else {\\n            require(data.strategyStartDate != 0 && block.timestamp >= data.strategyStartDate, \\\"StrategyManager: Too early\\\");\\n            if (address(strategy[token]) != address(0)) {\\n                int256 balanceChange = strategy[token].exit(data.balance);\\n                // Effects\\n                if (balanceChange > 0) {\\n                    uint256 add = uint256(balanceChange);\\n                    totals[token].addElastic(add);\\n                    emit LogStrategyProfit(token, add);\\n                } else if (balanceChange < 0) {\\n                    uint256 sub = uint256(-balanceChange);\\n                    totals[token].subElastic(sub);\\n                    emit LogStrategyLoss(token, sub);\\n                }\\n\\n                emit LogStrategyDivest(token, data.balance);\\n            }\\n            strategy[token] = pending;\\n            data.strategyStartDate = 0;\\n            data.balance = 0;\\n            pendingStrategy[token] = IStrategy(0);\\n            emit LogStrategySet(token, newStrategy);\\n        }\\n        strategyData[token] = data;\\n    }\\n\\n    /// @notice The actual process of yield farming. Executes the strategy of `token`.\\n    /// Optionally does housekeeping if `balance` is true.\\n    /// `maxChangeAmount` is relevant for skimming or withdrawing if `balance` is true.\\n    /// @param token The address of the token for which a strategy is deployed.\\n    /// @param balance True if housekeeping should be done.\\n    /// @param maxChangeAmount The maximum amount for either pulling or pushing from/to the `IStrategy` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // F5: Not followed to prevent reentrancy issues with flashloans and BentoBox skims?\\n    function harvest(\\n        IERC20 token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) public {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy _strategy = strategy[token];\\n        int256 balanceChange = _strategy.harvest(data.balance, msg.sender);\\n        if (balanceChange == 0 && !balance) {\\n            return;\\n        }\\n\\n        uint256 totalElastic = totals[token].elastic;\\n\\n        if (balanceChange > 0) {\\n            uint256 add = uint256(balanceChange);\\n            totalElastic = totalElastic.add(add);\\n            totals[token].elastic = totalElastic.to128();\\n            emit LogStrategyProfit(token, add);\\n        } else if (balanceChange < 0) {\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: balanceChange could overflow if it's max negative int128.\\n            // But tokens with balances that large are not supported by the BentoBox.\\n            uint256 sub = uint256(-balanceChange);\\n            totalElastic = totalElastic.sub(sub);\\n            totals[token].elastic = totalElastic.to128();\\n            data.balance = data.balance.sub(sub.to128());\\n            emit LogStrategyLoss(token, sub);\\n        }\\n\\n        if (balance) {\\n            uint256 targetBalance = totalElastic.mul(data.targetPercentage) / 100;\\n            // if data.balance == targetBalance there is nothing to update\\n            if (data.balance < targetBalance) {\\n                uint256 amountOut = targetBalance.sub(data.balance);\\n                if (maxChangeAmount != 0 && amountOut > maxChangeAmount) {\\n                    amountOut = maxChangeAmount;\\n                }\\n                token.safeTransfer(address(_strategy), amountOut);\\n                data.balance = data.balance.add(amountOut.to128());\\n                _strategy.skim(amountOut);\\n                emit LogStrategyInvest(token, amountOut);\\n            } else if (data.balance > targetBalance) {\\n                uint256 amountIn = data.balance.sub(targetBalance.to128());\\n                if (maxChangeAmount != 0 && amountIn > maxChangeAmount) {\\n                    amountIn = maxChangeAmount;\\n                }\\n\\n                uint256 actualAmountIn = _strategy.withdraw(amountIn);\\n\\n                data.balance = data.balance.sub(actualAmountIn.to128());\\n                emit LogStrategyDivest(token, actualAmountIn);\\n            }\\n        }\\n\\n        strategyData[token] = data;\\n    }\\n\\n    // Contract should be able to receive ETH deposits to support deposit & skim\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd8343e88ade6bf85fd34d3556aedb2b14fe07ca40396ae2ef6064c9d8da0d4d3\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"init(bytes)":{"notice":"Init function that gets called from `BoringFactory.deploy`. Also kown as the constructor for cloned contracts. Any ETH send to `BoringFactory.deploy` ends up here."}},"version":1}},"IStrategy":{"abi":[{"inputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"name":"exit","outputs":[{"internalType":"int256","name":"amountAdded","type":"int256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"address","name":"sender","type":"address"}],"name":"harvest","outputs":[{"internalType":"int256","name":"amountAdded","type":"int256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"skim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[{"internalType":"uint256","name":"actualAmount","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"exit(uint256)":{"params":{"balance":"The amount of tokens the caller thinks it has invested."},"returns":{"amountAdded":"The delta (+profit or -loss) that occured in contrast to `balance`."}},"harvest(uint256,address)":{"params":{"balance":"The amount of tokens the caller thinks it has invested.","sender":"The address of the initiator of this transaction. Can be used for reimbursements, etc."},"returns":{"amountAdded":"The delta (+profit or -loss) that occured in contrast to `balance`."}},"skim(uint256)":{"params":{"amount":"The amount of tokens to invest."}},"withdraw(uint256)":{"details":"The `actualAmount` should be very close to the amount. The difference should NOT be used to report a loss. That's what harvest is for.","params":{"amount":"The requested amount the caller wants to withdraw."},"returns":{"actualAmount":"The real amount that is withdrawn."}}},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"exit(uint256)":"7f8661a1","harvest(uint256,address)":"18fccc76","skim(uint256)":"6939aaf5","withdraw(uint256)":"2e1a7d4d"}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amountAdded\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amountAdded\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"exit(uint256)\":{\"params\":{\"balance\":\"The amount of tokens the caller thinks it has invested.\"},\"returns\":{\"amountAdded\":\"The delta (+profit or -loss) that occured in contrast to `balance`.\"}},\"harvest(uint256,address)\":{\"params\":{\"balance\":\"The amount of tokens the caller thinks it has invested.\",\"sender\":\"The address of the initiator of this transaction. Can be used for reimbursements, etc.\"},\"returns\":{\"amountAdded\":\"The delta (+profit or -loss) that occured in contrast to `balance`.\"}},\"skim(uint256)\":{\"params\":{\"amount\":\"The amount of tokens to invest.\"}},\"withdraw(uint256)\":{\"details\":\"The `actualAmount` should be very close to the amount. The difference should NOT be used to report a loss. That's what harvest is for.\",\"params\":{\"amount\":\"The requested amount the caller wants to withdraw.\"},\"returns\":{\"actualAmount\":\"The real amount that is withdrawn.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exit(uint256)\":{\"notice\":\"Withdraw all assets in the safest way possible. This shouldn't fail.\"},\"harvest(uint256,address)\":{\"notice\":\"Harvest any profits made converted to the asset and pass them to the caller.\"},\"skim(uint256)\":{\"notice\":\"Send the assets to the Strategy and call skim to invest them.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw assets. The returned amount can differ from the requested amount due to rounding.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/BentoBoxV1Flat.sol\":\"IStrategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/flat/BentoBoxV1Flat.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// The BentoBox\\n\\n//  \\u2584\\u2584\\u2584\\u2584\\u00b7 \\u2584\\u2584\\u2584 . \\u2590 \\u2584 \\u2584\\u2584\\u2584\\u2584\\u2584      \\u2584\\u2584\\u2584\\u2584\\u00b7       \\u2590\\u2584\\u2022 \\u2584\\n//  \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u2580\\u2584.\\u2580\\u00b7\\u2588\\u258c\\u2590\\u2588\\u2022\\u2588\\u2588  \\u25aa     \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u25aa      \\u2588\\u258c\\u2588\\u258c\\u25aa\\n//  \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584\\u2590\\u2580\\u2580\\u25aa\\u2584\\u2590\\u2588\\u2590\\u2590\\u258c \\u2590\\u2588.\\u25aa \\u2584\\u2588\\u2580\\u2584 \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584 \\u2584\\u2588\\u2580\\u2584  \\u00b7\\u2588\\u2588\\u00b7\\n//  \\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u2584\\u2584\\u258c\\u2588\\u2588\\u2590\\u2588\\u258c \\u2590\\u2588\\u258c\\u00b7\\u2590\\u2588\\u258c.\\u2590\\u258c\\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u258c.\\u2590\\u258c\\u25aa\\u2590\\u2588\\u00b7\\u2588\\u258c\\n//  \\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2580\\u2580 \\u2580\\u2580 \\u2588\\u25aa \\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u2022\\u2580\\u2580 \\u2580\\u2580\\n\\n// This contract stores funds, handles their transfers, supports flash loans and strategies.\\n\\n// Copyright (c) 2021 BoringCrypto - All rights reserved\\n// Twitter: @Boring_Crypto\\n\\n// Special thanks to Keno for all his hard work and support\\n\\n// Version 22-Mar-2021\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable not-rely-on-time\\n// solhint-disable no-inline-assembly\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function decimals() external view returns (uint256);\\n}\\n\\n// File contracts/interfaces/IFlashLoan.sol\\n// License-Identifier: MIT\\n\\ninterface IFlashBorrower {\\n    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param token The address of the token that is loaned.\\n    /// @param amount of the `token` that is loaned.\\n    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onFlashLoan(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IBatchFlashBorrower {\\n    /// @notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param tokens Array of addresses for ERC-20 tokens that is loaned.\\n    /// @param amounts A one-to-one map to `tokens` that is loaned.\\n    /// @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onBatchFlashLoan(\\n        address sender,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata fees,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File contracts/interfaces/IWETH.sol\\n// License-Identifier: MIT\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\\n// File contracts/interfaces/IStrategy.sol\\n// License-Identifier: MIT\\n\\ninterface IStrategy {\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\n    /// @param amount The amount of tokens to invest.\\n    function skim(uint256 amount) external;\\n\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\n    /// @dev The `actualAmount` should be very close to the amount.\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\n    /// @param amount The requested amount the caller wants to withdraw.\\n    /// @return actualAmount The real amount that is withdrawn.\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library using overflow-/underflow-safe math.\\nlibrary RebaseLibrary {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = elastic.mul(total.base) / total.elastic;\\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\\n                base = base.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = base.mul(total.elastic) / total.base;\\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\\n                elastic = elastic.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\\n    /// @return (Rebase) The new total.\\n    /// @return base in relationship to `elastic`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 base) {\\n        base = toBase(total, elastic, roundUp);\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return (total, base);\\n    }\\n\\n    /// @notice Sub `base` from `total` and update `total.elastic`.\\n    /// @return (Rebase) The new total.\\n    /// @return elastic in relationship to `base`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 elastic) {\\n        elastic = toElastic(total, base, roundUp);\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return (total, elastic);\\n    }\\n\\n    /// @notice Add `elastic` and `base` to `total`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Subtract `elastic` and `base` to `total`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Add `elastic` to `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.add(elastic.to128());\\n    }\\n\\n    /// @notice Subtract `elastic` from `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.sub(elastic.to128());\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() public {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IMasterContract {\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\n    /// Also kown as the constructor for cloned contracts.\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\n    /// @param data Can be abi encoded arguments or anything else.\\n    function init(bytes calldata data) external payable;\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringFactory.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BoringFactory {\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\n\\n    /// @notice Mapping from clone contracts to their masterContract.\\n    mapping(address => address) public masterContractOf;\\n\\n    /// @notice Deploys a given master Contract as a clone.\\n    /// Any ETH transferred with this call is forwarded to the new clone.\\n    /// Emits `LogDeploy`.\\n    /// @param masterContract The address of the contract to clone.\\n    /// @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\\n    /// @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\\n    /// @return cloneAddress Address of the created clone contract.\\n    function deploy(\\n        address masterContract,\\n        bytes calldata data,\\n        bool useCreate2\\n    ) public payable returns (address cloneAddress) {\\n        require(masterContract != address(0), \\\"BoringFactory: No masterContract\\\");\\n        bytes20 targetBytes = bytes20(masterContract); // Takes the first 20 bytes of the masterContract's address\\n\\n        if (useCreate2) {\\n            // each masterContract has different code already. So clones are distinguished by their data only.\\n            bytes32 salt = keccak256(data);\\n\\n            // Creates clone, more info here: https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create2(0, clone, 0x37, salt)\\n            }\\n        } else {\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create(0, clone, 0x37)\\n            }\\n        }\\n        masterContractOf[cloneAddress] = masterContract;\\n\\n        IMasterContract(cloneAddress).init{value: msg.value}(data);\\n\\n        emit LogDeploy(masterContract, data, cloneAddress);\\n    }\\n}\\n\\n// File contracts/MasterContractManager.sol\\n// License-Identifier: UNLICENSED\\n\\ncontract MasterContractManager is BoringOwnable, BoringFactory {\\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\\n    event LogRegisterProtocol(address indexed protocol);\\n\\n    /// @notice masterContract to user to approval state\\n    mapping(address => mapping(address => bool)) public masterContractApproved;\\n    /// @notice masterContract to whitelisted state for approval without signed message\\n    mapping(address => bool) public whitelistedMasterContracts;\\n    /// @notice user nonces for masterContract approvals\\n    mapping(address => uint256) public nonces;\\n\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n    // See https://eips.ethereum.org/EIPS/eip-191\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\n    bytes32 private constant APPROVAL_SIGNATURE_HASH =\\n        keccak256(\\\"SetMasterContractApproval(string warning,address user,address masterContract,bool approved,uint256 nonce)\\\");\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\n    }\\n\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, keccak256(\\\"BentoBox V1\\\"), chainId, address(this)));\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @notice Other contracts need to register with this master contract so that users can approve them for the BentoBox.\\n    function registerProtocol() public {\\n        masterContractOf[msg.sender] = msg.sender;\\n        emit LogRegisterProtocol(msg.sender);\\n    }\\n\\n    /// @notice Enables or disables a contract for approval without signed message.\\n    function whitelistMasterContract(address masterContract, bool approved) public onlyOwner {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: Cannot approve 0\\\");\\n\\n        // Effects\\n        whitelistedMasterContracts[masterContract] = approved;\\n        emit LogWhiteListMasterContract(masterContract, approved);\\n    }\\n\\n    /// @notice Approves or revokes a `masterContract` access to `user` funds.\\n    /// @param user The address of the user that approves or revokes access.\\n    /// @param masterContract The address who gains or loses access.\\n    /// @param approved If True approves access. If False revokes access.\\n    /// @param v Part of the signature. (See EIP-191)\\n    /// @param r Part of the signature. (See EIP-191)\\n    /// @param s Part of the signature. (See EIP-191)\\n    // F4 - Check behaviour for all function arguments when wrong or extreme\\n    // F4: Don't allow masterContract 0 to be approved. Unknown contracts will have a masterContract of 0.\\n    // F4: User can't be 0 for signed approvals because the recoveredAddress will be 0 if ecrecover fails\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: masterC not set\\\"); // Important for security\\n\\n        // If no signature is provided, the fallback is executed\\n        if (r == 0 && s == 0 && v == 0) {\\n            require(user == msg.sender, \\\"MasterCMgr: user not sender\\\");\\n            require(masterContractOf[user] == address(0), \\\"MasterCMgr: user is clone\\\");\\n            require(whitelistedMasterContracts[masterContract], \\\"MasterCMgr: not whitelisted\\\");\\n        } else {\\n            // Important for security - any address without masterContract has address(0) as masterContract\\n            // So approving address(0) would approve every address, leading to full loss of funds\\n            // Also, ecrecover returns address(0) on failure. So we check this:\\n            require(user != address(0), \\\"MasterCMgr: User cannot be 0\\\");\\n\\n            // C10 - Protect signatures against replay, use nonce and chainId (SWC-121)\\n            // C10: nonce + chainId are used to prevent replays\\n            // C11 - All signatures strictly EIP-712 (SWC-117 SWC-122)\\n            // C11: signature is EIP-712 compliant\\n            // C12 - abi.encodePacked can't contain variable length user input (SWC-133)\\n            // C12: abi.encodePacked has fixed length parameters\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA,\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            APPROVAL_SIGNATURE_HASH,\\n                            approved\\n                                ? keccak256(\\\"Give FULL access to funds in (and approved to) BentoBox?\\\")\\n                                : keccak256(\\\"Revoke access to BentoBox?\\\"),\\n                            user,\\n                            masterContract,\\n                            approved,\\n                            nonces[user]++\\n                        )\\n                    )\\n                )\\n            );\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress == user, \\\"MasterCMgr: Invalid Signature\\\");\\n        }\\n\\n        // Effects\\n        masterContractApproved[masterContract][user] = approved;\\n        emit LogSetMasterContractApproval(masterContract, user, approved);\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringBatchable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BaseBoringBatchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /// @notice Allows batched call to self (this contract).\\n    /// @param calls An array of inputs for each call.\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n    /// @return successes An array indicating the success of a call, mapped one-to-one to `calls`.\\n    /// @return results An array with the returned data of each function call, mapped one-to-one to `calls`.\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results) {\\n        successes = new bool[](calls.length);\\n        results = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\n            require(success || !revertOnFail, _getRevertMsg(result));\\n            successes[i] = success;\\n            results[i] = result;\\n        }\\n    }\\n}\\n\\ncontract BoringBatchable is BaseBoringBatchable {\\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\\n    /// Lookup `IERC20.permit`.\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\n    function permitToken(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        token.permit(from, to, amount, deadline, v, r, s);\\n    }\\n}\\n\\n// File contracts/BentoBox.sol\\n// License-Identifier: UNLICENSED\\n\\n/// @title BentoBox\\n/// @author BoringCrypto, Keno\\n/// @notice The BentoBox is a vault for tokens. The stored tokens can be flash loaned and used in strategies.\\n/// Yield from this will go to the token depositors.\\n/// Rebasing tokens ARE NOT supported and WILL cause loss of funds.\\n/// Any funds transfered directly onto the BentoBox will be lost, use the deposit function instead.\\ncontract BentoBoxV1 is MasterContractManager, BoringBatchable {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n    using BoringERC20 for IERC20;\\n    using RebaseLibrary for Rebase;\\n\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n\\n    event LogDeposit(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogWithdraw(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogTransfer(IERC20 indexed token, address indexed from, address indexed to, uint256 share);\\n\\n    event LogFlashLoan(address indexed borrower, IERC20 indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\\n\\n    event LogStrategyTargetPercentage(IERC20 indexed token, uint256 targetPercentage);\\n    event LogStrategyQueued(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategySet(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategyInvest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyDivest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyProfit(IERC20 indexed token, uint256 amount);\\n    event LogStrategyLoss(IERC20 indexed token, uint256 amount);\\n\\n    // *************** //\\n    // *** STRUCTS *** //\\n    // *************** //\\n\\n    struct StrategyData {\\n        uint64 strategyStartDate;\\n        uint64 targetPercentage;\\n        uint128 balance; // the balance of the strategy that BentoBox thinks is in there\\n    }\\n\\n    // ******************************** //\\n    // *** CONSTANTS AND IMMUTABLES *** //\\n    // ******************************** //\\n\\n    // V2 - Can they be private?\\n    // V2: Private to save gas, to verify it's correct, check the constructor arguments\\n    IERC20 private immutable wethToken;\\n\\n    IERC20 private constant USE_ETHEREUM = IERC20(0);\\n    uint256 private constant FLASH_LOAN_FEE = 50; // 0.05%\\n    uint256 private constant FLASH_LOAN_FEE_PRECISION = 1e5;\\n    uint256 private constant STRATEGY_DELAY = 0 weeks;\\n    uint256 private constant MAX_TARGET_PERCENTAGE = 95; // 95%\\n    uint256 private constant MINIMUM_SHARE_BALANCE = 1000; // To prevent the ratio going off\\n\\n    // ***************** //\\n    // *** VARIABLES *** //\\n    // ***************** //\\n\\n    // Balance per token per address/contract in shares\\n    mapping(IERC20 => mapping(address => uint256)) public balanceOf;\\n\\n    // Rebase from amount to share\\n    mapping(IERC20 => Rebase) public totals;\\n\\n    mapping(IERC20 => IStrategy) public strategy;\\n    mapping(IERC20 => IStrategy) public pendingStrategy;\\n    mapping(IERC20 => StrategyData) public strategyData;\\n\\n    // ******************* //\\n    // *** CONSTRUCTOR *** //\\n    // ******************* //\\n\\n    constructor(IERC20 wethToken_) public {\\n        wethToken = wethToken_;\\n    }\\n\\n    // Just for testing purposes!!! Don't deploy this contract on production!!\\n    function setTokenTotal(\\n        IERC20 token,\\n        uint128 elastic,\\n        uint128 base\\n    ) public {\\n        Rebase memory total;\\n        total.elastic = elastic;\\n        total.base = base;\\n        totals[token] = total;\\n    }\\n\\n    // ***************** //\\n    // *** MODIFIERS *** //\\n    // ***************** //\\n\\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\\n    /// If 'from' is msg.sender, it's allowed.\\n    /// If 'from' is the BentoBox itself, it's allowed. Any ETH, token balances (above the known balances) or BentoBox balances\\n    /// can be taken by anyone.\\n    /// This is to enable skimming, not just for deposits, but also for withdrawals or transfers, enabling better composability.\\n    /// If 'from' is a clone of a masterContract AND the 'from' address has approved that masterContract, it's allowed.\\n    modifier allowed(address from) {\\n        if (from != msg.sender && from != address(this)) {\\n            // From is sender or you are skimming\\n            address masterContract = masterContractOf[msg.sender];\\n            require(masterContract != address(0), \\\"BentoBox: no masterContract\\\");\\n            require(masterContractApproved[masterContract][from], \\\"BentoBox: Transfer not approved\\\");\\n        }\\n        _;\\n    }\\n\\n    // ************************** //\\n    // *** INTERNAL FUNCTIONS *** //\\n    // ************************** //\\n\\n    /// @dev Returns the total balance of `token` this contracts holds,\\n    /// plus the total amount this contract thinks the strategy holds.\\n    function _tokenBalanceOf(IERC20 token) internal view returns (uint256 amount) {\\n        amount = token.balanceOf(address(this)).add(strategyData[token].balance);\\n    }\\n\\n    // ************************ //\\n    // *** PUBLIC FUNCTIONS *** //\\n    // ************************ //\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share) {\\n        share = totals[token].toBase(amount, roundUp);\\n    }\\n\\n    /// @dev Helper function represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        IERC20 token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount) {\\n        amount = totals[token].toElastic(share, roundUp);\\n    }\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public payable allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n\\n        // If a new token gets added, the tokenSupply call checks that this is a deployed contract. Needed for security.\\n        require(total.elastic != 0 || token.totalSupply() > 0, \\\"BentoBox: No tokens\\\");\\n        if (share == 0) {\\n            // value of the share may be lower than the amount due to rounding, that's ok\\n            share = total.toBase(amount, false);\\n            // Any deposit should lead to at least the minimum share balance, otherwise it's ignored (no amount taken)\\n            if (total.base.add(share.to128()) < MINIMUM_SHARE_BALANCE) {\\n                return (0, 0);\\n            }\\n        } else {\\n            // amount may be lower than the value of share due to rounding, in that case, add 1 to amount (Always round up)\\n            amount = total.toElastic(share, true);\\n        }\\n\\n        // In case of skimming, check that only the skimmable amount is taken.\\n        // For ETH, the full balance is available, so no need to check.\\n        // During flashloans the _tokenBalanceOf is lower than 'reality', so skimming deposits will mostly fail during a flashloan.\\n        require(\\n            from != address(this) || token_ == USE_ETHEREUM || amount <= _tokenBalanceOf(token).sub(total.elastic),\\n            \\\"BentoBox: Skim too much\\\"\\n        );\\n\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n        total.base = total.base.add(share.to128());\\n        total.elastic = total.elastic.add(amount.to128());\\n        totals[token] = total;\\n\\n        // Interactions\\n        // During the first deposit, we check that this token is 'real'\\n        if (token_ == USE_ETHEREUM) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the WETH implementation is faulty or malicious, it will block adding ETH (but we know the WETH implementation)\\n            IWETH(address(wethToken)).deposit{value: amount}();\\n        } else if (from != address(this)) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the token implementation is faulty or malicious, it may block adding tokens. Good.\\n            token.safeTransferFrom(from, address(this), amount);\\n        }\\n        emit LogDeposit(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n        if (share == 0) {\\n            // value of the share paid could be lower than the amount paid due to rounding, in that case, add a share (Always round up)\\n            share = total.toBase(amount, true);\\n        } else {\\n            // amount may be lower than the value of share due to rounding, that's ok\\n            amount = total.toElastic(share, false);\\n        }\\n\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        total.elastic = total.elastic.sub(amount.to128());\\n        total.base = total.base.sub(share.to128());\\n        // There have to be at least 1000 shares left to prevent reseting the share/amount ratio (unless it's fully emptied)\\n        require(total.base >= MINIMUM_SHARE_BALANCE || total.base == 0, \\\"BentoBox: cannot empty\\\");\\n        totals[token] = total;\\n\\n        // Interactions\\n        if (token_ == USE_ETHEREUM) {\\n            // X2, X3: A revert or big gas usage in the WETH contract could block withdrawals, but WETH9 is fine.\\n            IWETH(address(wethToken)).withdraw(amount);\\n            // X2, X3: A revert or big gas usage could block, however, the to address is under control of the caller.\\n            (bool success, ) = to.call{value: amount}(\\\"\\\");\\n            require(success, \\\"BentoBox: ETH transfer failed\\\");\\n        } else {\\n            // X2, X3: A malicious token could block withdrawal of just THAT token.\\n            //         masterContracts may want to take care not to rely on withdraw always succeeding.\\n            token.safeTransfer(to, amount);\\n        }\\n        emit LogWithdraw(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    // Clones of master contracts can transfer from any account that has approved them\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transferMultiple for gas optimization\\n    function transfer(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) public allowed(from) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n\\n        emit LogTransfer(token, from, to, share);\\n    }\\n\\n    /// @notice Transfer shares from a user account to multiple other ones.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param tos The receivers of the tokens.\\n    /// @param shares The amount of `token` in shares for each receiver in `tos`.\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transfer for gas optimization\\n    function transferMultiple(\\n        IERC20 token,\\n        address from,\\n        address[] calldata tos,\\n        uint256[] calldata shares\\n    ) public allowed(from) {\\n        // Checks\\n        require(tos[0] != address(0), \\\"BentoBox: to[0] not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        uint256 totalAmount;\\n        uint256 len = tos.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address to = tos[i];\\n            balanceOf[token][to] = balanceOf[token][to].add(shares[i]);\\n            totalAmount = totalAmount.add(shares[i]);\\n            emit LogTransfer(token, from, to, shares[i]);\\n        }\\n        balanceOf[token][from] = balanceOf[token][from].sub(totalAmount);\\n    }\\n\\n    /// @notice Flashloan ability.\\n    /// @param borrower The address of the contract that implements and conforms to `IFlashBorrower` and handles the flashloan.\\n    /// @param receiver Address of the token receiver.\\n    /// @param token The address of the token to receive.\\n    /// @param amount of the tokens to receive.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function flashLoan(\\n        IFlashBorrower borrower,\\n        address receiver,\\n        IERC20 token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public {\\n        uint256 fee = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n        token.safeTransfer(receiver, amount);\\n\\n        borrower.onFlashLoan(msg.sender, token, amount, fee, data);\\n\\n        require(_tokenBalanceOf(token) >= totals[token].addElastic(fee.to128()), \\\"BentoBox: Wrong amount\\\");\\n        emit LogFlashLoan(address(borrower), token, amount, fee, receiver);\\n    }\\n\\n    /// @notice Support for batched flashloans. Useful to request multiple different `tokens` in a single transaction.\\n    /// @param borrower The address of the contract that implements and conforms to `IBatchFlashBorrower` and handles the flashloan.\\n    /// @param receivers An array of the token receivers. A one-to-one mapping with `tokens` and `amounts`.\\n    /// @param tokens The addresses of the tokens.\\n    /// @param amounts of the tokens for each receiver.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function batchFlashLoan(\\n        IBatchFlashBorrower borrower,\\n        address[] calldata receivers,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public {\\n        uint256[] memory fees = new uint256[](tokens.length);\\n\\n        uint256 len = tokens.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 amount = amounts[i];\\n            fees[i] = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n\\n            tokens[i].safeTransfer(receivers[i], amounts[i]);\\n        }\\n\\n        borrower.onBatchFlashLoan(msg.sender, tokens, amounts, fees, data);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            IERC20 token = tokens[i];\\n            require(_tokenBalanceOf(token) >= totals[token].addElastic(fees[i].to128()), \\\"BentoBox: Wrong amount\\\");\\n            emit LogFlashLoan(address(borrower), token, amounts[i], fees[i], receivers[i]);\\n        }\\n    }\\n\\n    /// @notice Sets the target percentage of the strategy for `token`.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param targetPercentage_ The new target in percent. Must be lesser or equal to `MAX_TARGET_PERCENTAGE`.\\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) public onlyOwner {\\n        // Checks\\n        require(targetPercentage_ <= MAX_TARGET_PERCENTAGE, \\\"StrategyManager: Target too high\\\");\\n\\n        // Effects\\n        strategyData[token].targetPercentage = targetPercentage_;\\n        emit LogStrategyTargetPercentage(token, targetPercentage_);\\n    }\\n\\n    /// @notice Sets the contract address of a new strategy that conforms to `IStrategy` for `token`.\\n    /// Must be called twice with the same arguments.\\n    /// A new strategy becomes pending first and can be activated once `STRATEGY_DELAY` is over.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param newStrategy The address of the contract that conforms to `IStrategy`.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // C4 - Use block.timestamp only for long intervals (SWC-116)\\n    // C4: block.timestamp is used for a period of 2 weeks, which is long enough\\n    function setStrategy(IERC20 token, IStrategy newStrategy) public onlyOwner {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy pending = pendingStrategy[token];\\n        if (data.strategyStartDate == 0 || pending != newStrategy) {\\n            pendingStrategy[token] = newStrategy;\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: Our sun will swallow the earth well before this overflows\\n            data.strategyStartDate = (block.timestamp + STRATEGY_DELAY).to64();\\n            emit LogStrategyQueued(token, newStrategy);\\n        } else {\\n            require(data.strategyStartDate != 0 && block.timestamp >= data.strategyStartDate, \\\"StrategyManager: Too early\\\");\\n            if (address(strategy[token]) != address(0)) {\\n                int256 balanceChange = strategy[token].exit(data.balance);\\n                // Effects\\n                if (balanceChange > 0) {\\n                    uint256 add = uint256(balanceChange);\\n                    totals[token].addElastic(add);\\n                    emit LogStrategyProfit(token, add);\\n                } else if (balanceChange < 0) {\\n                    uint256 sub = uint256(-balanceChange);\\n                    totals[token].subElastic(sub);\\n                    emit LogStrategyLoss(token, sub);\\n                }\\n\\n                emit LogStrategyDivest(token, data.balance);\\n            }\\n            strategy[token] = pending;\\n            data.strategyStartDate = 0;\\n            data.balance = 0;\\n            pendingStrategy[token] = IStrategy(0);\\n            emit LogStrategySet(token, newStrategy);\\n        }\\n        strategyData[token] = data;\\n    }\\n\\n    /// @notice The actual process of yield farming. Executes the strategy of `token`.\\n    /// Optionally does housekeeping if `balance` is true.\\n    /// `maxChangeAmount` is relevant for skimming or withdrawing if `balance` is true.\\n    /// @param token The address of the token for which a strategy is deployed.\\n    /// @param balance True if housekeeping should be done.\\n    /// @param maxChangeAmount The maximum amount for either pulling or pushing from/to the `IStrategy` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // F5: Not followed to prevent reentrancy issues with flashloans and BentoBox skims?\\n    function harvest(\\n        IERC20 token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) public {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy _strategy = strategy[token];\\n        int256 balanceChange = _strategy.harvest(data.balance, msg.sender);\\n        if (balanceChange == 0 && !balance) {\\n            return;\\n        }\\n\\n        uint256 totalElastic = totals[token].elastic;\\n\\n        if (balanceChange > 0) {\\n            uint256 add = uint256(balanceChange);\\n            totalElastic = totalElastic.add(add);\\n            totals[token].elastic = totalElastic.to128();\\n            emit LogStrategyProfit(token, add);\\n        } else if (balanceChange < 0) {\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: balanceChange could overflow if it's max negative int128.\\n            // But tokens with balances that large are not supported by the BentoBox.\\n            uint256 sub = uint256(-balanceChange);\\n            totalElastic = totalElastic.sub(sub);\\n            totals[token].elastic = totalElastic.to128();\\n            data.balance = data.balance.sub(sub.to128());\\n            emit LogStrategyLoss(token, sub);\\n        }\\n\\n        if (balance) {\\n            uint256 targetBalance = totalElastic.mul(data.targetPercentage) / 100;\\n            // if data.balance == targetBalance there is nothing to update\\n            if (data.balance < targetBalance) {\\n                uint256 amountOut = targetBalance.sub(data.balance);\\n                if (maxChangeAmount != 0 && amountOut > maxChangeAmount) {\\n                    amountOut = maxChangeAmount;\\n                }\\n                token.safeTransfer(address(_strategy), amountOut);\\n                data.balance = data.balance.add(amountOut.to128());\\n                _strategy.skim(amountOut);\\n                emit LogStrategyInvest(token, amountOut);\\n            } else if (data.balance > targetBalance) {\\n                uint256 amountIn = data.balance.sub(targetBalance.to128());\\n                if (maxChangeAmount != 0 && amountIn > maxChangeAmount) {\\n                    amountIn = maxChangeAmount;\\n                }\\n\\n                uint256 actualAmountIn = _strategy.withdraw(amountIn);\\n\\n                data.balance = data.balance.sub(actualAmountIn.to128());\\n                emit LogStrategyDivest(token, actualAmountIn);\\n            }\\n        }\\n\\n        strategyData[token] = data;\\n    }\\n\\n    // Contract should be able to receive ETH deposits to support deposit & skim\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd8343e88ade6bf85fd34d3556aedb2b14fe07ca40396ae2ef6064c9d8da0d4d3\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"exit(uint256)":{"notice":"Withdraw all assets in the safest way possible. This shouldn't fail."},"harvest(uint256,address)":{"notice":"Harvest any profits made converted to the asset and pass them to the caller."},"skim(uint256)":{"notice":"Send the assets to the Strategy and call skim to invest them."},"withdraw(uint256)":{"notice":"Withdraw assets. The returned amount can differ from the requested amount due to rounding."}},"version":1}},"IWETH":{"abi":[{"inputs":[],"name":"deposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"deposit()":"d0e30db0","withdraw(uint256)":"2e1a7d4d"}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/BentoBoxV1Flat.sol\":\"IWETH\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/flat/BentoBoxV1Flat.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// The BentoBox\\n\\n//  \\u2584\\u2584\\u2584\\u2584\\u00b7 \\u2584\\u2584\\u2584 . \\u2590 \\u2584 \\u2584\\u2584\\u2584\\u2584\\u2584      \\u2584\\u2584\\u2584\\u2584\\u00b7       \\u2590\\u2584\\u2022 \\u2584\\n//  \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u2580\\u2584.\\u2580\\u00b7\\u2588\\u258c\\u2590\\u2588\\u2022\\u2588\\u2588  \\u25aa     \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u25aa      \\u2588\\u258c\\u2588\\u258c\\u25aa\\n//  \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584\\u2590\\u2580\\u2580\\u25aa\\u2584\\u2590\\u2588\\u2590\\u2590\\u258c \\u2590\\u2588.\\u25aa \\u2584\\u2588\\u2580\\u2584 \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584 \\u2584\\u2588\\u2580\\u2584  \\u00b7\\u2588\\u2588\\u00b7\\n//  \\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u2584\\u2584\\u258c\\u2588\\u2588\\u2590\\u2588\\u258c \\u2590\\u2588\\u258c\\u00b7\\u2590\\u2588\\u258c.\\u2590\\u258c\\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u258c.\\u2590\\u258c\\u25aa\\u2590\\u2588\\u00b7\\u2588\\u258c\\n//  \\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2580\\u2580 \\u2580\\u2580 \\u2588\\u25aa \\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u2022\\u2580\\u2580 \\u2580\\u2580\\n\\n// This contract stores funds, handles their transfers, supports flash loans and strategies.\\n\\n// Copyright (c) 2021 BoringCrypto - All rights reserved\\n// Twitter: @Boring_Crypto\\n\\n// Special thanks to Keno for all his hard work and support\\n\\n// Version 22-Mar-2021\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable not-rely-on-time\\n// solhint-disable no-inline-assembly\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function decimals() external view returns (uint256);\\n}\\n\\n// File contracts/interfaces/IFlashLoan.sol\\n// License-Identifier: MIT\\n\\ninterface IFlashBorrower {\\n    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param token The address of the token that is loaned.\\n    /// @param amount of the `token` that is loaned.\\n    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onFlashLoan(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IBatchFlashBorrower {\\n    /// @notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param tokens Array of addresses for ERC-20 tokens that is loaned.\\n    /// @param amounts A one-to-one map to `tokens` that is loaned.\\n    /// @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onBatchFlashLoan(\\n        address sender,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata fees,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File contracts/interfaces/IWETH.sol\\n// License-Identifier: MIT\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\\n// File contracts/interfaces/IStrategy.sol\\n// License-Identifier: MIT\\n\\ninterface IStrategy {\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\n    /// @param amount The amount of tokens to invest.\\n    function skim(uint256 amount) external;\\n\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\n    /// @dev The `actualAmount` should be very close to the amount.\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\n    /// @param amount The requested amount the caller wants to withdraw.\\n    /// @return actualAmount The real amount that is withdrawn.\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library using overflow-/underflow-safe math.\\nlibrary RebaseLibrary {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = elastic.mul(total.base) / total.elastic;\\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\\n                base = base.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = base.mul(total.elastic) / total.base;\\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\\n                elastic = elastic.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\\n    /// @return (Rebase) The new total.\\n    /// @return base in relationship to `elastic`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 base) {\\n        base = toBase(total, elastic, roundUp);\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return (total, base);\\n    }\\n\\n    /// @notice Sub `base` from `total` and update `total.elastic`.\\n    /// @return (Rebase) The new total.\\n    /// @return elastic in relationship to `base`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 elastic) {\\n        elastic = toElastic(total, base, roundUp);\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return (total, elastic);\\n    }\\n\\n    /// @notice Add `elastic` and `base` to `total`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Subtract `elastic` and `base` to `total`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Add `elastic` to `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.add(elastic.to128());\\n    }\\n\\n    /// @notice Subtract `elastic` from `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.sub(elastic.to128());\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() public {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IMasterContract {\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\n    /// Also kown as the constructor for cloned contracts.\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\n    /// @param data Can be abi encoded arguments or anything else.\\n    function init(bytes calldata data) external payable;\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringFactory.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BoringFactory {\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\n\\n    /// @notice Mapping from clone contracts to their masterContract.\\n    mapping(address => address) public masterContractOf;\\n\\n    /// @notice Deploys a given master Contract as a clone.\\n    /// Any ETH transferred with this call is forwarded to the new clone.\\n    /// Emits `LogDeploy`.\\n    /// @param masterContract The address of the contract to clone.\\n    /// @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\\n    /// @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\\n    /// @return cloneAddress Address of the created clone contract.\\n    function deploy(\\n        address masterContract,\\n        bytes calldata data,\\n        bool useCreate2\\n    ) public payable returns (address cloneAddress) {\\n        require(masterContract != address(0), \\\"BoringFactory: No masterContract\\\");\\n        bytes20 targetBytes = bytes20(masterContract); // Takes the first 20 bytes of the masterContract's address\\n\\n        if (useCreate2) {\\n            // each masterContract has different code already. So clones are distinguished by their data only.\\n            bytes32 salt = keccak256(data);\\n\\n            // Creates clone, more info here: https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create2(0, clone, 0x37, salt)\\n            }\\n        } else {\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create(0, clone, 0x37)\\n            }\\n        }\\n        masterContractOf[cloneAddress] = masterContract;\\n\\n        IMasterContract(cloneAddress).init{value: msg.value}(data);\\n\\n        emit LogDeploy(masterContract, data, cloneAddress);\\n    }\\n}\\n\\n// File contracts/MasterContractManager.sol\\n// License-Identifier: UNLICENSED\\n\\ncontract MasterContractManager is BoringOwnable, BoringFactory {\\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\\n    event LogRegisterProtocol(address indexed protocol);\\n\\n    /// @notice masterContract to user to approval state\\n    mapping(address => mapping(address => bool)) public masterContractApproved;\\n    /// @notice masterContract to whitelisted state for approval without signed message\\n    mapping(address => bool) public whitelistedMasterContracts;\\n    /// @notice user nonces for masterContract approvals\\n    mapping(address => uint256) public nonces;\\n\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n    // See https://eips.ethereum.org/EIPS/eip-191\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\n    bytes32 private constant APPROVAL_SIGNATURE_HASH =\\n        keccak256(\\\"SetMasterContractApproval(string warning,address user,address masterContract,bool approved,uint256 nonce)\\\");\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\n    }\\n\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, keccak256(\\\"BentoBox V1\\\"), chainId, address(this)));\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @notice Other contracts need to register with this master contract so that users can approve them for the BentoBox.\\n    function registerProtocol() public {\\n        masterContractOf[msg.sender] = msg.sender;\\n        emit LogRegisterProtocol(msg.sender);\\n    }\\n\\n    /// @notice Enables or disables a contract for approval without signed message.\\n    function whitelistMasterContract(address masterContract, bool approved) public onlyOwner {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: Cannot approve 0\\\");\\n\\n        // Effects\\n        whitelistedMasterContracts[masterContract] = approved;\\n        emit LogWhiteListMasterContract(masterContract, approved);\\n    }\\n\\n    /// @notice Approves or revokes a `masterContract` access to `user` funds.\\n    /// @param user The address of the user that approves or revokes access.\\n    /// @param masterContract The address who gains or loses access.\\n    /// @param approved If True approves access. If False revokes access.\\n    /// @param v Part of the signature. (See EIP-191)\\n    /// @param r Part of the signature. (See EIP-191)\\n    /// @param s Part of the signature. (See EIP-191)\\n    // F4 - Check behaviour for all function arguments when wrong or extreme\\n    // F4: Don't allow masterContract 0 to be approved. Unknown contracts will have a masterContract of 0.\\n    // F4: User can't be 0 for signed approvals because the recoveredAddress will be 0 if ecrecover fails\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: masterC not set\\\"); // Important for security\\n\\n        // If no signature is provided, the fallback is executed\\n        if (r == 0 && s == 0 && v == 0) {\\n            require(user == msg.sender, \\\"MasterCMgr: user not sender\\\");\\n            require(masterContractOf[user] == address(0), \\\"MasterCMgr: user is clone\\\");\\n            require(whitelistedMasterContracts[masterContract], \\\"MasterCMgr: not whitelisted\\\");\\n        } else {\\n            // Important for security - any address without masterContract has address(0) as masterContract\\n            // So approving address(0) would approve every address, leading to full loss of funds\\n            // Also, ecrecover returns address(0) on failure. So we check this:\\n            require(user != address(0), \\\"MasterCMgr: User cannot be 0\\\");\\n\\n            // C10 - Protect signatures against replay, use nonce and chainId (SWC-121)\\n            // C10: nonce + chainId are used to prevent replays\\n            // C11 - All signatures strictly EIP-712 (SWC-117 SWC-122)\\n            // C11: signature is EIP-712 compliant\\n            // C12 - abi.encodePacked can't contain variable length user input (SWC-133)\\n            // C12: abi.encodePacked has fixed length parameters\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA,\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            APPROVAL_SIGNATURE_HASH,\\n                            approved\\n                                ? keccak256(\\\"Give FULL access to funds in (and approved to) BentoBox?\\\")\\n                                : keccak256(\\\"Revoke access to BentoBox?\\\"),\\n                            user,\\n                            masterContract,\\n                            approved,\\n                            nonces[user]++\\n                        )\\n                    )\\n                )\\n            );\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress == user, \\\"MasterCMgr: Invalid Signature\\\");\\n        }\\n\\n        // Effects\\n        masterContractApproved[masterContract][user] = approved;\\n        emit LogSetMasterContractApproval(masterContract, user, approved);\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringBatchable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BaseBoringBatchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /// @notice Allows batched call to self (this contract).\\n    /// @param calls An array of inputs for each call.\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n    /// @return successes An array indicating the success of a call, mapped one-to-one to `calls`.\\n    /// @return results An array with the returned data of each function call, mapped one-to-one to `calls`.\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results) {\\n        successes = new bool[](calls.length);\\n        results = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\n            require(success || !revertOnFail, _getRevertMsg(result));\\n            successes[i] = success;\\n            results[i] = result;\\n        }\\n    }\\n}\\n\\ncontract BoringBatchable is BaseBoringBatchable {\\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\\n    /// Lookup `IERC20.permit`.\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\n    function permitToken(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        token.permit(from, to, amount, deadline, v, r, s);\\n    }\\n}\\n\\n// File contracts/BentoBox.sol\\n// License-Identifier: UNLICENSED\\n\\n/// @title BentoBox\\n/// @author BoringCrypto, Keno\\n/// @notice The BentoBox is a vault for tokens. The stored tokens can be flash loaned and used in strategies.\\n/// Yield from this will go to the token depositors.\\n/// Rebasing tokens ARE NOT supported and WILL cause loss of funds.\\n/// Any funds transfered directly onto the BentoBox will be lost, use the deposit function instead.\\ncontract BentoBoxV1 is MasterContractManager, BoringBatchable {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n    using BoringERC20 for IERC20;\\n    using RebaseLibrary for Rebase;\\n\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n\\n    event LogDeposit(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogWithdraw(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogTransfer(IERC20 indexed token, address indexed from, address indexed to, uint256 share);\\n\\n    event LogFlashLoan(address indexed borrower, IERC20 indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\\n\\n    event LogStrategyTargetPercentage(IERC20 indexed token, uint256 targetPercentage);\\n    event LogStrategyQueued(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategySet(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategyInvest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyDivest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyProfit(IERC20 indexed token, uint256 amount);\\n    event LogStrategyLoss(IERC20 indexed token, uint256 amount);\\n\\n    // *************** //\\n    // *** STRUCTS *** //\\n    // *************** //\\n\\n    struct StrategyData {\\n        uint64 strategyStartDate;\\n        uint64 targetPercentage;\\n        uint128 balance; // the balance of the strategy that BentoBox thinks is in there\\n    }\\n\\n    // ******************************** //\\n    // *** CONSTANTS AND IMMUTABLES *** //\\n    // ******************************** //\\n\\n    // V2 - Can they be private?\\n    // V2: Private to save gas, to verify it's correct, check the constructor arguments\\n    IERC20 private immutable wethToken;\\n\\n    IERC20 private constant USE_ETHEREUM = IERC20(0);\\n    uint256 private constant FLASH_LOAN_FEE = 50; // 0.05%\\n    uint256 private constant FLASH_LOAN_FEE_PRECISION = 1e5;\\n    uint256 private constant STRATEGY_DELAY = 0 weeks;\\n    uint256 private constant MAX_TARGET_PERCENTAGE = 95; // 95%\\n    uint256 private constant MINIMUM_SHARE_BALANCE = 1000; // To prevent the ratio going off\\n\\n    // ***************** //\\n    // *** VARIABLES *** //\\n    // ***************** //\\n\\n    // Balance per token per address/contract in shares\\n    mapping(IERC20 => mapping(address => uint256)) public balanceOf;\\n\\n    // Rebase from amount to share\\n    mapping(IERC20 => Rebase) public totals;\\n\\n    mapping(IERC20 => IStrategy) public strategy;\\n    mapping(IERC20 => IStrategy) public pendingStrategy;\\n    mapping(IERC20 => StrategyData) public strategyData;\\n\\n    // ******************* //\\n    // *** CONSTRUCTOR *** //\\n    // ******************* //\\n\\n    constructor(IERC20 wethToken_) public {\\n        wethToken = wethToken_;\\n    }\\n\\n    // Just for testing purposes!!! Don't deploy this contract on production!!\\n    function setTokenTotal(\\n        IERC20 token,\\n        uint128 elastic,\\n        uint128 base\\n    ) public {\\n        Rebase memory total;\\n        total.elastic = elastic;\\n        total.base = base;\\n        totals[token] = total;\\n    }\\n\\n    // ***************** //\\n    // *** MODIFIERS *** //\\n    // ***************** //\\n\\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\\n    /// If 'from' is msg.sender, it's allowed.\\n    /// If 'from' is the BentoBox itself, it's allowed. Any ETH, token balances (above the known balances) or BentoBox balances\\n    /// can be taken by anyone.\\n    /// This is to enable skimming, not just for deposits, but also for withdrawals or transfers, enabling better composability.\\n    /// If 'from' is a clone of a masterContract AND the 'from' address has approved that masterContract, it's allowed.\\n    modifier allowed(address from) {\\n        if (from != msg.sender && from != address(this)) {\\n            // From is sender or you are skimming\\n            address masterContract = masterContractOf[msg.sender];\\n            require(masterContract != address(0), \\\"BentoBox: no masterContract\\\");\\n            require(masterContractApproved[masterContract][from], \\\"BentoBox: Transfer not approved\\\");\\n        }\\n        _;\\n    }\\n\\n    // ************************** //\\n    // *** INTERNAL FUNCTIONS *** //\\n    // ************************** //\\n\\n    /// @dev Returns the total balance of `token` this contracts holds,\\n    /// plus the total amount this contract thinks the strategy holds.\\n    function _tokenBalanceOf(IERC20 token) internal view returns (uint256 amount) {\\n        amount = token.balanceOf(address(this)).add(strategyData[token].balance);\\n    }\\n\\n    // ************************ //\\n    // *** PUBLIC FUNCTIONS *** //\\n    // ************************ //\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share) {\\n        share = totals[token].toBase(amount, roundUp);\\n    }\\n\\n    /// @dev Helper function represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        IERC20 token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount) {\\n        amount = totals[token].toElastic(share, roundUp);\\n    }\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public payable allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n\\n        // If a new token gets added, the tokenSupply call checks that this is a deployed contract. Needed for security.\\n        require(total.elastic != 0 || token.totalSupply() > 0, \\\"BentoBox: No tokens\\\");\\n        if (share == 0) {\\n            // value of the share may be lower than the amount due to rounding, that's ok\\n            share = total.toBase(amount, false);\\n            // Any deposit should lead to at least the minimum share balance, otherwise it's ignored (no amount taken)\\n            if (total.base.add(share.to128()) < MINIMUM_SHARE_BALANCE) {\\n                return (0, 0);\\n            }\\n        } else {\\n            // amount may be lower than the value of share due to rounding, in that case, add 1 to amount (Always round up)\\n            amount = total.toElastic(share, true);\\n        }\\n\\n        // In case of skimming, check that only the skimmable amount is taken.\\n        // For ETH, the full balance is available, so no need to check.\\n        // During flashloans the _tokenBalanceOf is lower than 'reality', so skimming deposits will mostly fail during a flashloan.\\n        require(\\n            from != address(this) || token_ == USE_ETHEREUM || amount <= _tokenBalanceOf(token).sub(total.elastic),\\n            \\\"BentoBox: Skim too much\\\"\\n        );\\n\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n        total.base = total.base.add(share.to128());\\n        total.elastic = total.elastic.add(amount.to128());\\n        totals[token] = total;\\n\\n        // Interactions\\n        // During the first deposit, we check that this token is 'real'\\n        if (token_ == USE_ETHEREUM) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the WETH implementation is faulty or malicious, it will block adding ETH (but we know the WETH implementation)\\n            IWETH(address(wethToken)).deposit{value: amount}();\\n        } else if (from != address(this)) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the token implementation is faulty or malicious, it may block adding tokens. Good.\\n            token.safeTransferFrom(from, address(this), amount);\\n        }\\n        emit LogDeposit(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n        if (share == 0) {\\n            // value of the share paid could be lower than the amount paid due to rounding, in that case, add a share (Always round up)\\n            share = total.toBase(amount, true);\\n        } else {\\n            // amount may be lower than the value of share due to rounding, that's ok\\n            amount = total.toElastic(share, false);\\n        }\\n\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        total.elastic = total.elastic.sub(amount.to128());\\n        total.base = total.base.sub(share.to128());\\n        // There have to be at least 1000 shares left to prevent reseting the share/amount ratio (unless it's fully emptied)\\n        require(total.base >= MINIMUM_SHARE_BALANCE || total.base == 0, \\\"BentoBox: cannot empty\\\");\\n        totals[token] = total;\\n\\n        // Interactions\\n        if (token_ == USE_ETHEREUM) {\\n            // X2, X3: A revert or big gas usage in the WETH contract could block withdrawals, but WETH9 is fine.\\n            IWETH(address(wethToken)).withdraw(amount);\\n            // X2, X3: A revert or big gas usage could block, however, the to address is under control of the caller.\\n            (bool success, ) = to.call{value: amount}(\\\"\\\");\\n            require(success, \\\"BentoBox: ETH transfer failed\\\");\\n        } else {\\n            // X2, X3: A malicious token could block withdrawal of just THAT token.\\n            //         masterContracts may want to take care not to rely on withdraw always succeeding.\\n            token.safeTransfer(to, amount);\\n        }\\n        emit LogWithdraw(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    // Clones of master contracts can transfer from any account that has approved them\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transferMultiple for gas optimization\\n    function transfer(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) public allowed(from) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n\\n        emit LogTransfer(token, from, to, share);\\n    }\\n\\n    /// @notice Transfer shares from a user account to multiple other ones.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param tos The receivers of the tokens.\\n    /// @param shares The amount of `token` in shares for each receiver in `tos`.\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transfer for gas optimization\\n    function transferMultiple(\\n        IERC20 token,\\n        address from,\\n        address[] calldata tos,\\n        uint256[] calldata shares\\n    ) public allowed(from) {\\n        // Checks\\n        require(tos[0] != address(0), \\\"BentoBox: to[0] not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        uint256 totalAmount;\\n        uint256 len = tos.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address to = tos[i];\\n            balanceOf[token][to] = balanceOf[token][to].add(shares[i]);\\n            totalAmount = totalAmount.add(shares[i]);\\n            emit LogTransfer(token, from, to, shares[i]);\\n        }\\n        balanceOf[token][from] = balanceOf[token][from].sub(totalAmount);\\n    }\\n\\n    /// @notice Flashloan ability.\\n    /// @param borrower The address of the contract that implements and conforms to `IFlashBorrower` and handles the flashloan.\\n    /// @param receiver Address of the token receiver.\\n    /// @param token The address of the token to receive.\\n    /// @param amount of the tokens to receive.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function flashLoan(\\n        IFlashBorrower borrower,\\n        address receiver,\\n        IERC20 token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public {\\n        uint256 fee = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n        token.safeTransfer(receiver, amount);\\n\\n        borrower.onFlashLoan(msg.sender, token, amount, fee, data);\\n\\n        require(_tokenBalanceOf(token) >= totals[token].addElastic(fee.to128()), \\\"BentoBox: Wrong amount\\\");\\n        emit LogFlashLoan(address(borrower), token, amount, fee, receiver);\\n    }\\n\\n    /// @notice Support for batched flashloans. Useful to request multiple different `tokens` in a single transaction.\\n    /// @param borrower The address of the contract that implements and conforms to `IBatchFlashBorrower` and handles the flashloan.\\n    /// @param receivers An array of the token receivers. A one-to-one mapping with `tokens` and `amounts`.\\n    /// @param tokens The addresses of the tokens.\\n    /// @param amounts of the tokens for each receiver.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function batchFlashLoan(\\n        IBatchFlashBorrower borrower,\\n        address[] calldata receivers,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public {\\n        uint256[] memory fees = new uint256[](tokens.length);\\n\\n        uint256 len = tokens.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 amount = amounts[i];\\n            fees[i] = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n\\n            tokens[i].safeTransfer(receivers[i], amounts[i]);\\n        }\\n\\n        borrower.onBatchFlashLoan(msg.sender, tokens, amounts, fees, data);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            IERC20 token = tokens[i];\\n            require(_tokenBalanceOf(token) >= totals[token].addElastic(fees[i].to128()), \\\"BentoBox: Wrong amount\\\");\\n            emit LogFlashLoan(address(borrower), token, amounts[i], fees[i], receivers[i]);\\n        }\\n    }\\n\\n    /// @notice Sets the target percentage of the strategy for `token`.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param targetPercentage_ The new target in percent. Must be lesser or equal to `MAX_TARGET_PERCENTAGE`.\\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) public onlyOwner {\\n        // Checks\\n        require(targetPercentage_ <= MAX_TARGET_PERCENTAGE, \\\"StrategyManager: Target too high\\\");\\n\\n        // Effects\\n        strategyData[token].targetPercentage = targetPercentage_;\\n        emit LogStrategyTargetPercentage(token, targetPercentage_);\\n    }\\n\\n    /// @notice Sets the contract address of a new strategy that conforms to `IStrategy` for `token`.\\n    /// Must be called twice with the same arguments.\\n    /// A new strategy becomes pending first and can be activated once `STRATEGY_DELAY` is over.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param newStrategy The address of the contract that conforms to `IStrategy`.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // C4 - Use block.timestamp only for long intervals (SWC-116)\\n    // C4: block.timestamp is used for a period of 2 weeks, which is long enough\\n    function setStrategy(IERC20 token, IStrategy newStrategy) public onlyOwner {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy pending = pendingStrategy[token];\\n        if (data.strategyStartDate == 0 || pending != newStrategy) {\\n            pendingStrategy[token] = newStrategy;\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: Our sun will swallow the earth well before this overflows\\n            data.strategyStartDate = (block.timestamp + STRATEGY_DELAY).to64();\\n            emit LogStrategyQueued(token, newStrategy);\\n        } else {\\n            require(data.strategyStartDate != 0 && block.timestamp >= data.strategyStartDate, \\\"StrategyManager: Too early\\\");\\n            if (address(strategy[token]) != address(0)) {\\n                int256 balanceChange = strategy[token].exit(data.balance);\\n                // Effects\\n                if (balanceChange > 0) {\\n                    uint256 add = uint256(balanceChange);\\n                    totals[token].addElastic(add);\\n                    emit LogStrategyProfit(token, add);\\n                } else if (balanceChange < 0) {\\n                    uint256 sub = uint256(-balanceChange);\\n                    totals[token].subElastic(sub);\\n                    emit LogStrategyLoss(token, sub);\\n                }\\n\\n                emit LogStrategyDivest(token, data.balance);\\n            }\\n            strategy[token] = pending;\\n            data.strategyStartDate = 0;\\n            data.balance = 0;\\n            pendingStrategy[token] = IStrategy(0);\\n            emit LogStrategySet(token, newStrategy);\\n        }\\n        strategyData[token] = data;\\n    }\\n\\n    /// @notice The actual process of yield farming. Executes the strategy of `token`.\\n    /// Optionally does housekeeping if `balance` is true.\\n    /// `maxChangeAmount` is relevant for skimming or withdrawing if `balance` is true.\\n    /// @param token The address of the token for which a strategy is deployed.\\n    /// @param balance True if housekeeping should be done.\\n    /// @param maxChangeAmount The maximum amount for either pulling or pushing from/to the `IStrategy` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // F5: Not followed to prevent reentrancy issues with flashloans and BentoBox skims?\\n    function harvest(\\n        IERC20 token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) public {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy _strategy = strategy[token];\\n        int256 balanceChange = _strategy.harvest(data.balance, msg.sender);\\n        if (balanceChange == 0 && !balance) {\\n            return;\\n        }\\n\\n        uint256 totalElastic = totals[token].elastic;\\n\\n        if (balanceChange > 0) {\\n            uint256 add = uint256(balanceChange);\\n            totalElastic = totalElastic.add(add);\\n            totals[token].elastic = totalElastic.to128();\\n            emit LogStrategyProfit(token, add);\\n        } else if (balanceChange < 0) {\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: balanceChange could overflow if it's max negative int128.\\n            // But tokens with balances that large are not supported by the BentoBox.\\n            uint256 sub = uint256(-balanceChange);\\n            totalElastic = totalElastic.sub(sub);\\n            totals[token].elastic = totalElastic.to128();\\n            data.balance = data.balance.sub(sub.to128());\\n            emit LogStrategyLoss(token, sub);\\n        }\\n\\n        if (balance) {\\n            uint256 targetBalance = totalElastic.mul(data.targetPercentage) / 100;\\n            // if data.balance == targetBalance there is nothing to update\\n            if (data.balance < targetBalance) {\\n                uint256 amountOut = targetBalance.sub(data.balance);\\n                if (maxChangeAmount != 0 && amountOut > maxChangeAmount) {\\n                    amountOut = maxChangeAmount;\\n                }\\n                token.safeTransfer(address(_strategy), amountOut);\\n                data.balance = data.balance.add(amountOut.to128());\\n                _strategy.skim(amountOut);\\n                emit LogStrategyInvest(token, amountOut);\\n            } else if (data.balance > targetBalance) {\\n                uint256 amountIn = data.balance.sub(targetBalance.to128());\\n                if (maxChangeAmount != 0 && amountIn > maxChangeAmount) {\\n                    amountIn = maxChangeAmount;\\n                }\\n\\n                uint256 actualAmountIn = _strategy.withdraw(amountIn);\\n\\n                data.balance = data.balance.sub(actualAmountIn.to128());\\n                emit LogStrategyDivest(token, actualAmountIn);\\n            }\\n        }\\n\\n        strategyData[token] = data;\\n    }\\n\\n    // Contract should be able to receive ETH deposits to support deposit & skim\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd8343e88ade6bf85fd34d3556aedb2b14fe07ca40396ae2ef6064c9d8da0d4d3\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"MasterContractManager":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"masterContract","type":"address"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"},{"indexed":true,"internalType":"address","name":"cloneAddress","type":"address"}],"name":"LogDeploy","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"protocol","type":"address"}],"name":"LogRegisterProtocol","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"masterContract","type":"address"},{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"LogSetMasterContractApproval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"masterContract","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"LogWhiteListMasterContract","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"claimOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"masterContract","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bool","name":"useCreate2","type":"bool"}],"name":"deploy","outputs":[{"internalType":"address","name":"cloneAddress","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"masterContractApproved","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"masterContractOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pendingOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"registerProtocol","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"address","name":"masterContract","type":"address"},{"internalType":"bool","name":"approved","type":"bool"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"setMasterContractApproval","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"},{"internalType":"bool","name":"direct","type":"bool"},{"internalType":"bool","name":"renounce","type":"bool"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"masterContract","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"whitelistMasterContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"whitelistedMasterContracts","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"deploy(address,bytes,bool)":{"params":{"data":"Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.","masterContract":"The address of the contract to clone.","useCreate2":"Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt."},"returns":{"cloneAddress":"Address of the created clone contract."}},"setMasterContractApproval(address,address,bool,uint8,bytes32,bytes32)":{"params":{"approved":"If True approves access. If False revokes access.","masterContract":"The address who gains or loses access.","r":"Part of the signature. (See EIP-191)","s":"Part of the signature. (See EIP-191)","user":"The address of the user that approves or revokes access.","v":"Part of the signature. (See EIP-191)"}},"transferOwnership(address,bool,bool)":{"params":{"direct":"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.","newOwner":"Address of the new owner.","renounce":"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."}}},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"60c060405234801561001057600080fd5b50600080546001600160a01b0319163390811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a34660a081905261005f81610068565b60805250610102565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8667fd7df266aff736d415a9dc14b4158201d612e70d75b9c7f4e375ccfd20aa5166f83306040516020016100c194939291906100de565b604051602081830303815290604052805190602001209050919050565b938452602084019290925260408301526001600160a01b0316606082015260800190565b60805160a0516114af6101256000398061067c5250806106b152506114af6000f3fe6080604052600436106100d25760003560e01c80637ecebe001161007f578063aee4d1b211610059578063aee4d1b2146101fb578063bafe4f1414610210578063c0a47c9314610230578063e30c397814610250576100d2565b80637ecebe00146101a65780638da5cb5b146101c657806391e0eab5146101db576100d2565b80633644e515116100b05780633644e5151461014f5780634e71e0c814610171578063733a9d7c14610186576100d2565b8063078dfbe7146100d757806312a90c8a146100f95780631f54245b1461012f575b600080fd5b3480156100e357600080fd5b506100f76100f2366004610fd0565b610265565b005b34801561010557600080fd5b50610119610114366004610ee0565b6103f9565b6040516101269190611120565b60405180910390f35b61014261013d366004611019565b61040e565b60405161012691906110ff565b34801561015b57600080fd5b50610164610677565b604051610126919061112b565b34801561017d57600080fd5b506100f76106d7565b34801561019257600080fd5b506100f76101a1366004610fa5565b6107bd565b3480156101b257600080fd5b506101646101c1366004610ee0565b6108e6565b3480156101d257600080fd5b506101426108f8565b3480156101e757600080fd5b506101196101f6366004610f02565b610914565b34801561020757600080fd5b506100f7610934565b34801561021c57600080fd5b5061014261022b366004610ee0565b610993565b34801561023c57600080fd5b506100f761024b366004610f36565b6109bb565b34801561025c57600080fd5b50610142610e14565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b6906112b6565b60405180910390fd5b81156103b35773ffffffffffffffffffffffffffffffffffffffff83161515806102e65750805b61031c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b69061127f565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff85167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091556001805490911690556103f4565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790555b505050565b60046020526000908152604090205460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff851661045d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b69061138e565b606085901b82156104e6576000858560405161047a9291906110ab565b604051809103902090506040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152816037826000f593505050610542565b6040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528160148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f09250505b73ffffffffffffffffffffffffffffffffffffffff8281166000818152600260205260409081902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016938a169390931790925590517f4ddf47d4000000000000000000000000000000000000000000000000000000008152634ddf47d49034906105d590899089906004016111c4565b6000604051808303818588803b1580156105ee57600080fd5b505af1158015610602573d6000803e3d6000fd5b50505050508173ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fd62166f3c2149208e51788b1401cc356bf5da1fc6c7886a32e18570f57d88b3b87876040516106669291906111c4565b60405180910390a350949350505050565b6000467f000000000000000000000000000000000000000000000000000000000000000081146106af576106aa81610e30565b6106d1565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b60015473ffffffffffffffffffffffffffffffffffffffff16338114610729576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b6906112eb565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff9092167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179055600180549091169055565b60005473ffffffffffffffffffffffffffffffffffffffff16331461080e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b6906112b6565b73ffffffffffffffffffffffffffffffffffffffff821661085b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b690611211565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600460205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016841515179055517f31a1e0eac44b54ac6c2a2efa87e92c83405ffcf33fceef02a7bca695130e2600906108da908490611120565b60405180910390a25050565b60056020526000908152604090205481565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600360209081526000928352604080842090915290825290205460ff1681565b3360008181526002602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001684179055517fdfb44ffabf0d3a8f650d3ce43eff98f6d050e7ea1a396d5794f014e7dadabacb9190a2565b60026020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff8516610a08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b6906113c3565b81158015610a14575080155b8015610a21575060ff8316155b15610b385773ffffffffffffffffffffffffffffffffffffffff86163314610a75576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b690611248565b73ffffffffffffffffffffffffffffffffffffffff8681166000908152600260205260409020541615610ad4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b690611320565b73ffffffffffffffffffffffffffffffffffffffff851660009081526004602052604090205460ff16610b33576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b690611431565b610d75565b73ffffffffffffffffffffffffffffffffffffffff8616610b85576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b6906113fa565b60006040518060400160405280600281526020017f1901000000000000000000000000000000000000000000000000000000000000815250610bc5610677565b7f1962bc9f5484cb7a998701b81090e966ee1fce5771af884cceee7c081b14ade287610c11577fb426802f1f7dc850a7b6b38805edea2442f3992878a9ab985abfe8091d95d0b1610c33565b7f422ac5323fe049241dee67716229a1cc1bc7b313b23dfe3ef6d42ab177a3b2845b73ffffffffffffffffffffffffffffffffffffffff8b166000908152600560209081526040918290208054600181019091559151610c7a9493928e928e928e929101611134565b60405160208183030381529060405280519060200120604051602001610ca2939291906110bb565b604051602081830303815290604052805190602001209050600060018286868660405160008152602001604052604051610cdf94939291906111a6565b6020604051602081039080840390855afa158015610d01573d6000803e3d6000fd5b5050506020604051035190508773ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610d72576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b690611357565b50505b73ffffffffffffffffffffffffffffffffffffffff8581166000818152600360209081526040808320948b16808452949091529081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016881515179055517f5f6ebb64ba012a851c6f014e6cad458ddf213d1512049b31cd06365c2b05925790610e04908890611120565b60405180910390a3505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8667fd7df266aff736d415a9dc14b4158201d612e70d75b9c7f4e375ccfd20aa5166f8330604051602001610e899493929190611175565b604051602081830303815290604052805190602001209050919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610eca57600080fd5b92915050565b80358015158114610eca57600080fd5b600060208284031215610ef1578081fd5b610efb8383610ea6565b9392505050565b60008060408385031215610f14578081fd5b610f1e8484610ea6565b9150610f2d8460208501610ea6565b90509250929050565b60008060008060008060c08789031215610f4e578182fd5b610f588888610ea6565b9550610f678860208901610ea6565b9450610f768860408901610ed0565b9350606087013560ff81168114610f8b578283fd5b9598949750929560808101359460a0909101359350915050565b60008060408385031215610fb7578182fd5b610fc18484610ea6565b9150610f2d8460208501610ed0565b600080600060608486031215610fe4578283fd5b610fee8585610ea6565b92506020840135610ffe81611468565b9150604084013561100e81611468565b809150509250925092565b6000806000806060858703121561102e578384fd5b6110388686610ea6565b9350602085013567ffffffffffffffff80821115611054578485fd5b818701915087601f830112611067578485fd5b813581811115611075578586fd5b886020828501011115611086578586fd5b60208301955080945050505060408501356110a081611468565b939692955090935050565b6000828483379101908152919050565b60008451815b818110156110db57602081880181015185830152016110c1565b818111156110e95782828501525b5091909101928352506020820152604001919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b901515815260200190565b90815260200190565b958652602086019490945273ffffffffffffffffffffffffffffffffffffffff9283166040860152911660608401521515608083015260a082015260c00190565b9384526020840192909252604083015273ffffffffffffffffffffffffffffffffffffffff16606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b60006020825282602083015282846040840137818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b6020808252601c908201527f4d6173746572434d67723a2043616e6e6f7420617070726f7665203000000000604082015260600190565b6020808252601b908201527f4d6173746572434d67723a2075736572206e6f742073656e6465720000000000604082015260600190565b60208082526015908201527f4f776e61626c653a207a65726f20616464726573730000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604082015260600190565b60208082526019908201527f4d6173746572434d67723a207573657220697320636c6f6e6500000000000000604082015260600190565b6020808252601d908201527f4d6173746572434d67723a20496e76616c6964205369676e6174757265000000604082015260600190565b6020808252818101527f426f72696e67466163746f72793a204e6f206d6173746572436f6e7472616374604082015260600190565b6020808252601b908201527f4d6173746572434d67723a206d617374657243206e6f74207365740000000000604082015260600190565b6020808252601c908201527f4d6173746572434d67723a20557365722063616e6e6f74206265203000000000604082015260600190565b6020808252601b908201527f4d6173746572434d67723a206e6f742077686974656c69737465640000000000604082015260600190565b801515811461147657600080fd5b5056fea2646970667358221220af60ea1e2a83eb742e45c2f1402d41ac2ad59e037e06f652c5417c4595c17dda64736f6c634300060c0033","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 CHAINID PUSH1 0xA0 DUP2 SWAP1 MSTORE PUSH2 0x5F DUP2 PUSH2 0x68 JUMP JUMPDEST PUSH1 0x80 MSTORE POP PUSH2 0x102 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8CAD95687BA82C2CE50E74F7B754645E5117C3A5BEC8151C0726D5857980A866 PUSH32 0xD7DF266AFF736D415A9DC14B4158201D612E70D75B9C7F4E375CCFD20AA5166F DUP4 ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xC1 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xDE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x14AF PUSH2 0x125 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x67C MSTORE POP DUP1 PUSH2 0x6B1 MSTORE POP PUSH2 0x14AF PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xD2 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7ECEBE00 GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xAEE4D1B2 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xAEE4D1B2 EQ PUSH2 0x1FB JUMPI DUP1 PUSH4 0xBAFE4F14 EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0xC0A47C93 EQ PUSH2 0x230 JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x250 JUMPI PUSH2 0xD2 JUMP JUMPDEST DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0x91E0EAB5 EQ PUSH2 0x1DB JUMPI PUSH2 0xD2 JUMP JUMPDEST DUP1 PUSH4 0x3644E515 GT PUSH2 0xB0 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0x4E71E0C8 EQ PUSH2 0x171 JUMPI DUP1 PUSH4 0x733A9D7C EQ PUSH2 0x186 JUMPI PUSH2 0xD2 JUMP JUMPDEST DUP1 PUSH4 0x78DFBE7 EQ PUSH2 0xD7 JUMPI DUP1 PUSH4 0x12A90C8A EQ PUSH2 0xF9 JUMPI DUP1 PUSH4 0x1F54245B EQ PUSH2 0x12F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0xF2 CALLDATASIZE PUSH1 0x4 PUSH2 0xFD0 JUMP JUMPDEST PUSH2 0x265 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x105 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x119 PUSH2 0x114 CALLDATASIZE PUSH1 0x4 PUSH2 0xEE0 JUMP JUMPDEST PUSH2 0x3F9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x126 SWAP2 SWAP1 PUSH2 0x1120 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x142 PUSH2 0x13D CALLDATASIZE PUSH1 0x4 PUSH2 0x1019 JUMP JUMPDEST PUSH2 0x40E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x126 SWAP2 SWAP1 PUSH2 0x10FF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x164 PUSH2 0x677 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x126 SWAP2 SWAP1 PUSH2 0x112B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x6D7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x1A1 CALLDATASIZE PUSH1 0x4 PUSH2 0xFA5 JUMP JUMPDEST PUSH2 0x7BD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x164 PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0xEE0 JUMP JUMPDEST PUSH2 0x8E6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x142 PUSH2 0x8F8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x119 PUSH2 0x1F6 CALLDATASIZE PUSH1 0x4 PUSH2 0xF02 JUMP JUMPDEST PUSH2 0x914 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x934 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x142 PUSH2 0x22B CALLDATASIZE PUSH1 0x4 PUSH2 0xEE0 JUMP JUMPDEST PUSH2 0x993 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x24B CALLDATASIZE PUSH1 0x4 PUSH2 0xF36 JUMP JUMPDEST PUSH2 0x9BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x142 PUSH2 0xE14 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x2BF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x12B6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x3B3 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO ISZERO DUP1 PUSH2 0x2E6 JUMPI POP DUP1 JUMPDEST PUSH2 0x31C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x127F JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH2 0x3F4 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND OR SWAP1 SSTORE JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH2 0x45D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x138E JUMP JUMPDEST PUSH1 0x60 DUP6 SWAP1 SHL DUP3 ISZERO PUSH2 0x4E6 JUMPI PUSH1 0x0 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x47A SWAP3 SWAP2 SWAP1 PUSH2 0x10AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP PUSH1 0x40 MLOAD PUSH32 0x3D602D80600A3D3981F3363D3D373D3D3D363D73000000000000000000000000 DUP2 MSTORE DUP3 PUSH1 0x14 DUP3 ADD MSTORE PUSH32 0x5AF43D82803E903D91602B57FD5BF30000000000000000000000000000000000 PUSH1 0x28 DUP3 ADD MSTORE DUP2 PUSH1 0x37 DUP3 PUSH1 0x0 CREATE2 SWAP4 POP POP POP PUSH2 0x542 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x3D602D80600A3D3981F3363D3D373D3D3D363D73000000000000000000000000 DUP2 MSTORE DUP2 PUSH1 0x14 DUP3 ADD MSTORE PUSH32 0x5AF43D82803E903D91602B57FD5BF30000000000000000000000000000000000 PUSH1 0x28 DUP3 ADD MSTORE PUSH1 0x37 DUP2 PUSH1 0x0 CREATE SWAP3 POP POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP4 DUP11 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH32 0x4DDF47D400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH4 0x4DDF47D4 SWAP1 CALLVALUE SWAP1 PUSH2 0x5D5 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x11C4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x602 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xD62166F3C2149208E51788B1401CC356BF5DA1FC6C7886A32E18570F57D88B3B DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x666 SWAP3 SWAP2 SWAP1 PUSH2 0x11C4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CHAINID PUSH32 0x0 DUP2 EQ PUSH2 0x6AF JUMPI PUSH2 0x6AA DUP2 PUSH2 0xE30 JUMP JUMPDEST PUSH2 0x6D1 JUMP JUMPDEST PUSH32 0x0 JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP2 EQ PUSH2 0x729 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x12EB JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x80E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x12B6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x85B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x1211 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP5 ISZERO ISZERO OR SWAP1 SSTORE MLOAD PUSH32 0x31A1E0EAC44B54AC6C2A2EFA87E92C83405FFCF33FCEEF02A7BCA695130E2600 SWAP1 PUSH2 0x8DA SWAP1 DUP5 SWAP1 PUSH2 0x1120 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND DUP5 OR SWAP1 SSTORE MLOAD PUSH32 0xDFB44FFABF0D3A8F650D3CE43EFF98F6D050E7EA1A396D5794F014E7DADABACB SWAP2 SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH2 0xA08 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x13C3 JUMP JUMPDEST DUP2 ISZERO DUP1 ISZERO PUSH2 0xA14 JUMPI POP DUP1 ISZERO JUMPDEST DUP1 ISZERO PUSH2 0xA21 JUMPI POP PUSH1 0xFF DUP4 AND ISZERO JUMPDEST ISZERO PUSH2 0xB38 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND CALLER EQ PUSH2 0xA75 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x1248 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND ISZERO PUSH2 0xAD4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x1320 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xB33 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x1431 JUMP JUMPDEST PUSH2 0xD75 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH2 0xB85 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x13FA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0xBC5 PUSH2 0x677 JUMP JUMPDEST PUSH32 0x1962BC9F5484CB7A998701B81090E966EE1FCE5771AF884CCEEE7C081B14ADE2 DUP8 PUSH2 0xC11 JUMPI PUSH32 0xB426802F1F7DC850A7B6B38805EDEA2442F3992878A9AB985ABFE8091D95D0B1 PUSH2 0xC33 JUMP JUMPDEST PUSH32 0x422AC5323FE049241DEE67716229A1CC1BC7B313B23DFE3EF6D42AB177A3B284 JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE SWAP2 MLOAD PUSH2 0xC7A SWAP5 SWAP4 SWAP3 DUP15 SWAP3 DUP15 SWAP3 DUP15 SWAP3 SWAP2 ADD PUSH2 0x1134 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCA2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x10BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP3 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0xCDF SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x11A6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD01 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD72 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x1357 JUMP JUMPDEST POP POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP12 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP9 ISZERO ISZERO OR SWAP1 SSTORE MLOAD PUSH32 0x5F6EBB64BA012A851C6F014E6CAD458DDF213D1512049B31CD06365C2B059257 SWAP1 PUSH2 0xE04 SWAP1 DUP9 SWAP1 PUSH2 0x1120 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8CAD95687BA82C2CE50E74F7B754645E5117C3A5BEC8151C0726D5857980A866 PUSH32 0xD7DF266AFF736D415A9DC14B4158201D612E70D75B9C7F4E375CCFD20AA5166F DUP4 ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xE89 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1175 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xECA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xECA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEF1 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xEFB DUP4 DUP4 PUSH2 0xEA6 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF14 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xF1E DUP5 DUP5 PUSH2 0xEA6 JUMP JUMPDEST SWAP2 POP PUSH2 0xF2D DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0xEA6 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xF4E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xF58 DUP9 DUP9 PUSH2 0xEA6 JUMP JUMPDEST SWAP6 POP PUSH2 0xF67 DUP9 PUSH1 0x20 DUP10 ADD PUSH2 0xEA6 JUMP JUMPDEST SWAP5 POP PUSH2 0xF76 DUP9 PUSH1 0x40 DUP10 ADD PUSH2 0xED0 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xF8B JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP5 PUSH1 0xA0 SWAP1 SWAP2 ADD CALLDATALOAD SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xFB7 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xFC1 DUP5 DUP5 PUSH2 0xEA6 JUMP JUMPDEST SWAP2 POP PUSH2 0xF2D DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0xED0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xFE4 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xFEE DUP6 DUP6 PUSH2 0xEA6 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0xFFE DUP2 PUSH2 0x1468 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x100E DUP2 PUSH2 0x1468 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x102E JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1038 DUP7 DUP7 PUSH2 0xEA6 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1054 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1067 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1075 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1086 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 POP DUP1 SWAP5 POP POP POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x10A0 DUP2 PUSH2 0x1468 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP5 MLOAD DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x10DB JUMPI PUSH1 0x20 DUP2 DUP9 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0x10C1 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x10E9 JUMPI DUP3 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 DUP4 MSTORE POP PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x40 DUP7 ADD MSTORE SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 PUSH1 0x20 DUP4 ADD MSTORE DUP3 DUP5 PUSH1 0x40 DUP5 ADD CALLDATACOPY DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A2043616E6E6F7420617070726F7665203000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A2075736572206E6F742073656E6465720000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A207A65726F20616464726573730000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C657220213D2070656E64696E67206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x19 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A207573657220697320636C6F6E6500000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A20496E76616C6964205369676E6174757265000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x426F72696E67466163746F72793A204E6F206D6173746572436F6E7472616374 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A206D617374657243206E6F74207365740000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A20557365722063616E6E6F74206265203000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A206E6F742077686974656C69737465640000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1476 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAF PUSH1 0xEA 0x1E 0x2A DUP4 0xEB PUSH21 0x2E45C2F1402D41AC2AD59E037E06F652C5417C4595 0xC1 PUSH30 0xDA64736F6C634300060C0033000000000000000000000000000000000000 ","sourceMap":"18364:6149:0:-:0;;;19760:207;;;;;;;;;-1:-1:-1;13639:5:0;:18;;-1:-1:-1;;;;;;13639:18:0;13647:10;13639:18;;;;;13672:44;;13647:10;;13639:5;13672:44;;13639:5;;13672:44;19850:9;19924:35;;;;19898:62;19850:9;19898:25;:62::i;:::-;19878:82;;-1:-1:-1;18364:6149:0;;19973:211;20047:7;19146:80;20127:24;20153:7;20170:4;20083:93;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;20073:104;;;;;;20066:111;;19973:211;;;:::o;365:556:-1:-;196:37;;;741:2;726:18;;196:37;;;;824:2;809:18;;196:37;-1:-1;;;;;1167:54;907:2;892:18;;76:37;576:3;561:19;;547:374::o;:::-;18364:6149:0;;;;;;;;;;;;"},"deployedBytecode":{"immutableReferences":{"1170":[{"length":32,"start":1713}],"1172":[{"length":32,"start":1660}]},"linkReferences":{},"object":"6080604052600436106100d25760003560e01c80637ecebe001161007f578063aee4d1b211610059578063aee4d1b2146101fb578063bafe4f1414610210578063c0a47c9314610230578063e30c397814610250576100d2565b80637ecebe00146101a65780638da5cb5b146101c657806391e0eab5146101db576100d2565b80633644e515116100b05780633644e5151461014f5780634e71e0c814610171578063733a9d7c14610186576100d2565b8063078dfbe7146100d757806312a90c8a146100f95780631f54245b1461012f575b600080fd5b3480156100e357600080fd5b506100f76100f2366004610fd0565b610265565b005b34801561010557600080fd5b50610119610114366004610ee0565b6103f9565b6040516101269190611120565b60405180910390f35b61014261013d366004611019565b61040e565b60405161012691906110ff565b34801561015b57600080fd5b50610164610677565b604051610126919061112b565b34801561017d57600080fd5b506100f76106d7565b34801561019257600080fd5b506100f76101a1366004610fa5565b6107bd565b3480156101b257600080fd5b506101646101c1366004610ee0565b6108e6565b3480156101d257600080fd5b506101426108f8565b3480156101e757600080fd5b506101196101f6366004610f02565b610914565b34801561020757600080fd5b506100f7610934565b34801561021c57600080fd5b5061014261022b366004610ee0565b610993565b34801561023c57600080fd5b506100f761024b366004610f36565b6109bb565b34801561025c57600080fd5b50610142610e14565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b6906112b6565b60405180910390fd5b81156103b35773ffffffffffffffffffffffffffffffffffffffff83161515806102e65750805b61031c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b69061127f565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff85167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091556001805490911690556103f4565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790555b505050565b60046020526000908152604090205460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff851661045d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b69061138e565b606085901b82156104e6576000858560405161047a9291906110ab565b604051809103902090506040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152816037826000f593505050610542565b6040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528160148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f09250505b73ffffffffffffffffffffffffffffffffffffffff8281166000818152600260205260409081902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016938a169390931790925590517f4ddf47d4000000000000000000000000000000000000000000000000000000008152634ddf47d49034906105d590899089906004016111c4565b6000604051808303818588803b1580156105ee57600080fd5b505af1158015610602573d6000803e3d6000fd5b50505050508173ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fd62166f3c2149208e51788b1401cc356bf5da1fc6c7886a32e18570f57d88b3b87876040516106669291906111c4565b60405180910390a350949350505050565b6000467f000000000000000000000000000000000000000000000000000000000000000081146106af576106aa81610e30565b6106d1565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b60015473ffffffffffffffffffffffffffffffffffffffff16338114610729576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b6906112eb565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff9092167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179055600180549091169055565b60005473ffffffffffffffffffffffffffffffffffffffff16331461080e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b6906112b6565b73ffffffffffffffffffffffffffffffffffffffff821661085b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b690611211565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600460205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016841515179055517f31a1e0eac44b54ac6c2a2efa87e92c83405ffcf33fceef02a7bca695130e2600906108da908490611120565b60405180910390a25050565b60056020526000908152604090205481565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600360209081526000928352604080842090915290825290205460ff1681565b3360008181526002602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001684179055517fdfb44ffabf0d3a8f650d3ce43eff98f6d050e7ea1a396d5794f014e7dadabacb9190a2565b60026020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff8516610a08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b6906113c3565b81158015610a14575080155b8015610a21575060ff8316155b15610b385773ffffffffffffffffffffffffffffffffffffffff86163314610a75576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b690611248565b73ffffffffffffffffffffffffffffffffffffffff8681166000908152600260205260409020541615610ad4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b690611320565b73ffffffffffffffffffffffffffffffffffffffff851660009081526004602052604090205460ff16610b33576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b690611431565b610d75565b73ffffffffffffffffffffffffffffffffffffffff8616610b85576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b6906113fa565b60006040518060400160405280600281526020017f1901000000000000000000000000000000000000000000000000000000000000815250610bc5610677565b7f1962bc9f5484cb7a998701b81090e966ee1fce5771af884cceee7c081b14ade287610c11577fb426802f1f7dc850a7b6b38805edea2442f3992878a9ab985abfe8091d95d0b1610c33565b7f422ac5323fe049241dee67716229a1cc1bc7b313b23dfe3ef6d42ab177a3b2845b73ffffffffffffffffffffffffffffffffffffffff8b166000908152600560209081526040918290208054600181019091559151610c7a9493928e928e928e929101611134565b60405160208183030381529060405280519060200120604051602001610ca2939291906110bb565b604051602081830303815290604052805190602001209050600060018286868660405160008152602001604052604051610cdf94939291906111a6565b6020604051602081039080840390855afa158015610d01573d6000803e3d6000fd5b5050506020604051035190508773ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610d72576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b690611357565b50505b73ffffffffffffffffffffffffffffffffffffffff8581166000818152600360209081526040808320948b16808452949091529081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016881515179055517f5f6ebb64ba012a851c6f014e6cad458ddf213d1512049b31cd06365c2b05925790610e04908890611120565b60405180910390a3505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8667fd7df266aff736d415a9dc14b4158201d612e70d75b9c7f4e375ccfd20aa5166f8330604051602001610e899493929190611175565b604051602081830303815290604052805190602001209050919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610eca57600080fd5b92915050565b80358015158114610eca57600080fd5b600060208284031215610ef1578081fd5b610efb8383610ea6565b9392505050565b60008060408385031215610f14578081fd5b610f1e8484610ea6565b9150610f2d8460208501610ea6565b90509250929050565b60008060008060008060c08789031215610f4e578182fd5b610f588888610ea6565b9550610f678860208901610ea6565b9450610f768860408901610ed0565b9350606087013560ff81168114610f8b578283fd5b9598949750929560808101359460a0909101359350915050565b60008060408385031215610fb7578182fd5b610fc18484610ea6565b9150610f2d8460208501610ed0565b600080600060608486031215610fe4578283fd5b610fee8585610ea6565b92506020840135610ffe81611468565b9150604084013561100e81611468565b809150509250925092565b6000806000806060858703121561102e578384fd5b6110388686610ea6565b9350602085013567ffffffffffffffff80821115611054578485fd5b818701915087601f830112611067578485fd5b813581811115611075578586fd5b886020828501011115611086578586fd5b60208301955080945050505060408501356110a081611468565b939692955090935050565b6000828483379101908152919050565b60008451815b818110156110db57602081880181015185830152016110c1565b818111156110e95782828501525b5091909101928352506020820152604001919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b901515815260200190565b90815260200190565b958652602086019490945273ffffffffffffffffffffffffffffffffffffffff9283166040860152911660608401521515608083015260a082015260c00190565b9384526020840192909252604083015273ffffffffffffffffffffffffffffffffffffffff16606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b60006020825282602083015282846040840137818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b6020808252601c908201527f4d6173746572434d67723a2043616e6e6f7420617070726f7665203000000000604082015260600190565b6020808252601b908201527f4d6173746572434d67723a2075736572206e6f742073656e6465720000000000604082015260600190565b60208082526015908201527f4f776e61626c653a207a65726f20616464726573730000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604082015260600190565b60208082526019908201527f4d6173746572434d67723a207573657220697320636c6f6e6500000000000000604082015260600190565b6020808252601d908201527f4d6173746572434d67723a20496e76616c6964205369676e6174757265000000604082015260600190565b6020808252818101527f426f72696e67466163746f72793a204e6f206d6173746572436f6e7472616374604082015260600190565b6020808252601b908201527f4d6173746572434d67723a206d617374657243206e6f74207365740000000000604082015260600190565b6020808252601c908201527f4d6173746572434d67723a20557365722063616e6e6f74206265203000000000604082015260600190565b6020808252601b908201527f4d6173746572434d67723a206e6f742077686974656c69737465640000000000604082015260600190565b801515811461147657600080fd5b5056fea2646970667358221220af60ea1e2a83eb742e45c2f1402d41ac2ad59e037e06f652c5417c4595c17dda64736f6c634300060c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xD2 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7ECEBE00 GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xAEE4D1B2 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xAEE4D1B2 EQ PUSH2 0x1FB JUMPI DUP1 PUSH4 0xBAFE4F14 EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0xC0A47C93 EQ PUSH2 0x230 JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x250 JUMPI PUSH2 0xD2 JUMP JUMPDEST DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0x91E0EAB5 EQ PUSH2 0x1DB JUMPI PUSH2 0xD2 JUMP JUMPDEST DUP1 PUSH4 0x3644E515 GT PUSH2 0xB0 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0x4E71E0C8 EQ PUSH2 0x171 JUMPI DUP1 PUSH4 0x733A9D7C EQ PUSH2 0x186 JUMPI PUSH2 0xD2 JUMP JUMPDEST DUP1 PUSH4 0x78DFBE7 EQ PUSH2 0xD7 JUMPI DUP1 PUSH4 0x12A90C8A EQ PUSH2 0xF9 JUMPI DUP1 PUSH4 0x1F54245B EQ PUSH2 0x12F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0xF2 CALLDATASIZE PUSH1 0x4 PUSH2 0xFD0 JUMP JUMPDEST PUSH2 0x265 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x105 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x119 PUSH2 0x114 CALLDATASIZE PUSH1 0x4 PUSH2 0xEE0 JUMP JUMPDEST PUSH2 0x3F9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x126 SWAP2 SWAP1 PUSH2 0x1120 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x142 PUSH2 0x13D CALLDATASIZE PUSH1 0x4 PUSH2 0x1019 JUMP JUMPDEST PUSH2 0x40E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x126 SWAP2 SWAP1 PUSH2 0x10FF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x164 PUSH2 0x677 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x126 SWAP2 SWAP1 PUSH2 0x112B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x6D7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x1A1 CALLDATASIZE PUSH1 0x4 PUSH2 0xFA5 JUMP JUMPDEST PUSH2 0x7BD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x164 PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0xEE0 JUMP JUMPDEST PUSH2 0x8E6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x142 PUSH2 0x8F8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x119 PUSH2 0x1F6 CALLDATASIZE PUSH1 0x4 PUSH2 0xF02 JUMP JUMPDEST PUSH2 0x914 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x934 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x142 PUSH2 0x22B CALLDATASIZE PUSH1 0x4 PUSH2 0xEE0 JUMP JUMPDEST PUSH2 0x993 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x24B CALLDATASIZE PUSH1 0x4 PUSH2 0xF36 JUMP JUMPDEST PUSH2 0x9BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x142 PUSH2 0xE14 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x2BF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x12B6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x3B3 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO ISZERO DUP1 PUSH2 0x2E6 JUMPI POP DUP1 JUMPDEST PUSH2 0x31C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x127F JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH2 0x3F4 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND OR SWAP1 SSTORE JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH2 0x45D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x138E JUMP JUMPDEST PUSH1 0x60 DUP6 SWAP1 SHL DUP3 ISZERO PUSH2 0x4E6 JUMPI PUSH1 0x0 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x47A SWAP3 SWAP2 SWAP1 PUSH2 0x10AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP PUSH1 0x40 MLOAD PUSH32 0x3D602D80600A3D3981F3363D3D373D3D3D363D73000000000000000000000000 DUP2 MSTORE DUP3 PUSH1 0x14 DUP3 ADD MSTORE PUSH32 0x5AF43D82803E903D91602B57FD5BF30000000000000000000000000000000000 PUSH1 0x28 DUP3 ADD MSTORE DUP2 PUSH1 0x37 DUP3 PUSH1 0x0 CREATE2 SWAP4 POP POP POP PUSH2 0x542 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x3D602D80600A3D3981F3363D3D373D3D3D363D73000000000000000000000000 DUP2 MSTORE DUP2 PUSH1 0x14 DUP3 ADD MSTORE PUSH32 0x5AF43D82803E903D91602B57FD5BF30000000000000000000000000000000000 PUSH1 0x28 DUP3 ADD MSTORE PUSH1 0x37 DUP2 PUSH1 0x0 CREATE SWAP3 POP POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP4 DUP11 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH32 0x4DDF47D400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH4 0x4DDF47D4 SWAP1 CALLVALUE SWAP1 PUSH2 0x5D5 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x11C4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x602 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xD62166F3C2149208E51788B1401CC356BF5DA1FC6C7886A32E18570F57D88B3B DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x666 SWAP3 SWAP2 SWAP1 PUSH2 0x11C4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CHAINID PUSH32 0x0 DUP2 EQ PUSH2 0x6AF JUMPI PUSH2 0x6AA DUP2 PUSH2 0xE30 JUMP JUMPDEST PUSH2 0x6D1 JUMP JUMPDEST PUSH32 0x0 JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP2 EQ PUSH2 0x729 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x12EB JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x80E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x12B6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x85B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x1211 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP5 ISZERO ISZERO OR SWAP1 SSTORE MLOAD PUSH32 0x31A1E0EAC44B54AC6C2A2EFA87E92C83405FFCF33FCEEF02A7BCA695130E2600 SWAP1 PUSH2 0x8DA SWAP1 DUP5 SWAP1 PUSH2 0x1120 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND DUP5 OR SWAP1 SSTORE MLOAD PUSH32 0xDFB44FFABF0D3A8F650D3CE43EFF98F6D050E7EA1A396D5794F014E7DADABACB SWAP2 SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH2 0xA08 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x13C3 JUMP JUMPDEST DUP2 ISZERO DUP1 ISZERO PUSH2 0xA14 JUMPI POP DUP1 ISZERO JUMPDEST DUP1 ISZERO PUSH2 0xA21 JUMPI POP PUSH1 0xFF DUP4 AND ISZERO JUMPDEST ISZERO PUSH2 0xB38 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND CALLER EQ PUSH2 0xA75 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x1248 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND ISZERO PUSH2 0xAD4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x1320 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xB33 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x1431 JUMP JUMPDEST PUSH2 0xD75 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH2 0xB85 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x13FA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0xBC5 PUSH2 0x677 JUMP JUMPDEST PUSH32 0x1962BC9F5484CB7A998701B81090E966EE1FCE5771AF884CCEEE7C081B14ADE2 DUP8 PUSH2 0xC11 JUMPI PUSH32 0xB426802F1F7DC850A7B6B38805EDEA2442F3992878A9AB985ABFE8091D95D0B1 PUSH2 0xC33 JUMP JUMPDEST PUSH32 0x422AC5323FE049241DEE67716229A1CC1BC7B313B23DFE3EF6D42AB177A3B284 JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE SWAP2 MLOAD PUSH2 0xC7A SWAP5 SWAP4 SWAP3 DUP15 SWAP3 DUP15 SWAP3 DUP15 SWAP3 SWAP2 ADD PUSH2 0x1134 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xCA2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x10BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP3 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0xCDF SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x11A6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD01 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD72 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x1357 JUMP JUMPDEST POP POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP12 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP9 ISZERO ISZERO OR SWAP1 SSTORE MLOAD PUSH32 0x5F6EBB64BA012A851C6F014E6CAD458DDF213D1512049B31CD06365C2B059257 SWAP1 PUSH2 0xE04 SWAP1 DUP9 SWAP1 PUSH2 0x1120 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8CAD95687BA82C2CE50E74F7B754645E5117C3A5BEC8151C0726D5857980A866 PUSH32 0xD7DF266AFF736D415A9DC14B4158201D612E70D75B9C7F4E375CCFD20AA5166F DUP4 ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xE89 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1175 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xECA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xECA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEF1 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xEFB DUP4 DUP4 PUSH2 0xEA6 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF14 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xF1E DUP5 DUP5 PUSH2 0xEA6 JUMP JUMPDEST SWAP2 POP PUSH2 0xF2D DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0xEA6 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xF4E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xF58 DUP9 DUP9 PUSH2 0xEA6 JUMP JUMPDEST SWAP6 POP PUSH2 0xF67 DUP9 PUSH1 0x20 DUP10 ADD PUSH2 0xEA6 JUMP JUMPDEST SWAP5 POP PUSH2 0xF76 DUP9 PUSH1 0x40 DUP10 ADD PUSH2 0xED0 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xF8B JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP5 PUSH1 0xA0 SWAP1 SWAP2 ADD CALLDATALOAD SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xFB7 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xFC1 DUP5 DUP5 PUSH2 0xEA6 JUMP JUMPDEST SWAP2 POP PUSH2 0xF2D DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0xED0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xFE4 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xFEE DUP6 DUP6 PUSH2 0xEA6 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0xFFE DUP2 PUSH2 0x1468 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x100E DUP2 PUSH2 0x1468 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x102E JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1038 DUP7 DUP7 PUSH2 0xEA6 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1054 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1067 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1075 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1086 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 POP DUP1 SWAP5 POP POP POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x10A0 DUP2 PUSH2 0x1468 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP5 MLOAD DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x10DB JUMPI PUSH1 0x20 DUP2 DUP9 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0x10C1 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x10E9 JUMPI DUP3 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 DUP4 MSTORE POP PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x40 DUP7 ADD MSTORE SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 PUSH1 0x20 DUP4 ADD MSTORE DUP3 DUP5 PUSH1 0x40 DUP5 ADD CALLDATACOPY DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A2043616E6E6F7420617070726F7665203000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A2075736572206E6F742073656E6465720000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A207A65726F20616464726573730000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C657220213D2070656E64696E67206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x19 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A207573657220697320636C6F6E6500000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A20496E76616C6964205369676E6174757265000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x426F72696E67466163746F72793A204E6F206D6173746572436F6E7472616374 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A206D617374657243206E6F74207365740000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A20557365722063616E6E6F74206265203000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6173746572434D67723A206E6F742077686974656C69737465640000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1476 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAF PUSH1 0xEA 0x1E 0x2A DUP4 0xEB PUSH21 0x2E45C2F1402D41AC2AD59E037E06F652C5417C4595 0xC1 PUSH30 0xDA64736F6C634300060C0033000000000000000000000000000000000000 ","sourceMap":"18364:6149:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14182:489;;;;;;;;;;-1:-1:-1;14182:489:0;;;;;:::i;:::-;;:::i;:::-;;18910:58;;;;;;;;;;-1:-1:-1;18910:58:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;16611:1670;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;20243:262::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;14750:330::-;;;;;;;;;;;;;:::i;20864:343::-;;;;;;;;;;-1:-1:-1;20864:343:0;;;;;:::i;:::-;;:::i;19031:41::-;;;;;;;;;;-1:-1:-1;19031:41:0;;;;;:::i;:::-;;:::i;13346:20::-;;;;;;;;;;;;;:::i;18742:74::-;;;;;;;;;;-1:-1:-1;18742:74:0;;;;;:::i;:::-;;:::i;20635:139::-;;;;;;;;;;;;;:::i;16029:51::-;;;;;;;;;;-1:-1:-1;16029:51:0;;;;;:::i;:::-;;:::i;21964:2547::-;;;;;;;;;;-1:-1:-1;21964:2547:0;;;;;:::i;:::-;;:::i;13372:27::-;;;;;;;;;;;;;:::i;14182:489::-;15204:5;;;;15190:10;:19;15182:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;14316:6:::1;14312:353;;;14368:22;::::0;::::1;::::0;::::1;::::0;:34:::1;;;14394:8;14368:34;14360:68;;;;;;;;;;;;:::i;:::-;14492:5;::::0;;14471:37:::1;::::0;::::1;::::0;;::::1;::::0;14492:5;::::1;::::0;14471:37:::1;::::0;::::1;14522:5;:16:::0;;::::1;::::0;::::1;::::0;;;::::1;;::::0;;;;14552:25;;;;::::1;::::0;;14312:353:::1;;;14631:12;:23:::0;;;::::1;;::::0;::::1;;::::0;;14312:353:::1;14182:489:::0;;;:::o;18910:58::-;;;;;;;;;;;;;;;:::o;16611:1670::-;16743:20;16783:28;;;16775:73;;;;;;;;;;;;:::i;:::-;16880:23;;;;16974:1114;;;;17115:12;17140:4;;17130:15;;;;;;;:::i;:::-;;;;;;;;17115:30;;17325:4;17319:11;17361:66;17354:5;17347:81;17470:11;17463:4;17456:5;17452:16;17445:37;17524:66;17517:4;17510:5;17506:16;17499:92;17648:4;17642;17635:5;17632:1;17624:29;17608:45;;;17288:379;;;;17743:4;17737:11;17779:66;17772:5;17765:81;17888:11;17881:4;17874:5;17870:16;17863:37;17942:66;17935:4;17928:5;17924:16;17917:92;18059:4;18052:5;18049:1;18042:22;18026:38;;;17706:372;18097:30;;;;;;;;:16;:30;;;;;;;:47;;;;;;;;;;;;;;18155:58;;;;;:34;;18197:9;;18155:58;;18208:4;;;;18155:58;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18261:12;18229:45;;18239:14;18229:45;;;18255:4;;18229:45;;;;;;;:::i;:::-;;;;;;;;16611:1670;;;;;;;:::o;20243:262::-;20292:7;20370:9;20416:25;20405:36;;:93;;20464:34;20490:7;20464:25;:34::i;:::-;20405:93;;;20444:17;20405:93;20398:100;;;20243:262;:::o;14750:330::-;14817:12;;;;14866:10;:27;;14858:72;;;;;;;;;;;;:::i;:::-;14986:5;;;14965:42;;;;;;;14986:5;;;14965:42;;;15017:5;:21;;;;;;;;;;;;;;15048:25;;;;;;;14750:330::o;20864:343::-;15204:5;;;;15190:10;:19;15182:64;;;;;;;;;;;;:::i;:::-;20989:28:::1;::::0;::::1;20981:69;;;;;;;;;;;;:::i;:::-;21080:42;::::0;::::1;;::::0;;;:26:::1;:42;::::0;;;;;;:53;;;::::1;::::0;::::1;;;::::0;;21148:52;::::1;::::0;::::1;::::0;21080:53;;21148:52:::1;:::i;:::-;;;;;;;;20864:343:::0;;:::o;19031:41::-;;;;;;;;;;;;;:::o;13346:20::-;;;;;;:::o;18742:74::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;20635:139::-;20711:10;20680:28;;;;:16;:28;;;;;;:41;;;;;;;;20736:31;;;20680:28;20736:31;20635:139::o;16029:51::-;;;;;;;;;;;;;;;:::o;21964:2547::-;22180:28;;;22172:68;;;;;;;;;;;;:::i;:::-;22346:6;;:16;;;;-1:-1:-1;22356:6:0;;22346:16;:26;;;;-1:-1:-1;22366:6:0;;;;22346:26;22342:2003;;;22396:18;;;22404:10;22396:18;22388:58;;;;;;;;;;;;:::i;:::-;22468:36;:22;;;22502:1;22468:22;;;:16;:22;;;;;;;:36;22460:74;;;;;;;;;;;;:::i;:::-;22556:42;;;;;;;:26;:42;;;;;;;;22548:82;;;;;;;;;;;;:::i;:::-;22342:2003;;;22955:18;;;22947:59;;;;;;;;;;;;:::i;:::-;23449:14;23531:40;;;;;;;;;;;;;;;;;23593:18;:16;:18::i;:::-;19424:118;23761:8;:186;;23908:39;23761:186;;;23804:69;23761:186;24093:12;;;;;;;:6;:12;;;;;;;;;:14;;;;;;;;23668:465;;;;;;23977:4;;24011:14;;24055:8;;24093:14;23668:465;;:::i;:::-;;;;;;;;;;;;;23633:522;;;;;;23493:680;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;23466:721;;;;;;23449:738;;24201:24;24228:26;24238:6;24246:1;24249;24252;24228:26;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24201:53;;24296:4;24276:24;;:16;:24;;;24268:66;;;;;;;;;;;;:::i;:::-;22342:2003;;;24374:38;;;;;;;;:22;:38;;;;;;;;:44;;;;;;;;;;;;;;:55;;;;;;;;;;24444:60;;;;;24374:55;;24444:60;:::i;:::-;;;;;;;;21964:2547;;;;;;:::o;13372:27::-;;;;;;:::o;19973:211::-;20047:7;19146:80;20127:24;20153:7;20170:4;20083:93;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;20073:104;;;;;;20066:111;;19973:211;;;:::o;5:130:-1:-;72:20;;19106:42;19095:54;;20004:35;;19994:2;;20053:1;;20043:12;19994:2;57:78;;;;:::o;142:124::-;206:20;;18928:13;;18921:21;20125:32;;20115:2;;20171:1;;20161:12;901:241;;1005:2;993:9;984:7;980:23;976:32;973:2;;;-1:-1;;1011:12;973:2;1073:53;1118:7;1094:22;1073:53;:::i;:::-;1063:63;967:175;-1:-1;;;967:175::o;1149:366::-;;;1270:2;1258:9;1249:7;1245:23;1241:32;1238:2;;;-1:-1;;1276:12;1238:2;1338:53;1383:7;1359:22;1338:53;:::i;:::-;1328:63;;1446:53;1491:7;1428:2;1471:9;1467:22;1446:53;:::i;:::-;1436:63;;1232:283;;;;;:::o;1522:859::-;;;;;;;1706:3;1694:9;1685:7;1681:23;1677:33;1674:2;;;-1:-1;;1713:12;1674:2;1775:53;1820:7;1796:22;1775:53;:::i;:::-;1765:63;;1883:53;1928:7;1865:2;1908:9;1904:22;1883:53;:::i;:::-;1873:63;;1991:50;2033:7;1973:2;2013:9;2009:22;1991:50;:::i;:::-;1981:60;;2078:2;2119:9;2115:22;833:20;19311:4;20394:5;19300:16;20371:5;20368:33;20358:2;;-1:-1;;20405:12;20358:2;1668:713;;;;-1:-1;1668:713;;2184:3;2224:22;;340:20;;2293:3;2333:22;;;340:20;;-1:-1;1668:713;-1:-1;;1668:713::o;2388:360::-;;;2506:2;2494:9;2485:7;2481:23;2477:32;2474:2;;;-1:-1;;2512:12;2474:2;2574:53;2619:7;2595:22;2574:53;:::i;:::-;2564:63;;2682:50;2724:7;2664:2;2704:9;2700:22;2682:50;:::i;2755:479::-;;;;2887:2;2875:9;2866:7;2862:23;2858:32;2855:2;;;-1:-1;;2893:12;2855:2;2955:53;3000:7;2976:22;2955:53;:::i;:::-;2945:63;;3045:2;3085:9;3081:22;206:20;231:30;255:5;231:30;:::i;:::-;3053:60;-1:-1;3150:2;3186:22;;206:20;231:30;206:20;231:30;:::i;:::-;3158:60;;;;2849:385;;;;;:::o;3241:609::-;;;;;3395:2;3383:9;3374:7;3370:23;3366:32;3363:2;;;-1:-1;;3401:12;3363:2;3463:53;3508:7;3484:22;3463:53;:::i;:::-;3453:63;;3581:2;3570:9;3566:18;3553:32;3605:18;;3597:6;3594:30;3591:2;;;-1:-1;;3627:12;3591:2;3712:6;3701:9;3697:22;;;538:3;531:4;523:6;519:17;515:27;505:2;;-1:-1;;546:12;505:2;589:6;576:20;3605:18;608:6;605:30;602:2;;;-1:-1;;638:12;602:2;733:3;3581:2;713:17;674:6;699:32;;696:41;693:2;;;-1:-1;;740:12;693:2;3581;674:6;670:17;3647:82;;;;;;;;3766:2;3806:9;3802:22;206:20;231:30;255:5;231:30;:::i;:::-;3357:493;;;;-1:-1;3357:493;;-1:-1;;3357:493::o;9344:291::-;;19410:6;19405:3;19400;19387:30;19448:16;;19441:27;;;19448:16;9488:147;-1:-1;9488:147::o;9642:553::-;;5199:5;18073:12;-1:-1;19555:101;19569:6;19566:1;19563:13;19555:101;;;5344:4;19636:11;;;;;19630:18;19617:11;;;19610:39;19584:10;19555:101;;;19671:6;19668:1;19665:13;19662:2;;;-1:-1;19727:6;19722:3;19718:16;19711:27;19662:2;-1:-1;5375:16;;;;4159:37;;;-1:-1;5344:4;10047:12;;4159:37;10158:12;;;9834:361;-1:-1;9834:361::o;10202:222::-;19106:42;19095:54;;;;3928:37;;10329:2;10314:18;;10300:124::o;10431:210::-;18928:13;;18921:21;4042:34;;10552:2;10537:18;;10523:118::o;10648:222::-;4159:37;;;10775:2;10760:18;;10746:124::o;10877:768::-;4159:37;;;11303:2;11288:18;;4159:37;;;;19106:42;19095:54;;;11386:2;11371:18;;3928:37;19095:54;;11469:2;11454:18;;3928:37;18928:13;18921:21;11546:3;11531:19;;4042:34;11630:3;11615:19;;4159:37;11138:3;11123:19;;11109:536::o;11652:556::-;4159:37;;;12028:2;12013:18;;4159:37;;;;12111:2;12096:18;;4159:37;19106:42;19095:54;12194:2;12179:18;;3928:37;11863:3;11848:19;;11834:374::o;12215:548::-;4159:37;;;19311:4;19300:16;;;;12583:2;12568:18;;9297:35;12666:2;12651:18;;4159:37;12749:2;12734:18;;4159:37;12422:3;12407:19;;12393:370::o;12770:326::-;;12925:2;12946:17;12939:47;18229:6;12925:2;12914:9;12910:18;18217:19;19410:6;19405:3;18257:14;12914:9;18257:14;19387:30;19448:16;;;18257:14;19448:16;;;19441:27;;;;19928:2;19908:14;;;19924:7;19904:28;4642:39;;;12896:200;-1:-1;12896:200::o;13103:416::-;13303:2;13317:47;;;5628:2;13288:18;;;18217:19;5664:30;18257:14;;;5644:51;5714:12;;;13274:245::o;13526:416::-;13726:2;13740:47;;;5965:2;13711:18;;;18217:19;6001:29;18257:14;;;5981:50;6050:12;;;13697:245::o;13949:416::-;14149:2;14163:47;;;6301:2;14134:18;;;18217:19;6337:23;18257:14;;;6317:44;6380:12;;;14120:245::o;14372:416::-;14572:2;14586:47;;;14557:18;;;18217:19;6667:34;18257:14;;;6647:55;6721:12;;;14543:245::o;14795:416::-;14995:2;15009:47;;;14980:18;;;18217:19;7008:34;18257:14;;;6988:55;7062:12;;;14966:245::o;15218:416::-;15418:2;15432:47;;;7313:2;15403:18;;;18217:19;7349:27;18257:14;;;7329:48;7396:12;;;15389:245::o;15641:416::-;15841:2;15855:47;;;7647:2;15826:18;;;18217:19;7683:31;18257:14;;;7663:52;7734:12;;;15812:245::o;16064:416::-;16264:2;16278:47;;;16249:18;;;18217:19;8021:34;18257:14;;;8001:55;8075:12;;;16235:245::o;16487:416::-;16687:2;16701:47;;;8326:2;16672:18;;;18217:19;8362:29;18257:14;;;8342:50;8411:12;;;16658:245::o;16910:416::-;17110:2;17124:47;;;8662:2;17095:18;;;18217:19;8698:30;18257:14;;;8678:51;8748:12;;;17081:245::o;17333:416::-;17533:2;17547:47;;;8999:2;17518:18;;;18217:19;9035:29;18257:14;;;9015:50;9084:12;;;17504:245::o;20069:111::-;20150:5;18928:13;18921:21;20128:5;20125:32;20115:2;;20171:1;;20161:12;20115:2;20109:71;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1059000","executionCost":"infinite","totalCost":"infinite"},"external":{"DOMAIN_SEPARATOR()":"infinite","claimOwnership()":"45016","deploy(address,bytes,bool)":"infinite","masterContractApproved(address,address)":"infinite","masterContractOf(address)":"1307","nonces(address)":"1268","owner()":"1091","pendingOwner()":"1134","registerProtocol()":"22195","setMasterContractApproval(address,address,bool,uint8,bytes32,bytes32)":"infinite","transferOwnership(address,bool,bool)":"infinite","whitelistMasterContract(address,bool)":"infinite","whitelistedMasterContracts(address)":"1303"},"internal":{"_calculateDomainSeparator(uint256)":"infinite"}},"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","claimOwnership()":"4e71e0c8","deploy(address,bytes,bool)":"1f54245b","masterContractApproved(address,address)":"91e0eab5","masterContractOf(address)":"bafe4f14","nonces(address)":"7ecebe00","owner()":"8da5cb5b","pendingOwner()":"e30c3978","registerProtocol()":"aee4d1b2","setMasterContractApproval(address,address,bool,uint8,bytes32,bytes32)":"c0a47c93","transferOwnership(address,bool,bool)":"078dfbe7","whitelistMasterContract(address,bool)":"733a9d7c","whitelistedMasterContracts(address)":"12a90c8a"}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"masterContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cloneAddress\",\"type\":\"address\"}],\"name\":\"LogDeploy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"}],\"name\":\"LogRegisterProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"masterContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"LogSetMasterContractApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"masterContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"LogWhiteListMasterContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"useCreate2\",\"type\":\"bool\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"cloneAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"masterContractApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"masterContractOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"masterContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"setMasterContractApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"whitelistMasterContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedMasterContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deploy(address,bytes,bool)\":{\"params\":{\"data\":\"Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\",\"masterContract\":\"The address of the contract to clone.\",\"useCreate2\":\"Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\"},\"returns\":{\"cloneAddress\":\"Address of the created clone contract.\"}},\"setMasterContractApproval(address,address,bool,uint8,bytes32,bytes32)\":{\"params\":{\"approved\":\"If True approves access. If False revokes access.\",\"masterContract\":\"The address who gains or loses access.\",\"r\":\"Part of the signature. (See EIP-191)\",\"s\":\"Part of the signature. (See EIP-191)\",\"user\":\"The address of the user that approves or revokes access.\",\"v\":\"Part of the signature. (See EIP-191)\"}},\"transferOwnership(address,bool,bool)\":{\"params\":{\"direct\":\"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\",\"newOwner\":\"Address of the new owner.\",\"renounce\":\"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimOwnership()\":{\"notice\":\"Needs to be called by `pendingOwner` to claim ownership.\"},\"deploy(address,bytes,bool)\":{\"notice\":\"Deploys a given master Contract as a clone. Any ETH transferred with this call is forwarded to the new clone. Emits `LogDeploy`.\"},\"masterContractApproved(address,address)\":{\"notice\":\"masterContract to user to approval state\"},\"masterContractOf(address)\":{\"notice\":\"Mapping from clone contracts to their masterContract.\"},\"nonces(address)\":{\"notice\":\"user nonces for masterContract approvals\"},\"registerProtocol()\":{\"notice\":\"Other contracts need to register with this master contract so that users can approve them for the BentoBox.\"},\"setMasterContractApproval(address,address,bool,uint8,bytes32,bytes32)\":{\"notice\":\"Approves or revokes a `masterContract` access to `user` funds.\"},\"transferOwnership(address,bool,bool)\":{\"notice\":\"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.\"},\"whitelistMasterContract(address,bool)\":{\"notice\":\"Enables or disables a contract for approval without signed message.\"},\"whitelistedMasterContracts(address)\":{\"notice\":\"masterContract to whitelisted state for approval without signed message\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/BentoBoxV1Flat.sol\":\"MasterContractManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/flat/BentoBoxV1Flat.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// The BentoBox\\n\\n//  \\u2584\\u2584\\u2584\\u2584\\u00b7 \\u2584\\u2584\\u2584 . \\u2590 \\u2584 \\u2584\\u2584\\u2584\\u2584\\u2584      \\u2584\\u2584\\u2584\\u2584\\u00b7       \\u2590\\u2584\\u2022 \\u2584\\n//  \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u2580\\u2584.\\u2580\\u00b7\\u2588\\u258c\\u2590\\u2588\\u2022\\u2588\\u2588  \\u25aa     \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u25aa      \\u2588\\u258c\\u2588\\u258c\\u25aa\\n//  \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584\\u2590\\u2580\\u2580\\u25aa\\u2584\\u2590\\u2588\\u2590\\u2590\\u258c \\u2590\\u2588.\\u25aa \\u2584\\u2588\\u2580\\u2584 \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584 \\u2584\\u2588\\u2580\\u2584  \\u00b7\\u2588\\u2588\\u00b7\\n//  \\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u2584\\u2584\\u258c\\u2588\\u2588\\u2590\\u2588\\u258c \\u2590\\u2588\\u258c\\u00b7\\u2590\\u2588\\u258c.\\u2590\\u258c\\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u258c.\\u2590\\u258c\\u25aa\\u2590\\u2588\\u00b7\\u2588\\u258c\\n//  \\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2580\\u2580 \\u2580\\u2580 \\u2588\\u25aa \\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u2022\\u2580\\u2580 \\u2580\\u2580\\n\\n// This contract stores funds, handles their transfers, supports flash loans and strategies.\\n\\n// Copyright (c) 2021 BoringCrypto - All rights reserved\\n// Twitter: @Boring_Crypto\\n\\n// Special thanks to Keno for all his hard work and support\\n\\n// Version 22-Mar-2021\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable not-rely-on-time\\n// solhint-disable no-inline-assembly\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function decimals() external view returns (uint256);\\n}\\n\\n// File contracts/interfaces/IFlashLoan.sol\\n// License-Identifier: MIT\\n\\ninterface IFlashBorrower {\\n    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param token The address of the token that is loaned.\\n    /// @param amount of the `token` that is loaned.\\n    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onFlashLoan(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IBatchFlashBorrower {\\n    /// @notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param tokens Array of addresses for ERC-20 tokens that is loaned.\\n    /// @param amounts A one-to-one map to `tokens` that is loaned.\\n    /// @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onBatchFlashLoan(\\n        address sender,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata fees,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File contracts/interfaces/IWETH.sol\\n// License-Identifier: MIT\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\\n// File contracts/interfaces/IStrategy.sol\\n// License-Identifier: MIT\\n\\ninterface IStrategy {\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\n    /// @param amount The amount of tokens to invest.\\n    function skim(uint256 amount) external;\\n\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\n    /// @dev The `actualAmount` should be very close to the amount.\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\n    /// @param amount The requested amount the caller wants to withdraw.\\n    /// @return actualAmount The real amount that is withdrawn.\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library using overflow-/underflow-safe math.\\nlibrary RebaseLibrary {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = elastic.mul(total.base) / total.elastic;\\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\\n                base = base.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = base.mul(total.elastic) / total.base;\\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\\n                elastic = elastic.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\\n    /// @return (Rebase) The new total.\\n    /// @return base in relationship to `elastic`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 base) {\\n        base = toBase(total, elastic, roundUp);\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return (total, base);\\n    }\\n\\n    /// @notice Sub `base` from `total` and update `total.elastic`.\\n    /// @return (Rebase) The new total.\\n    /// @return elastic in relationship to `base`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 elastic) {\\n        elastic = toElastic(total, base, roundUp);\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return (total, elastic);\\n    }\\n\\n    /// @notice Add `elastic` and `base` to `total`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Subtract `elastic` and `base` to `total`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Add `elastic` to `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.add(elastic.to128());\\n    }\\n\\n    /// @notice Subtract `elastic` from `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.sub(elastic.to128());\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() public {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IMasterContract {\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\n    /// Also kown as the constructor for cloned contracts.\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\n    /// @param data Can be abi encoded arguments or anything else.\\n    function init(bytes calldata data) external payable;\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringFactory.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BoringFactory {\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\n\\n    /// @notice Mapping from clone contracts to their masterContract.\\n    mapping(address => address) public masterContractOf;\\n\\n    /// @notice Deploys a given master Contract as a clone.\\n    /// Any ETH transferred with this call is forwarded to the new clone.\\n    /// Emits `LogDeploy`.\\n    /// @param masterContract The address of the contract to clone.\\n    /// @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\\n    /// @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\\n    /// @return cloneAddress Address of the created clone contract.\\n    function deploy(\\n        address masterContract,\\n        bytes calldata data,\\n        bool useCreate2\\n    ) public payable returns (address cloneAddress) {\\n        require(masterContract != address(0), \\\"BoringFactory: No masterContract\\\");\\n        bytes20 targetBytes = bytes20(masterContract); // Takes the first 20 bytes of the masterContract's address\\n\\n        if (useCreate2) {\\n            // each masterContract has different code already. So clones are distinguished by their data only.\\n            bytes32 salt = keccak256(data);\\n\\n            // Creates clone, more info here: https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create2(0, clone, 0x37, salt)\\n            }\\n        } else {\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create(0, clone, 0x37)\\n            }\\n        }\\n        masterContractOf[cloneAddress] = masterContract;\\n\\n        IMasterContract(cloneAddress).init{value: msg.value}(data);\\n\\n        emit LogDeploy(masterContract, data, cloneAddress);\\n    }\\n}\\n\\n// File contracts/MasterContractManager.sol\\n// License-Identifier: UNLICENSED\\n\\ncontract MasterContractManager is BoringOwnable, BoringFactory {\\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\\n    event LogRegisterProtocol(address indexed protocol);\\n\\n    /// @notice masterContract to user to approval state\\n    mapping(address => mapping(address => bool)) public masterContractApproved;\\n    /// @notice masterContract to whitelisted state for approval without signed message\\n    mapping(address => bool) public whitelistedMasterContracts;\\n    /// @notice user nonces for masterContract approvals\\n    mapping(address => uint256) public nonces;\\n\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n    // See https://eips.ethereum.org/EIPS/eip-191\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\n    bytes32 private constant APPROVAL_SIGNATURE_HASH =\\n        keccak256(\\\"SetMasterContractApproval(string warning,address user,address masterContract,bool approved,uint256 nonce)\\\");\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\n    }\\n\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, keccak256(\\\"BentoBox V1\\\"), chainId, address(this)));\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @notice Other contracts need to register with this master contract so that users can approve them for the BentoBox.\\n    function registerProtocol() public {\\n        masterContractOf[msg.sender] = msg.sender;\\n        emit LogRegisterProtocol(msg.sender);\\n    }\\n\\n    /// @notice Enables or disables a contract for approval without signed message.\\n    function whitelistMasterContract(address masterContract, bool approved) public onlyOwner {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: Cannot approve 0\\\");\\n\\n        // Effects\\n        whitelistedMasterContracts[masterContract] = approved;\\n        emit LogWhiteListMasterContract(masterContract, approved);\\n    }\\n\\n    /// @notice Approves or revokes a `masterContract` access to `user` funds.\\n    /// @param user The address of the user that approves or revokes access.\\n    /// @param masterContract The address who gains or loses access.\\n    /// @param approved If True approves access. If False revokes access.\\n    /// @param v Part of the signature. (See EIP-191)\\n    /// @param r Part of the signature. (See EIP-191)\\n    /// @param s Part of the signature. (See EIP-191)\\n    // F4 - Check behaviour for all function arguments when wrong or extreme\\n    // F4: Don't allow masterContract 0 to be approved. Unknown contracts will have a masterContract of 0.\\n    // F4: User can't be 0 for signed approvals because the recoveredAddress will be 0 if ecrecover fails\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: masterC not set\\\"); // Important for security\\n\\n        // If no signature is provided, the fallback is executed\\n        if (r == 0 && s == 0 && v == 0) {\\n            require(user == msg.sender, \\\"MasterCMgr: user not sender\\\");\\n            require(masterContractOf[user] == address(0), \\\"MasterCMgr: user is clone\\\");\\n            require(whitelistedMasterContracts[masterContract], \\\"MasterCMgr: not whitelisted\\\");\\n        } else {\\n            // Important for security - any address without masterContract has address(0) as masterContract\\n            // So approving address(0) would approve every address, leading to full loss of funds\\n            // Also, ecrecover returns address(0) on failure. So we check this:\\n            require(user != address(0), \\\"MasterCMgr: User cannot be 0\\\");\\n\\n            // C10 - Protect signatures against replay, use nonce and chainId (SWC-121)\\n            // C10: nonce + chainId are used to prevent replays\\n            // C11 - All signatures strictly EIP-712 (SWC-117 SWC-122)\\n            // C11: signature is EIP-712 compliant\\n            // C12 - abi.encodePacked can't contain variable length user input (SWC-133)\\n            // C12: abi.encodePacked has fixed length parameters\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA,\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            APPROVAL_SIGNATURE_HASH,\\n                            approved\\n                                ? keccak256(\\\"Give FULL access to funds in (and approved to) BentoBox?\\\")\\n                                : keccak256(\\\"Revoke access to BentoBox?\\\"),\\n                            user,\\n                            masterContract,\\n                            approved,\\n                            nonces[user]++\\n                        )\\n                    )\\n                )\\n            );\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress == user, \\\"MasterCMgr: Invalid Signature\\\");\\n        }\\n\\n        // Effects\\n        masterContractApproved[masterContract][user] = approved;\\n        emit LogSetMasterContractApproval(masterContract, user, approved);\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringBatchable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BaseBoringBatchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /// @notice Allows batched call to self (this contract).\\n    /// @param calls An array of inputs for each call.\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n    /// @return successes An array indicating the success of a call, mapped one-to-one to `calls`.\\n    /// @return results An array with the returned data of each function call, mapped one-to-one to `calls`.\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results) {\\n        successes = new bool[](calls.length);\\n        results = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\n            require(success || !revertOnFail, _getRevertMsg(result));\\n            successes[i] = success;\\n            results[i] = result;\\n        }\\n    }\\n}\\n\\ncontract BoringBatchable is BaseBoringBatchable {\\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\\n    /// Lookup `IERC20.permit`.\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\n    function permitToken(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        token.permit(from, to, amount, deadline, v, r, s);\\n    }\\n}\\n\\n// File contracts/BentoBox.sol\\n// License-Identifier: UNLICENSED\\n\\n/// @title BentoBox\\n/// @author BoringCrypto, Keno\\n/// @notice The BentoBox is a vault for tokens. The stored tokens can be flash loaned and used in strategies.\\n/// Yield from this will go to the token depositors.\\n/// Rebasing tokens ARE NOT supported and WILL cause loss of funds.\\n/// Any funds transfered directly onto the BentoBox will be lost, use the deposit function instead.\\ncontract BentoBoxV1 is MasterContractManager, BoringBatchable {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n    using BoringERC20 for IERC20;\\n    using RebaseLibrary for Rebase;\\n\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n\\n    event LogDeposit(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogWithdraw(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogTransfer(IERC20 indexed token, address indexed from, address indexed to, uint256 share);\\n\\n    event LogFlashLoan(address indexed borrower, IERC20 indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\\n\\n    event LogStrategyTargetPercentage(IERC20 indexed token, uint256 targetPercentage);\\n    event LogStrategyQueued(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategySet(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategyInvest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyDivest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyProfit(IERC20 indexed token, uint256 amount);\\n    event LogStrategyLoss(IERC20 indexed token, uint256 amount);\\n\\n    // *************** //\\n    // *** STRUCTS *** //\\n    // *************** //\\n\\n    struct StrategyData {\\n        uint64 strategyStartDate;\\n        uint64 targetPercentage;\\n        uint128 balance; // the balance of the strategy that BentoBox thinks is in there\\n    }\\n\\n    // ******************************** //\\n    // *** CONSTANTS AND IMMUTABLES *** //\\n    // ******************************** //\\n\\n    // V2 - Can they be private?\\n    // V2: Private to save gas, to verify it's correct, check the constructor arguments\\n    IERC20 private immutable wethToken;\\n\\n    IERC20 private constant USE_ETHEREUM = IERC20(0);\\n    uint256 private constant FLASH_LOAN_FEE = 50; // 0.05%\\n    uint256 private constant FLASH_LOAN_FEE_PRECISION = 1e5;\\n    uint256 private constant STRATEGY_DELAY = 0 weeks;\\n    uint256 private constant MAX_TARGET_PERCENTAGE = 95; // 95%\\n    uint256 private constant MINIMUM_SHARE_BALANCE = 1000; // To prevent the ratio going off\\n\\n    // ***************** //\\n    // *** VARIABLES *** //\\n    // ***************** //\\n\\n    // Balance per token per address/contract in shares\\n    mapping(IERC20 => mapping(address => uint256)) public balanceOf;\\n\\n    // Rebase from amount to share\\n    mapping(IERC20 => Rebase) public totals;\\n\\n    mapping(IERC20 => IStrategy) public strategy;\\n    mapping(IERC20 => IStrategy) public pendingStrategy;\\n    mapping(IERC20 => StrategyData) public strategyData;\\n\\n    // ******************* //\\n    // *** CONSTRUCTOR *** //\\n    // ******************* //\\n\\n    constructor(IERC20 wethToken_) public {\\n        wethToken = wethToken_;\\n    }\\n\\n    // Just for testing purposes!!! Don't deploy this contract on production!!\\n    function setTokenTotal(\\n        IERC20 token,\\n        uint128 elastic,\\n        uint128 base\\n    ) public {\\n        Rebase memory total;\\n        total.elastic = elastic;\\n        total.base = base;\\n        totals[token] = total;\\n    }\\n\\n    // ***************** //\\n    // *** MODIFIERS *** //\\n    // ***************** //\\n\\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\\n    /// If 'from' is msg.sender, it's allowed.\\n    /// If 'from' is the BentoBox itself, it's allowed. Any ETH, token balances (above the known balances) or BentoBox balances\\n    /// can be taken by anyone.\\n    /// This is to enable skimming, not just for deposits, but also for withdrawals or transfers, enabling better composability.\\n    /// If 'from' is a clone of a masterContract AND the 'from' address has approved that masterContract, it's allowed.\\n    modifier allowed(address from) {\\n        if (from != msg.sender && from != address(this)) {\\n            // From is sender or you are skimming\\n            address masterContract = masterContractOf[msg.sender];\\n            require(masterContract != address(0), \\\"BentoBox: no masterContract\\\");\\n            require(masterContractApproved[masterContract][from], \\\"BentoBox: Transfer not approved\\\");\\n        }\\n        _;\\n    }\\n\\n    // ************************** //\\n    // *** INTERNAL FUNCTIONS *** //\\n    // ************************** //\\n\\n    /// @dev Returns the total balance of `token` this contracts holds,\\n    /// plus the total amount this contract thinks the strategy holds.\\n    function _tokenBalanceOf(IERC20 token) internal view returns (uint256 amount) {\\n        amount = token.balanceOf(address(this)).add(strategyData[token].balance);\\n    }\\n\\n    // ************************ //\\n    // *** PUBLIC FUNCTIONS *** //\\n    // ************************ //\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share) {\\n        share = totals[token].toBase(amount, roundUp);\\n    }\\n\\n    /// @dev Helper function represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        IERC20 token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount) {\\n        amount = totals[token].toElastic(share, roundUp);\\n    }\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public payable allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n\\n        // If a new token gets added, the tokenSupply call checks that this is a deployed contract. Needed for security.\\n        require(total.elastic != 0 || token.totalSupply() > 0, \\\"BentoBox: No tokens\\\");\\n        if (share == 0) {\\n            // value of the share may be lower than the amount due to rounding, that's ok\\n            share = total.toBase(amount, false);\\n            // Any deposit should lead to at least the minimum share balance, otherwise it's ignored (no amount taken)\\n            if (total.base.add(share.to128()) < MINIMUM_SHARE_BALANCE) {\\n                return (0, 0);\\n            }\\n        } else {\\n            // amount may be lower than the value of share due to rounding, in that case, add 1 to amount (Always round up)\\n            amount = total.toElastic(share, true);\\n        }\\n\\n        // In case of skimming, check that only the skimmable amount is taken.\\n        // For ETH, the full balance is available, so no need to check.\\n        // During flashloans the _tokenBalanceOf is lower than 'reality', so skimming deposits will mostly fail during a flashloan.\\n        require(\\n            from != address(this) || token_ == USE_ETHEREUM || amount <= _tokenBalanceOf(token).sub(total.elastic),\\n            \\\"BentoBox: Skim too much\\\"\\n        );\\n\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n        total.base = total.base.add(share.to128());\\n        total.elastic = total.elastic.add(amount.to128());\\n        totals[token] = total;\\n\\n        // Interactions\\n        // During the first deposit, we check that this token is 'real'\\n        if (token_ == USE_ETHEREUM) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the WETH implementation is faulty or malicious, it will block adding ETH (but we know the WETH implementation)\\n            IWETH(address(wethToken)).deposit{value: amount}();\\n        } else if (from != address(this)) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the token implementation is faulty or malicious, it may block adding tokens. Good.\\n            token.safeTransferFrom(from, address(this), amount);\\n        }\\n        emit LogDeposit(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n        if (share == 0) {\\n            // value of the share paid could be lower than the amount paid due to rounding, in that case, add a share (Always round up)\\n            share = total.toBase(amount, true);\\n        } else {\\n            // amount may be lower than the value of share due to rounding, that's ok\\n            amount = total.toElastic(share, false);\\n        }\\n\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        total.elastic = total.elastic.sub(amount.to128());\\n        total.base = total.base.sub(share.to128());\\n        // There have to be at least 1000 shares left to prevent reseting the share/amount ratio (unless it's fully emptied)\\n        require(total.base >= MINIMUM_SHARE_BALANCE || total.base == 0, \\\"BentoBox: cannot empty\\\");\\n        totals[token] = total;\\n\\n        // Interactions\\n        if (token_ == USE_ETHEREUM) {\\n            // X2, X3: A revert or big gas usage in the WETH contract could block withdrawals, but WETH9 is fine.\\n            IWETH(address(wethToken)).withdraw(amount);\\n            // X2, X3: A revert or big gas usage could block, however, the to address is under control of the caller.\\n            (bool success, ) = to.call{value: amount}(\\\"\\\");\\n            require(success, \\\"BentoBox: ETH transfer failed\\\");\\n        } else {\\n            // X2, X3: A malicious token could block withdrawal of just THAT token.\\n            //         masterContracts may want to take care not to rely on withdraw always succeeding.\\n            token.safeTransfer(to, amount);\\n        }\\n        emit LogWithdraw(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    // Clones of master contracts can transfer from any account that has approved them\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transferMultiple for gas optimization\\n    function transfer(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) public allowed(from) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n\\n        emit LogTransfer(token, from, to, share);\\n    }\\n\\n    /// @notice Transfer shares from a user account to multiple other ones.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param tos The receivers of the tokens.\\n    /// @param shares The amount of `token` in shares for each receiver in `tos`.\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transfer for gas optimization\\n    function transferMultiple(\\n        IERC20 token,\\n        address from,\\n        address[] calldata tos,\\n        uint256[] calldata shares\\n    ) public allowed(from) {\\n        // Checks\\n        require(tos[0] != address(0), \\\"BentoBox: to[0] not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        uint256 totalAmount;\\n        uint256 len = tos.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address to = tos[i];\\n            balanceOf[token][to] = balanceOf[token][to].add(shares[i]);\\n            totalAmount = totalAmount.add(shares[i]);\\n            emit LogTransfer(token, from, to, shares[i]);\\n        }\\n        balanceOf[token][from] = balanceOf[token][from].sub(totalAmount);\\n    }\\n\\n    /// @notice Flashloan ability.\\n    /// @param borrower The address of the contract that implements and conforms to `IFlashBorrower` and handles the flashloan.\\n    /// @param receiver Address of the token receiver.\\n    /// @param token The address of the token to receive.\\n    /// @param amount of the tokens to receive.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function flashLoan(\\n        IFlashBorrower borrower,\\n        address receiver,\\n        IERC20 token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public {\\n        uint256 fee = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n        token.safeTransfer(receiver, amount);\\n\\n        borrower.onFlashLoan(msg.sender, token, amount, fee, data);\\n\\n        require(_tokenBalanceOf(token) >= totals[token].addElastic(fee.to128()), \\\"BentoBox: Wrong amount\\\");\\n        emit LogFlashLoan(address(borrower), token, amount, fee, receiver);\\n    }\\n\\n    /// @notice Support for batched flashloans. Useful to request multiple different `tokens` in a single transaction.\\n    /// @param borrower The address of the contract that implements and conforms to `IBatchFlashBorrower` and handles the flashloan.\\n    /// @param receivers An array of the token receivers. A one-to-one mapping with `tokens` and `amounts`.\\n    /// @param tokens The addresses of the tokens.\\n    /// @param amounts of the tokens for each receiver.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function batchFlashLoan(\\n        IBatchFlashBorrower borrower,\\n        address[] calldata receivers,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public {\\n        uint256[] memory fees = new uint256[](tokens.length);\\n\\n        uint256 len = tokens.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 amount = amounts[i];\\n            fees[i] = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n\\n            tokens[i].safeTransfer(receivers[i], amounts[i]);\\n        }\\n\\n        borrower.onBatchFlashLoan(msg.sender, tokens, amounts, fees, data);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            IERC20 token = tokens[i];\\n            require(_tokenBalanceOf(token) >= totals[token].addElastic(fees[i].to128()), \\\"BentoBox: Wrong amount\\\");\\n            emit LogFlashLoan(address(borrower), token, amounts[i], fees[i], receivers[i]);\\n        }\\n    }\\n\\n    /// @notice Sets the target percentage of the strategy for `token`.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param targetPercentage_ The new target in percent. Must be lesser or equal to `MAX_TARGET_PERCENTAGE`.\\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) public onlyOwner {\\n        // Checks\\n        require(targetPercentage_ <= MAX_TARGET_PERCENTAGE, \\\"StrategyManager: Target too high\\\");\\n\\n        // Effects\\n        strategyData[token].targetPercentage = targetPercentage_;\\n        emit LogStrategyTargetPercentage(token, targetPercentage_);\\n    }\\n\\n    /// @notice Sets the contract address of a new strategy that conforms to `IStrategy` for `token`.\\n    /// Must be called twice with the same arguments.\\n    /// A new strategy becomes pending first and can be activated once `STRATEGY_DELAY` is over.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param newStrategy The address of the contract that conforms to `IStrategy`.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // C4 - Use block.timestamp only for long intervals (SWC-116)\\n    // C4: block.timestamp is used for a period of 2 weeks, which is long enough\\n    function setStrategy(IERC20 token, IStrategy newStrategy) public onlyOwner {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy pending = pendingStrategy[token];\\n        if (data.strategyStartDate == 0 || pending != newStrategy) {\\n            pendingStrategy[token] = newStrategy;\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: Our sun will swallow the earth well before this overflows\\n            data.strategyStartDate = (block.timestamp + STRATEGY_DELAY).to64();\\n            emit LogStrategyQueued(token, newStrategy);\\n        } else {\\n            require(data.strategyStartDate != 0 && block.timestamp >= data.strategyStartDate, \\\"StrategyManager: Too early\\\");\\n            if (address(strategy[token]) != address(0)) {\\n                int256 balanceChange = strategy[token].exit(data.balance);\\n                // Effects\\n                if (balanceChange > 0) {\\n                    uint256 add = uint256(balanceChange);\\n                    totals[token].addElastic(add);\\n                    emit LogStrategyProfit(token, add);\\n                } else if (balanceChange < 0) {\\n                    uint256 sub = uint256(-balanceChange);\\n                    totals[token].subElastic(sub);\\n                    emit LogStrategyLoss(token, sub);\\n                }\\n\\n                emit LogStrategyDivest(token, data.balance);\\n            }\\n            strategy[token] = pending;\\n            data.strategyStartDate = 0;\\n            data.balance = 0;\\n            pendingStrategy[token] = IStrategy(0);\\n            emit LogStrategySet(token, newStrategy);\\n        }\\n        strategyData[token] = data;\\n    }\\n\\n    /// @notice The actual process of yield farming. Executes the strategy of `token`.\\n    /// Optionally does housekeeping if `balance` is true.\\n    /// `maxChangeAmount` is relevant for skimming or withdrawing if `balance` is true.\\n    /// @param token The address of the token for which a strategy is deployed.\\n    /// @param balance True if housekeeping should be done.\\n    /// @param maxChangeAmount The maximum amount for either pulling or pushing from/to the `IStrategy` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // F5: Not followed to prevent reentrancy issues with flashloans and BentoBox skims?\\n    function harvest(\\n        IERC20 token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) public {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy _strategy = strategy[token];\\n        int256 balanceChange = _strategy.harvest(data.balance, msg.sender);\\n        if (balanceChange == 0 && !balance) {\\n            return;\\n        }\\n\\n        uint256 totalElastic = totals[token].elastic;\\n\\n        if (balanceChange > 0) {\\n            uint256 add = uint256(balanceChange);\\n            totalElastic = totalElastic.add(add);\\n            totals[token].elastic = totalElastic.to128();\\n            emit LogStrategyProfit(token, add);\\n        } else if (balanceChange < 0) {\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: balanceChange could overflow if it's max negative int128.\\n            // But tokens with balances that large are not supported by the BentoBox.\\n            uint256 sub = uint256(-balanceChange);\\n            totalElastic = totalElastic.sub(sub);\\n            totals[token].elastic = totalElastic.to128();\\n            data.balance = data.balance.sub(sub.to128());\\n            emit LogStrategyLoss(token, sub);\\n        }\\n\\n        if (balance) {\\n            uint256 targetBalance = totalElastic.mul(data.targetPercentage) / 100;\\n            // if data.balance == targetBalance there is nothing to update\\n            if (data.balance < targetBalance) {\\n                uint256 amountOut = targetBalance.sub(data.balance);\\n                if (maxChangeAmount != 0 && amountOut > maxChangeAmount) {\\n                    amountOut = maxChangeAmount;\\n                }\\n                token.safeTransfer(address(_strategy), amountOut);\\n                data.balance = data.balance.add(amountOut.to128());\\n                _strategy.skim(amountOut);\\n                emit LogStrategyInvest(token, amountOut);\\n            } else if (data.balance > targetBalance) {\\n                uint256 amountIn = data.balance.sub(targetBalance.to128());\\n                if (maxChangeAmount != 0 && amountIn > maxChangeAmount) {\\n                    amountIn = maxChangeAmount;\\n                }\\n\\n                uint256 actualAmountIn = _strategy.withdraw(amountIn);\\n\\n                data.balance = data.balance.sub(actualAmountIn.to128());\\n                emit LogStrategyDivest(token, actualAmountIn);\\n            }\\n        }\\n\\n        strategyData[token] = data;\\n    }\\n\\n    // Contract should be able to receive ETH deposits to support deposit & skim\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd8343e88ade6bf85fd34d3556aedb2b14fe07ca40396ae2ef6064c9d8da0d4d3\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":905,"contract":"contracts/flat/BentoBoxV1Flat.sol:MasterContractManager","label":"owner","offset":0,"slot":"0","type":"t_address"},{"astId":907,"contract":"contracts/flat/BentoBoxV1Flat.sol:MasterContractManager","label":"pendingOwner","offset":0,"slot":"1","type":"t_address"},{"astId":1051,"contract":"contracts/flat/BentoBoxV1Flat.sol:MasterContractManager","label":"masterContractOf","offset":0,"slot":"2","type":"t_mapping(t_address,t_address)"},{"astId":1145,"contract":"contracts/flat/BentoBoxV1Flat.sol:MasterContractManager","label":"masterContractApproved","offset":0,"slot":"3","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":1150,"contract":"contracts/flat/BentoBoxV1Flat.sol:MasterContractManager","label":"whitelistedMasterContracts","offset":0,"slot":"4","type":"t_mapping(t_address,t_bool)"},{"astId":1155,"contract":"contracts/flat/BentoBoxV1Flat.sol:MasterContractManager","label":"nonces","offset":0,"slot":"5","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_address)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"claimOwnership()":{"notice":"Needs to be called by `pendingOwner` to claim ownership."},"deploy(address,bytes,bool)":{"notice":"Deploys a given master Contract as a clone. Any ETH transferred with this call is forwarded to the new clone. Emits `LogDeploy`."},"masterContractApproved(address,address)":{"notice":"masterContract to user to approval state"},"masterContractOf(address)":{"notice":"Mapping from clone contracts to their masterContract."},"nonces(address)":{"notice":"user nonces for masterContract approvals"},"registerProtocol()":{"notice":"Other contracts need to register with this master contract so that users can approve them for the BentoBox."},"setMasterContractApproval(address,address,bool,uint8,bytes32,bytes32)":{"notice":"Approves or revokes a `masterContract` access to `user` funds."},"transferOwnership(address,bool,bool)":{"notice":"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`."},"whitelistMasterContract(address,bool)":{"notice":"Enables or disables a contract for approval without signed message."},"whitelistedMasterContracts(address)":{"notice":"masterContract to whitelisted state for approval without signed message"}},"version":1}},"RebaseLibrary":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cfcb236afe66a1133e82df05d83d7094bf1733ce1c0378cfa2a330c76b58d73764736f6c634300060c0033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCF 0xCB 0x23 PUSH11 0xFE66A1133E82DF05D83D70 SWAP5 0xBF OR CALLER 0xCE SHR SUB PUSH25 0xCFA2A330C76B58D73764736F6C634300060C00330000000000 ","sourceMap":"9649:3411:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cfcb236afe66a1133e82df05d83d7094bf1733ce1c0378cfa2a330c76b58d73764736f6c634300060c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCF 0xCB 0x23 PUSH11 0xFE66A1133E82DF05D83D70 SWAP5 0xBF OR CALLER 0xCE SHR SUB PUSH25 0xCFA2A330C76B58D73764736F6C634300060C00330000000000 ","sourceMap":"9649:3411:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"add(struct Rebase memory,uint256,bool)":"infinite","add(struct Rebase memory,uint256,uint256)":"infinite","addElastic(struct Rebase storage pointer,uint256)":"infinite","sub(struct Rebase memory,uint256,bool)":"infinite","sub(struct Rebase memory,uint256,uint256)":"infinite","subElastic(struct Rebase storage pointer,uint256)":"infinite","toBase(struct Rebase memory,uint256,bool)":"infinite","toElastic(struct Rebase memory,uint256,bool)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A rebasing library using overflow-/underflow-safe math.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/BentoBoxV1Flat.sol\":\"RebaseLibrary\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/flat/BentoBoxV1Flat.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// The BentoBox\\n\\n//  \\u2584\\u2584\\u2584\\u2584\\u00b7 \\u2584\\u2584\\u2584 . \\u2590 \\u2584 \\u2584\\u2584\\u2584\\u2584\\u2584      \\u2584\\u2584\\u2584\\u2584\\u00b7       \\u2590\\u2584\\u2022 \\u2584\\n//  \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u2580\\u2584.\\u2580\\u00b7\\u2588\\u258c\\u2590\\u2588\\u2022\\u2588\\u2588  \\u25aa     \\u2590\\u2588 \\u2580\\u2588\\u25aa\\u25aa      \\u2588\\u258c\\u2588\\u258c\\u25aa\\n//  \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584\\u2590\\u2580\\u2580\\u25aa\\u2584\\u2590\\u2588\\u2590\\u2590\\u258c \\u2590\\u2588.\\u25aa \\u2584\\u2588\\u2580\\u2584 \\u2590\\u2588\\u2580\\u2580\\u2588\\u2584 \\u2584\\u2588\\u2580\\u2584  \\u00b7\\u2588\\u2588\\u00b7\\n//  \\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u2584\\u2584\\u258c\\u2588\\u2588\\u2590\\u2588\\u258c \\u2590\\u2588\\u258c\\u00b7\\u2590\\u2588\\u258c.\\u2590\\u258c\\u2588\\u2588\\u2584\\u25aa\\u2590\\u2588\\u2590\\u2588\\u258c.\\u2590\\u258c\\u25aa\\u2590\\u2588\\u00b7\\u2588\\u258c\\n//  \\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2580\\u2580 \\u2580\\u2580 \\u2588\\u25aa \\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u00b7\\u2580\\u2580\\u2580\\u2580  \\u2580\\u2588\\u2584\\u2580\\u25aa\\u2022\\u2580\\u2580 \\u2580\\u2580\\n\\n// This contract stores funds, handles their transfers, supports flash loans and strategies.\\n\\n// Copyright (c) 2021 BoringCrypto - All rights reserved\\n// Twitter: @Boring_Crypto\\n\\n// Special thanks to Keno for all his hard work and support\\n\\n// Version 22-Mar-2021\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable not-rely-on-time\\n// solhint-disable no-inline-assembly\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function decimals() external view returns (uint256);\\n}\\n\\n// File contracts/interfaces/IFlashLoan.sol\\n// License-Identifier: MIT\\n\\ninterface IFlashBorrower {\\n    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param token The address of the token that is loaned.\\n    /// @param amount of the `token` that is loaned.\\n    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onFlashLoan(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IBatchFlashBorrower {\\n    /// @notice The callback for batched flashloans. Every amount + fee needs to repayed to msg.sender before this call returns.\\n    /// @param sender The address of the invoker of this flashloan.\\n    /// @param tokens Array of addresses for ERC-20 tokens that is loaned.\\n    /// @param amounts A one-to-one map to `tokens` that is loaned.\\n    /// @param fees A one-to-one map to `tokens` that needs to be paid on top for each loan. Needs to be the same token.\\n    /// @param data Additional data that was passed to the flashloan function.\\n    function onBatchFlashLoan(\\n        address sender,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata fees,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File contracts/interfaces/IWETH.sol\\n// License-Identifier: MIT\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\\n// File contracts/interfaces/IStrategy.sol\\n// License-Identifier: MIT\\n\\ninterface IStrategy {\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\n    /// @param amount The amount of tokens to invest.\\n    function skim(uint256 amount) external;\\n\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\n    /// @dev The `actualAmount` should be very close to the amount.\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\n    /// @param amount The requested amount the caller wants to withdraw.\\n    /// @return actualAmount The real amount that is withdrawn.\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library using overflow-/underflow-safe math.\\nlibrary RebaseLibrary {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = elastic.mul(total.base) / total.elastic;\\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\\n                base = base.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = base.mul(total.elastic) / total.base;\\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\\n                elastic = elastic.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\\n    /// @return (Rebase) The new total.\\n    /// @return base in relationship to `elastic`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 base) {\\n        base = toBase(total, elastic, roundUp);\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return (total, base);\\n    }\\n\\n    /// @notice Sub `base` from `total` and update `total.elastic`.\\n    /// @return (Rebase) The new total.\\n    /// @return elastic in relationship to `base`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 elastic) {\\n        elastic = toElastic(total, base, roundUp);\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return (total, elastic);\\n    }\\n\\n    /// @notice Add `elastic` and `base` to `total`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Subtract `elastic` and `base` to `total`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Add `elastic` to `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.add(elastic.to128());\\n    }\\n\\n    /// @notice Subtract `elastic` from `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.sub(elastic.to128());\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() public {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IMasterContract {\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\n    /// Also kown as the constructor for cloned contracts.\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\n    /// @param data Can be abi encoded arguments or anything else.\\n    function init(bytes calldata data) external payable;\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringFactory.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BoringFactory {\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\n\\n    /// @notice Mapping from clone contracts to their masterContract.\\n    mapping(address => address) public masterContractOf;\\n\\n    /// @notice Deploys a given master Contract as a clone.\\n    /// Any ETH transferred with this call is forwarded to the new clone.\\n    /// Emits `LogDeploy`.\\n    /// @param masterContract The address of the contract to clone.\\n    /// @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\\n    /// @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\\n    /// @return cloneAddress Address of the created clone contract.\\n    function deploy(\\n        address masterContract,\\n        bytes calldata data,\\n        bool useCreate2\\n    ) public payable returns (address cloneAddress) {\\n        require(masterContract != address(0), \\\"BoringFactory: No masterContract\\\");\\n        bytes20 targetBytes = bytes20(masterContract); // Takes the first 20 bytes of the masterContract's address\\n\\n        if (useCreate2) {\\n            // each masterContract has different code already. So clones are distinguished by their data only.\\n            bytes32 salt = keccak256(data);\\n\\n            // Creates clone, more info here: https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create2(0, clone, 0x37, salt)\\n            }\\n        } else {\\n            assembly {\\n                let clone := mload(0x40)\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n                mstore(add(clone, 0x14), targetBytes)\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n                cloneAddress := create(0, clone, 0x37)\\n            }\\n        }\\n        masterContractOf[cloneAddress] = masterContract;\\n\\n        IMasterContract(cloneAddress).init{value: msg.value}(data);\\n\\n        emit LogDeploy(masterContract, data, cloneAddress);\\n    }\\n}\\n\\n// File contracts/MasterContractManager.sol\\n// License-Identifier: UNLICENSED\\n\\ncontract MasterContractManager is BoringOwnable, BoringFactory {\\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\\n    event LogRegisterProtocol(address indexed protocol);\\n\\n    /// @notice masterContract to user to approval state\\n    mapping(address => mapping(address => bool)) public masterContractApproved;\\n    /// @notice masterContract to whitelisted state for approval without signed message\\n    mapping(address => bool) public whitelistedMasterContracts;\\n    /// @notice user nonces for masterContract approvals\\n    mapping(address => uint256) public nonces;\\n\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n    // See https://eips.ethereum.org/EIPS/eip-191\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\n    bytes32 private constant APPROVAL_SIGNATURE_HASH =\\n        keccak256(\\\"SetMasterContractApproval(string warning,address user,address masterContract,bool approved,uint256 nonce)\\\");\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\n    }\\n\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, keccak256(\\\"BentoBox V1\\\"), chainId, address(this)));\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @notice Other contracts need to register with this master contract so that users can approve them for the BentoBox.\\n    function registerProtocol() public {\\n        masterContractOf[msg.sender] = msg.sender;\\n        emit LogRegisterProtocol(msg.sender);\\n    }\\n\\n    /// @notice Enables or disables a contract for approval without signed message.\\n    function whitelistMasterContract(address masterContract, bool approved) public onlyOwner {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: Cannot approve 0\\\");\\n\\n        // Effects\\n        whitelistedMasterContracts[masterContract] = approved;\\n        emit LogWhiteListMasterContract(masterContract, approved);\\n    }\\n\\n    /// @notice Approves or revokes a `masterContract` access to `user` funds.\\n    /// @param user The address of the user that approves or revokes access.\\n    /// @param masterContract The address who gains or loses access.\\n    /// @param approved If True approves access. If False revokes access.\\n    /// @param v Part of the signature. (See EIP-191)\\n    /// @param r Part of the signature. (See EIP-191)\\n    /// @param s Part of the signature. (See EIP-191)\\n    // F4 - Check behaviour for all function arguments when wrong or extreme\\n    // F4: Don't allow masterContract 0 to be approved. Unknown contracts will have a masterContract of 0.\\n    // F4: User can't be 0 for signed approvals because the recoveredAddress will be 0 if ecrecover fails\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        // Checks\\n        require(masterContract != address(0), \\\"MasterCMgr: masterC not set\\\"); // Important for security\\n\\n        // If no signature is provided, the fallback is executed\\n        if (r == 0 && s == 0 && v == 0) {\\n            require(user == msg.sender, \\\"MasterCMgr: user not sender\\\");\\n            require(masterContractOf[user] == address(0), \\\"MasterCMgr: user is clone\\\");\\n            require(whitelistedMasterContracts[masterContract], \\\"MasterCMgr: not whitelisted\\\");\\n        } else {\\n            // Important for security - any address without masterContract has address(0) as masterContract\\n            // So approving address(0) would approve every address, leading to full loss of funds\\n            // Also, ecrecover returns address(0) on failure. So we check this:\\n            require(user != address(0), \\\"MasterCMgr: User cannot be 0\\\");\\n\\n            // C10 - Protect signatures against replay, use nonce and chainId (SWC-121)\\n            // C10: nonce + chainId are used to prevent replays\\n            // C11 - All signatures strictly EIP-712 (SWC-117 SWC-122)\\n            // C11: signature is EIP-712 compliant\\n            // C12 - abi.encodePacked can't contain variable length user input (SWC-133)\\n            // C12: abi.encodePacked has fixed length parameters\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA,\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            APPROVAL_SIGNATURE_HASH,\\n                            approved\\n                                ? keccak256(\\\"Give FULL access to funds in (and approved to) BentoBox?\\\")\\n                                : keccak256(\\\"Revoke access to BentoBox?\\\"),\\n                            user,\\n                            masterContract,\\n                            approved,\\n                            nonces[user]++\\n                        )\\n                    )\\n                )\\n            );\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress == user, \\\"MasterCMgr: Invalid Signature\\\");\\n        }\\n\\n        // Effects\\n        masterContractApproved[masterContract][user] = approved;\\n        emit LogSetMasterContractApproval(masterContract, user, approved);\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringBatchable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ncontract BaseBoringBatchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /// @notice Allows batched call to self (this contract).\\n    /// @param calls An array of inputs for each call.\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n    /// @return successes An array indicating the success of a call, mapped one-to-one to `calls`.\\n    /// @return results An array with the returned data of each function call, mapped one-to-one to `calls`.\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results) {\\n        successes = new bool[](calls.length);\\n        results = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\n            require(success || !revertOnFail, _getRevertMsg(result));\\n            successes[i] = success;\\n            results[i] = result;\\n        }\\n    }\\n}\\n\\ncontract BoringBatchable is BaseBoringBatchable {\\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\\n    /// Lookup `IERC20.permit`.\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\n    function permitToken(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        token.permit(from, to, amount, deadline, v, r, s);\\n    }\\n}\\n\\n// File contracts/BentoBox.sol\\n// License-Identifier: UNLICENSED\\n\\n/// @title BentoBox\\n/// @author BoringCrypto, Keno\\n/// @notice The BentoBox is a vault for tokens. The stored tokens can be flash loaned and used in strategies.\\n/// Yield from this will go to the token depositors.\\n/// Rebasing tokens ARE NOT supported and WILL cause loss of funds.\\n/// Any funds transfered directly onto the BentoBox will be lost, use the deposit function instead.\\ncontract BentoBoxV1 is MasterContractManager, BoringBatchable {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n    using BoringERC20 for IERC20;\\n    using RebaseLibrary for Rebase;\\n\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n\\n    event LogDeposit(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogWithdraw(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogTransfer(IERC20 indexed token, address indexed from, address indexed to, uint256 share);\\n\\n    event LogFlashLoan(address indexed borrower, IERC20 indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\\n\\n    event LogStrategyTargetPercentage(IERC20 indexed token, uint256 targetPercentage);\\n    event LogStrategyQueued(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategySet(IERC20 indexed token, IStrategy indexed strategy);\\n    event LogStrategyInvest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyDivest(IERC20 indexed token, uint256 amount);\\n    event LogStrategyProfit(IERC20 indexed token, uint256 amount);\\n    event LogStrategyLoss(IERC20 indexed token, uint256 amount);\\n\\n    // *************** //\\n    // *** STRUCTS *** //\\n    // *************** //\\n\\n    struct StrategyData {\\n        uint64 strategyStartDate;\\n        uint64 targetPercentage;\\n        uint128 balance; // the balance of the strategy that BentoBox thinks is in there\\n    }\\n\\n    // ******************************** //\\n    // *** CONSTANTS AND IMMUTABLES *** //\\n    // ******************************** //\\n\\n    // V2 - Can they be private?\\n    // V2: Private to save gas, to verify it's correct, check the constructor arguments\\n    IERC20 private immutable wethToken;\\n\\n    IERC20 private constant USE_ETHEREUM = IERC20(0);\\n    uint256 private constant FLASH_LOAN_FEE = 50; // 0.05%\\n    uint256 private constant FLASH_LOAN_FEE_PRECISION = 1e5;\\n    uint256 private constant STRATEGY_DELAY = 0 weeks;\\n    uint256 private constant MAX_TARGET_PERCENTAGE = 95; // 95%\\n    uint256 private constant MINIMUM_SHARE_BALANCE = 1000; // To prevent the ratio going off\\n\\n    // ***************** //\\n    // *** VARIABLES *** //\\n    // ***************** //\\n\\n    // Balance per token per address/contract in shares\\n    mapping(IERC20 => mapping(address => uint256)) public balanceOf;\\n\\n    // Rebase from amount to share\\n    mapping(IERC20 => Rebase) public totals;\\n\\n    mapping(IERC20 => IStrategy) public strategy;\\n    mapping(IERC20 => IStrategy) public pendingStrategy;\\n    mapping(IERC20 => StrategyData) public strategyData;\\n\\n    // ******************* //\\n    // *** CONSTRUCTOR *** //\\n    // ******************* //\\n\\n    constructor(IERC20 wethToken_) public {\\n        wethToken = wethToken_;\\n    }\\n\\n    // Just for testing purposes!!! Don't deploy this contract on production!!\\n    function setTokenTotal(\\n        IERC20 token,\\n        uint128 elastic,\\n        uint128 base\\n    ) public {\\n        Rebase memory total;\\n        total.elastic = elastic;\\n        total.base = base;\\n        totals[token] = total;\\n    }\\n\\n    // ***************** //\\n    // *** MODIFIERS *** //\\n    // ***************** //\\n\\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\\n    /// If 'from' is msg.sender, it's allowed.\\n    /// If 'from' is the BentoBox itself, it's allowed. Any ETH, token balances (above the known balances) or BentoBox balances\\n    /// can be taken by anyone.\\n    /// This is to enable skimming, not just for deposits, but also for withdrawals or transfers, enabling better composability.\\n    /// If 'from' is a clone of a masterContract AND the 'from' address has approved that masterContract, it's allowed.\\n    modifier allowed(address from) {\\n        if (from != msg.sender && from != address(this)) {\\n            // From is sender or you are skimming\\n            address masterContract = masterContractOf[msg.sender];\\n            require(masterContract != address(0), \\\"BentoBox: no masterContract\\\");\\n            require(masterContractApproved[masterContract][from], \\\"BentoBox: Transfer not approved\\\");\\n        }\\n        _;\\n    }\\n\\n    // ************************** //\\n    // *** INTERNAL FUNCTIONS *** //\\n    // ************************** //\\n\\n    /// @dev Returns the total balance of `token` this contracts holds,\\n    /// plus the total amount this contract thinks the strategy holds.\\n    function _tokenBalanceOf(IERC20 token) internal view returns (uint256 amount) {\\n        amount = token.balanceOf(address(this)).add(strategyData[token].balance);\\n    }\\n\\n    // ************************ //\\n    // *** PUBLIC FUNCTIONS *** //\\n    // ************************ //\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share) {\\n        share = totals[token].toBase(amount, roundUp);\\n    }\\n\\n    /// @dev Helper function represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        IERC20 token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount) {\\n        amount = totals[token].toElastic(share, roundUp);\\n    }\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public payable allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n\\n        // If a new token gets added, the tokenSupply call checks that this is a deployed contract. Needed for security.\\n        require(total.elastic != 0 || token.totalSupply() > 0, \\\"BentoBox: No tokens\\\");\\n        if (share == 0) {\\n            // value of the share may be lower than the amount due to rounding, that's ok\\n            share = total.toBase(amount, false);\\n            // Any deposit should lead to at least the minimum share balance, otherwise it's ignored (no amount taken)\\n            if (total.base.add(share.to128()) < MINIMUM_SHARE_BALANCE) {\\n                return (0, 0);\\n            }\\n        } else {\\n            // amount may be lower than the value of share due to rounding, in that case, add 1 to amount (Always round up)\\n            amount = total.toElastic(share, true);\\n        }\\n\\n        // In case of skimming, check that only the skimmable amount is taken.\\n        // For ETH, the full balance is available, so no need to check.\\n        // During flashloans the _tokenBalanceOf is lower than 'reality', so skimming deposits will mostly fail during a flashloan.\\n        require(\\n            from != address(this) || token_ == USE_ETHEREUM || amount <= _tokenBalanceOf(token).sub(total.elastic),\\n            \\\"BentoBox: Skim too much\\\"\\n        );\\n\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n        total.base = total.base.add(share.to128());\\n        total.elastic = total.elastic.add(amount.to128());\\n        totals[token] = total;\\n\\n        // Interactions\\n        // During the first deposit, we check that this token is 'real'\\n        if (token_ == USE_ETHEREUM) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the WETH implementation is faulty or malicious, it will block adding ETH (but we know the WETH implementation)\\n            IWETH(address(wethToken)).deposit{value: amount}();\\n        } else if (from != address(this)) {\\n            // X2 - If there is an error, could it cause a DoS. Like balanceOf causing revert. (SWC-113)\\n            // X2: If the token implementation is faulty or malicious, it may block adding tokens. Good.\\n            token.safeTransferFrom(from, address(this), amount);\\n        }\\n        emit LogDeposit(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public allowed(from) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        IERC20 token = token_ == USE_ETHEREUM ? wethToken : token_;\\n        Rebase memory total = totals[token];\\n        if (share == 0) {\\n            // value of the share paid could be lower than the amount paid due to rounding, in that case, add a share (Always round up)\\n            share = total.toBase(amount, true);\\n        } else {\\n            // amount may be lower than the value of share due to rounding, that's ok\\n            amount = total.toElastic(share, false);\\n        }\\n\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        total.elastic = total.elastic.sub(amount.to128());\\n        total.base = total.base.sub(share.to128());\\n        // There have to be at least 1000 shares left to prevent reseting the share/amount ratio (unless it's fully emptied)\\n        require(total.base >= MINIMUM_SHARE_BALANCE || total.base == 0, \\\"BentoBox: cannot empty\\\");\\n        totals[token] = total;\\n\\n        // Interactions\\n        if (token_ == USE_ETHEREUM) {\\n            // X2, X3: A revert or big gas usage in the WETH contract could block withdrawals, but WETH9 is fine.\\n            IWETH(address(wethToken)).withdraw(amount);\\n            // X2, X3: A revert or big gas usage could block, however, the to address is under control of the caller.\\n            (bool success, ) = to.call{value: amount}(\\\"\\\");\\n            require(success, \\\"BentoBox: ETH transfer failed\\\");\\n        } else {\\n            // X2, X3: A malicious token could block withdrawal of just THAT token.\\n            //         masterContracts may want to take care not to rely on withdraw always succeeding.\\n            token.safeTransfer(to, amount);\\n        }\\n        emit LogWithdraw(token, from, to, amount, share);\\n        amountOut = amount;\\n        shareOut = share;\\n    }\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    // Clones of master contracts can transfer from any account that has approved them\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transferMultiple for gas optimization\\n    function transfer(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) public allowed(from) {\\n        // Checks\\n        require(to != address(0), \\\"BentoBox: to not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        balanceOf[token][from] = balanceOf[token][from].sub(share);\\n        balanceOf[token][to] = balanceOf[token][to].add(share);\\n\\n        emit LogTransfer(token, from, to, share);\\n    }\\n\\n    /// @notice Transfer shares from a user account to multiple other ones.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param tos The receivers of the tokens.\\n    /// @param shares The amount of `token` in shares for each receiver in `tos`.\\n    // F3 - Can it be combined with another similar function?\\n    // F3: This isn't combined with transfer for gas optimization\\n    function transferMultiple(\\n        IERC20 token,\\n        address from,\\n        address[] calldata tos,\\n        uint256[] calldata shares\\n    ) public allowed(from) {\\n        // Checks\\n        require(tos[0] != address(0), \\\"BentoBox: to[0] not set\\\"); // To avoid a bad UI from burning funds\\n\\n        // Effects\\n        uint256 totalAmount;\\n        uint256 len = tos.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address to = tos[i];\\n            balanceOf[token][to] = balanceOf[token][to].add(shares[i]);\\n            totalAmount = totalAmount.add(shares[i]);\\n            emit LogTransfer(token, from, to, shares[i]);\\n        }\\n        balanceOf[token][from] = balanceOf[token][from].sub(totalAmount);\\n    }\\n\\n    /// @notice Flashloan ability.\\n    /// @param borrower The address of the contract that implements and conforms to `IFlashBorrower` and handles the flashloan.\\n    /// @param receiver Address of the token receiver.\\n    /// @param token The address of the token to receive.\\n    /// @param amount of the tokens to receive.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function flashLoan(\\n        IFlashBorrower borrower,\\n        address receiver,\\n        IERC20 token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public {\\n        uint256 fee = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n        token.safeTransfer(receiver, amount);\\n\\n        borrower.onFlashLoan(msg.sender, token, amount, fee, data);\\n\\n        require(_tokenBalanceOf(token) >= totals[token].addElastic(fee.to128()), \\\"BentoBox: Wrong amount\\\");\\n        emit LogFlashLoan(address(borrower), token, amount, fee, receiver);\\n    }\\n\\n    /// @notice Support for batched flashloans. Useful to request multiple different `tokens` in a single transaction.\\n    /// @param borrower The address of the contract that implements and conforms to `IBatchFlashBorrower` and handles the flashloan.\\n    /// @param receivers An array of the token receivers. A one-to-one mapping with `tokens` and `amounts`.\\n    /// @param tokens The addresses of the tokens.\\n    /// @param amounts of the tokens for each receiver.\\n    /// @param data The calldata to pass to the `borrower` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Not possible to follow this here, reentrancy has been reviewed\\n    // F6 - Check for front-running possibilities, such as the approve function (SWC-114)\\n    // F6: Slight grieving possible by withdrawing an amount before someone tries to flashloan close to the full amount.\\n    function batchFlashLoan(\\n        IBatchFlashBorrower borrower,\\n        address[] calldata receivers,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public {\\n        uint256[] memory fees = new uint256[](tokens.length);\\n\\n        uint256 len = tokens.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 amount = amounts[i];\\n            fees[i] = amount.mul(FLASH_LOAN_FEE) / FLASH_LOAN_FEE_PRECISION;\\n\\n            tokens[i].safeTransfer(receivers[i], amounts[i]);\\n        }\\n\\n        borrower.onBatchFlashLoan(msg.sender, tokens, amounts, fees, data);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            IERC20 token = tokens[i];\\n            require(_tokenBalanceOf(token) >= totals[token].addElastic(fees[i].to128()), \\\"BentoBox: Wrong amount\\\");\\n            emit LogFlashLoan(address(borrower), token, amounts[i], fees[i], receivers[i]);\\n        }\\n    }\\n\\n    /// @notice Sets the target percentage of the strategy for `token`.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param targetPercentage_ The new target in percent. Must be lesser or equal to `MAX_TARGET_PERCENTAGE`.\\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) public onlyOwner {\\n        // Checks\\n        require(targetPercentage_ <= MAX_TARGET_PERCENTAGE, \\\"StrategyManager: Target too high\\\");\\n\\n        // Effects\\n        strategyData[token].targetPercentage = targetPercentage_;\\n        emit LogStrategyTargetPercentage(token, targetPercentage_);\\n    }\\n\\n    /// @notice Sets the contract address of a new strategy that conforms to `IStrategy` for `token`.\\n    /// Must be called twice with the same arguments.\\n    /// A new strategy becomes pending first and can be activated once `STRATEGY_DELAY` is over.\\n    /// @dev Only the owner of this contract is allowed to change this.\\n    /// @param token The address of the token that maps to a strategy to change.\\n    /// @param newStrategy The address of the contract that conforms to `IStrategy`.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // C4 - Use block.timestamp only for long intervals (SWC-116)\\n    // C4: block.timestamp is used for a period of 2 weeks, which is long enough\\n    function setStrategy(IERC20 token, IStrategy newStrategy) public onlyOwner {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy pending = pendingStrategy[token];\\n        if (data.strategyStartDate == 0 || pending != newStrategy) {\\n            pendingStrategy[token] = newStrategy;\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: Our sun will swallow the earth well before this overflows\\n            data.strategyStartDate = (block.timestamp + STRATEGY_DELAY).to64();\\n            emit LogStrategyQueued(token, newStrategy);\\n        } else {\\n            require(data.strategyStartDate != 0 && block.timestamp >= data.strategyStartDate, \\\"StrategyManager: Too early\\\");\\n            if (address(strategy[token]) != address(0)) {\\n                int256 balanceChange = strategy[token].exit(data.balance);\\n                // Effects\\n                if (balanceChange > 0) {\\n                    uint256 add = uint256(balanceChange);\\n                    totals[token].addElastic(add);\\n                    emit LogStrategyProfit(token, add);\\n                } else if (balanceChange < 0) {\\n                    uint256 sub = uint256(-balanceChange);\\n                    totals[token].subElastic(sub);\\n                    emit LogStrategyLoss(token, sub);\\n                }\\n\\n                emit LogStrategyDivest(token, data.balance);\\n            }\\n            strategy[token] = pending;\\n            data.strategyStartDate = 0;\\n            data.balance = 0;\\n            pendingStrategy[token] = IStrategy(0);\\n            emit LogStrategySet(token, newStrategy);\\n        }\\n        strategyData[token] = data;\\n    }\\n\\n    /// @notice The actual process of yield farming. Executes the strategy of `token`.\\n    /// Optionally does housekeeping if `balance` is true.\\n    /// `maxChangeAmount` is relevant for skimming or withdrawing if `balance` is true.\\n    /// @param token The address of the token for which a strategy is deployed.\\n    /// @param balance True if housekeeping should be done.\\n    /// @param maxChangeAmount The maximum amount for either pulling or pushing from/to the `IStrategy` contract.\\n    // F5 - Checks-Effects-Interactions pattern followed? (SWC-107)\\n    // F5: Total amount is updated AFTER interaction. But strategy is under our control.\\n    // F5: Not followed to prevent reentrancy issues with flashloans and BentoBox skims?\\n    function harvest(\\n        IERC20 token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) public {\\n        StrategyData memory data = strategyData[token];\\n        IStrategy _strategy = strategy[token];\\n        int256 balanceChange = _strategy.harvest(data.balance, msg.sender);\\n        if (balanceChange == 0 && !balance) {\\n            return;\\n        }\\n\\n        uint256 totalElastic = totals[token].elastic;\\n\\n        if (balanceChange > 0) {\\n            uint256 add = uint256(balanceChange);\\n            totalElastic = totalElastic.add(add);\\n            totals[token].elastic = totalElastic.to128();\\n            emit LogStrategyProfit(token, add);\\n        } else if (balanceChange < 0) {\\n            // C1 - All math done through BoringMath (SWC-101)\\n            // C1: balanceChange could overflow if it's max negative int128.\\n            // But tokens with balances that large are not supported by the BentoBox.\\n            uint256 sub = uint256(-balanceChange);\\n            totalElastic = totalElastic.sub(sub);\\n            totals[token].elastic = totalElastic.to128();\\n            data.balance = data.balance.sub(sub.to128());\\n            emit LogStrategyLoss(token, sub);\\n        }\\n\\n        if (balance) {\\n            uint256 targetBalance = totalElastic.mul(data.targetPercentage) / 100;\\n            // if data.balance == targetBalance there is nothing to update\\n            if (data.balance < targetBalance) {\\n                uint256 amountOut = targetBalance.sub(data.balance);\\n                if (maxChangeAmount != 0 && amountOut > maxChangeAmount) {\\n                    amountOut = maxChangeAmount;\\n                }\\n                token.safeTransfer(address(_strategy), amountOut);\\n                data.balance = data.balance.add(amountOut.to128());\\n                _strategy.skim(amountOut);\\n                emit LogStrategyInvest(token, amountOut);\\n            } else if (data.balance > targetBalance) {\\n                uint256 amountIn = data.balance.sub(targetBalance.to128());\\n                if (maxChangeAmount != 0 && amountIn > maxChangeAmount) {\\n                    amountIn = maxChangeAmount;\\n                }\\n\\n                uint256 actualAmountIn = _strategy.withdraw(amountIn);\\n\\n                data.balance = data.balance.sub(actualAmountIn.to128());\\n                emit LogStrategyDivest(token, actualAmountIn);\\n            }\\n        }\\n\\n        strategyData[token] = data;\\n    }\\n\\n    // Contract should be able to receive ETH deposits to support deposit & skim\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd8343e88ade6bf85fd34d3556aedb2b14fe07ca40396ae2ef6064c9d8da0d4d3\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"A rebasing library using overflow-/underflow-safe math.","version":1}}}}}}