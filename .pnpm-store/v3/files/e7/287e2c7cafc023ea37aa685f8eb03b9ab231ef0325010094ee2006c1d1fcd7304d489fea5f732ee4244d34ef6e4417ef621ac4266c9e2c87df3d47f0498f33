{"version":3,"file":"getExpandedRowModel.js","sources":["../../../src/utils/getExpandedRowModel.ts"],"sourcesContent":["import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n"],"names":["getExpandedRowModel","table","memo","getState","expanded","getPreExpandedRowModel","options","paginateExpandedRows","rowModel","rows","length","Object","keys","expandRows","key","process","env","NODE_ENV","debug","debugAll","debugTable","expandedRows","handleRow","row","push","subRows","getIsExpanded","forEach","flatRows","rowsById"],"mappings":";;;;;;;;;;;;;;;;AAGO,SAASA,mBAAT,GAEoB;AACzB,EAAA,OAAOC,KAAK,IACVC,UAAI,CACF,MAAM,CACJD,KAAK,CAACE,QAAN,EAAA,CAAiBC,QADb,EAEJH,KAAK,CAACI,sBAAN,EAFI,EAGJJ,KAAK,CAACK,OAAN,CAAcC,oBAHV,CADJ,EAMF,CAACH,QAAD,EAAWI,QAAX,EAAqBD,oBAArB,KAA8C;IAC5C,IACE,CAACC,QAAQ,CAACC,IAAT,CAAcC,MAAf,IACCN,QAAQ,KAAK,IAAb,IAAqB,CAACO,MAAM,CAACC,IAAP,CAAYR,QAAQ,IAAI,EAAxB,CAA4BM,CAAAA,MAFrD,EAGE;AACA,MAAA,OAAOF,QAAP,CAAA;AACD,KAAA;;IAED,IAAI,CAACD,oBAAL,EAA2B;AACzB;AACA,MAAA,OAAOC,QAAP,CAAA;AACD,KAAA;;IAED,OAAOK,UAAU,CAACL,QAAD,CAAjB,CAAA;AACD,GApBC,EAqBF;IACEM,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,IAA0C,qBADjD;IAEEC,KAAK,EAAE,MAAMjB,KAAK,CAACK,OAAN,CAAca,QAAd,IAA0BlB,KAAK,CAACK,OAAN,CAAcc,UAAAA;AAFvD,GArBE,CADN,CAAA;AA2BD,CAAA;AAEM,SAASP,UAAT,CAA2CL,QAA3C,EAAsE;EAC3E,MAAMa,YAA0B,GAAG,EAAnC,CAAA;;EAEA,MAAMC,SAAS,GAAIC,GAAD,IAAqB;AAAA,IAAA,IAAA,YAAA,CAAA;;IACrCF,YAAY,CAACG,IAAb,CAAkBD,GAAlB,CAAA,CAAA;;IAEA,IAAI,CAAA,YAAA,GAAAA,GAAG,CAACE,OAAJ,KAAA,IAAA,IAAA,YAAA,CAAaf,MAAb,IAAuBa,GAAG,CAACG,aAAJ,EAA3B,EAAgD;AAC9CH,MAAAA,GAAG,CAACE,OAAJ,CAAYE,OAAZ,CAAoBL,SAApB,CAAA,CAAA;AACD,KAAA;GALH,CAAA;;AAQAd,EAAAA,QAAQ,CAACC,IAAT,CAAckB,OAAd,CAAsBL,SAAtB,CAAA,CAAA;EAEA,OAAO;AACLb,IAAAA,IAAI,EAAEY,YADD;IAELO,QAAQ,EAAEpB,QAAQ,CAACoB,QAFd;IAGLC,QAAQ,EAAErB,QAAQ,CAACqB,QAAAA;GAHrB,CAAA;AAKD;;;;;"}