{"version":3,"file":"getPaginationRowModel.js","sources":["../../../src/utils/getPaginationRowModel.ts"],"sourcesContent":["import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().pagination, table.getPrePaginationRowModel()],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows(\n            {\n              rows,\n              flatRows,\n              rowsById,\n            },\n            table\n          )\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n"],"names":["getPaginationRowModel","opts","table","memo","getState","pagination","getPrePaginationRowModel","rowModel","rows","length","pageSize","pageIndex","flatRows","rowsById","pageStart","pageEnd","slice","paginatedRowModel","options","paginateExpandedRows","expandRows","handleRow","row","push","subRows","forEach","key","process","env","NODE_ENV","debug","debugAll","debugTable"],"mappings":";;;;;;;;;;;;;;;;;AAIO,SAASA,qBAAT,CAAsDC,IAAtD,EAE4C;EACjD,OAAOC,KAAK,IACVC,UAAI,CACF,MAAM,CAACD,KAAK,CAACE,QAAN,EAAiBC,CAAAA,UAAlB,EAA8BH,KAAK,CAACI,wBAAN,EAA9B,CADJ,EAEF,CAACD,UAAD,EAAaE,QAAb,KAA0B;AACxB,IAAA,IAAI,CAACA,QAAQ,CAACC,IAAT,CAAcC,MAAnB,EAA2B;AACzB,MAAA,OAAOF,QAAP,CAAA;AACD,KAAA;;IAED,MAAM;MAAEG,QAAF;AAAYC,MAAAA,SAAAA;AAAZ,KAAA,GAA0BN,UAAhC,CAAA;IACA,IAAI;MAAEG,IAAF;MAAQI,QAAR;AAAkBC,MAAAA,QAAAA;AAAlB,KAAA,GAA+BN,QAAnC,CAAA;AACA,IAAA,MAAMO,SAAS,GAAGJ,QAAQ,GAAGC,SAA7B,CAAA;AACA,IAAA,MAAMI,OAAO,GAAGD,SAAS,GAAGJ,QAA5B,CAAA;IAEAF,IAAI,GAAGA,IAAI,CAACQ,KAAL,CAAWF,SAAX,EAAsBC,OAAtB,CAAP,CAAA;AAEA,IAAA,IAAIE,iBAAJ,CAAA;;AAEA,IAAA,IAAI,CAACf,KAAK,CAACgB,OAAN,CAAcC,oBAAnB,EAAyC;MACvCF,iBAAiB,GAAGG,8BAAU,CAC5B;QACEZ,IADF;QAEEI,QAFF;AAGEC,QAAAA,QAAAA;OAJ0B,CAA9B,CAAA;AAQD,KATD,MASO;AACLI,MAAAA,iBAAiB,GAAG;QAClBT,IADkB;QAElBI,QAFkB;AAGlBC,QAAAA,QAAAA;OAHF,CAAA;AAKD,KAAA;;IAEDI,iBAAiB,CAACL,QAAlB,GAA6B,EAA7B,CAAA;;IAEA,MAAMS,SAAS,GAAIC,GAAD,IAAqB;AACrCL,MAAAA,iBAAiB,CAACL,QAAlB,CAA2BW,IAA3B,CAAgCD,GAAhC,CAAA,CAAA;;AACA,MAAA,IAAIA,GAAG,CAACE,OAAJ,CAAYf,MAAhB,EAAwB;AACtBa,QAAAA,GAAG,CAACE,OAAJ,CAAYC,OAAZ,CAAoBJ,SAApB,CAAA,CAAA;AACD,OAAA;KAJH,CAAA;;AAOAJ,IAAAA,iBAAiB,CAACT,IAAlB,CAAuBiB,OAAvB,CAA+BJ,SAA/B,CAAA,CAAA;AAEA,IAAA,OAAOJ,iBAAP,CAAA;AACD,GA7CC,EA8CF;IACES,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,IAA0C,uBADjD;AAEEC,IAAAA,KAAK,EAAE,MAAA;AAAA,MAAA,IAAA,qBAAA,CAAA;;MAAA,OAAM5B,CAAAA,qBAAAA,GAAAA,KAAK,CAACgB,OAAN,CAAca,QAApB,oCAAgC7B,KAAK,CAACgB,OAAN,CAAcc,UAA9C,CAAA;AAAA,KAAA;AAFT,GA9CE,CADN,CAAA;AAoDD;;;;"}