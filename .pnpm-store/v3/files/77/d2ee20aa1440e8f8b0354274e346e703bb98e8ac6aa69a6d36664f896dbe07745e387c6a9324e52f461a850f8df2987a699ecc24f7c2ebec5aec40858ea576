{"version":3,"file":"aggregationFns.js","sources":["../../src/aggregationFns.ts"],"sourcesContent":["import { AggregationFn } from './features/Grouping'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId)\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n"],"names":["sum","columnId","_leafRows","childRows","reduce","next","nextValue","getValue","min","forEach","row","value","undefined","max","extent","mean","leafRows","count","median","length","Math","unique","Array","from","Set","map","d","values","uniqueCount","size","_columnId","aggregationFns"],"mappings":"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"}