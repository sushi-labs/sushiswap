import { QueryFunction, QueryKey, QueryObserver, QueryOptions } from '@tanstack/react-query';
export declare function parseQueryArgs<TOptions extends QueryOptions<any, any, any, TQueryKey>, TQueryKey extends QueryKey = QueryKey>(arg1: TQueryKey | TOptions, arg2?: QueryFunction<any, TQueryKey> | TOptions, arg3?: TOptions): TOptions;
export declare function shouldThrowError<T extends (...args: any[]) => boolean>(_useErrorBoundary: boolean | T | undefined, params: Parameters<T>): boolean;
export declare function trackResult<TQueryResult extends Record<string, unknown> = Record<string, unknown>, TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(result: TQueryResult, observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>): TQueryResult;
