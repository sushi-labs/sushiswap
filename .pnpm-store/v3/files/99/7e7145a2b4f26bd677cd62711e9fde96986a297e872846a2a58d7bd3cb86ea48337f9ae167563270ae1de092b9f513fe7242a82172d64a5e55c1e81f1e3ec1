{"version":3,"file":"run-server.js","sourceRoot":"","sources":["../../src/server/run-server.ts"],"names":[],"mappings":";;;;;;AACA,qDAAyD;AACzD,mCAA6B;AAC7B,gDAAuB;AAyBvB;;;;GAIG;AACI,KAAK,UAAU,SAAS,CAC7B,OAAyB;IAEzB,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,IAAA,8BAAa,EAAC,OAAO,CAAC,CAAA;IACrD,MAAM,MAAM,GAAG,cAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAA;IACzC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAE3B,IAAI;QACF,MAAM,IAAA,aAAI,EAAC,MAAM,EAAE,WAAW,CAAC,CAAA;KAChC;IAAC,OAAO,KAAU,EAAE;QACnB,IAAI,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,MAAK,YAAY,EAAE;YAChC,OAAO,SAAS,CAAC,EAAE,GAAG,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAA;SAClD;QACD,MAAM,KAAK,CAAA;KACZ;IAED,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,EAAE,CAAA;IAChC,MAAM,GAAG,GACP,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,IAAI,IAAI;QAC5C,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC;QACjB,CAAC,CAAC,oBAAoB,OAAO,CAAC,IAAI,EAAE,CAAA;IAExC,OAAO;QACL,GAAG;QACH,KAAK,EAAE,KAAK,IAAI,EAAE;YAChB,MAAM,SAAS,EAAE,CAAA;YACjB,MAAM,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC1C,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;oBAC1B,IAAI,GAAG;wBAAE,MAAM,CAAC,GAAG,CAAC,CAAA;oBACpB,OAAO,EAAE,CAAA;gBACX,CAAC,CAAC,CAAA;YACJ,CAAC,CAAC,CAAA;QACJ,CAAC;QACD,SAAS;KACV,CAAA;AACH,CAAC;AAnCD,8BAmCC","sourcesContent":["import type { Primitives } from '@edge-runtime/vm'\nimport { createHandler, Options } from './create-handler'\nimport { once } from 'events'\nimport http from 'http'\n\ninterface ServerOptions<T extends Primitives> extends Options<T> {\n  /**\n   * The port to start the server. If none is provided it will use a random\n   * available port.\n   */\n  port?: number\n}\n\ninterface EdgeRuntimeServer {\n  /**\n   * The server URL.\n   */\n  url: string\n  /**\n   * Waits for all the current effects and closes the server.\n   */\n  close: () => Promise<void>\n  /**\n   * Waits for all current effects returning their result.\n   */\n  waitUntil: () => Promise<any[]>\n}\n\n/**\n * This helper will create a handler based on the given options and then\n * immediately run a server on the provided port. If there is no port, the\n * server will use a random one.\n */\nexport async function runServer<T extends Primitives>(\n  options: ServerOptions<T>\n): Promise<EdgeRuntimeServer> {\n  const { handler, waitUntil } = createHandler(options)\n  const server = http.createServer(handler)\n  server.listen(options.port)\n\n  try {\n    await once(server, 'listening')\n  } catch (error: any) {\n    if (error?.code === 'EADDRINUSE') {\n      return runServer({ ...options, port: undefined })\n    }\n    throw error\n  }\n\n  const address = server.address()\n  const url =\n    typeof address === 'string' || address == null\n      ? String(address)\n      : `http://localhost:${address.port}`\n\n  return {\n    url,\n    close: async () => {\n      await waitUntil()\n      await new Promise<void>((resolve, reject) => {\n        return server.close((err) => {\n          if (err) reject(err)\n          resolve()\n        })\n      })\n    },\n    waitUntil,\n  }\n}\n"]}