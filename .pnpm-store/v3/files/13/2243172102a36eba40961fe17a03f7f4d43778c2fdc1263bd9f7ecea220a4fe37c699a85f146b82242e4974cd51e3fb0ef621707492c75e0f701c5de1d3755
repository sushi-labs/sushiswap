{"version":3,"file":"index.production.js","sources":["../../src/utils.ts","../../src/core/column.ts","../../src/core/headers.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/core/instance.ts","../../src/createTable.ts","../../src/core/row.ts","../../src/core/cell.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getExpandedRowModel.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getPaginationRowModel.ts","../../src/utils/getSortedRowModel.ts"],"sourcesContent":["import { NoInfer, TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type IfDefined<T, N> = 0 extends 1 & T ? N : T extends {} ? T : N\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater(key: keyof TableState, instance: unknown) {\n  return (updater: Updater<any>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import {\n  Cell,\n  Column,\n  Header,\n  TableGenerics,\n  TableInstance,\n  Row,\n  AccessorFn,\n  ColumnDef,\n  Renderable,\n} from '../types'\nimport { memo } from '../utils'\n\nexport type CoreColumnDefType = 'data' | 'display' | 'group'\n\nexport type CoreColumnDef<TGenerics extends TableGenerics> = {\n  id: string\n  accessorKey?: string & keyof TGenerics['Row']\n  accessorFn?: AccessorFn<TGenerics['Row']>\n  columns?: ColumnDef<TGenerics>[]\n  header?: Renderable<\n    TGenerics,\n    {\n      instance: TableInstance<TGenerics>\n      header: Header<TGenerics>\n      column: Column<TGenerics>\n    }\n  >\n  footer?: Renderable<\n    TGenerics,\n    {\n      instance: TableInstance<TGenerics>\n      header: Header<TGenerics>\n      column: Column<TGenerics>\n    }\n  >\n  cell?: Renderable<\n    TGenerics,\n    {\n      instance: TableInstance<TGenerics>\n      row: Row<TGenerics>\n      column: Column<TGenerics>\n      cell: Cell<TGenerics>\n      getValue: () => TGenerics['Value']\n    }\n  >\n  meta?: TGenerics['ColumnMeta']\n}\n\nexport type CoreColumn<TGenerics extends TableGenerics> = {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TGenerics['Row']>\n  columnDef: ColumnDef<TGenerics>\n  columnDefType: CoreColumnDefType\n  columns: Column<TGenerics>[]\n  parent?: Column<TGenerics>\n  getFlatColumns: () => Column<TGenerics>[]\n  getLeafColumns: () => Column<TGenerics>[]\n}\n\nexport function createColumn<TGenerics extends TableGenerics>(\n  instance: TableInstance<TGenerics>,\n  columnDef: ColumnDef<TGenerics> & { columnDefType?: CoreColumnDefType },\n  depth: number,\n  parent?: Column<TGenerics>\n) {\n  const defaultColumn = instance._getDefaultColumnDef()\n\n  columnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  }\n\n  let id =\n    columnDef.id ??\n    columnDef.accessorKey ??\n    (typeof columnDef.header === 'string' ? columnDef.header : undefined)\n\n  let accessorFn: AccessorFn<TGenerics['Row']> | undefined\n\n  if (columnDef.accessorFn) {\n    accessorFn = columnDef.accessorFn\n  } else if (columnDef.accessorKey) {\n    accessorFn = (originalRow?: TGenerics['Row']) =>\n      (originalRow as any)[columnDef.accessorKey]\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        columnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TGenerics> = {\n    ...columnDef,\n    id: `${id}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef,\n    columnDefType: columnDef.columnDefType as CoreColumnDefType,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TGenerics>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [instance._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TGenerics>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n  }\n\n  column = instance._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, instance))\n  }, column)\n\n  // Yes, we have to convert instance to uknown, because we know more than the compiler here.\n  return column as Column<TGenerics>\n}\n","import {\n  Column,\n  Header,\n  HeaderGroup,\n  TableGenerics,\n  TableInstance,\n} from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './instance'\n\nexport type CoreHeaderGroup<TGenerics extends TableGenerics> = {\n  id: string\n  depth: number\n  headers: Header<TGenerics>[]\n}\n\nexport type CoreHeader<TGenerics extends TableGenerics> = {\n  id: string\n  index: number\n  depth: number\n  column: Column<TGenerics>\n  headerGroup: HeaderGroup<TGenerics>\n  subHeaders: Header<TGenerics>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TGenerics>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  renderHeader: (options?: {\n    renderPlaceholder?: boolean\n  }) => string | null | TGenerics['Rendered']\n  renderFooter: (options?: {\n    renderPlaceholder?: boolean\n  }) => string | null | TGenerics['Rendered']\n}\n\nexport type HeadersInstance<TGenerics extends TableGenerics> = {\n  getHeaderGroups: () => HeaderGroup<TGenerics>[]\n  getLeftHeaderGroups: () => HeaderGroup<TGenerics>[]\n  getCenterHeaderGroups: () => HeaderGroup<TGenerics>[]\n  getRightHeaderGroups: () => HeaderGroup<TGenerics>[]\n\n  getFooterGroups: () => HeaderGroup<TGenerics>[]\n  getLeftFooterGroups: () => HeaderGroup<TGenerics>[]\n  getCenterFooterGroups: () => HeaderGroup<TGenerics>[]\n  getRightFooterGroups: () => HeaderGroup<TGenerics>[]\n\n  getFlatHeaders: () => Header<TGenerics>[]\n  getLeftFlatHeaders: () => Header<TGenerics>[]\n  getCenterFlatHeaders: () => Header<TGenerics>[]\n  getRightFlatHeaders: () => Header<TGenerics>[]\n\n  getLeafHeaders: () => Header<TGenerics>[]\n  getLeftLeafHeaders: () => Header<TGenerics>[]\n  getCenterLeafHeaders: () => Header<TGenerics>[]\n  getRightLeafHeaders: () => Header<TGenerics>[]\n}\n\n//\n\nfunction createHeader<TGenerics extends TableGenerics>(\n  instance: TableInstance<TGenerics>,\n  column: Column<TGenerics>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n) {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TGenerics> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TGenerics>[] => {\n      const leafHeaders: CoreHeader<TGenerics>[] = []\n\n      const recurseHeader = (h: CoreHeader<TGenerics>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders as Header<TGenerics>[]\n    },\n    renderHeader: () =>\n      column.columnDef.header\n        ? instance._render(column.columnDef.header, {\n            instance,\n            header: header as Header<TGenerics>,\n            column,\n          })\n        : null,\n    renderFooter: () =>\n      column.columnDef.footer\n        ? instance._render(column.columnDef.footer, {\n            instance,\n            header: header as Header<TGenerics>,\n            column,\n          })\n        : null,\n  }\n\n  instance._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, instance))\n  })\n\n  return header as Header<TGenerics>\n}\n\nexport const Headers: TableFeature = {\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): HeadersInstance<TGenerics> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            instance\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, instance, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            instance,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            instance,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [instance.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [instance.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [instance.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [instance.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [instance.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [instance.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [instance.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [instance.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [instance.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [instance.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [instance.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          instance.getLeftHeaderGroups(),\n          instance.getCenterHeaderGroups(),\n          instance.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TGenerics extends TableGenerics>(\n  allColumns: Column<TGenerics>[],\n  columnsToGroup: Column<TGenerics>[],\n  instance: TableInstance<TGenerics>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TGenerics>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TGenerics>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TGenerics>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TGenerics> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TGenerics>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TGenerics>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (latestPendingParentHeader?.column === column) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(instance, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(instance, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TGenerics>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/instance'\nimport {\n  Column,\n  Header,\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  Updater,\n} from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport type ColumnSizingTableState = {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport type ColumnSizingInfoState = {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport type ColumnSizingOptions = {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingDefaultOptions = {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingInstance<TGenerics extends TableGenerics> = {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport type ColumnSizingColumnDef = {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport type ColumnSizingColumn<TGenerics extends TableGenerics> = {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport type ColumnSizingHeader<TGenerics extends TableGenerics> = {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', instance),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', instance),\n    }\n  },\n\n  createColumn: <TGenerics extends TableGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingColumn<TGenerics> => {\n    return {\n      getSize: () => {\n        const columnSize = instance.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? instance.getVisibleLeafColumns()\n          : position === 'left'\n          ? instance.getLeftVisibleLeafColumns()\n          : instance.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        instance.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (instance.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return (\n          instance.getState().columnSizingInfo.isResizingColumn === column.id\n        )\n      },\n    }\n  },\n\n  createHeader: <TGenerics extends TableGenerics>(\n    header: Header<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingHeader<TGenerics> => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TGenerics>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = instance.getColumn(header.column.id)\n        const canResize = column.getCanResize()\n\n        return (e: unknown) => {\n          if (!canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            let newColumnSizing: ColumnSizingState = {}\n\n            instance.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              instance.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              instance.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            instance.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]!.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          instance.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingInstance<TGenerics> => {\n    return {\n      setColumnSizing: updater =>\n        instance.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        instance.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        instance.setColumnSizing(\n          defaultState ? {} : instance.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        instance.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : instance.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        instance.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        instance.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        instance.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        instance.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/instance'\nimport {\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  Row,\n  Updater,\n} from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport type ExpandedTableState = {\n  expanded: ExpandedState\n}\n\nexport type ExpandedRow = {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport type ExpandedOptions<TGenerics extends TableGenerics> = {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (\n    instance: TableInstance<TGenerics>\n  ) => () => RowModel<TGenerics>\n  getIsRowExpanded?: (row: Row<TGenerics>) => boolean\n  getRowCanExpand?: (row: Row<TGenerics>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport type ExpandedInstance<TGenerics extends TableGenerics> = {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TGenerics>\n  _getExpandedRowModel?: () => RowModel<TGenerics>\n  getPreExpandedRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ExpandedOptions<TGenerics> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', instance),\n      autoResetExpanded: true,\n      paginateExpandedRows: true,\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ExpandedInstance<TGenerics> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          instance._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (\n          instance.options.autoResetAll === true ||\n          instance.options.autoResetExpanded\n        ) {\n          if (queued) return\n          queued = true\n          instance._queue(() => {\n            instance.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => instance.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !instance.getIsAllRowsExpanded()) {\n          instance.setExpanded(true)\n        } else {\n          instance.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        instance.setExpanded(\n          defaultState ? {} : instance.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return instance.getRowModel().flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          instance.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = instance.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = instance.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (expanded === true) {\n          return true\n        }\n\n        // If any row is not expanded, return false\n        if (instance.getRowModel().flatRows.some(row => row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          instance.getState().expanded === true\n            ? Object.keys(instance.getRowModel().rowsById)\n            : Object.keys(instance.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => instance.getGroupedRowModel(),\n      getExpandedRowModel: () => {\n        if (\n          !instance._getExpandedRowModel &&\n          instance.options.getExpandedRowModel\n        ) {\n          instance._getExpandedRowModel =\n            instance.options.getExpandedRowModel(instance)\n        }\n\n        if (\n          instance.options.manualExpanding ||\n          !instance._getExpandedRowModel\n        ) {\n          return instance.getPreExpandedRowModel()\n        }\n\n        return instance._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TGenerics extends TableGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        instance.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(instance.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = instance.getState().expanded\n\n        return !!(\n          instance.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          (instance.options.getRowCanExpand?.(row) ?? true) &&\n          (instance.options.enableExpanding ?? true) &&\n          !!row.subRows?.length\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return row.getValue(columnId).toLowerCase().includes(search)\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return row.getValue(columnId).includes(filterValue)\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return row.getValue(columnId).toLowerCase() === filterValue.toLowerCase()\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId).includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(val => !row.getValue(columnId).includes(val))\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val => row.getValue(columnId).includes(val))\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/instance'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  Row,\n  Updater,\n} from '../types'\nimport {\n  functionalUpdate,\n  isFunction,\n  makeStateUpdater,\n  memo,\n  Overwrite,\n} from '../utils'\n\nexport type FiltersTableState = {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport type ColumnFilter = {\n  id: string\n  value: unknown\n}\n\nexport type ResolvedColumnFilter<TGenerics extends TableGenerics> = {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TGenerics>\n}\n\nexport type FilterFn<TGenerics extends TableGenerics> = {\n  (\n    row: Row<TGenerics>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: TGenerics['FilterMeta']) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TGenerics>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TGenerics>\n}\n\nexport type TransformFilterValueFn<TGenerics extends TableGenerics> = (\n  value: any,\n  column?: Column<TGenerics>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TGenerics extends TableGenerics> = (\n  value: any,\n  column?: Column<TGenerics>\n) => boolean\n\nexport type CustomFilterFns<TGenerics extends TableGenerics> = Record<\n  string,\n  FilterFn<TGenerics>\n>\n\nexport type FilterFnOption<TGenerics extends TableGenerics> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof TGenerics['FilterFns']\n  | FilterFn<TGenerics>\n\nexport type FiltersColumnDef<TGenerics extends TableGenerics> = {\n  filterFn?: FilterFnOption<Overwrite<TGenerics, { Value: any }>>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport type FiltersColumn<TGenerics extends TableGenerics> = {\n  filterFn: FilterFnOption<Overwrite<TGenerics, { Value: any }>>\n  getAutoFilterFn: () => FilterFn<TGenerics> | undefined\n  getFilterFn: () => FilterFn<TGenerics> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TGenerics>\n  _getFacetedRowModel?: () => RowModel<TGenerics>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport type FiltersRow<TGenerics extends TableGenerics> = {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, TGenerics['FilterMeta']>\n}\n\nexport type FiltersOptions<TGenerics extends TableGenerics> = {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  filterFns?: TGenerics['FilterFns']\n  getFilteredRowModel?: (\n    instance: TableInstance<TGenerics>\n  ) => () => RowModel<TGenerics>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TGenerics>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TGenerics>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    instance: TableInstance<TGenerics>,\n    columnId: string\n  ) => () => RowModel<TGenerics>\n  getFacetedUniqueValues?: (\n    instance: TableInstance<TGenerics>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    instance: TableInstance<TGenerics>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\nexport type FiltersInstance<TGenerics extends TableGenerics> = {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TGenerics>\n  getFilteredRowModel: () => RowModel<TGenerics>\n  _getFilteredRowModel?: () => RowModel<TGenerics>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TGenerics> | undefined\n  getGlobalFilterFn: () => FilterFn<TGenerics> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TGenerics>\n  _getGlobalFacetedRowModel?: () => RowModel<TGenerics>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <\n    TGenerics extends TableGenerics\n  >(): FiltersColumnDef<TGenerics> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): FiltersOptions<TGenerics> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', instance),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', instance),\n      filterFromLeafRows: false,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = instance\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string'\n      },\n    }\n  },\n\n  createColumn: <TGenerics extends TableGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): FiltersColumn<TGenerics> => {\n    return {\n      filterFn: column.filterFn,\n      getAutoFilterFn: () => {\n        const firstRow = instance.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        const userFilterFns = instance.options.filterFns\n\n        return isFunction(column.filterFn)\n          ? column.filterFn\n          : column.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          : (userFilterFns as Record<string, any>)?.[\n              column.filterFn as string\n            ] ??\n            (filterFns[\n              column.filterFn as BuiltInFilterFn\n            ] as FilterFn<TGenerics>)\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (instance.options.enableColumnFilters ?? true) &&\n          (instance.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (instance.options.enableGlobalFilter ?? true) &&\n          (instance.options.enableFilters ?? true) &&\n          (instance.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        instance.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        instance.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        instance.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TGenerics>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        instance.options.getFacetedRowModel &&\n        instance.options.getFacetedRowModel(instance, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return instance.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        instance.options.getFacetedUniqueValues &&\n        instance.options.getFacetedUniqueValues(instance, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        instance.options.getFacetedMinMaxValues &&\n        instance.options.getFacetedMinMaxValues(instance, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TGenerics extends TableGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): FiltersRow<TGenerics> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): FiltersInstance<TGenerics> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { filterFns: userFilterFns, globalFilterFn: globalFilterFn } =\n          instance.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? instance.getGlobalAutoFilterFn()\n          : (userFilterFns as Record<string, any>)?.[\n              globalFilterFn as string\n            ] ??\n            (filterFns[\n              globalFilterFn as BuiltInFilterFn\n            ] as FilterFn<TGenerics>)\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = instance.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        instance.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        instance.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        instance.setGlobalFilter(\n          defaultState ? undefined : instance.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        instance.setColumnFilters(\n          defaultState ? [] : instance.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => instance.getCoreRowModel(),\n      _getFilteredRowModel:\n        instance.options.getFilteredRowModel &&\n        instance.options.getFilteredRowModel(instance),\n      getFilteredRowModel: () => {\n        if (\n          instance.options.manualFiltering ||\n          !instance._getFilteredRowModel\n        ) {\n          return instance.getPreFilteredRowModel()\n        }\n\n        return instance._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        instance.options.getFacetedRowModel &&\n        instance.options.getFacetedRowModel(instance, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (\n          instance.options.manualFiltering ||\n          !instance._getGlobalFacetedRowModel\n        ) {\n          return instance.getPreFilteredRowModel()\n        }\n\n        return instance._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        instance.options.getFacetedUniqueValues &&\n        instance.options.getFacetedUniqueValues(instance, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!instance._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return instance._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        instance.options.getFacetedMinMaxValues &&\n        instance.options.getFacetedMinMaxValues(instance, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!instance._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return instance._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TGenerics extends TableGenerics>(\n  filterFn?: FilterFn<TGenerics>,\n  value?: any,\n  column?: Column<TGenerics>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce(\n    (sum: number, next: unknown) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId)\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/instance'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  TableInstance,\n  Row,\n  Updater,\n  Renderable,\n  TableGenerics,\n} from '../types'\nimport { isFunction, makeStateUpdater, Overwrite } from '../utils'\n\nexport type GroupingState = string[]\n\nexport type GroupingTableState = {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TGenerics extends TableGenerics> = (\n  columnId: string,\n  leafRows: Row<TGenerics>[],\n  childRows: Row<TGenerics>[]\n) => any\n\nexport type CustomAggregationFns<TGenerics extends TableGenerics> = Record<\n  string,\n  AggregationFn<TGenerics>\n>\n\nexport type AggregationFnOption<TGenerics extends TableGenerics> =\n  | 'auto'\n  | BuiltInAggregationFn\n  | keyof TGenerics['AggregationFns']\n  | AggregationFn<TGenerics>\n\nexport type GroupingColumnDef<TGenerics extends TableGenerics> = {\n  aggregationFn?: AggregationFnOption<Overwrite<TGenerics, { Value: any }>>\n  aggregatedCell?: Renderable<\n    TGenerics,\n    {\n      instance: TableInstance<TGenerics>\n      row: Row<TGenerics>\n      column: Column<TGenerics>\n      cell: Cell<TGenerics>\n      getValue: () => TGenerics['Value']\n    }\n  >\n  enableGrouping?: boolean\n}\n\nexport type GroupingColumn<TGenerics extends TableGenerics> = {\n  aggregationFn?: AggregationFnOption<Overwrite<TGenerics, { Value: any }>>\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TGenerics> | undefined\n  getAggregationFn: () => AggregationFn<TGenerics> | undefined\n}\n\nexport type GroupingRow = {\n  groupingColumnId?: string\n  groupingValue?: any\n  getIsGrouped: () => boolean\n  _groupingValuesCache: Record<string, any>\n}\n\nexport type GroupingCell<TGenerics extends TableGenerics> = {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n  renderAggregatedCell: () => string | null | TGenerics['Rendered']\n}\n\nexport type ColumnDefaultOptions = {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\nexport type GroupingOptions<TGenerics extends TableGenerics> = {\n  manualGrouping?: boolean\n  aggregationFns?: TGenerics['AggregationFns']\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (\n    instance: TableInstance<TGenerics>\n  ) => () => RowModel<TGenerics>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport type GroupingInstance<TGenerics extends TableGenerics> = {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TGenerics>\n  getGroupedRowModel: () => RowModel<TGenerics>\n  _getGroupedRowModel?: () => RowModel<TGenerics>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <\n    TGenerics extends TableGenerics\n  >(): GroupingColumnDef<TGenerics> => {\n    return {\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): GroupingOptions<TGenerics> => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', instance),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TGenerics extends TableGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): GroupingColumn<TGenerics> => {\n    return {\n      toggleGrouping: () => {\n        instance.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          instance.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return instance.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => instance.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = instance.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n\n        return aggregationFns.count\n      },\n      getAggregationFn: () => {\n        const userAggregationFns = instance.options.aggregationFns\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.aggregationFn)\n          ? column.aggregationFn\n          : column.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : (userAggregationFns as Record<string, any>)?.[\n              column.aggregationFn as string\n            ] ??\n            (aggregationFns[\n              column.aggregationFn as BuiltInAggregationFn\n            ] as AggregationFn<TGenerics>)\n      },\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): GroupingInstance<TGenerics> => {\n    return {\n      setGrouping: updater => instance.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        instance.setGrouping(\n          defaultState ? [] : instance.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => instance.getSortedRowModel(),\n      getGroupedRowModel: () => {\n        if (\n          !instance._getGroupedRowModel &&\n          instance.options.getGroupedRowModel\n        ) {\n          instance._getGroupedRowModel =\n            instance.options.getGroupedRowModel(instance)\n        }\n\n        if (instance.options.manualGrouping || !instance._getGroupedRowModel) {\n          return instance.getPreGroupedRowModel()\n        }\n\n        return instance._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TGenerics extends TableGenerics>(\n    row: Row<TGenerics>\n  ): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TGenerics extends TableGenerics>(\n    cell: Cell<TGenerics>,\n    column: Column<TGenerics>,\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): GroupingCell<TGenerics> => {\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        row.subRows?.length > 1,\n      renderAggregatedCell: () => {\n        const template =\n          column.columnDef.aggregatedCell ?? column.columnDef.cell\n\n        return template\n          ? instance._render(template, {\n              instance,\n              column,\n              row,\n              cell,\n              getValue: cell.getValue,\n            })\n          : null\n      },\n    }\n  },\n}\n\nexport function orderColumns<TGenerics extends TableGenerics>(\n  leafColumns: Column<TGenerics>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport {\n  TableInstance,\n  OnChangeFn,\n  Updater,\n  Column,\n  TableGenerics,\n} from '../types'\n\nimport { Grouping, orderColumns } from './Grouping'\nimport { TableFeature } from '../core/instance'\n\nexport type ColumnOrderTableState = {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport type ColumnOrderOptions = {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderDefaultOptions = {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderInstance<TGenerics extends TableGenerics> = {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TGenerics>[]\n  ) => Column<TGenerics>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', instance),\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnOrderInstance<TGenerics> => {\n    return {\n      setColumnOrder: updater =>\n        instance.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        instance.setColumnOrder(\n          defaultState ? [] : instance.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          instance.getState().columnOrder,\n          instance.getState().grouping,\n          instance.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TGenerics>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/instance'\nimport {\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  RowModel,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport type PaginationState = {\n  pageIndex: number\n  pageSize: number\n  pageCount?: number\n}\n\nexport type PaginationTableState = {\n  pagination: PaginationState\n}\n\nexport type PaginationInitialTableState = {\n  pagination?: Partial<PaginationState>\n}\n\nexport type PaginationOptions<TGenerics extends TableGenerics> = {\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (\n    instance: TableInstance<TGenerics>\n  ) => () => RowModel<TGenerics>\n}\n\nexport type PaginationDefaultOptions = {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport type PaginationInstance<TGenerics extends TableGenerics> = {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TGenerics>\n  getPaginationRowModel: () => RowModel<TGenerics>\n  _getPaginationRowModel?: () => RowModel<TGenerics>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', instance),\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): PaginationInstance<TGenerics> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          instance._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          instance.options.autoResetAll ??\n          instance.options.autoResetPageIndex ??\n          !instance.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          instance._queue(() => {\n            instance.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return instance.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        instance.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : instance.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        instance.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof old.pageCount !== 'undefined'\n              ? old.pageCount - 1\n              : Number.MAX_SAFE_INTEGER\n\n          pageIndex = Math.min(Math.max(0, pageIndex), maxPageIndex)\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        instance.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : instance.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        instance.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : instance.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        instance.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        instance.setPagination(old => {\n          let newPageCount = functionalUpdate(updater, old.pageCount ?? -1)\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [\n          instance.getState().pagination.pageSize,\n          instance.getState().pagination.pageCount,\n        ],\n        (pageSize, pageCount) => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => instance.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = instance.getState().pagination\n\n        const pageCount = instance.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return instance.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return instance.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => instance.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !instance._getPaginationRowModel &&\n          instance.options.getPaginationRowModel\n        ) {\n          instance._getPaginationRowModel =\n            instance.options.getPaginationRowModel(instance)\n        }\n\n        if (\n          instance.options.manualPagination ||\n          !instance._getPaginationRowModel\n        ) {\n          return instance.getPrePaginationRowModel()\n        }\n\n        return instance._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        const { pageCount } = instance.getState().pagination\n\n        if (typeof pageCount !== 'undefined') {\n          return pageCount\n        }\n\n        return Math.ceil(\n          instance.getPrePaginationRowModel().rows.length /\n            instance.getState().pagination.pageSize\n        )\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/instance'\nimport {\n  OnChangeFn,\n  Updater,\n  TableInstance,\n  Column,\n  TableGenerics,\n  Row,\n  Cell,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport type ColumnPinningState = {\n  left?: string[]\n  right?: string[]\n}\n\nexport type ColumnPinningTableState = {\n  columnPinning: ColumnPinningState\n}\n\nexport type ColumnPinningOptions = {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningDefaultOptions = {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport type ColumnPinningColumnDef = {\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningColumn = {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport type ColumnPinningRow<TGenerics extends TableGenerics> = {\n  getLeftVisibleCells: () => Cell<TGenerics>[]\n  getCenterVisibleCells: () => Cell<TGenerics>[]\n  getRightVisibleCells: () => Cell<TGenerics>[]\n}\n\nexport type ColumnPinningInstance<TGenerics extends TableGenerics> = {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TGenerics>[]\n  getRightLeafColumns: () => Column<TGenerics>[]\n  getCenterLeafColumns: () => Column<TGenerics>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', instance),\n    }\n  },\n\n  createColumn: <TGenerics extends TableGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        instance.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (instance.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = instance.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? instance.getState().columnPinning?.[position]?.indexOf(column.id) ??\n              -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TGenerics extends TableGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningRow<TGenerics> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          instance.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TGenerics>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          instance.getState().columnPinning.right,\n        ],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TGenerics>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningInstance<TGenerics> => {\n    return {\n      setColumnPinning: updater =>\n        instance.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        instance.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : instance.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = instance.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [\n          instance.getAllLeafColumns(),\n          instance.getState().columnPinning.left,\n        ],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [\n          instance.getAllLeafColumns(),\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          instance.getAllLeafColumns(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/instance'\nimport {\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  Row,\n  RowModel,\n  Updater,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport type RowSelectionTableState = {\n  rowSelection: RowSelectionState\n}\n\nexport type RowSelectionOptions<TGenerics extends TableGenerics> = {\n  enableRowSelection?: boolean | ((row: Row<TGenerics>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TGenerics>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TGenerics>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TGenerics>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   instance: TableInstance<\n  //     TData,\n  //     TValue,\n  //     TFilterFns,\n  //     TSortingFns,\n  //     TAggregationFns\n  //   >,\n  //   rowModel: RowModel<TGenerics>\n  // ) => RowModel<TGenerics>\n}\n\nexport type RowSelectionRow = {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport type RowSelectionInstance<TGenerics extends TableGenerics> = {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value: boolean) => void\n  toggleAllPageRowsSelected: (value: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TGenerics>\n  getSelectedRowModel: () => RowModel<TGenerics>\n  getFilteredSelectedRowModel: () => RowModel<TGenerics>\n  getGroupedSelectedRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): RowSelectionOptions<TGenerics> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', instance),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): RowSelectionInstance<TGenerics> => {\n    return {\n      setRowSelection: updater =>\n        instance.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        instance.setRowSelection(\n          defaultState ? {} : instance.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        instance.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined'\n              ? value\n              : !instance.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = instance.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        instance.setRowSelection(old => {\n          const selectAll =\n            typeof value !== 'undefined'\n              ? value\n              : !instance.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          instance.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, value, instance)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = instance\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   instance.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   instance.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => instance.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [instance.getState().rowSelection, instance.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(instance, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [\n          instance.getState().rowSelection,\n          instance.getFilteredRowModel(),\n        ],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(instance, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [instance.getState().rowSelection, instance.getGroupedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(instance, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = instance.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof instance.options.enableGroupingRowSelection === 'function') {\n      //     return instance.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return instance.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preFilteredFlatRows = instance.getPreFilteredRowModel().flatRows\n        const { rowSelection } = instance.getState()\n\n        let isAllRowsSelected = Boolean(\n          preFilteredFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (preFilteredFlatRows.some(row => !rowSelection[row.id])) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = instance.getPaginationRowModel().flatRows\n        const { rowSelection } = instance.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        return (\n          !instance.getIsAllRowsSelected() &&\n          !!Object.keys(instance.getState().rowSelection ?? {}).length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = instance.getPaginationRowModel().flatRows\n        return instance.getIsAllPageRowsSelected()\n          ? false\n          : !!paginationFlatRows?.length\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          instance.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          instance.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TGenerics extends TableGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        instance.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, instance)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = instance.getState()\n        return isRowSelected(row, rowSelection, instance) === true\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = instance.getState()\n        return isRowSelected(row, rowSelection, instance) === 'some'\n      },\n\n      getCanSelect: () => {\n        if (typeof instance.options.enableRowSelection === 'function') {\n          return instance.options.enableRowSelection(row)\n        }\n\n        return instance.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof instance.options.enableSubRowSelection === 'function') {\n          return instance.options.enableSubRowSelection(row)\n        }\n\n        return instance.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof instance.options.enableMultiRowSelection === 'function') {\n          return instance.options.enableMultiRowSelection(row)\n        }\n\n        return instance.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TGenerics extends TableGenerics>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  instance: TableInstance<TGenerics>\n) => {\n  const row = instance.getRow(id)\n\n  const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && instance.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    selectedRowIds[id] = true\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, instance)\n    )\n  }\n}\n\nexport function selectRowsFn<TGenerics extends TableGenerics>(\n  instance: TableInstance<TGenerics>,\n  rowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const rowSelection = instance.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TGenerics>[] = []\n  const newSelectedRowsById: Record<string, Row<TGenerics>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TGenerics>[], depth = 0): Row<TGenerics>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection, instance) === true\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TGenerics>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TGenerics extends TableGenerics>(\n  row: Row<TGenerics>,\n  selection: Record<string, boolean>,\n  instance: TableInstance<TGenerics>\n): boolean | 'some' {\n  if (selection[row.id]) {\n    return true\n  }\n\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection, instance)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? true : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    (rowA.getValue(columnId) as Date).getTime(),\n    (rowB.getValue(columnId) as Date).getTime()\n  )\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/instance'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  Row,\n  Updater,\n} from '../types'\n\nimport { isFunction, makeStateUpdater, Overwrite } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport type ColumnSort = {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport type SortingTableState = {\n  sorting: SortingState\n}\n\nexport type SortingFn<TGenerics extends TableGenerics> = {\n  (rowA: Row<TGenerics>, rowB: Row<TGenerics>, columnId: string): number\n}\n\nexport type CustomSortingFns<TGenerics extends TableGenerics> = Record<\n  string,\n  SortingFn<TGenerics>\n>\n\nexport type SortingFnOption<TGenerics extends TableGenerics> =\n  | 'auto'\n  | BuiltInSortingFn\n  | keyof TGenerics['SortingFns']\n  | SortingFn<TGenerics>\n\nexport type SortingColumnDef<TGenerics extends TableGenerics> = {\n  sortingFn?: SortingFnOption<Overwrite<TGenerics, { Value: any }>>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport type SortingColumn<TGenerics extends TableGenerics> = {\n  getAutoSortingFn: () => SortingFn<TGenerics>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TGenerics>\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\nexport type SortingOptions<TGenerics extends TableGenerics> = {\n  manualSorting?: boolean\n  sortingFns?: TGenerics['SortingFns']\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (\n    instance: TableInstance<TGenerics>\n  ) => () => RowModel<TGenerics>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\nexport type SortingInstance<TGenerics extends TableGenerics> = {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TGenerics>\n  getSortedRowModel: () => RowModel<TGenerics>\n  _getSortedRowModel?: () => RowModel<TGenerics>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <\n    TGenerics extends TableGenerics\n  >(): SortingColumnDef<TGenerics> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): SortingOptions<TGenerics> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', instance),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TGenerics extends TableGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): SortingColumn<TGenerics> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = instance.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = instance.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        const userSortingFn = instance.options.sortingFns\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : (userSortingFn as Record<string, any>)?.[\n              column.columnDef.sortingFn as string\n            ] ??\n            (sortingFns[\n              column.columnDef.sortingFn as BuiltInSortingFn\n            ] as SortingFn<TGenerics>)\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       instance.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        instance.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n          const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction\n\n          if (column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          const sortDescFirst =\n            column.columnDef.sortDescFirst ??\n            instance.options.sortDescFirst ??\n            column.getAutoSortDir() === 'desc'\n\n          // Handle toggle states that will remove the sorting\n          if (\n            sortAction === 'toggle' && // Must be toggling\n            (instance.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n            !hasDescDefined && // Must not be setting desc\n            (multi ? instance.options.enableMultiRemove ?? true : true) && // If multi, don't allow if enableMultiRemove\n            (existingSorting?.desc // Finally, detect if it should indeed be removed\n              ? !sortDescFirst\n              : sortDescFirst)\n          ) {\n            sortAction = 'remove'\n          }\n\n          if (sortAction === 'replace') {\n            newSorting = [\n              {\n                id: column.id,\n                desc: hasDescDefined ? desc! : !!sortDescFirst,\n              },\n            ]\n          } else if (sortAction === 'add' && old?.length) {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: hasDescDefined ? desc! : !!sortDescFirst,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (instance.options.maxMultiSortColCount ??\n                  Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle' && old?.length) {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: hasDescDefined ? desc! : !existingSorting?.desc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove' && old?.length) {\n            newSorting = old.filter(d => d.id !== column.id)\n          }\n\n          return newSorting\n        })\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (instance.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          instance.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = instance\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        instance.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        instance.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? instance.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): SortingInstance<TGenerics> => {\n    let registered = false\n\n    return {\n      setSorting: updater => instance.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        instance.setSorting(\n          defaultState ? [] : instance.initialState?.sorting ?? []\n        )\n      },\n      getPreSortedRowModel: () => instance.getFilteredRowModel(),\n      getSortedRowModel: () => {\n        if (\n          !instance._getSortedRowModel &&\n          instance.options.getSortedRowModel\n        ) {\n          instance._getSortedRowModel =\n            instance.options.getSortedRowModel(instance)\n        }\n\n        if (instance.options.manualSorting || !instance._getSortedRowModel) {\n          return instance.getPreSortedRowModel()\n        }\n\n        return instance._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/instance'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  Updater,\n  Row,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport type VisibilityTableState = {\n  columnVisibility: VisibilityState\n}\n\nexport type VisibilityOptions = {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport type VisibilityDefaultOptions = {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport type VisibilityInstance<TGenerics extends TableGenerics> = {\n  getVisibleFlatColumns: () => Column<TGenerics>[]\n  getVisibleLeafColumns: () => Column<TGenerics>[]\n  getLeftVisibleLeafColumns: () => Column<TGenerics>[]\n  getRightVisibleLeafColumns: () => Column<TGenerics>[]\n  getCenterVisibleLeafColumns: () => Column<TGenerics>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport type VisibilityColumnDef = {\n  enableHiding?: boolean\n}\n\nexport type VisibilityRow<TGenerics extends TableGenerics> = {\n  _getAllVisibleCells: () => Cell<TGenerics>[]\n  getVisibleCells: () => Cell<TGenerics>[]\n}\n\nexport type VisibilityColumn = {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', instance),\n    }\n  },\n\n  createColumn: <TGenerics extends TableGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          instance.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return instance.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (instance.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TGenerics extends TableGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): VisibilityRow<TGenerics> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [\n          row\n            .getAllCells()\n            .filter(cell => cell.column.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        _ => {\n          return row.getAllCells().filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): VisibilityInstance<TGenerics> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TGenerics>[]\n    ): (() => Column<TGenerics>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => instance.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => instance.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => instance.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => instance.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => instance.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        instance.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        instance.setColumnVisibility(\n          defaultState ? {} : instance.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !instance.getIsAllColumnsVisible()\n\n        instance.setColumnVisibility(\n          instance.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !instance.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        instance.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          instance.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { flattenBy, functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  TableInstance,\n  Renderable,\n  TableGenerics,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport type TableFeature = {\n  getDefaultOptions?: (instance: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createInstance?: (instance: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, instance: any) => any\n  createHeader?: (column: any, instance: any) => any\n  createCell?: (cell: any, column: any, row: any, instance: any) => any\n  createRow?: (row: any, instance: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport type CoreTableState = {}\n\nexport type CoreOptions<TGenerics extends TableGenerics> = {\n  data: TGenerics['Row'][]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  render: TGenerics['Renderer']\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: <T>(defaultOptions: T, options: Partial<T>) => T\n  meta?: TGenerics['TableMeta']\n  getCoreRowModel: (\n    instance: TableInstance<TGenerics>\n  ) => () => RowModel<TGenerics>\n  getSubRows?: (\n    originalRow: TGenerics['Row'],\n    index: number\n  ) => undefined | TGenerics['Row'][]\n  getRowId?: (\n    originalRow: TGenerics['Row'],\n    index: number,\n    parent?: Row<TGenerics>\n  ) => string\n  columns: ColumnDef<TGenerics>[]\n  defaultColumn?: Partial<ColumnDef<TGenerics>>\n}\n\nexport type CoreInstance<TGenerics extends TableGenerics> = {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TGenerics>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TGenerics>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _render: <TProps>(\n    template: Renderable<TGenerics, TProps>,\n    props: TProps\n  ) => string | null | TGenerics['Rendered']\n  _getRowId: (\n    _: TGenerics['Row'],\n    index: number,\n    parent?: Row<TGenerics>\n  ) => string\n  getCoreRowModel: () => RowModel<TGenerics>\n  _getCoreRowModel?: () => RowModel<TGenerics>\n  getRowModel: () => RowModel<TGenerics>\n  getRow: (id: string) => Row<TGenerics>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TGenerics>>\n  _getColumnDefs: () => ColumnDef<TGenerics>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TGenerics>>\n  getAllColumns: () => Column<TGenerics>[]\n  getAllFlatColumns: () => Column<TGenerics>[]\n  getAllLeafColumns: () => Column<TGenerics>[]\n  getColumn: (columnId: string) => Column<TGenerics>\n}\n\nexport function createTableInstance<TGenerics extends TableGenerics>(\n  options: TableOptionsResolved<TGenerics>\n): TableInstance<TGenerics> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let instance = { _features: features } as unknown as TableInstance<TGenerics>\n\n  const defaultOptions = instance._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(instance))\n  }, {}) as TableOptionsResolved<TGenerics>\n\n  const mergeOptions = (options: TableOptionsResolved<TGenerics>) => {\n    if (instance.options.mergeOptions) {\n      return instance.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  instance._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TGenerics> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      instance.setState(instance.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, instance.options)\n      instance.options = mergeOptions(newOptions)\n    },\n    _render: (template, props) => {\n      if (typeof instance.options.render === 'function') {\n        return instance.options.render(template, props)\n      }\n\n      if (typeof template === 'function') {\n        return (template as Function)(props)\n      }\n\n      return template\n    },\n\n    getState: () => {\n      return instance.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      instance.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (\n      row: TGenerics['Row'],\n      index: number,\n      parent?: Row<TGenerics>\n    ) =>\n      instance.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!instance._getCoreRowModel) {\n        instance._getCoreRowModel = instance.options.getCoreRowModel(instance)\n      }\n\n      return instance._getCoreRowModel()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return instance.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = instance.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [instance.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<ColumnDef<TGenerics>>\n\n        return {\n          header: props => props.header.column.id,\n          footer: props => props.header.column.id,\n          cell: props => props.getValue().toString?.() ?? null,\n          ...instance._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TGenerics>>\n      },\n      {\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => instance.options.columns,\n\n    getAllColumns: memo(\n      () => [instance._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TGenerics>[],\n          parent?: Column<TGenerics>,\n          depth = 0\n        ): Column<TGenerics>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(instance, columnDef, depth, parent)\n\n            column.columns = columnDef.columns\n              ? recurseColumns(columnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [instance.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [instance.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TGenerics>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [instance.getAllColumns(), instance._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = instance._getAllFlatColumnsById()[columnId]\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`[Table] Column with id ${columnId} does not exist.`)\n        }\n        throw new Error()\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(instance, coreInstance)\n\n  instance._features.forEach(feature => {\n    return Object.assign(instance, feature.createInstance?.(instance))\n  })\n\n  return instance\n}\n","import { CustomFilterFns, FilterFn } from './features/Filters'\nimport { AggregationFn, CustomAggregationFns } from './features/Grouping'\nimport { CustomSortingFns, SortingFn } from './features/Sorting'\nimport {\n  ColumnDef,\n  AccessorFn,\n  AnyRender,\n  TableGenerics,\n  TableOptionsResolved,\n  TableOptions,\n} from './types'\nimport { IfDefined, Overwrite } from './utils'\n\nexport type TableFactory<TGenerics extends TableGenerics> =\n  () => Table<TGenerics>\n\nexport type CreateTableOptions<\n  TRender extends AnyRender,\n  TFilterFns extends CustomFilterFns<any>,\n  TSortingFns extends CustomSortingFns<any>,\n  TAggregationFns extends CustomAggregationFns<any>,\n  TGenerics extends TableGenerics\n> = Partial<\n  {\n    render?: TRender\n    filterFns?: TFilterFns\n    sortingFns?: TSortingFns\n    aggregationFns?: TAggregationFns\n  } & Omit<\n    TableOptionsResolved<TGenerics>,\n    'filterFns' | 'sortingFns' | 'aggregationFns'\n  >\n>\n\nexport type Table<TGenerics extends TableGenerics> = {\n  generics: TGenerics\n  options: Partial<TableOptionsResolved<TGenerics>>\n  // setGenerics: <T extends TableGenerics>() => Table<T>\n  setRowType: <TRow>() => Table<Overwrite<TGenerics, { Row: TRow }>>\n  setTableMetaType: <TTableMeta>() => Table<\n    Overwrite<TGenerics, { TableMeta: TTableMeta }>\n  >\n  setColumnMetaType: <TColumnMeta>() => Table<\n    Overwrite<TGenerics, { ColumnMeta: TColumnMeta }>\n  >\n  setFilterMetaType: <TFilterMeta>() => Table<\n    Overwrite<TGenerics, { FilterMeta: TFilterMeta }>\n  >\n  setOptions: <\n    TFilterFns extends Record<string, FilterFn<TGenerics>>,\n    TSortingFns extends Record<string, SortingFn<TGenerics>>,\n    TAggregationFns extends Record<string, AggregationFn<TGenerics>>\n  >(\n    options: CreateTableOptions<\n      any,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns,\n      TGenerics\n    >\n  ) => Table<\n    Overwrite<\n      TGenerics,\n      {\n        FilterFns: IfDefined<TFilterFns, TGenerics['FilterFns']>\n        SortingFns: IfDefined<TSortingFns, TGenerics['SortingFns']>\n        AggregationFns: IfDefined<TAggregationFns, TGenerics['AggregationFns']>\n      }\n    >\n  >\n  createGroup: (\n    column: Overwrite<\n      | Overwrite<\n          ColumnDef<any>,\n          {\n            header: string\n            id?: string\n          }\n        >\n      | Overwrite<\n          ColumnDef<any>,\n          {\n            id: string\n            header?: string | ((...any: any) => any)\n          }\n        >,\n      {\n        accessorFn?: never\n        accessorKey?: never\n        columns?: ColumnDef<any>[]\n      }\n    >\n  ) => ColumnDef<TGenerics>\n  createDisplayColumn: (\n    column: Omit<ColumnDef<TGenerics>, 'columns'>\n  ) => ColumnDef<TGenerics>\n  createDataColumn: <\n    TAccessor extends AccessorFn<TGenerics['Row']> | keyof TGenerics['Row']\n  >(\n    accessor: TAccessor,\n    column: Overwrite<\n      TAccessor extends (...args: any[]) => any\n        ? // Accessor Fn\n          ColumnDef<Overwrite<TGenerics, { Value: ReturnType<TAccessor> }>>\n        : TAccessor extends keyof TGenerics['Row']\n        ? // Accessor Key\n          Overwrite<\n            ColumnDef<\n              Overwrite<TGenerics, { Value: TGenerics['Row'][TAccessor] }>\n            >,\n            {\n              id?: string\n            }\n          >\n        : never,\n      {\n        accessorFn?: never\n        accessorKey?: never\n        columns?: ColumnDef<any>[]\n      }\n    >\n  ) => ColumnDef<TGenerics>\n  createOptions: (options: TableOptions<TGenerics>) => TableOptions<TGenerics>\n}\n\n//\n\nexport function createTableFactory<TRenderer extends AnyRender>(opts: {\n  render: TRenderer\n}): () => Table<{ Renderer: TRenderer; Rendered: ReturnType<TRenderer> }> {\n  return () => createTable(undefined, undefined, opts)\n}\n\n// A lot of returns in here are `as any` for a reason. Unless you\n// can find a better way to do this, then don't worry about them\nfunction createTable<TGenerics extends TableGenerics>(\n  _?: undefined,\n  __?: undefined,\n  options?: CreateTableOptions<any, any, any, any, TGenerics>\n): Table<TGenerics> {\n  const table: Table<TGenerics> = {\n    generics: undefined!,\n    options: options ?? {\n      render: (() => {\n        throw new Error('')\n      })(),\n    },\n    // setGenerics: () => table as any,\n    setRowType: () => table as any,\n    setTableMetaType: () => table as any,\n    setColumnMetaType: () => table as any,\n    setFilterMetaType: () => table as any,\n    setOptions: newOptions =>\n      createTable(_, __, {\n        ...options,\n        ...newOptions,\n      } as any),\n    createDisplayColumn: column => ({ ...column, columnDefType: 'display' }),\n    createGroup: column => ({ ...column, columnDefType: 'group' } as any),\n    createDataColumn: (accessor, column): any => {\n      column = {\n        ...column,\n        columnDefType: 'data',\n        id: column.id,\n      }\n\n      if (typeof accessor === 'string') {\n        return {\n          ...column,\n          id: column.id ?? accessor,\n          accessorKey: accessor,\n        }\n      }\n\n      if (typeof accessor === 'function') {\n        return {\n          ...column,\n          accessorFn: accessor,\n        }\n      }\n\n      throw new Error('Invalid accessor')\n    },\n    createOptions: options => options,\n  }\n\n  return table\n}\n","import { Cell, Row, TableGenerics, TableInstance } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport type CoreRow<TGenerics extends TableGenerics> = {\n  id: string\n  index: number\n  original?: TGenerics['Row']\n  depth: number\n  _valuesCache: Record<string, any>\n  getValue: (columnId: string) => any\n  subRows: Row<TGenerics>[]\n  getLeafRows: () => Row<TGenerics>[]\n  originalSubRows?: TGenerics['Row'][]\n  getAllCells: () => Cell<TGenerics>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TGenerics>>\n}\n\nexport const createRow = <TGenerics extends TableGenerics>(\n  instance: TableInstance<TGenerics>,\n  id: string,\n  original: TGenerics['Row'] | undefined,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TGenerics>[]\n): Row<TGenerics> => {\n  let row: CoreRow<TGenerics> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    _valuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = instance.getColumn(columnId)\n\n      if (!column.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(row.original, rowIndex)\n\n      return row._valuesCache[columnId]\n    },\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getAllCells: memo(\n      () => [instance.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(instance, row as Row<TGenerics>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => instance.options.debugAll ?? instance.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TGenerics>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => instance.options.debugAll ?? instance.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < instance._features.length; i++) {\n    const feature = instance._features[i]\n    Object.assign(row, feature?.createRow?.(row, instance))\n  }\n\n  return row as Row<TGenerics>\n}\n","import { Cell, Column, Row, TableGenerics, TableInstance } from '../types'\n\nexport type CoreCell<TGenerics extends TableGenerics> = {\n  id: string\n  getValue: () => TGenerics['Value']\n  row: Row<TGenerics>\n  column: Column<TGenerics>\n  renderCell: () => string | null | TGenerics['Rendered']\n}\n\nexport function createCell<TGenerics extends TableGenerics>(\n  instance: TableInstance<TGenerics>,\n  row: Row<TGenerics>,\n  column: Column<TGenerics>,\n  columnId: string\n) {\n  const cell: CoreCell<TGenerics> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderCell: () =>\n      column.columnDef.cell\n        ? instance._render(column.columnDef.cell, {\n            instance,\n            column,\n            row,\n            cell: cell as Cell<TGenerics>,\n            getValue: cell.getValue,\n          })\n        : null,\n  }\n\n  instance._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TGenerics>,\n        column,\n        row as Row<TGenerics>,\n        instance\n      )\n    )\n  }, {})\n\n  return cell as Cell<TGenerics>\n}\n","import { createRow } from '../core/row'\nimport { TableGenerics, Row, RowModel, TableInstance } from '../types'\n\nexport function filterRows<TGenerics extends TableGenerics>(\n  rows: Row<TGenerics>[],\n  filterRowImpl: (row: Row<TGenerics>) => any,\n  instance: TableInstance<TGenerics>\n) {\n  if (instance.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, instance)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, instance)\n}\n\nexport function filterRowModelFromLeafs<TGenerics extends TableGenerics>(\n  rowsToFilter: Row<TGenerics>[],\n  filterRow: (row: Row<TGenerics>) => Row<TGenerics>[],\n  instance: TableInstance<TGenerics>\n): RowModel<TGenerics> {\n  const newFilteredFlatRows: Row<TGenerics>[] = []\n  const newFilteredRowsById: Record<string, Row<TGenerics>> = {}\n\n  let row\n  let newRow\n\n  const recurseFilterRows = (rowsToFilter: Row<TGenerics>[], depth = 0) => {\n    const rows: Row<TGenerics>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      row = rowsToFilter[i]!\n\n      if (row.subRows?.length) {\n        newRow = createRow(instance, row.id, row.original, row.index, row.depth)\n        newRow.columnFilters = row.columnFilters\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        if (!newRow.subRows.length) {\n          continue\n        }\n        row = newRow\n      }\n\n      if (filterRow(row)) {\n        rows.push(row)\n        newFilteredRowsById[row.id] = row\n        newFilteredRowsById[i] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TGenerics extends TableGenerics>(\n  rowsToFilter: Row<TGenerics>[],\n  filterRow: (row: Row<TGenerics>) => any,\n  instance: TableInstance<TGenerics>\n): RowModel<TGenerics> {\n  const newFilteredFlatRows: Row<TGenerics>[] = []\n  const newFilteredRowsById: Record<string, Row<TGenerics>> = {}\n\n  let rows\n  let row\n  let newRow\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TGenerics>[], depth = 0) => {\n    // Filter from parents downward first\n\n    rows = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length) {\n          newRow = createRow(\n            instance,\n            row.id,\n            row.original,\n            row.index,\n            row.depth\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { TableInstance, Row, RowModel, TableGenerics } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>\n) => () => RowModel<TGenerics> {\n  return instance =>\n    memo(\n      () => [\n        instance.getState().expanded,\n        instance.getPreExpandedRowModel(),\n        instance.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          // Do not expand if rows are not included in pagination\n          !paginateExpandedRows ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        return expandRows(rowModel, instance)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TGenerics extends TableGenerics>(\n  rowModel: RowModel<TGenerics>,\n  instance: TableInstance<TGenerics>\n) {\n  const expandedRows: Row<TGenerics>[] = []\n\n  const handleRow = (row: Row<TGenerics>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { createRow } from '../core/row'\nimport { TableInstance, Row, RowModel, TableGenerics } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>\n) => () => RowModel<TGenerics> {\n  return instance =>\n    memo(\n      () => [instance.options.data],\n      (\n        data\n      ): {\n        rows: Row<TGenerics>[]\n        flatRows: Row<TGenerics>[]\n        rowsById: Record<string, Row<TGenerics>>\n      } => {\n        const rowModel: RowModel<TGenerics> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        let rows\n        let row\n        let originalRow\n\n        const accessRows = (\n          originalRows: TGenerics['Row'][],\n          depth = 0,\n          parent?: Row<TGenerics>\n        ): Row<TGenerics>[] => {\n          rows = []\n\n          for (let i = 0; i < originalRows.length; i++) {\n            originalRow = originalRows[i]\n\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            row = createRow(\n              instance,\n              instance._getRowId(originalRow, i, parent),\n              originalRow,\n              i,\n              depth\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push instance row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (instance.options.getSubRows) {\n              row.originalSubRows = instance.options.getSubRows(originalRow, i)\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {\n          instance._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { TableInstance, TableGenerics } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (instance, columnId) =>\n    memo(\n      () => [instance.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        const firstValue = facetedRowModel.flatRows[0]?.getValue(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const value = facetedRowModel.flatRows[i]?.getValue(columnId)\n\n          if (value < facetedMinMaxValues[0]) {\n            facetedMinMaxValues[0] = value\n          } else if (value > facetedMinMaxValues[1]) {\n            facetedMinMaxValues[1] = value\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { TableInstance, RowModel, TableGenerics, Row } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>,\n  columnId: string\n) => () => RowModel<TGenerics> {\n  return (instance, columnId) =>\n    memo(\n      () => [\n        instance.getPreFilteredRowModel(),\n        instance.getState().columnFilters,\n        instance.getState().globalFilter,\n        instance.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TGenerics>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, instance)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { TableInstance, TableGenerics } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>,\n  columnId: string\n) => () => Map<any, number> {\n  return (instance, columnId) =>\n    memo(\n      () => [instance.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const value = facetedRowModel.flatRows[i]?.getValue(columnId)\n\n          if (facetedUniqueValues.has(value)) {\n            facetedUniqueValues.set(\n              value,\n              (facetedUniqueValues.get(value) ?? 0) + 1\n            )\n          } else {\n            facetedUniqueValues.set(value, 1)\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { TableInstance, RowModel, TableGenerics, Row } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>\n) => () => RowModel<TGenerics> {\n  return instance =>\n    memo(\n      () => [\n        instance.getPreFilteredRowModel(),\n        instance.getState().columnFilters,\n        instance.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TGenerics>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TGenerics>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = instance.getColumn(d.id)\n\n          if (!column) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Table: Could not find a column to filter with columnId: ${d.id}`\n              )\n            }\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = instance.getGlobalFilterFn()\n\n        const globallyFilterableColumns = instance\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TGenerics>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, instance)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {\n          instance._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { TableInstance, Row, RowModel, TableGenerics } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>\n) => () => RowModel<TGenerics> {\n  return instance =>\n    memo(\n      () => [instance.getState().grouping, instance.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          instance.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TGenerics>[] = []\n        const groupedRowsById: Record<string, Row<TGenerics>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TGenerics>[],\n          depth = 0,\n          parentId: string\n        ) => {\n          // This is the last level, just return the rows\n          if (depth === existingGrouping.length) {\n            return rows\n          }\n\n          const columnId = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(instance, id, undefined, index, depth)\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = instance.getColumn(columnId)\n                  const aggregateFn = column.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  } else if (column.aggregationFn) {\n                    console.info({ column })\n                    throw new Error(\n                      process.env.NODE_ENV !== 'production'\n                        ? `Table: Invalid column.aggregateType option for column listed above`\n                        : ''\n                    )\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0, '')\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {\n          instance._queue(() => {\n            instance._autoResetExpanded()\n            instance._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TGenerics extends TableGenerics>(\n  rows: Row<TGenerics>[],\n  columnId: string\n) {\n  const groupMap = new Map<any, Row<TGenerics>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      map.set(resKey, [...previous, row])\n    }\n    return map\n  }, groupMap)\n}\n","import { TableInstance, RowModel, TableGenerics } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TGenerics extends TableGenerics>(opts?: {\n  initialSync: boolean\n}): (instance: TableInstance<TGenerics>) => () => RowModel<TGenerics> {\n  return instance =>\n    memo(\n      () => [\n        instance.getState().pagination,\n        instance.getPrePaginationRowModel(),\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        if (!instance.options.paginateExpandedRows) {\n          return expandRows(\n            {\n              rows,\n              flatRows,\n              rowsById,\n            },\n            instance\n          )\n        }\n\n        return {\n          rows,\n          flatRows,\n          rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n      }\n    )\n}\n","import { TableInstance, Row, RowModel, TableGenerics } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>\n) => () => RowModel<TGenerics> {\n  return instance =>\n    memo(\n      () => [instance.getState().sorting, instance.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = instance.getState().sorting\n\n        const sortedFlatRows: Row<TGenerics>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          instance.getColumn(sort.id).getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TGenerics>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = instance.getColumn(sortEntry.id)\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TGenerics>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = rows.slice()\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (!row.subRows || row.subRows.length <= 1) {\n              return\n            }\n            row.subRows = sortData(row.subRows)\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {\n          instance._autoResetPageIndex()\n        },\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","deps","result","depTime","debug","Date","now","newDeps","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","columnDef","depth","parent","_ref","_columnDef$id","defaultColumn","_getDefaultColumnDef","id","accessorFn","accessorKey","header","undefined","originalRow","Error","column","columnDefType","columns","getFlatColumns","_column$columns","flatMap","_instance$options$deb","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","leafColumns","_instance$options$deb2","_features","reduce","obj","feature","Object","assign","createHeader","_options$id","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","renderHeader","_render","renderFooter","footer","Headers","createInstance","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","_left$map$filter","_right$map$filter","leftColumns","columnId","find","filter","Boolean","rightColumns","buildHeaderGroups","includes","process","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","_left$map$filter2","_instance$options$deb3","getRightHeaderGroups","_right$map$filter2","_instance$options$deb4","getFooterGroups","headerGroups","reverse","_instance$options$deb5","getLeftFooterGroups","_instance$options$deb6","getCenterFooterGroups","_instance$options$deb7","getRightFooterGroups","_instance$options$deb8","getFlatHeaders","headers","_instance$options$deb9","getLeftFlatHeaders","_instance$options$deb10","getCenterFlatHeaders","_instance$options$deb11","getRightFlatHeaders","_instance$options$deb12","getCenterLeafHeaders","flatHeaders","_header$subHeaders","_instance$options$deb13","getLeftLeafHeaders","_header$subHeaders2","_instance$options$deb14","getRightLeafHeaders","_header$subHeaders3","_instance$options$deb15","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","_instance$options$deb16","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","bottomHeaders","recurseHeadersForSpans","childRowSpans","childColSpan","childRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","_column$columnDef$min","_column$columnDef$max","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_ref2","_","rest","getCanResize","_column$columnDef$ena","_instance$options$ena","enableResizing","enableColumnResizing","getIsResizing","sum","_header$column$getSiz","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","updateOffset","eventType","clientXPos","newColumnSizing","setColumnSizingInfo","_old$startOffset","_old$startSize","_ref3","headerSize","mouseEvents","moveHandler","onMove","upHandler","document","removeEventListener","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","_instance$initialStat","initialState","resetHeaderSizeInfo","_instance$initialStat2","getTotalSize","_instance$getHeaderGr","_instance$getHeaderGr2","getLeftTotalSize","_instance$getLeftHead","_instance$getLeftHead2","getCenterTotalSize","_instance$getCenterHe","_instance$getCenterHe2","getRightTotalSize","_instance$getRightHea","_instance$getRightHea2","passiveSupported","supported","noop","window","err","type","Expanding","expanded","onExpandedChange","autoResetExpanded","paginateExpandedRows","registered","queued","_autoResetExpanded","autoResetAll","_queue","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","getCanSomeRowsExpand","getRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","getIsExpanded","getExpandedDepth","keys","rowsById","splitId","split","getPreExpandedRowModel","getGroupedRowModel","getExpandedRowModel","_getExpandedRowModel","manualExpanding","createRow","toggleExpanded","_expanded","exists","oldExpanded","rowId","_instance$options$get","getIsRowExpanded","_instance$options$get2","_row$subRows","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","search","toLowerCase","getValue","autoRemove","val","testFalsey","includesStringSensitive","equalsString","arrIncludes","arrIncludesAll","arrIncludesSome","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","globalFilterFn","getColumnCanGlobalFilter","_instance$getCoreRowM","_instance$getCoreRowM2","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","value","Array","isArray","getFilterFn","userFilterFns","getCanFilter","_instance$options$ena2","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","_column$columnDef$ena2","_instance$options$ena3","_instance$options$ena4","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_instance$getState$co","_instance$getState$co2","_instance$getState$co3","_instance$getState$co4","setFilterValue","setColumnFilters","previousfilter","newFilter","_old$filter","shouldAutoRemoveFilter","newFilterObj","_old$map","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","getAllLeafColumns","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","_getFilteredRowModel","getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","aggregationFns","_leafRows","childRows","next","extent","mean","leafRows","count","median","unique","from","Set","uniqueCount","_columnId","Grouping","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","_instance$getState$gr","getGroupedIndex","_instance$getState$gr2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","toString","call","getAggregationFn","_ref4","userAggregationFns","resetGrouping","getPreGroupedRowModel","getSortedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","_groupingValuesCache","createCell","cell","getIsPlaceholder","getIsAggregated","renderAggregatedCell","_column$columnDef$agg","template","aggregatedCell","nonGroupingColumns","col","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","Pagination","pagination","pageIndex","pageSize","onPaginationChange","_autoResetPageIndex","_instance$options$aut","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","resetPagination","setPageIndex","maxPageIndex","pageCount","_instance$initialStat3","_instance$initialStat4","resetPageSize","_instance$initialStat5","_instance$initialStat6","_instance$initialStat7","setPageSize","topRowIndex","floor","setPageCount","_old$pageCount","newPageCount","getPageOptions","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","getPageCount","previousPage","nextPage","getPrePaginationRowModel","getPaginationRowModel","_getPaginationRowModel","ceil","rows","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","getCanPin","_d$columnDef$enablePi","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","getRightVisibleCells","resetColumnPinning","getDefaultPinningState","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","toggleAllPageRowsSelected","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","preFilteredFlatRows","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","_instance$getState$ro","getIsSomePageRowsSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","getIsSelected","selectedRowIds","isRowSelected","getIsSomeSelected","getCanSelect","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","compareBasic","a","b","compareAlphanumeric","aStr","bStr","aa","bb","an","parseInt","bn","combo","sort","sortingFns","alphanumeric","rowA","rowB","alphanumericCaseSensitive","text","textCaseSensitive","datetime","getTime","basic","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","userSortingFn","toggleSorting","desc","multi","setSorting","_column$columnDef$sor","existingSorting","existingIndex","hasDescDefined","sortAction","newSorting","getCanMultiSort","sortDescFirst","enableSortingRemoval","enableMultiRemove","_instance$options$max","maxMultiSortColCount","getCanSort","enableSorting","enableMultiSort","getIsSorted","_instance$getState$so","columnSort","getSortIndex","_instance$getState$so2","_instance$getState$so3","clearSorting","getToggleSortingHandler","canSort","resetSorting","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","_value","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","createTable","__","table","generics","render","setRowType","setTableMetaType","setColumnMetaType","setFilterMetaType","setOptions","newOptions","createDisplayColumn","createGroup","createDataColumn","accessor","_column$id","createOptions","original","rowIndex","_valuesCache","hasOwnProperty","getLeafRows","renderCell","acc","filterRows","filterRowImpl","rowsToFilter","filterRow","newFilteredFlatRows","newFilteredRowsById","newRow","recurseFilterRows","filterRowModelFromLeafs","filterRowModelFromRoot","expandRows","expandedRows","handleRow","_options$initialState","defaultOptions","_feature$getInitialSt","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","mergeOptions","props","onStateChange","_getRowId","getRowId","_getCoreRowModel","_defaultColumn","_props$getValue$toStr","_props$getValue$toStr2","_props$getValue","_getColumnDefs","columnDefs","recurseColumns","_getAllFlatColumnsById","flatColumns","data","accessRows","originalRows","_row$originalSubRows","getSubRows","originalSubRows","facetedRowModel","_facetedRowModel$flat","firstValue","facetedMinMaxValues","_facetedRowModel$flat2","preRowModel","filterableIds","facetedUniqueValues","_facetedUniqueValues$","has","set","get","resolvedColumnFilters","resolvedGlobalFilters","_filterFn$resolveFilt","resolvedValue","globallyFilterableColumns","currentColumnFilter","currentGlobalFilter","_globalFilterFn$resol","j","filterMeta","__global__","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","parentId","rowGroupsMap","groupMap","resKey","previous","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","_groupedRows$0$getVal","aggregateFn","pageStart","pageEnd","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","_sortEntry$desc","columnInfo","isDesc","aValue","aUndefined","bUndefined","sortInt"],"mappings":"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"}