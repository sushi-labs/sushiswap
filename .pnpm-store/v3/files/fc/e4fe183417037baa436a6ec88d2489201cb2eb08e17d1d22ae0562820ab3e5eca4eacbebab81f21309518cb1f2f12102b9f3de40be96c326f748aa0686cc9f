"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withAxiom = void 0;
var logger_1 = require("./logger");
var shared_1 = require("./shared");
function withAxiomNextConfig(nextConfig) {
    var _this = this;
    return __assign(__assign({}, nextConfig), { rewrites: function () { return __awaiter(_this, void 0, void 0, function () {
            var rewrites, webVitalsEndpoint, logsEndpoint, log, axiomRewrites;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, ((_a = nextConfig.rewrites) === null || _a === void 0 ? void 0 : _a.call(nextConfig))];
                    case 1:
                        rewrites = _b.sent();
                        webVitalsEndpoint = (0, shared_1.getIngestURL)(shared_1.EndpointType.webVitals);
                        logsEndpoint = (0, shared_1.getIngestURL)(shared_1.EndpointType.logs);
                        if (!webVitalsEndpoint && !logsEndpoint) {
                            log = new logger_1.Logger();
                            log.warn('axiom: Envvars not detected. If this is production please see https://github.com/axiomhq/next-axiom for help');
                            log.warn('axiom: Sending Web Vitals to /dev/null');
                            log.warn('axiom: Sending logs to console');
                            return [2 /*return*/, rewrites || []]; // nothing to do
                        }
                        axiomRewrites = [
                            {
                                source: "".concat(shared_1.proxyPath, "/web-vitals"),
                                destination: webVitalsEndpoint,
                                basePath: false,
                            },
                            {
                                source: "".concat(shared_1.proxyPath, "/logs"),
                                destination: logsEndpoint,
                                basePath: false,
                            },
                        ];
                        if (!rewrites) {
                            return [2 /*return*/, axiomRewrites];
                        }
                        else if (Array.isArray(rewrites)) {
                            return [2 /*return*/, rewrites.concat(axiomRewrites)];
                        }
                        else {
                            rewrites.afterFiles = (rewrites.afterFiles || []).concat(axiomRewrites);
                            return [2 /*return*/, rewrites];
                        }
                        return [2 /*return*/];
                }
            });
        }); } });
}
// Sending logs after res.{json,send,end} is very unreliable.
// This function overwrites these functions and makes sure logs are sent out
// before the response is sent.
function interceptNextApiResponse(req, res) {
    var _this = this;
    var allPromises = [];
    var resSend = res.send;
    res.send = function (body) {
        allPromises.push((function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        req.log.attachResponseStatus(res.statusCode);
                        return [4 /*yield*/, req.log.flush()];
                    case 1:
                        _a.sent();
                        resSend(body);
                        return [2 /*return*/];
                }
            });
        }); })());
    };
    var resJson = res.json;
    res.json = function (json) {
        allPromises.push((function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        req.log.attachResponseStatus(res.statusCode);
                        return [4 /*yield*/, req.log.flush()];
                    case 1:
                        _a.sent();
                        resJson(json);
                        return [2 /*return*/];
                }
            });
        }); })());
    };
    var resEnd = res.end;
    res.end = function (cb) {
        allPromises.push((function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        req.log.attachResponseStatus(res.statusCode);
                        return [4 /*yield*/, req.log.flush()];
                    case 1:
                        _a.sent();
                        resEnd(cb);
                        return [2 /*return*/];
                }
            });
        }); })());
        return res;
    };
    return [res, allPromises];
}
function withAxiomNextApiHandler(handler) {
    var _this = this;
    return function (req, res) { return __awaiter(_this, void 0, void 0, function () {
        var report, logger, axiomRequest, _a, wrappedRes, allPromises, error_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    report = {
                        startTime: new Date().getTime(),
                        path: req.url,
                        method: req.method,
                        host: getHeaderOrDefault(req, 'host', ''),
                        userAgent: getHeaderOrDefault(req, 'user-agent', ''),
                        scheme: 'https',
                        ip: getHeaderOrDefault(req, 'x-forwarded-for', ''),
                        region: shared_1.vercelRegion,
                    };
                    logger = new logger_1.Logger({}, report, false, 'lambda');
                    axiomRequest = req;
                    axiomRequest.log = logger;
                    _a = interceptNextApiResponse(axiomRequest, res), wrappedRes = _a[0], allPromises = _a[1];
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 5, , 8]);
                    return [4 /*yield*/, handler(axiomRequest, wrappedRes)];
                case 2:
                    _b.sent();
                    return [4 /*yield*/, logger.flush()];
                case 3:
                    _b.sent();
                    return [4 /*yield*/, Promise.all(allPromises)];
                case 4:
                    _b.sent();
                    return [3 /*break*/, 8];
                case 5:
                    error_1 = _b.sent();
                    logger.error('Error in API handler', { error: error_1 });
                    logger.attachResponseStatus(500);
                    return [4 /*yield*/, logger.flush()];
                case 6:
                    _b.sent();
                    return [4 /*yield*/, Promise.all(allPromises)];
                case 7:
                    _b.sent();
                    throw error_1;
                case 8: return [2 /*return*/];
            }
        });
    }); };
}
function withAxiomNextEdgeFunction(handler) {
    var _this = this;
    return function (req, ev) { return __awaiter(_this, void 0, void 0, function () {
        var report, logger, axiomRequest, res, error_2;
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    report = {
                        startTime: new Date().getTime(),
                        ip: req.ip,
                        region: (_a = req.geo) === null || _a === void 0 ? void 0 : _a.region,
                        host: req.nextUrl.host,
                        method: req.method,
                        path: req.nextUrl.pathname,
                        scheme: req.nextUrl.protocol.replace(':', ''),
                        userAgent: req.headers.get('user-agent'),
                    };
                    logger = new logger_1.Logger({}, report, false, 'edge');
                    axiomRequest = req;
                    axiomRequest.log = logger;
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, handler(axiomRequest, ev)];
                case 2:
                    res = _b.sent();
                    if (res) {
                        logger.attachResponseStatus(res.status);
                    }
                    ev.waitUntil(logger.flush());
                    logEdgeReport(report);
                    return [2 /*return*/, res];
                case 3:
                    error_2 = _b.sent();
                    logger.error('Error in edge function', { error: error_2 });
                    logger.attachResponseStatus(500);
                    ev.waitUntil(logger.flush());
                    logEdgeReport(report);
                    throw error_2;
                case 4: return [2 /*return*/];
            }
        });
    }); };
}
function logEdgeReport(report) {
    console.log("AXIOM_EDGE_REPORT::".concat(JSON.stringify(report)));
}
function isNextConfig(param) {
    return typeof param == 'object';
}
function isApiHandler(param) {
    var isFunction = typeof param == 'function';
    return isFunction && typeof globalThis.EdgeRuntime === 'undefined';
}
// withAxiom can be called either with NextConfig, which will add proxy rewrites
// to improve deliverability of Web-Vitals and logs, or with NextApiRequest or
// NextMiddleware which will automatically log exceptions and flush logs.
function withAxiom(param) {
    if (isNextConfig(param)) {
        return withAxiomNextConfig(param);
    }
    else if (isApiHandler(param)) {
        return withAxiomNextApiHandler(param);
    }
    else {
        return withAxiomNextEdgeFunction(param);
    }
}
exports.withAxiom = withAxiom;
var getHeaderOrDefault = function (req, headerName, defaultValue) {
    return req.headers[headerName] ? req.headers[headerName] : defaultValue;
};
//# sourceMappingURL=withAxiom.js.map