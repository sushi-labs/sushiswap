{"version":3,"file":"aggregationFns.js","sources":["../../src/aggregationFns.ts"],"sourcesContent":["import { AggregationFn } from './features/Grouping'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce(\n    (sum: number, next: unknown) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId)\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n"],"names":["sum","columnId","_leafRows","childRows","reduce","next","min","forEach","row","value","getValue","undefined","max","extent","mean","leafRows","count","median","length","Math","unique","Array","from","Set","map","d","values","uniqueCount","size","_columnId","aggregationFns"],"mappings":"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"}