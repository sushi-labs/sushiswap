{"version":3,"file":"Visibility.js","sources":["../../../src/features/Visibility.ts"],"sourcesContent":["import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport type VisibilityTableState = {\n  columnVisibility: VisibilityState\n}\n\nexport type VisibilityOptions = {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport type VisibilityDefaultOptions = {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport type VisibilityInstance<TData extends RowData> = {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport type VisibilityColumnDef = {\n  enableHiding?: boolean\n}\n\nexport type VisibilityRow<TData extends RowData> = {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport type VisibilityColumn = {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n"],"names":["Visibility","getInitialState","state","columnVisibility","getDefaultOptions","table","onColumnVisibilityChange","makeStateUpdater","createColumn","column","toggleVisibility","value","getCanHide","setColumnVisibility","old","id","getIsVisible","getState","columnDef","enableHiding","options","getToggleVisibilityHandler","e","target","checked","createRow","row","_getAllVisibleCells","memo","getAllCells","cells","filter","cell","key","process","env","NODE_ENV","debug","debugAll","debugRows","getVisibleCells","getLeftVisibleCells","getCenterVisibleCells","getRightVisibleCells","left","center","right","createTable","makeVisibleColumnsMethod","getColumns","d","map","join","columns","debugColumns","getVisibleFlatColumns","getAllFlatColumns","getVisibleLeafColumns","getAllLeafColumns","getLeftVisibleLeafColumns","getLeftLeafColumns","getRightVisibleLeafColumns","getRightLeafColumns","getCenterVisibleLeafColumns","getCenterLeafColumns","updater","resetColumnVisibility","defaultState","initialState","toggleAllColumnsVisible","getIsAllColumnsVisible","reduce","obj","some","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler"],"mappings":"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"}