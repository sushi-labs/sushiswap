import Common from "@ethereumjs/common";
import { BoundExperimentalHardhatNetworkMessageTraceHook } from "../../../../types";
import { HardhatNode } from "../node";
import { ModulesLogger } from "./logger";
export declare class EthModule {
    private readonly _common;
    private readonly _node;
    private readonly _throwOnTransactionFailures;
    private readonly _throwOnCallFailures;
    private readonly _logger;
    private readonly _experimentalHardhatNetworkMessageTraceHooks;
    constructor(_common: Common, _node: HardhatNode, _throwOnTransactionFailures: boolean, _throwOnCallFailures: boolean, _logger: ModulesLogger, _experimentalHardhatNetworkMessageTraceHooks?: BoundExperimentalHardhatNetworkMessageTraceHook[]);
    processRequest(method: string, params?: any[]): Promise<any>;
    private _accountsParams;
    private _accountsAction;
    private _blockNumberParams;
    private _blockNumberAction;
    private _callParams;
    private _callAction;
    private _chainIdParams;
    private _chainIdAction;
    private _coinbaseParams;
    private _coinbaseAction;
    private _estimateGasParams;
    private _estimateGasAction;
    private _gasPriceParams;
    private _gasPriceAction;
    private _getBalanceParams;
    private _getBalanceAction;
    private _getBlockByHashParams;
    private _getBlockByHashAction;
    private _getBlockByNumberParams;
    private _getBlockByNumberAction;
    private _getBlockTransactionCountByHashParams;
    private _getBlockTransactionCountByHashAction;
    private _getBlockTransactionCountByNumberParams;
    private _getBlockTransactionCountByNumberAction;
    private _getCodeParams;
    private _getCodeAction;
    private _getFilterChangesParams;
    private _getFilterChangesAction;
    private _getFilterLogsParams;
    private _getFilterLogsAction;
    private _getLogsParams;
    private _rpcFilterRequestToGetLogsParams;
    private _getLogsAction;
    private _getStorageAtParams;
    private _getStorageAtAction;
    private _getTransactionByBlockHashAndIndexParams;
    private _getTransactionByBlockHashAndIndexAction;
    private _getTransactionByBlockNumberAndIndexParams;
    private _getTransactionByBlockNumberAndIndexAction;
    private _getTransactionByHashParams;
    private _getTransactionByHashAction;
    private _getTransactionCountParams;
    private _getTransactionCountAction;
    private _getTransactionReceiptParams;
    private _getTransactionReceiptAction;
    private _miningParams;
    private _miningAction;
    private _newBlockFilterParams;
    private _newBlockFilterAction;
    private _newFilterParams;
    private _newFilterAction;
    private _newPendingTransactionParams;
    private _newPendingTransactionAction;
    private _pendingTransactionsParams;
    private _pendingTransactionsAction;
    private _sendRawTransactionParams;
    private _sendRawTransactionAction;
    private _sendTransactionParams;
    private _sendTransactionAction;
    private _signParams;
    private _signAction;
    private _signTypedDataV4Params;
    private _signTypedDataV4Action;
    private _subscribeParams;
    private _subscribeAction;
    private _syncingParams;
    private _syncingAction;
    private _uninstallFilterParams;
    private _uninstallFilterAction;
    private _unsubscribeParams;
    private _unsubscribeAction;
    private _feeHistoryParams;
    private _feeHistoryAction;
    private _rpcCallRequestToNodeCallParams;
    private _rpcTransactionRequestToNodeTransactionParams;
    private _rpcAccessListToNodeAccessList;
    private _resolveOldBlockTag;
    private _resolveNewBlockTag;
    private _normalizeOldBlockTagForFilterRequest;
    private _newBlockTagToString;
    private _extractNormalizedLogTopics;
    private _extractLogAddresses;
    private _getDefaultCallFrom;
    private _sendTransactionAndReturnHash;
    /**
     * Returns the trace of the sent tx
     */
    private _handleMineBlockResults;
    private _logSingleTransaction;
    private _logBlock;
    private _getTransactionResultAndIndex;
    private _runHardhatNetworkMessageTraceHooks;
    private _validateTransactionAndCallRequest;
    private _validateEip155HardforkRequirement;
    private _validateRawTransactionHardforkRequirements;
}
//# sourceMappingURL=eth.d.ts.map