{"version":3,"file":"use-event.dev.js","sources":["../../src/index.tsx"],"sourcesContent":["import * as React from 'react'\n\nfunction useEvent<\n  T extends Window = Window,\n  K extends keyof WindowEventMap = keyof WindowEventMap\n>(\n  target: Window | null,\n  type: K,\n  listener: WindowEventListener<K>,\n  cleanup?: (...args: any[]) => void\n): void\nfunction useEvent<\n  T extends Document = Document,\n  K extends keyof DocumentEventMap = keyof DocumentEventMap\n>(\n  target: Document | null,\n  type: K,\n  listener: DocumentEventListener<K>,\n  cleanup?: (...args: any[]) => void\n): void\nfunction useEvent<\n  T extends HTMLElement = HTMLElement,\n  K extends keyof HTMLElementEventMap = keyof HTMLElementEventMap\n>(\n  target: React.RefObject<T> | T | null,\n  type: K,\n  listener: ElementEventListener<K>,\n  cleanup?: (...args: any[]) => void\n): void\nfunction useEvent(target: any, type: any, listener: any, cleanup: any): void {\n  const storedListener = React.useRef(listener)\n  const storedCleanup = React.useRef(cleanup)\n\n  React.useEffect(() => {\n    storedListener.current = listener\n    storedCleanup.current = cleanup\n  })\n\n  React.useEffect(() => {\n    const targetEl = target && 'current' in target ? target.current : target\n    if (!targetEl) return\n\n    let didUnsubscribe = 0\n    function listener(this: any, ...args: any[]) {\n      if (didUnsubscribe) return\n      storedListener.current.apply(this, args)\n    }\n\n    targetEl.addEventListener(type, listener)\n    const cleanup = storedCleanup.current\n\n    return () => {\n      didUnsubscribe = 1\n      targetEl.removeEventListener(type, listener)\n      cleanup && cleanup()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [target, type])\n}\n\nexport type ElementEventListener<\n  K extends keyof HTMLElementEventMap = keyof HTMLElementEventMap\n> = (this: HTMLElement, ev: HTMLElementEventMap[K]) => any\n\nexport type DocumentEventListener<\n  K extends keyof DocumentEventMap = keyof DocumentEventMap\n> = (this: Document, ev: DocumentEventMap[K]) => any\n\nexport type WindowEventListener<\n  K extends keyof WindowEventMap = keyof WindowEventMap\n> = (this: Document, ev: WindowEventMap[K]) => any\n\nexport default useEvent\n"],"names":["useEvent","target","type","listener","cleanup","storedListener","React","storedCleanup","current","targetEl","didUnsubscribe","args","apply","addEventListener","removeEventListener"],"mappings":";;;;;;EA6BA,SAASA,QAAT,CAAkBC,MAAlB,EAA+BC,IAA/B,EAA0CC,QAA1C,EAAyDC,OAAzD,EAA6E;EAC3E,MAAMC,cAAc,GAAGC,YAAA,CAAaH,QAAb,CAAvB;EACA,MAAMI,aAAa,GAAGD,YAAA,CAAaF,OAAb,CAAtB;EAEAE,EAAAA,eAAA,CAAgB,YAAM;EACpBD,IAAAA,cAAc,CAACG,OAAf,GAAyBL,QAAzB;EACAI,IAAAA,aAAa,CAACC,OAAd,GAAwBJ,OAAxB;EACD,GAHD;EAKAE,EAAAA,eAAA,CAAgB,YAAM;EACpB,QAAMG,QAAQ,GAAGR,MAAM,IAAI,aAAaA,MAAvB,GAAgCA,MAAM,CAACO,OAAvC,GAAiDP,MAAlE;EACA,QAAI,CAACQ,QAAL,EAAe;EAEf,QAAIC,cAAc,GAAG,CAArB;;EACA,aAASP,QAAT,GAA6C;EAC3C,UAAIO,cAAJ,EAAoB;;EADuB,wCAAbC,IAAa;EAAbA,QAAAA,IAAa;EAAA;;EAE3CN,MAAAA,cAAc,CAACG,OAAf,CAAuBI,KAAvB,CAA6B,IAA7B,EAAmCD,IAAnC;EACD;;EAEDF,IAAAA,QAAQ,CAACI,gBAAT,CAA0BX,IAA1B,EAAgCC,QAAhC;EACA,QAAMC,OAAO,GAAGG,aAAa,CAACC,OAA9B;EAEA,WAAO,YAAM;EACXE,MAAAA,cAAc,GAAG,CAAjB;EACAD,MAAAA,QAAQ,CAACK,mBAAT,CAA6BZ,IAA7B,EAAmCC,QAAnC;EACAC,MAAAA,OAAO,IAAIA,OAAO,EAAlB;EACD,KAJD,CAboB;EAmBrB,GAnBD,EAmBG,CAACH,MAAD,EAASC,IAAT,CAnBH;EAoBD;;;;;;;;"}