{"version":3,"file":"column.js","sources":["../../../src/core/column.ts"],"sourcesContent":["import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  ColumnDefTemplate,\n  RowData,\n  ColumnMeta,\n} from '../types'\nimport { DeepKeys, IsKnown, memo, UnionToIntersection } from '../utils'\nimport { CellContext } from './cell'\nimport { HeaderContext } from './headers'\n\nexport type CoreColumnDefBase<TData extends RowData, TValue> = {\n  columns?: ColumnDef<TData, unknown>[]\n  header?: ColumnDefTemplate<HeaderContext<TData, TValue>>\n  footer?: ColumnDefTemplate<HeaderContext<TData, TValue>>\n  cell?: ColumnDefTemplate<CellContext<TData, TValue>>\n  meta?: ColumnMeta<TData, TValue>\n}\n\nexport type CoreColumnDefDisplay<\n  TData extends RowData,\n  TValue\n> = CoreColumnDefBase<TData, TValue> & {\n  id: string\n}\n\nexport type CoreColumnDefDisplayWithStringHeader<\n  TData extends RowData,\n  TValue\n> = CoreColumnDefBase<TData, TValue> & {\n  header: string\n  id?: string\n}\n\nexport type CoreColumnDefAccessorFn<\n  TData extends RowData,\n  TValue\n> = CoreColumnDefBase<TData, TValue> & {\n  accessorFn: AccessorFn<TData, TValue>\n  id: string\n}\n\nexport type CoreColumnDefAccessorKey<\n  TData extends RowData,\n  TValue\n> = CoreColumnDefBase<TData, TValue> & {\n  accessorKey: DeepKeys<TData>\n  id?: string\n}\n\nexport type CoreColumnDef<TData extends RowData, TValue> =\n  | CoreColumnDefDisplay<TData, TValue>\n  | CoreColumnDefDisplayWithStringHeader<TData, TValue>\n  | CoreColumnDefAccessorFn<TData, TValue>\n  | CoreColumnDefAccessorKey<TData, TValue>\n\nexport type CoreColumnDefResolved<\n  TData extends RowData,\n  TValue = unknown\n> = Partial<UnionToIntersection<CoreColumnDef<TData, TValue>>> & {\n  accessorKey?: string\n}\n\nexport type CoreColumn<TData extends RowData, TValue> = {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n) {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as CoreColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result[key]\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n"],"names":["createColumn","table","columnDef","depth","parent","defaultColumn","_getDefaultColumnDef","resolvedColumnDef","accessorKey","id","replace","undefined","header","accessorFn","includes","originalRow","result","key","split","process","env","NODE_ENV","Error","column","String","columns","getFlatColumns","memo","flatMap","d","debug","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","length","leafColumns","_features","reduce","obj","feature","Object","assign"],"mappings":"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"}