import{appendErrors as r}from"react-hook-form";import{validateFieldsNatively as s,toNestError as e}from"@hookform/resolvers";const o=(s,e)=>{const o={};for(;s.length;){const a=s[0],{code:t,message:n,path:i}=a,c=i.join(".");if(!o[c])if("unionErrors"in a){const r=a.unionErrors[0].errors[0];o[c]={message:r.message,type:r.code}}else o[c]={message:n,type:t};if("unionErrors"in a&&a.unionErrors.forEach(r=>r.errors.forEach(r=>s.push(r))),e){const s=o[c].types,n=s&&s[a.code];o[c]=r(c,e,o,t,n?[].concat(n,a.message):a.message)}s.shift()}return o},a=(r,a,t={})=>async(n,i,c)=>{try{const e=await r["sync"===t.mode?"parse":"parseAsync"](n,a);return c.shouldUseNativeValidation&&s({},c),{errors:{},values:t.rawValues?n:e}}catch(r){return{values:{},errors:r.isEmpty?{}:e(o(r.errors,!c.shouldUseNativeValidation&&"all"===c.criteriaMode),c)}}};export{a as zodResolver};
//# sourceMappingURL=zod.modern.js.map
