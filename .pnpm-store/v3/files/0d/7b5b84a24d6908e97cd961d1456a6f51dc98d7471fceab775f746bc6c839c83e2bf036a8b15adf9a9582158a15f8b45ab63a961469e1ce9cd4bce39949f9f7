/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface RebasingMockInterface extends utils.Interface {
  functions: {
    "reset()": FunctionFragment;
    "set(uint256,uint256)": FunctionFragment;
    "toBase(uint256)": FunctionFragment;
    "toElastic(uint256)": FunctionFragment;
    "total()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "reset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toBase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toElastic",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "total", values?: undefined): string;

  decodeFunctionResult(functionFragment: "reset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toBase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toElastic", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "total", data: BytesLike): Result;

  events: {};
}

export interface RebasingMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RebasingMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    reset(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set(
      elastic: BigNumberish,
      base: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toBase(
      elastic: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { base: BigNumber }>;

    toElastic(
      base: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { elastic: BigNumber }>;

    total(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { elastic: BigNumber; base: BigNumber }
    >;
  };

  reset(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set(
    elastic: BigNumberish,
    base: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toBase(elastic: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  toElastic(base: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  total(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { elastic: BigNumber; base: BigNumber }>;

  callStatic: {
    reset(overrides?: CallOverrides): Promise<void>;

    set(
      elastic: BigNumberish,
      base: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    toBase(
      elastic: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toElastic(
      base: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    total(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { elastic: BigNumber; base: BigNumber }
    >;
  };

  filters: {};

  estimateGas: {
    reset(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set(
      elastic: BigNumberish,
      base: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toBase(
      elastic: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toElastic(
      base: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    total(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    reset(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set(
      elastic: BigNumberish,
      base: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toBase(
      elastic: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toElastic(
      base: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    total(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
