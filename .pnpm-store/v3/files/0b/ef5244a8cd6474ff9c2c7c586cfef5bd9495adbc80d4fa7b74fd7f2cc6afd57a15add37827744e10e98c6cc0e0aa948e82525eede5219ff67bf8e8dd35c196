/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MulticallMock, MulticallMockInterface } from "../MulticallMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "functionThatReturnsTuple",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "a",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "b",
            type: "uint256",
          },
        ],
        internalType: "struct MulticallMock.Tuple",
        name: "tuple",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "error",
        type: "string",
      },
    ],
    name: "functionThatRevertsWithError",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "functionThatRevertsWithoutError",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "paid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pays",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "returnSender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506107b9806100206000396000f3fe6080604052600436106100705760003560e01c80633b16a6a31161004e5780633b16a6a3146100d55780635170a9d014610134578063ac9650d81461014f578063f3e222971461016f57600080fd5b8063127e33ab14610075578063295b4e171461008c57806334621235146100b5575b600080fd5b34801561008157600080fd5b5061008a600080fd5b005b34801561009857600080fd5b506100a260005481565b6040519081526020015b60405180910390f35b3480156100c157600080fd5b5061008a6100d03660046103f7565b610177565b3480156100e157600080fd5b506101196100f0366004610477565b604080518082018252600080825260209182015281518083019092529181529081019190915290565b604080518251815260209283015192810192909252016100ac565b34801561014057600080fd5b506040513381526020016100ac565b61016261015d366004610499565b6101b4565b6040516100ac9190610588565b61008a61031b565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ab9190610608565b60405180910390fd5b60608167ffffffffffffffff8111156101cf576101cf610333565b60405190808252806020026020018201604052801561020257816020015b60608152602001906001900390816101ed5790505b50905060005b82811015610314576000803086868581811061022657610226610622565b90506020028101906102389190610651565b6040516102469291906106bd565b600060405180830381855af49150503d8060008114610281576040519150601f19603f3d011682016040523d82523d6000602084013e610286565b606091505b5091509150816102ec5760448151101561029f57600080fd5b600481019050808060200190518101906102b991906106cd565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ab9190610608565b808484815181106102ff576102ff610622565b60209081029190910101525050600101610208565b5092915050565b3460008082825461032c9190610744565b9091555050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156103a9576103a9610333565b604052919050565b600067ffffffffffffffff8211156103cb576103cb610333565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60006020828403121561040957600080fd5b813567ffffffffffffffff81111561042057600080fd5b8201601f8101841361043157600080fd5b803561044461043f826103b1565b610362565b81815285602083850101111561045957600080fd5b81602084016020830137600091810160200191909152949350505050565b6000806040838503121561048a57600080fd5b50508035926020909101359150565b600080602083850312156104ac57600080fd5b823567ffffffffffffffff808211156104c457600080fd5b818501915085601f8301126104d857600080fd5b8135818111156104e757600080fd5b8660208260051b85010111156104fc57600080fd5b60209290920196919550909350505050565b60005b83811015610529578181015183820152602001610511565b83811115610538576000848401525b50505050565b6000815180845261055681602086016020860161050e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156105fb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526105e985835161053e565b945092850192908501906001016105af565b5092979650505050505050565b60208152600061061b602083018461053e565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261068657600080fd5b83018035915067ffffffffffffffff8211156106a157600080fd5b6020019150368190038213156106b657600080fd5b9250929050565b8183823760009101908152919050565b6000602082840312156106df57600080fd5b815167ffffffffffffffff8111156106f657600080fd5b8201601f8101841361070757600080fd5b805161071561043f826103b1565b81815285602083850101111561072a57600080fd5b61073b82602083016020860161050e565b95945050505050565b6000821982111561077e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50019056fea2646970667358221220b3dd02c9982ed66669fb816352e6cdc038b81664cbc45d667b011efa8617bfa764736f6c634300080a0033";

type MulticallMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MulticallMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MulticallMock__factory extends ContractFactory {
  constructor(...args: MulticallMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MulticallMock> {
    return super.deploy(overrides || {}) as Promise<MulticallMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MulticallMock {
    return super.attach(address) as MulticallMock;
  }
  connect(signer: Signer): MulticallMock__factory {
    return super.connect(signer) as MulticallMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MulticallMockInterface {
    return new utils.Interface(_abi) as MulticallMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MulticallMock {
    return new Contract(address, _abi, signerOrProvider) as MulticallMock;
  }
}
