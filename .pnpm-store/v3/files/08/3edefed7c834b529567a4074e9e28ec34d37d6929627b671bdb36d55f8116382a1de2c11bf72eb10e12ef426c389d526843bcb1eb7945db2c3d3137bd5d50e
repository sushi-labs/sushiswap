{"version":3,"file":"jsbi.mjs","sources":["../tsc-out/jsbi.mjs"],"sourcesContent":["// Copyright 2018 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the “License”);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// <https://apache.org/licenses/LICENSE-2.0>.\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an “AS IS” BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nclass JSBI extends Array {\n    constructor(length, sign) {\n        super(length);\n        this.sign = sign;\n        // Explicitly set the prototype as per\n        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, JSBI.prototype);\n        if (length > JSBI.__kMaxLength) {\n            throw new RangeError('Maximum BigInt size exceeded');\n        }\n    }\n    static BigInt(arg) {\n        if (typeof arg === 'number') {\n            if (arg === 0)\n                return JSBI.__zero();\n            if (JSBI.__isOneDigitInt(arg)) {\n                if (arg < 0) {\n                    return JSBI.__oneDigit(-arg, true);\n                }\n                return JSBI.__oneDigit(arg, false);\n            }\n            if (!Number.isFinite(arg) || Math.floor(arg) !== arg) {\n                throw new RangeError('The number ' + arg + ' cannot be converted to ' +\n                    'BigInt because it is not an integer');\n            }\n            return JSBI.__fromDouble(arg);\n        }\n        else if (typeof arg === 'string') {\n            const result = JSBI.__fromString(arg);\n            if (result === null) {\n                throw new SyntaxError('Cannot convert ' + arg + ' to a BigInt');\n            }\n            return result;\n        }\n        else if (typeof arg === 'boolean') {\n            if (arg === true) {\n                return JSBI.__oneDigit(1, false);\n            }\n            return JSBI.__zero();\n        }\n        else if (typeof arg === 'object') {\n            if (arg.constructor === JSBI)\n                return arg;\n            const primitive = JSBI.__toPrimitive(arg);\n            return JSBI.BigInt(primitive);\n        }\n        throw new TypeError('Cannot convert ' + arg + ' to a BigInt');\n    }\n    toDebugString() {\n        const result = ['BigInt['];\n        for (const digit of this) {\n            result.push((digit ? (digit >>> 0).toString(16) : digit) + ', ');\n        }\n        result.push(']');\n        return result.join('');\n    }\n    toString(radix = 10) {\n        if (radix < 2 || radix > 36) {\n            throw new RangeError('toString() radix argument must be between 2 and 36');\n        }\n        if (this.length === 0)\n            return '0';\n        if ((radix & (radix - 1)) === 0) {\n            return JSBI.__toStringBasePowerOfTwo(this, radix);\n        }\n        return JSBI.__toStringGeneric(this, radix, false);\n    }\n    valueOf() {\n        throw new Error('Convert JSBI instances to native numbers using `toNumber`.');\n    }\n    // Equivalent of \"Number(my_bigint)\" in the native implementation.\n    // TODO: add more tests\n    static toNumber(x) {\n        const xLength = x.length;\n        if (xLength === 0)\n            return 0;\n        if (xLength === 1) {\n            const value = x.__unsignedDigit(0);\n            return x.sign ? -value : value;\n        }\n        const xMsd = x.__digit(xLength - 1);\n        const msdLeadingZeros = JSBI.__clz30(xMsd);\n        const xBitLength = xLength * 30 - msdLeadingZeros;\n        if (xBitLength > 1024)\n            return x.sign ? -Infinity : Infinity;\n        let exponent = xBitLength - 1;\n        let currentDigit = xMsd;\n        let digitIndex = xLength - 1;\n        const shift = msdLeadingZeros + 3;\n        let mantissaHigh = (shift === 32) ? 0 : currentDigit << shift;\n        mantissaHigh >>>= 12;\n        const mantissaHighBitsUnset = shift - 12;\n        let mantissaLow = (shift >= 12) ? 0 : (currentDigit << (20 + shift));\n        let mantissaLowBitsUnset = 20 + shift;\n        if (mantissaHighBitsUnset > 0 && digitIndex > 0) {\n            digitIndex--;\n            currentDigit = x.__digit(digitIndex);\n            mantissaHigh |= (currentDigit >>> (30 - mantissaHighBitsUnset));\n            mantissaLow = currentDigit << mantissaHighBitsUnset + 2;\n            mantissaLowBitsUnset = mantissaHighBitsUnset + 2;\n        }\n        while (mantissaLowBitsUnset > 0 && digitIndex > 0) {\n            digitIndex--;\n            currentDigit = x.__digit(digitIndex);\n            if (mantissaLowBitsUnset >= 30) {\n                mantissaLow |= (currentDigit << (mantissaLowBitsUnset - 30));\n            }\n            else {\n                mantissaLow |= (currentDigit >>> (30 - mantissaLowBitsUnset));\n            }\n            mantissaLowBitsUnset -= 30;\n        }\n        const rounding = JSBI.__decideRounding(x, mantissaLowBitsUnset, digitIndex, currentDigit);\n        if (rounding === 1 || (rounding === 0 && (mantissaLow & 1) === 1)) {\n            mantissaLow = (mantissaLow + 1) >>> 0;\n            if (mantissaLow === 0) {\n                // Incrementing mantissaLow overflowed.\n                mantissaHigh++;\n                if ((mantissaHigh >>> 20) !== 0) {\n                    // Incrementing mantissaHigh overflowed.\n                    mantissaHigh = 0;\n                    exponent++;\n                    if (exponent > 1023) {\n                        // Incrementing the exponent overflowed.\n                        return x.sign ? -Infinity : Infinity;\n                    }\n                }\n            }\n        }\n        const signBit = x.sign ? (1 << 31) : 0;\n        exponent = (exponent + 0x3FF) << 20;\n        JSBI.__kBitConversionInts[1] = signBit | exponent | mantissaHigh;\n        JSBI.__kBitConversionInts[0] = mantissaLow;\n        return JSBI.__kBitConversionDouble[0];\n    }\n    // Operations.\n    static unaryMinus(x) {\n        if (x.length === 0)\n            return x;\n        const result = x.__copy();\n        result.sign = !x.sign;\n        return result;\n    }\n    static bitwiseNot(x) {\n        if (x.sign) {\n            // ~(-x) == ~(~(x-1)) == x-1\n            return JSBI.__absoluteSubOne(x).__trim();\n        }\n        // ~x == -x-1 == -(x+1)\n        return JSBI.__absoluteAddOne(x, true);\n    }\n    static exponentiate(x, y) {\n        if (y.sign) {\n            throw new RangeError('Exponent must be positive');\n        }\n        if (y.length === 0) {\n            return JSBI.__oneDigit(1, false);\n        }\n        if (x.length === 0)\n            return x;\n        if (x.length === 1 && x.__digit(0) === 1) {\n            // (-1) ** even_number == 1.\n            if (x.sign && (y.__digit(0) & 1) === 0) {\n                return JSBI.unaryMinus(x);\n            }\n            // (-1) ** odd_number == -1, 1 ** anything == 1.\n            return x;\n        }\n        // For all bases >= 2, very large exponents would lead to unrepresentable\n        // results.\n        if (y.length > 1)\n            throw new RangeError('BigInt too big');\n        let expValue = y.__unsignedDigit(0);\n        if (expValue === 1)\n            return x;\n        if (expValue >= JSBI.__kMaxLengthBits) {\n            throw new RangeError('BigInt too big');\n        }\n        if (x.length === 1 && x.__digit(0) === 2) {\n            // Fast path for 2^n.\n            const neededDigits = 1 + ((expValue / 30) | 0);\n            const sign = x.sign && ((expValue & 1) !== 0);\n            const result = new JSBI(neededDigits, sign);\n            result.__initializeDigits();\n            // All bits are zero. Now set the n-th bit.\n            const msd = 1 << (expValue % 30);\n            result.__setDigit(neededDigits - 1, msd);\n            return result;\n        }\n        let result = null;\n        let runningSquare = x;\n        // This implicitly sets the result's sign correctly.\n        if ((expValue & 1) !== 0)\n            result = x;\n        expValue >>= 1;\n        for (; expValue !== 0; expValue >>= 1) {\n            runningSquare = JSBI.multiply(runningSquare, runningSquare);\n            if ((expValue & 1) !== 0) {\n                if (result === null) {\n                    result = runningSquare;\n                }\n                else {\n                    result = JSBI.multiply(result, runningSquare);\n                }\n            }\n        }\n        // TODO see if there's a way for tsc to infer this will always happen?\n        return result;\n    }\n    static multiply(x, y) {\n        if (x.length === 0)\n            return x;\n        if (y.length === 0)\n            return y;\n        let resultLength = x.length + y.length;\n        if (x.__clzmsd() + y.__clzmsd() >= 30) {\n            resultLength--;\n        }\n        const result = new JSBI(resultLength, x.sign !== y.sign);\n        result.__initializeDigits();\n        for (let i = 0; i < x.length; i++) {\n            JSBI.__multiplyAccumulate(y, x.__digit(i), result, i);\n        }\n        return result.__trim();\n    }\n    static divide(x, y) {\n        if (y.length === 0)\n            throw new RangeError('Division by zero');\n        if (JSBI.__absoluteCompare(x, y) < 0)\n            return JSBI.__zero();\n        const resultSign = x.sign !== y.sign;\n        const divisor = y.__unsignedDigit(0);\n        let quotient;\n        if (y.length === 1 && divisor <= 0x7FFF) {\n            if (divisor === 1) {\n                return resultSign === x.sign ? x : JSBI.unaryMinus(x);\n            }\n            quotient = JSBI.__absoluteDivSmall(x, divisor, null);\n        }\n        else {\n            quotient = JSBI.__absoluteDivLarge(x, y, true, false);\n        }\n        quotient.sign = resultSign;\n        return quotient.__trim();\n    }\n    static remainder(x, y) {\n        if (y.length === 0)\n            throw new RangeError('Division by zero');\n        if (JSBI.__absoluteCompare(x, y) < 0)\n            return x;\n        const divisor = y.__unsignedDigit(0);\n        if (y.length === 1 && divisor <= 0x7FFF) {\n            if (divisor === 1)\n                return JSBI.__zero();\n            const remainderDigit = JSBI.__absoluteModSmall(x, divisor);\n            if (remainderDigit === 0)\n                return JSBI.__zero();\n            return JSBI.__oneDigit(remainderDigit, x.sign);\n        }\n        const remainder = JSBI.__absoluteDivLarge(x, y, false, true);\n        remainder.sign = x.sign;\n        return remainder.__trim();\n    }\n    static add(x, y) {\n        const sign = x.sign;\n        if (sign === y.sign) {\n            // x + y == x + y\n            // -x + -y == -(x + y)\n            return JSBI.__absoluteAdd(x, y, sign);\n        }\n        // x + -y == x - y == -(y - x)\n        // -x + y == y - x == -(x - y)\n        if (JSBI.__absoluteCompare(x, y) >= 0) {\n            return JSBI.__absoluteSub(x, y, sign);\n        }\n        return JSBI.__absoluteSub(y, x, !sign);\n    }\n    static subtract(x, y) {\n        const sign = x.sign;\n        if (sign !== y.sign) {\n            // x - (-y) == x + y\n            // (-x) - y == -(x + y)\n            return JSBI.__absoluteAdd(x, y, sign);\n        }\n        // x - y == -(y - x)\n        // (-x) - (-y) == y - x == -(x - y)\n        if (JSBI.__absoluteCompare(x, y) >= 0) {\n            return JSBI.__absoluteSub(x, y, sign);\n        }\n        return JSBI.__absoluteSub(y, x, !sign);\n    }\n    static leftShift(x, y) {\n        if (y.length === 0 || x.length === 0)\n            return x;\n        if (y.sign)\n            return JSBI.__rightShiftByAbsolute(x, y);\n        return JSBI.__leftShiftByAbsolute(x, y);\n    }\n    static signedRightShift(x, y) {\n        if (y.length === 0 || x.length === 0)\n            return x;\n        if (y.sign)\n            return JSBI.__leftShiftByAbsolute(x, y);\n        return JSBI.__rightShiftByAbsolute(x, y);\n    }\n    static unsignedRightShift() {\n        throw new TypeError('BigInts have no unsigned right shift; use >> instead');\n    }\n    static lessThan(x, y) {\n        return JSBI.__compareToBigInt(x, y) < 0;\n    }\n    static lessThanOrEqual(x, y) {\n        return JSBI.__compareToBigInt(x, y) <= 0;\n    }\n    static greaterThan(x, y) {\n        return JSBI.__compareToBigInt(x, y) > 0;\n    }\n    static greaterThanOrEqual(x, y) {\n        return JSBI.__compareToBigInt(x, y) >= 0;\n    }\n    static equal(x, y) {\n        if (x.sign !== y.sign)\n            return false;\n        if (x.length !== y.length)\n            return false;\n        for (let i = 0; i < x.length; i++) {\n            if (x.__digit(i) !== y.__digit(i))\n                return false;\n        }\n        return true;\n    }\n    static notEqual(x, y) {\n        return !JSBI.equal(x, y);\n    }\n    static bitwiseAnd(x, y) {\n        if (!x.sign && !y.sign) {\n            return JSBI.__absoluteAnd(x, y).__trim();\n        }\n        else if (x.sign && y.sign) {\n            const resultLength = Math.max(x.length, y.length) + 1;\n            // (-x) & (-y) == ~(x-1) & ~(y-1) == ~((x-1) | (y-1))\n            // == -(((x-1) | (y-1)) + 1)\n            let result = JSBI.__absoluteSubOne(x, resultLength);\n            const y1 = JSBI.__absoluteSubOne(y);\n            result = JSBI.__absoluteOr(result, y1, result);\n            return JSBI.__absoluteAddOne(result, true, result).__trim();\n        }\n        // Assume that x is the positive BigInt.\n        if (x.sign) {\n            [x, y] = [y, x];\n        }\n        // x & (-y) == x & ~(y-1) == x &~ (y-1)\n        return JSBI.__absoluteAndNot(x, JSBI.__absoluteSubOne(y)).__trim();\n    }\n    static bitwiseXor(x, y) {\n        if (!x.sign && !y.sign) {\n            return JSBI.__absoluteXor(x, y).__trim();\n        }\n        else if (x.sign && y.sign) {\n            // (-x) ^ (-y) == ~(x-1) ^ ~(y-1) == (x-1) ^ (y-1)\n            const resultLength = Math.max(x.length, y.length);\n            const result = JSBI.__absoluteSubOne(x, resultLength);\n            const y1 = JSBI.__absoluteSubOne(y);\n            return JSBI.__absoluteXor(result, y1, result).__trim();\n        }\n        const resultLength = Math.max(x.length, y.length) + 1;\n        // Assume that x is the positive BigInt.\n        if (x.sign) {\n            [x, y] = [y, x];\n        }\n        // x ^ (-y) == x ^ ~(y-1) == ~(x ^ (y-1)) == -((x ^ (y-1)) + 1)\n        let result = JSBI.__absoluteSubOne(y, resultLength);\n        result = JSBI.__absoluteXor(result, x, result);\n        return JSBI.__absoluteAddOne(result, true, result).__trim();\n    }\n    static bitwiseOr(x, y) {\n        const resultLength = Math.max(x.length, y.length);\n        if (!x.sign && !y.sign) {\n            return JSBI.__absoluteOr(x, y).__trim();\n        }\n        else if (x.sign && y.sign) {\n            // (-x) | (-y) == ~(x-1) | ~(y-1) == ~((x-1) & (y-1))\n            // == -(((x-1) & (y-1)) + 1)\n            let result = JSBI.__absoluteSubOne(x, resultLength);\n            const y1 = JSBI.__absoluteSubOne(y);\n            result = JSBI.__absoluteAnd(result, y1, result);\n            return JSBI.__absoluteAddOne(result, true, result).__trim();\n        }\n        // Assume that x is the positive BigInt.\n        if (x.sign) {\n            [x, y] = [y, x];\n        }\n        // x | (-y) == x | ~(y-1) == ~((y-1) &~ x) == -(((y-1) ~& x) + 1)\n        let result = JSBI.__absoluteSubOne(y, resultLength);\n        result = JSBI.__absoluteAndNot(result, x, result);\n        return JSBI.__absoluteAddOne(result, true, result).__trim();\n    }\n    static asIntN(n, x) {\n        if (x.length === 0)\n            return x;\n        n = Math.floor(n);\n        if (n < 0) {\n            throw new RangeError('Invalid value: not (convertible to) a safe integer');\n        }\n        if (n === 0)\n            return JSBI.__zero();\n        // If {x} has less than {n} bits, return it directly.\n        if (n >= JSBI.__kMaxLengthBits)\n            return x;\n        const neededLength = ((n + 29) / 30) | 0;\n        if (x.length < neededLength)\n            return x;\n        const topDigit = x.__unsignedDigit(neededLength - 1);\n        const compareDigit = 1 << ((n - 1) % 30);\n        if (x.length === neededLength && topDigit < compareDigit)\n            return x;\n        // Otherwise truncate and simulate two's complement.\n        const hasBit = (topDigit & compareDigit) === compareDigit;\n        if (!hasBit)\n            return JSBI.__truncateToNBits(n, x);\n        if (!x.sign)\n            return JSBI.__truncateAndSubFromPowerOfTwo(n, x, true);\n        if ((topDigit & (compareDigit - 1)) === 0) {\n            for (let i = neededLength - 2; i >= 0; i--) {\n                if (x.__digit(i) !== 0) {\n                    return JSBI.__truncateAndSubFromPowerOfTwo(n, x, false);\n                }\n            }\n            if (x.length === neededLength && topDigit === compareDigit)\n                return x;\n            return JSBI.__truncateToNBits(n, x);\n        }\n        return JSBI.__truncateAndSubFromPowerOfTwo(n, x, false);\n    }\n    static asUintN(n, x) {\n        if (x.length === 0)\n            return x;\n        n = Math.floor(n);\n        if (n < 0) {\n            throw new RangeError('Invalid value: not (convertible to) a safe integer');\n        }\n        if (n === 0)\n            return JSBI.__zero();\n        // If {x} is negative, simulate two's complement representation.\n        if (x.sign) {\n            if (n > JSBI.__kMaxLengthBits) {\n                throw new RangeError('BigInt too big');\n            }\n            return JSBI.__truncateAndSubFromPowerOfTwo(n, x, false);\n        }\n        // If {x} is positive and has up to {n} bits, return it directly.\n        if (n >= JSBI.__kMaxLengthBits)\n            return x;\n        const neededLength = ((n + 29) / 30) | 0;\n        if (x.length < neededLength)\n            return x;\n        const bitsInTopDigit = n % 30;\n        if (x.length == neededLength) {\n            if (bitsInTopDigit === 0)\n                return x;\n            const topDigit = x.__digit(neededLength - 1);\n            if ((topDigit >>> bitsInTopDigit) === 0)\n                return x;\n        }\n        // Otherwise, truncate.\n        return JSBI.__truncateToNBits(n, x);\n    }\n    // Operators.\n    static ADD(x, y) {\n        x = JSBI.__toPrimitive(x);\n        y = JSBI.__toPrimitive(y);\n        if (typeof x === 'string') {\n            if (typeof y !== 'string')\n                y = y.toString();\n            return x + y;\n        }\n        if (typeof y === 'string') {\n            return x.toString() + y;\n        }\n        x = JSBI.__toNumeric(x);\n        y = JSBI.__toNumeric(y);\n        if (JSBI.__isBigInt(x) && JSBI.__isBigInt(y)) {\n            return JSBI.add(x, y);\n        }\n        if (typeof x === 'number' && typeof y === 'number') {\n            return x + y;\n        }\n        throw new TypeError('Cannot mix BigInt and other types, use explicit conversions');\n    }\n    static LT(x, y) {\n        return JSBI.__compare(x, y, 0);\n    }\n    static LE(x, y) {\n        return JSBI.__compare(x, y, 1);\n    }\n    static GT(x, y) {\n        return JSBI.__compare(x, y, 2);\n    }\n    static GE(x, y) {\n        return JSBI.__compare(x, y, 3);\n    }\n    static EQ(x, y) {\n        while (true) {\n            if (JSBI.__isBigInt(x)) {\n                if (JSBI.__isBigInt(y))\n                    return JSBI.equal(x, y);\n                return JSBI.EQ(y, x);\n            }\n            else if (typeof x === 'number') {\n                if (JSBI.__isBigInt(y))\n                    return JSBI.__equalToNumber(y, x);\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'string') {\n                if (JSBI.__isBigInt(y)) {\n                    x = JSBI.__fromString(x);\n                    if (x === null)\n                        return false;\n                    return JSBI.equal(x, y);\n                }\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'boolean') {\n                if (JSBI.__isBigInt(y))\n                    return JSBI.__equalToNumber(y, +x);\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'symbol') {\n                if (JSBI.__isBigInt(y))\n                    return false;\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'object') {\n                if (typeof y === 'object' && y.constructor !== JSBI)\n                    return x == y;\n                x = JSBI.__toPrimitive(x);\n            }\n            else {\n                return x == y;\n            }\n        }\n    }\n    static NE(x, y) {\n        return !JSBI.EQ(x, y);\n    }\n    // DataView-related functionality.\n    static DataViewGetBigInt64(dataview, byteOffset, littleEndian = false) {\n        return JSBI.asIntN(64, JSBI.DataViewGetBigUint64(dataview, byteOffset, littleEndian));\n    }\n    static DataViewGetBigUint64(dataview, byteOffset, littleEndian = false) {\n        const [h, l] = littleEndian ? [4, 0] : [0, 4];\n        const high = dataview.getUint32(byteOffset + h, littleEndian);\n        const low = dataview.getUint32(byteOffset + l, littleEndian);\n        const result = new JSBI(3, false);\n        result.__setDigit(0, low & 0x3FFFFFFF);\n        result.__setDigit(1, ((high & 0xFFFFFFF) << 2) | (low >>> 30));\n        result.__setDigit(2, high >>> 28);\n        return result.__trim();\n    }\n    static DataViewSetBigInt64(dataview, byteOffset, value, littleEndian = false) {\n        JSBI.DataViewSetBigUint64(dataview, byteOffset, value, littleEndian);\n    }\n    static DataViewSetBigUint64(dataview, byteOffset, value, littleEndian = false) {\n        value = JSBI.asUintN(64, value);\n        let high = 0;\n        let low = 0;\n        if (value.length > 0) {\n            low = value.__digit(0);\n            if (value.length > 1) {\n                const d1 = value.__digit(1);\n                low = low | d1 << 30;\n                high = d1 >>> 2;\n                if (value.length > 2) {\n                    high = high | (value.__digit(2) << 28);\n                }\n            }\n        }\n        const [h, l] = littleEndian ? [4, 0] : [0, 4];\n        dataview.setUint32(byteOffset + h, high, littleEndian);\n        dataview.setUint32(byteOffset + l, low, littleEndian);\n    }\n    // Helpers.\n    static __zero() {\n        return new JSBI(0, false);\n    }\n    static __oneDigit(value, sign) {\n        const result = new JSBI(1, sign);\n        result.__setDigit(0, value);\n        return result;\n    }\n    __copy() {\n        const result = new JSBI(this.length, this.sign);\n        for (let i = 0; i < this.length; i++) {\n            result[i] = this[i];\n        }\n        return result;\n    }\n    __trim() {\n        let newLength = this.length;\n        let last = this[newLength - 1];\n        while (last === 0) {\n            newLength--;\n            last = this[newLength - 1];\n            this.pop();\n        }\n        if (newLength === 0)\n            this.sign = false;\n        return this;\n    }\n    __initializeDigits() {\n        for (let i = 0; i < this.length; i++) {\n            this[i] = 0;\n        }\n    }\n    static __decideRounding(x, mantissaBitsUnset, digitIndex, currentDigit) {\n        if (mantissaBitsUnset > 0)\n            return -1;\n        let topUnconsumedBit;\n        if (mantissaBitsUnset < 0) {\n            topUnconsumedBit = -mantissaBitsUnset - 1;\n        }\n        else {\n            // {currentDigit} fit the mantissa exactly; look at the next digit.\n            if (digitIndex === 0)\n                return -1;\n            digitIndex--;\n            currentDigit = x.__digit(digitIndex);\n            topUnconsumedBit = 29;\n        }\n        // If the most significant remaining bit is 0, round down.\n        let mask = 1 << topUnconsumedBit;\n        if ((currentDigit & mask) === 0)\n            return -1;\n        // If any other remaining bit is set, round up.\n        mask -= 1;\n        if ((currentDigit & mask) !== 0)\n            return 1;\n        while (digitIndex > 0) {\n            digitIndex--;\n            if (x.__digit(digitIndex) !== 0)\n                return 1;\n        }\n        return 0;\n    }\n    static __fromDouble(value) {\n        const sign = value < 0;\n        JSBI.__kBitConversionDouble[0] = value;\n        const rawExponent = (JSBI.__kBitConversionInts[1] >>> 20) & 0x7FF;\n        const exponent = rawExponent - 0x3FF;\n        const digits = ((exponent / 30) | 0) + 1;\n        const result = new JSBI(digits, sign);\n        const kHiddenBit = 0x00100000;\n        let mantissaHigh = (JSBI.__kBitConversionInts[1] & 0xFFFFF) | kHiddenBit;\n        let mantissaLow = JSBI.__kBitConversionInts[0];\n        const kMantissaHighTopBit = 20;\n        // 0-indexed position of most significant bit in most significant digit.\n        const msdTopBit = exponent % 30;\n        // Number of unused bits in the mantissa. We'll keep them shifted to the\n        // left (i.e. most significant part).\n        let remainingMantissaBits = 0;\n        // Next digit under construction.\n        let digit;\n        // First, build the MSD by shifting the mantissa appropriately.\n        if (msdTopBit < kMantissaHighTopBit) {\n            const shift = kMantissaHighTopBit - msdTopBit;\n            remainingMantissaBits = shift + 32;\n            digit = mantissaHigh >>> shift;\n            mantissaHigh = (mantissaHigh << (32 - shift)) | (mantissaLow >>> shift);\n            mantissaLow = mantissaLow << (32 - shift);\n        }\n        else if (msdTopBit === kMantissaHighTopBit) {\n            remainingMantissaBits = 32;\n            digit = mantissaHigh;\n            mantissaHigh = mantissaLow;\n            mantissaLow = 0;\n        }\n        else {\n            const shift = msdTopBit - kMantissaHighTopBit;\n            remainingMantissaBits = 32 - shift;\n            digit = (mantissaHigh << shift) | (mantissaLow >>> (32 - shift));\n            mantissaHigh = mantissaLow << shift;\n            mantissaLow = 0;\n        }\n        result.__setDigit(digits - 1, digit);\n        // Then fill in the rest of the digits.\n        for (let digitIndex = digits - 2; digitIndex >= 0; digitIndex--) {\n            if (remainingMantissaBits > 0) {\n                remainingMantissaBits -= 30;\n                digit = mantissaHigh >>> 2;\n                mantissaHigh = (mantissaHigh << 30) | (mantissaLow >>> 2);\n                mantissaLow = (mantissaLow << 30);\n            }\n            else {\n                digit = 0;\n            }\n            result.__setDigit(digitIndex, digit);\n        }\n        return result.__trim();\n    }\n    static __isWhitespace(c) {\n        if (c <= 0x0D && c >= 0x09)\n            return true;\n        if (c <= 0x9F)\n            return c === 0x20;\n        if (c <= 0x01FFFF) {\n            return c === 0xA0 || c === 0x1680;\n        }\n        if (c <= 0x02FFFF) {\n            c &= 0x01FFFF;\n            return c <= 0x0A || c === 0x28 || c === 0x29 || c === 0x2F ||\n                c === 0x5F || c === 0x1000;\n        }\n        return c === 0xFEFF;\n    }\n    static __fromString(string, radix = 0) {\n        let sign = 0;\n        let leadingZero = false;\n        const length = string.length;\n        let cursor = 0;\n        if (cursor === length)\n            return JSBI.__zero();\n        let current = string.charCodeAt(cursor);\n        // Skip whitespace.\n        while (JSBI.__isWhitespace(current)) {\n            if (++cursor === length)\n                return JSBI.__zero();\n            current = string.charCodeAt(cursor);\n        }\n        // Detect radix.\n        if (current === 0x2B) { // '+'\n            if (++cursor === length)\n                return null;\n            current = string.charCodeAt(cursor);\n            sign = 1;\n        }\n        else if (current === 0x2D) { // '-'\n            if (++cursor === length)\n                return null;\n            current = string.charCodeAt(cursor);\n            sign = -1;\n        }\n        if (radix === 0) {\n            radix = 10;\n            if (current === 0x30) { // '0'\n                if (++cursor === length)\n                    return JSBI.__zero();\n                current = string.charCodeAt(cursor);\n                if (current === 0x58 || current === 0x78) { // 'X' or 'x'\n                    radix = 16;\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else if (current === 0x4F || current === 0x6F) { // 'O' or 'o'\n                    radix = 8;\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else if (current === 0x42 || current === 0x62) { // 'B' or 'b'\n                    radix = 2;\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else {\n                    leadingZero = true;\n                }\n            }\n        }\n        else if (radix === 16) {\n            if (current === 0x30) { // '0'\n                // Allow \"0x\" prefix.\n                if (++cursor === length)\n                    return JSBI.__zero();\n                current = string.charCodeAt(cursor);\n                if (current === 0x58 || current === 0x78) { // 'X' or 'x'\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else {\n                    leadingZero = true;\n                }\n            }\n        }\n        if (sign !== 0 && radix !== 10)\n            return null;\n        // Skip leading zeros.\n        while (current === 0x30) {\n            leadingZero = true;\n            if (++cursor === length)\n                return JSBI.__zero();\n            current = string.charCodeAt(cursor);\n        }\n        // Allocate result.\n        const chars = length - cursor;\n        let bitsPerChar = JSBI.__kMaxBitsPerChar[radix];\n        let roundup = JSBI.__kBitsPerCharTableMultiplier - 1;\n        if (chars > (1 << 30) / bitsPerChar)\n            return null;\n        const bitsMin = (bitsPerChar * chars + roundup) >>> JSBI.__kBitsPerCharTableShift;\n        const resultLength = ((bitsMin + 29) / 30) | 0;\n        const result = new JSBI(resultLength, false);\n        // Parse.\n        const limDigit = radix < 10 ? radix : 10;\n        const limAlpha = radix > 10 ? radix - 10 : 0;\n        if ((radix & (radix - 1)) === 0) {\n            // Power-of-two radix.\n            bitsPerChar >>= JSBI.__kBitsPerCharTableShift;\n            const parts = [];\n            const partsBits = [];\n            let done = false;\n            do {\n                let part = 0;\n                let bits = 0;\n                while (true) {\n                    let d;\n                    if (((current - 48) >>> 0) < limDigit) {\n                        d = current - 48;\n                    }\n                    else if ((((current | 32) - 97) >>> 0) < limAlpha) {\n                        d = (current | 32) - 87;\n                    }\n                    else {\n                        done = true;\n                        break;\n                    }\n                    bits += bitsPerChar;\n                    part = (part << bitsPerChar) | d;\n                    if (++cursor === length) {\n                        done = true;\n                        break;\n                    }\n                    current = string.charCodeAt(cursor);\n                    if (bits + bitsPerChar > 30)\n                        break;\n                }\n                parts.push(part);\n                partsBits.push(bits);\n            } while (!done);\n            JSBI.__fillFromParts(result, parts, partsBits);\n        }\n        else {\n            result.__initializeDigits();\n            let done = false;\n            let charsSoFar = 0;\n            do {\n                let part = 0;\n                let multiplier = 1;\n                while (true) {\n                    let d;\n                    if (((current - 48) >>> 0) < limDigit) {\n                        d = current - 48;\n                    }\n                    else if ((((current | 32) - 97) >>> 0) < limAlpha) {\n                        d = (current | 32) - 87;\n                    }\n                    else {\n                        done = true;\n                        break;\n                    }\n                    const m = multiplier * radix;\n                    if (m > 0x3FFFFFFF)\n                        break;\n                    multiplier = m;\n                    part = part * radix + d;\n                    charsSoFar++;\n                    if (++cursor === length) {\n                        done = true;\n                        break;\n                    }\n                    current = string.charCodeAt(cursor);\n                }\n                roundup = JSBI.__kBitsPerCharTableMultiplier * 30 - 1;\n                const digitsSoFar = (((bitsPerChar * charsSoFar + roundup) >>>\n                    JSBI.__kBitsPerCharTableShift) / 30) | 0;\n                result.__inplaceMultiplyAdd(multiplier, part, digitsSoFar);\n            } while (!done);\n        }\n        if (cursor !== length) {\n            if (!JSBI.__isWhitespace(current))\n                return null;\n            for (cursor++; cursor < length; cursor++) {\n                current = string.charCodeAt(cursor);\n                if (!JSBI.__isWhitespace(current))\n                    return null;\n            }\n        }\n        // Get result.\n        result.sign = (sign === -1);\n        return result.__trim();\n    }\n    static __fillFromParts(result, parts, partsBits) {\n        let digitIndex = 0;\n        let digit = 0;\n        let bitsInDigit = 0;\n        for (let i = parts.length - 1; i >= 0; i--) {\n            const part = parts[i];\n            const partBits = partsBits[i];\n            digit |= (part << bitsInDigit);\n            bitsInDigit += partBits;\n            if (bitsInDigit === 30) {\n                result.__setDigit(digitIndex++, digit);\n                bitsInDigit = 0;\n                digit = 0;\n            }\n            else if (bitsInDigit > 30) {\n                result.__setDigit(digitIndex++, digit & 0x3FFFFFFF);\n                bitsInDigit -= 30;\n                digit = part >>> (partBits - bitsInDigit);\n            }\n        }\n        if (digit !== 0) {\n            if (digitIndex >= result.length)\n                throw new Error('implementation bug');\n            result.__setDigit(digitIndex++, digit);\n        }\n        for (; digitIndex < result.length; digitIndex++) {\n            result.__setDigit(digitIndex, 0);\n        }\n    }\n    static __toStringBasePowerOfTwo(x, radix) {\n        const length = x.length;\n        let bits = radix - 1;\n        bits = ((bits >>> 1) & 0x55) + (bits & 0x55);\n        bits = ((bits >>> 2) & 0x33) + (bits & 0x33);\n        bits = ((bits >>> 4) & 0x0F) + (bits & 0x0F);\n        const bitsPerChar = bits;\n        const charMask = radix - 1;\n        const msd = x.__digit(length - 1);\n        const msdLeadingZeros = JSBI.__clz30(msd);\n        const bitLength = length * 30 - msdLeadingZeros;\n        let charsRequired = ((bitLength + bitsPerChar - 1) / bitsPerChar) | 0;\n        if (x.sign)\n            charsRequired++;\n        if (charsRequired > (1 << 28))\n            throw new Error('string too long');\n        const result = new Array(charsRequired);\n        let pos = charsRequired - 1;\n        let digit = 0;\n        let availableBits = 0;\n        for (let i = 0; i < length - 1; i++) {\n            const newDigit = x.__digit(i);\n            const current = (digit | (newDigit << availableBits)) & charMask;\n            result[pos--] = JSBI.__kConversionChars[current];\n            const consumedBits = bitsPerChar - availableBits;\n            digit = newDigit >>> consumedBits;\n            availableBits = 30 - consumedBits;\n            while (availableBits >= bitsPerChar) {\n                result[pos--] = JSBI.__kConversionChars[digit & charMask];\n                digit >>>= bitsPerChar;\n                availableBits -= bitsPerChar;\n            }\n        }\n        const current = (digit | (msd << availableBits)) & charMask;\n        result[pos--] = JSBI.__kConversionChars[current];\n        digit = msd >>> (bitsPerChar - availableBits);\n        while (digit !== 0) {\n            result[pos--] = JSBI.__kConversionChars[digit & charMask];\n            digit >>>= bitsPerChar;\n        }\n        if (x.sign)\n            result[pos--] = '-';\n        if (pos !== -1)\n            throw new Error('implementation bug');\n        return result.join('');\n    }\n    static __toStringGeneric(x, radix, isRecursiveCall) {\n        const length = x.length;\n        if (length === 0)\n            return '';\n        if (length === 1) {\n            let result = x.__unsignedDigit(0).toString(radix);\n            if (isRecursiveCall === false && x.sign) {\n                result = '-' + result;\n            }\n            return result;\n        }\n        const bitLength = length * 30 - JSBI.__clz30(x.__digit(length - 1));\n        const maxBitsPerChar = JSBI.__kMaxBitsPerChar[radix];\n        const minBitsPerChar = maxBitsPerChar - 1;\n        let charsRequired = bitLength * JSBI.__kBitsPerCharTableMultiplier;\n        charsRequired += minBitsPerChar - 1;\n        charsRequired = (charsRequired / minBitsPerChar) | 0;\n        const secondHalfChars = (charsRequired + 1) >> 1;\n        // Divide-and-conquer: split by a power of {radix} that's approximately\n        // the square root of {x}, then recurse.\n        const conqueror = JSBI.exponentiate(JSBI.__oneDigit(radix, false), JSBI.__oneDigit(secondHalfChars, false));\n        let quotient;\n        let secondHalf;\n        const divisor = conqueror.__unsignedDigit(0);\n        if (conqueror.length === 1 && divisor <= 0x7FFF) {\n            quotient = new JSBI(x.length, false);\n            quotient.__initializeDigits();\n            let remainder = 0;\n            for (let i = x.length * 2 - 1; i >= 0; i--) {\n                const input = (remainder << 15) | x.__halfDigit(i);\n                quotient.__setHalfDigit(i, (input / divisor) | 0);\n                remainder = (input % divisor) | 0;\n            }\n            secondHalf = remainder.toString(radix);\n        }\n        else {\n            const divisionResult = JSBI.__absoluteDivLarge(x, conqueror, true, true);\n            quotient = divisionResult.quotient;\n            const remainder = divisionResult.remainder.__trim();\n            secondHalf = JSBI.__toStringGeneric(remainder, radix, true);\n        }\n        quotient.__trim();\n        let firstHalf = JSBI.__toStringGeneric(quotient, radix, true);\n        while (secondHalf.length < secondHalfChars) {\n            secondHalf = '0' + secondHalf;\n        }\n        if (isRecursiveCall === false && x.sign) {\n            firstHalf = '-' + firstHalf;\n        }\n        return firstHalf + secondHalf;\n    }\n    static __unequalSign(leftNegative) {\n        return leftNegative ? -1 : 1;\n    }\n    static __absoluteGreater(bothNegative) {\n        return bothNegative ? -1 : 1;\n    }\n    static __absoluteLess(bothNegative) {\n        return bothNegative ? 1 : -1;\n    }\n    static __compareToBigInt(x, y) {\n        const xSign = x.sign;\n        if (xSign !== y.sign)\n            return JSBI.__unequalSign(xSign);\n        const result = JSBI.__absoluteCompare(x, y);\n        if (result > 0)\n            return JSBI.__absoluteGreater(xSign);\n        if (result < 0)\n            return JSBI.__absoluteLess(xSign);\n        return 0;\n    }\n    static __compareToNumber(x, y) {\n        if (JSBI.__isOneDigitInt(y)) {\n            const xSign = x.sign;\n            const ySign = (y < 0);\n            if (xSign !== ySign)\n                return JSBI.__unequalSign(xSign);\n            if (x.length === 0) {\n                if (ySign)\n                    throw new Error('implementation bug');\n                return y === 0 ? 0 : -1;\n            }\n            // Any multi-digit BigInt is bigger than an int32.\n            if (x.length > 1)\n                return JSBI.__absoluteGreater(xSign);\n            const yAbs = Math.abs(y);\n            const xDigit = x.__unsignedDigit(0);\n            if (xDigit > yAbs)\n                return JSBI.__absoluteGreater(xSign);\n            if (xDigit < yAbs)\n                return JSBI.__absoluteLess(xSign);\n            return 0;\n        }\n        return JSBI.__compareToDouble(x, y);\n    }\n    static __compareToDouble(x, y) {\n        if (y !== y)\n            return y; // NaN.\n        if (y === Infinity)\n            return -1;\n        if (y === -Infinity)\n            return 1;\n        const xSign = x.sign;\n        const ySign = (y < 0);\n        if (xSign !== ySign)\n            return JSBI.__unequalSign(xSign);\n        if (y === 0) {\n            throw new Error('implementation bug: should be handled elsewhere');\n        }\n        if (x.length === 0)\n            return -1;\n        JSBI.__kBitConversionDouble[0] = y;\n        const rawExponent = (JSBI.__kBitConversionInts[1] >>> 20) & 0x7FF;\n        if (rawExponent === 0x7FF) {\n            throw new Error('implementation bug: handled elsewhere');\n        }\n        const exponent = rawExponent - 0x3FF;\n        if (exponent < 0) {\n            // The absolute value of y is less than 1. Only 0n has an absolute\n            // value smaller than that, but we've already covered that case.\n            return JSBI.__absoluteGreater(xSign);\n        }\n        const xLength = x.length;\n        let xMsd = x.__digit(xLength - 1);\n        const msdLeadingZeros = JSBI.__clz30(xMsd);\n        const xBitLength = xLength * 30 - msdLeadingZeros;\n        const yBitLength = exponent + 1;\n        if (xBitLength < yBitLength)\n            return JSBI.__absoluteLess(xSign);\n        if (xBitLength > yBitLength)\n            return JSBI.__absoluteGreater(xSign);\n        // Same sign, same bit length. Shift mantissa to align with x and compare\n        // bit for bit.\n        const kHiddenBit = 0x00100000;\n        let mantissaHigh = (JSBI.__kBitConversionInts[1] & 0xFFFFF) | kHiddenBit;\n        let mantissaLow = JSBI.__kBitConversionInts[0];\n        const kMantissaHighTopBit = 20;\n        const msdTopBit = 29 - msdLeadingZeros;\n        if (msdTopBit !== (((xBitLength - 1) % 30) | 0)) {\n            throw new Error('implementation bug');\n        }\n        let compareMantissa; // Shifted chunk of mantissa.\n        let remainingMantissaBits = 0;\n        // First, compare most significant digit against beginning of mantissa.\n        if (msdTopBit < kMantissaHighTopBit) {\n            const shift = kMantissaHighTopBit - msdTopBit;\n            remainingMantissaBits = shift + 32;\n            compareMantissa = mantissaHigh >>> shift;\n            mantissaHigh = (mantissaHigh << (32 - shift)) | (mantissaLow >>> shift);\n            mantissaLow = mantissaLow << (32 - shift);\n        }\n        else if (msdTopBit === kMantissaHighTopBit) {\n            remainingMantissaBits = 32;\n            compareMantissa = mantissaHigh;\n            mantissaHigh = mantissaLow;\n            mantissaLow = 0;\n        }\n        else {\n            const shift = msdTopBit - kMantissaHighTopBit;\n            remainingMantissaBits = 32 - shift;\n            compareMantissa =\n                (mantissaHigh << shift) | (mantissaLow >>> (32 - shift));\n            mantissaHigh = mantissaLow << shift;\n            mantissaLow = 0;\n        }\n        xMsd = xMsd >>> 0;\n        compareMantissa = compareMantissa >>> 0;\n        if (xMsd > compareMantissa)\n            return JSBI.__absoluteGreater(xSign);\n        if (xMsd < compareMantissa)\n            return JSBI.__absoluteLess(xSign);\n        // Then, compare additional digits against remaining mantissa bits.\n        for (let digitIndex = xLength - 2; digitIndex >= 0; digitIndex--) {\n            if (remainingMantissaBits > 0) {\n                remainingMantissaBits -= 30;\n                compareMantissa = mantissaHigh >>> 2;\n                mantissaHigh = (mantissaHigh << 30) | (mantissaLow >>> 2);\n                mantissaLow = (mantissaLow << 30);\n            }\n            else {\n                compareMantissa = 0;\n            }\n            const digit = x.__unsignedDigit(digitIndex);\n            if (digit > compareMantissa)\n                return JSBI.__absoluteGreater(xSign);\n            if (digit < compareMantissa)\n                return JSBI.__absoluteLess(xSign);\n        }\n        // Integer parts are equal; check whether {y} has a fractional part.\n        if (mantissaHigh !== 0 || mantissaLow !== 0) {\n            if (remainingMantissaBits === 0)\n                throw new Error('implementation bug');\n            return JSBI.__absoluteLess(xSign);\n        }\n        return 0;\n    }\n    static __equalToNumber(x, y) {\n        if (JSBI.__isOneDigitInt(y)) {\n            if (y === 0)\n                return x.length === 0;\n            // Any multi-digit BigInt is bigger than an int32.\n            return (x.length === 1) && (x.sign === (y < 0)) &&\n                (x.__unsignedDigit(0) === Math.abs(y));\n        }\n        return JSBI.__compareToDouble(x, y) === 0;\n    }\n    // Comparison operations, chosen such that \"op ^ 2\" reverses direction:\n    // 0 - lessThan\n    // 1 - lessThanOrEqual\n    // 2 - greaterThan\n    // 3 - greaterThanOrEqual\n    static __comparisonResultToBool(result, op) {\n        switch (op) {\n            case 0: return result < 0;\n            case 1: return result <= 0;\n            case 2: return result > 0;\n            case 3: return result >= 0;\n        }\n    }\n    static __compare(x, y, op) {\n        x = JSBI.__toPrimitive(x);\n        y = JSBI.__toPrimitive(y);\n        if (typeof x === 'string' && typeof y === 'string') {\n            switch (op) {\n                case 0: return x < y;\n                case 1: return x <= y;\n                case 2: return x > y;\n                case 3: return x >= y;\n            }\n        }\n        if (JSBI.__isBigInt(x) && typeof y === 'string') {\n            y = JSBI.__fromString(y);\n            if (y === null)\n                return false;\n            return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(x, y), op);\n        }\n        if (typeof x === 'string' && JSBI.__isBigInt(y)) {\n            x = JSBI.__fromString(x);\n            if (x === null)\n                return false;\n            return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(x, y), op);\n        }\n        x = JSBI.__toNumeric(x);\n        y = JSBI.__toNumeric(y);\n        if (JSBI.__isBigInt(x)) {\n            if (JSBI.__isBigInt(y)) {\n                return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(x, y), op);\n            }\n            if (typeof y !== 'number')\n                throw new Error('implementation bug');\n            return JSBI.__comparisonResultToBool(JSBI.__compareToNumber(x, y), op);\n        }\n        if (typeof x !== 'number')\n            throw new Error('implementation bug');\n        if (JSBI.__isBigInt(y)) {\n            // Note that \"op ^ 2\" reverses the op's direction.\n            return JSBI.__comparisonResultToBool(JSBI.__compareToNumber(y, x), (op ^ 2));\n        }\n        if (typeof y !== 'number')\n            throw new Error('implementation bug');\n        switch (op) {\n            case 0: return x < y;\n            case 1: return x <= y;\n            case 2: return x > y;\n            case 3: return x >= y;\n        }\n    }\n    __clzmsd() {\n        return JSBI.__clz30(this.__digit(this.length - 1));\n    }\n    static __absoluteAdd(x, y, resultSign) {\n        if (x.length < y.length)\n            return JSBI.__absoluteAdd(y, x, resultSign);\n        if (x.length === 0)\n            return x;\n        if (y.length === 0)\n            return x.sign === resultSign ? x : JSBI.unaryMinus(x);\n        let resultLength = x.length;\n        if (x.__clzmsd() === 0 || (y.length === x.length && y.__clzmsd() === 0)) {\n            resultLength++;\n        }\n        const result = new JSBI(resultLength, resultSign);\n        let carry = 0;\n        let i = 0;\n        for (; i < y.length; i++) {\n            const r = x.__digit(i) + y.__digit(i) + carry;\n            carry = r >>> 30;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        for (; i < x.length; i++) {\n            const r = x.__digit(i) + carry;\n            carry = r >>> 30;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (i < result.length) {\n            result.__setDigit(i, carry);\n        }\n        return result.__trim();\n    }\n    static __absoluteSub(x, y, resultSign) {\n        if (x.length === 0)\n            return x;\n        if (y.length === 0)\n            return x.sign === resultSign ? x : JSBI.unaryMinus(x);\n        const result = new JSBI(x.length, resultSign);\n        let borrow = 0;\n        let i = 0;\n        for (; i < y.length; i++) {\n            const r = x.__digit(i) - y.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        for (; i < x.length; i++) {\n            const r = x.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        return result.__trim();\n    }\n    static __absoluteAddOne(x, sign, result = null) {\n        const inputLength = x.length;\n        if (result === null) {\n            result = new JSBI(inputLength, sign);\n        }\n        else {\n            result.sign = sign;\n        }\n        let carry = 1;\n        for (let i = 0; i < inputLength; i++) {\n            const r = x.__digit(i) + carry;\n            carry = r >>> 30;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (carry !== 0) {\n            result.__setDigitGrow(inputLength, 1);\n        }\n        return result;\n    }\n    static __absoluteSubOne(x, resultLength) {\n        const length = x.length;\n        resultLength = resultLength || length;\n        const result = new JSBI(resultLength, false);\n        let borrow = 1;\n        for (let i = 0; i < length; i++) {\n            const r = x.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (borrow !== 0)\n            throw new Error('implementation bug');\n        for (let i = length; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteAnd(x, y, result = null) {\n        let xLength = x.length;\n        let yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n            const tmp = x;\n            const tmpLength = xLength;\n            x = y;\n            xLength = yLength;\n            y = tmp;\n            yLength = tmpLength;\n        }\n        let resultLength = numPairs;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) & y.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteAndNot(x, y, result = null) {\n        const xLength = x.length;\n        const yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n        }\n        let resultLength = xLength;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) & ~y.__digit(i));\n        }\n        for (; i < xLength; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteOr(x, y, result = null) {\n        let xLength = x.length;\n        let yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n            const tmp = x;\n            const tmpLength = xLength;\n            x = y;\n            xLength = yLength;\n            y = tmp;\n            yLength = tmpLength;\n        }\n        let resultLength = xLength;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) | y.__digit(i));\n        }\n        for (; i < xLength; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteXor(x, y, result = null) {\n        let xLength = x.length;\n        let yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n            const tmp = x;\n            const tmpLength = xLength;\n            x = y;\n            xLength = yLength;\n            y = tmp;\n            yLength = tmpLength;\n        }\n        let resultLength = xLength;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) ^ y.__digit(i));\n        }\n        for (; i < xLength; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteCompare(x, y) {\n        const diff = x.length - y.length;\n        if (diff !== 0)\n            return diff;\n        let i = x.length - 1;\n        while (i >= 0 && x.__digit(i) === y.__digit(i))\n            i--;\n        if (i < 0)\n            return 0;\n        return x.__unsignedDigit(i) > y.__unsignedDigit(i) ? 1 : -1;\n    }\n    static __multiplyAccumulate(multiplicand, multiplier, accumulator, accumulatorIndex) {\n        if (multiplier === 0)\n            return;\n        const m2Low = multiplier & 0x7FFF;\n        const m2High = multiplier >>> 15;\n        let carry = 0;\n        let high = 0;\n        for (let i = 0; i < multiplicand.length; i++, accumulatorIndex++) {\n            let acc = accumulator.__digit(accumulatorIndex);\n            const m1 = multiplicand.__digit(i);\n            const m1Low = m1 & 0x7FFF;\n            const m1High = m1 >>> 15;\n            const rLow = JSBI.__imul(m1Low, m2Low);\n            const rMid1 = JSBI.__imul(m1Low, m2High);\n            const rMid2 = JSBI.__imul(m1High, m2Low);\n            const rHigh = JSBI.__imul(m1High, m2High);\n            acc += high + rLow + carry;\n            carry = acc >>> 30;\n            acc &= 0x3FFFFFFF;\n            acc += ((rMid1 & 0x7FFF) << 15) + ((rMid2 & 0x7FFF) << 15);\n            carry += acc >>> 30;\n            high = rHigh + (rMid1 >>> 15) + (rMid2 >>> 15);\n            accumulator.__setDigit(accumulatorIndex, acc & 0x3FFFFFFF);\n        }\n        for (; carry !== 0 || high !== 0; accumulatorIndex++) {\n            let acc = accumulator.__digit(accumulatorIndex);\n            acc += carry + high;\n            high = 0;\n            carry = acc >>> 30;\n            accumulator.__setDigit(accumulatorIndex, acc & 0x3FFFFFFF);\n        }\n    }\n    static __internalMultiplyAdd(source, factor, summand, n, result) {\n        let carry = summand;\n        let high = 0;\n        for (let i = 0; i < n; i++) {\n            const digit = source.__digit(i);\n            const rx = JSBI.__imul(digit & 0x7FFF, factor);\n            const ry = JSBI.__imul(digit >>> 15, factor);\n            const r = rx + ((ry & 0x7FFF) << 15) + high + carry;\n            carry = r >>> 30;\n            high = ry >>> 15;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (result.length > n) {\n            result.__setDigit(n++, carry + high);\n            while (n < result.length) {\n                result.__setDigit(n++, 0);\n            }\n        }\n        else {\n            if (carry + high !== 0)\n                throw new Error('implementation bug');\n        }\n    }\n    __inplaceMultiplyAdd(multiplier, summand, length) {\n        if (length > this.length)\n            length = this.length;\n        const mLow = multiplier & 0x7FFF;\n        const mHigh = multiplier >>> 15;\n        let carry = 0;\n        let high = summand;\n        for (let i = 0; i < length; i++) {\n            const d = this.__digit(i);\n            const dLow = d & 0x7FFF;\n            const dHigh = d >>> 15;\n            const pLow = JSBI.__imul(dLow, mLow);\n            const pMid1 = JSBI.__imul(dLow, mHigh);\n            const pMid2 = JSBI.__imul(dHigh, mLow);\n            const pHigh = JSBI.__imul(dHigh, mHigh);\n            let result = high + pLow + carry;\n            carry = result >>> 30;\n            result &= 0x3FFFFFFF;\n            result += ((pMid1 & 0x7FFF) << 15) + ((pMid2 & 0x7FFF) << 15);\n            carry += result >>> 30;\n            high = pHigh + (pMid1 >>> 15) + (pMid2 >>> 15);\n            this.__setDigit(i, result & 0x3FFFFFFF);\n        }\n        if (carry !== 0 || high !== 0) {\n            throw new Error('implementation bug');\n        }\n    }\n    static __absoluteDivSmall(x, divisor, quotient = null) {\n        if (quotient === null)\n            quotient = new JSBI(x.length, false);\n        let remainder = 0;\n        for (let i = x.length * 2 - 1; i >= 0; i -= 2) {\n            let input = ((remainder << 15) | x.__halfDigit(i)) >>> 0;\n            const upperHalf = (input / divisor) | 0;\n            remainder = (input % divisor) | 0;\n            input = ((remainder << 15) | x.__halfDigit(i - 1)) >>> 0;\n            const lowerHalf = (input / divisor) | 0;\n            remainder = (input % divisor) | 0;\n            quotient.__setDigit(i >>> 1, (upperHalf << 15) | lowerHalf);\n        }\n        return quotient;\n    }\n    static __absoluteModSmall(x, divisor) {\n        let remainder = 0;\n        for (let i = x.length * 2 - 1; i >= 0; i--) {\n            const input = ((remainder << 15) | x.__halfDigit(i)) >>> 0;\n            remainder = (input % divisor) | 0;\n        }\n        return remainder;\n    }\n    static __absoluteDivLarge(dividend, divisor, wantQuotient, wantRemainder) {\n        const n = divisor.__halfDigitLength();\n        const n2 = divisor.length;\n        const m = dividend.__halfDigitLength() - n;\n        let q = null;\n        if (wantQuotient) {\n            q = new JSBI((m + 2) >>> 1, false);\n            q.__initializeDigits();\n        }\n        const qhatv = new JSBI((n + 2) >>> 1, false);\n        qhatv.__initializeDigits();\n        // D1.\n        const shift = JSBI.__clz15(divisor.__halfDigit(n - 1));\n        if (shift > 0) {\n            divisor = JSBI.__specialLeftShift(divisor, shift, 0 /* add no digits*/);\n        }\n        const u = JSBI.__specialLeftShift(dividend, shift, 1 /* add one digit */);\n        // D2.\n        const vn1 = divisor.__halfDigit(n - 1);\n        let halfDigitBuffer = 0;\n        for (let j = m; j >= 0; j--) {\n            // D3.\n            let qhat = 0x7FFF;\n            const ujn = u.__halfDigit(j + n);\n            if (ujn !== vn1) {\n                const input = ((ujn << 15) | u.__halfDigit(j + n - 1)) >>> 0;\n                qhat = (input / vn1) | 0;\n                let rhat = (input % vn1) | 0;\n                const vn2 = divisor.__halfDigit(n - 2);\n                const ujn2 = u.__halfDigit(j + n - 2);\n                while ((JSBI.__imul(qhat, vn2) >>> 0) > (((rhat << 16) | ujn2) >>> 0)) {\n                    qhat--;\n                    rhat += vn1;\n                    if (rhat > 0x7FFF)\n                        break;\n                }\n            }\n            // D4.\n            JSBI.__internalMultiplyAdd(divisor, qhat, 0, n2, qhatv);\n            let c = u.__inplaceSub(qhatv, j, n + 1);\n            if (c !== 0) {\n                c = u.__inplaceAdd(divisor, j, n);\n                u.__setHalfDigit(j + n, (u.__halfDigit(j + n) + c) & 0x7FFF);\n                qhat--;\n            }\n            if (wantQuotient) {\n                if (j & 1) {\n                    halfDigitBuffer = qhat << 15;\n                }\n                else {\n                    // TODO make this statically determinable\n                    q.__setDigit(j >>> 1, halfDigitBuffer | qhat);\n                }\n            }\n        }\n        if (wantRemainder) {\n            u.__inplaceRightShift(shift);\n            if (wantQuotient) {\n                return { quotient: q, remainder: u };\n            }\n            return u;\n        }\n        if (wantQuotient)\n            return q;\n        // TODO find a way to make this statically unreachable?\n        throw new Error('unreachable');\n    }\n    static __clz15(value) {\n        return JSBI.__clz30(value) - 15;\n    }\n    // TODO: work on full digits, like __inplaceSub?\n    __inplaceAdd(summand, startIndex, halfDigits) {\n        let carry = 0;\n        for (let i = 0; i < halfDigits; i++) {\n            const sum = this.__halfDigit(startIndex + i) +\n                summand.__halfDigit(i) +\n                carry;\n            carry = sum >>> 15;\n            this.__setHalfDigit(startIndex + i, sum & 0x7FFF);\n        }\n        return carry;\n    }\n    __inplaceSub(subtrahend, startIndex, halfDigits) {\n        const fullSteps = (halfDigits - 1) >>> 1;\n        let borrow = 0;\n        if (startIndex & 1) {\n            // this:   [..][..][..]\n            // subtr.:   [..][..]\n            startIndex >>= 1;\n            let current = this.__digit(startIndex);\n            let r0 = current & 0x7FFF;\n            let i = 0;\n            for (; i < fullSteps; i++) {\n                const sub = subtrahend.__digit(i);\n                const r15 = (current >>> 15) - (sub & 0x7FFF) - borrow;\n                borrow = (r15 >>> 15) & 1;\n                this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n                current = this.__digit(startIndex + i + 1);\n                r0 = (current & 0x7FFF) - (sub >>> 15) - borrow;\n                borrow = (r0 >>> 15) & 1;\n            }\n            // Unrolling the last iteration gives a 5% performance benefit!\n            const sub = subtrahend.__digit(i);\n            const r15 = (current >>> 15) - (sub & 0x7FFF) - borrow;\n            borrow = (r15 >>> 15) & 1;\n            this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n            const subTop = sub >>> 15;\n            if (startIndex + i + 1 >= this.length) {\n                throw new RangeError('out of bounds');\n            }\n            if ((halfDigits & 1) === 0) {\n                current = this.__digit(startIndex + i + 1);\n                r0 = (current & 0x7FFF) - subTop - borrow;\n                borrow = (r0 >>> 15) & 1;\n                this.__setDigit(startIndex + subtrahend.length, (current & 0x3FFF8000) | (r0 & 0x7FFF));\n            }\n        }\n        else {\n            startIndex >>= 1;\n            let i = 0;\n            for (; i < subtrahend.length - 1; i++) {\n                const current = this.__digit(startIndex + i);\n                const sub = subtrahend.__digit(i);\n                const r0 = (current & 0x7FFF) - (sub & 0x7FFF) - borrow;\n                borrow = (r0 >>> 15) & 1;\n                const r15 = (current >>> 15) - (sub >>> 15) - borrow;\n                borrow = (r15 >>> 15) & 1;\n                this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n            }\n            const current = this.__digit(startIndex + i);\n            const sub = subtrahend.__digit(i);\n            const r0 = (current & 0x7FFF) - (sub & 0x7FFF) - borrow;\n            borrow = (r0 >>> 15) & 1;\n            let r15 = 0;\n            if ((halfDigits & 1) === 0) {\n                r15 = (current >>> 15) - (sub >>> 15) - borrow;\n                borrow = (r15 >>> 15) & 1;\n            }\n            this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n        }\n        return borrow;\n    }\n    __inplaceRightShift(shift) {\n        if (shift === 0)\n            return;\n        let carry = this.__digit(0) >>> shift;\n        const last = this.length - 1;\n        for (let i = 0; i < last; i++) {\n            const d = this.__digit(i + 1);\n            this.__setDigit(i, ((d << (30 - shift)) & 0x3FFFFFFF) | carry);\n            carry = d >>> shift;\n        }\n        this.__setDigit(last, carry);\n    }\n    static __specialLeftShift(x, shift, addDigit) {\n        const n = x.length;\n        const resultLength = n + addDigit;\n        const result = new JSBI(resultLength, false);\n        if (shift === 0) {\n            for (let i = 0; i < n; i++)\n                result.__setDigit(i, x.__digit(i));\n            if (addDigit > 0)\n                result.__setDigit(n, 0);\n            return result;\n        }\n        let carry = 0;\n        for (let i = 0; i < n; i++) {\n            const d = x.__digit(i);\n            result.__setDigit(i, ((d << shift) & 0x3FFFFFFF) | carry);\n            carry = d >>> (30 - shift);\n        }\n        if (addDigit > 0) {\n            result.__setDigit(n, carry);\n        }\n        return result;\n    }\n    static __leftShiftByAbsolute(x, y) {\n        const shift = JSBI.__toShiftAmount(y);\n        if (shift < 0)\n            throw new RangeError('BigInt too big');\n        const digitShift = (shift / 30) | 0;\n        const bitsShift = shift % 30;\n        const length = x.length;\n        const grow = bitsShift !== 0 &&\n            (x.__digit(length - 1) >>> (30 - bitsShift)) !== 0;\n        const resultLength = length + digitShift + (grow ? 1 : 0);\n        const result = new JSBI(resultLength, x.sign);\n        if (bitsShift === 0) {\n            let i = 0;\n            for (; i < digitShift; i++)\n                result.__setDigit(i, 0);\n            for (; i < resultLength; i++) {\n                result.__setDigit(i, x.__digit(i - digitShift));\n            }\n        }\n        else {\n            let carry = 0;\n            for (let i = 0; i < digitShift; i++)\n                result.__setDigit(i, 0);\n            for (let i = 0; i < length; i++) {\n                const d = x.__digit(i);\n                result.__setDigit(i + digitShift, ((d << bitsShift) & 0x3FFFFFFF) | carry);\n                carry = d >>> (30 - bitsShift);\n            }\n            if (grow) {\n                result.__setDigit(length + digitShift, carry);\n            }\n            else {\n                if (carry !== 0)\n                    throw new Error('implementation bug');\n            }\n        }\n        return result.__trim();\n    }\n    static __rightShiftByAbsolute(x, y) {\n        const length = x.length;\n        const sign = x.sign;\n        const shift = JSBI.__toShiftAmount(y);\n        if (shift < 0)\n            return JSBI.__rightShiftByMaximum(sign);\n        const digitShift = (shift / 30) | 0;\n        const bitsShift = shift % 30;\n        let resultLength = length - digitShift;\n        if (resultLength <= 0)\n            return JSBI.__rightShiftByMaximum(sign);\n        // For negative numbers, round down if any bit was shifted out (so that\n        // e.g. -5n >> 1n == -3n and not -2n). Check now whether this will happen\n        // and whether itc an cause overflow into a new digit. If we allocate the\n        // result large enough up front, it avoids having to do grow it later.\n        let mustRoundDown = false;\n        if (sign) {\n            const mask = (1 << bitsShift) - 1;\n            if ((x.__digit(digitShift) & mask) !== 0) {\n                mustRoundDown = true;\n            }\n            else {\n                for (let i = 0; i < digitShift; i++) {\n                    if (x.__digit(i) !== 0) {\n                        mustRoundDown = true;\n                        break;\n                    }\n                }\n            }\n        }\n        // If bitsShift is non-zero, it frees up bits, preventing overflow.\n        if (mustRoundDown && bitsShift === 0) {\n            // Overflow cannot happen if the most significant digit has unset bits.\n            const msd = x.__digit(length - 1);\n            const roundingCanOverflow = ~msd === 0;\n            if (roundingCanOverflow)\n                resultLength++;\n        }\n        let result = new JSBI(resultLength, sign);\n        if (bitsShift === 0) {\n            // Zero out any overflow digit (see \"roundingCanOverflow\" above).\n            result.__setDigit(resultLength - 1, 0);\n            for (let i = digitShift; i < length; i++) {\n                result.__setDigit(i - digitShift, x.__digit(i));\n            }\n        }\n        else {\n            let carry = x.__digit(digitShift) >>> bitsShift;\n            const last = length - digitShift - 1;\n            for (let i = 0; i < last; i++) {\n                const d = x.__digit(i + digitShift + 1);\n                result.__setDigit(i, ((d << (30 - bitsShift)) & 0x3FFFFFFF) | carry);\n                carry = d >>> bitsShift;\n            }\n            result.__setDigit(last, carry);\n        }\n        if (mustRoundDown) {\n            // Since the result is negative, rounding down means adding one to its\n            // absolute value. This cannot overflow.\n            result = JSBI.__absoluteAddOne(result, true, result);\n        }\n        return result.__trim();\n    }\n    static __rightShiftByMaximum(sign) {\n        if (sign) {\n            return JSBI.__oneDigit(1, true);\n        }\n        return JSBI.__zero();\n    }\n    static __toShiftAmount(x) {\n        if (x.length > 1)\n            return -1;\n        const value = x.__unsignedDigit(0);\n        if (value > JSBI.__kMaxLengthBits)\n            return -1;\n        return value;\n    }\n    static __toPrimitive(obj, hint = 'default') {\n        if (typeof obj !== 'object')\n            return obj;\n        if (obj.constructor === JSBI)\n            return obj;\n        if (typeof Symbol !== 'undefined' &&\n            typeof Symbol.toPrimitive === 'symbol') {\n            const exoticToPrim = obj[Symbol.toPrimitive];\n            if (exoticToPrim) {\n                const primitive = exoticToPrim(hint);\n                if (typeof primitive !== 'object')\n                    return primitive;\n                throw new TypeError('Cannot convert object to primitive value');\n            }\n        }\n        const valueOf = obj.valueOf;\n        if (valueOf) {\n            const primitive = valueOf.call(obj);\n            if (typeof primitive !== 'object')\n                return primitive;\n        }\n        const toString = obj.toString;\n        if (toString) {\n            const primitive = toString.call(obj);\n            if (typeof primitive !== 'object')\n                return primitive;\n        }\n        throw new TypeError('Cannot convert object to primitive value');\n    }\n    static __toNumeric(value) {\n        if (JSBI.__isBigInt(value))\n            return value;\n        return +value;\n    }\n    static __isBigInt(value) {\n        return typeof value === 'object' && value !== null &&\n            value.constructor === JSBI;\n    }\n    static __truncateToNBits(n, x) {\n        const neededDigits = ((n + 29) / 30) | 0;\n        const result = new JSBI(neededDigits, x.sign);\n        const last = neededDigits - 1;\n        for (let i = 0; i < last; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        let msd = x.__digit(last);\n        if ((n % 30) !== 0) {\n            const drop = 32 - (n % 30);\n            msd = (msd << drop) >>> drop;\n        }\n        result.__setDigit(last, msd);\n        return result.__trim();\n    }\n    static __truncateAndSubFromPowerOfTwo(n, x, resultSign) {\n        const neededDigits = ((n + 29) / 30) | 0;\n        const result = new JSBI(neededDigits, resultSign);\n        let i = 0;\n        const last = neededDigits - 1;\n        let borrow = 0;\n        const limit = Math.min(last, x.length);\n        for (; i < limit; i++) {\n            const r = 0 - x.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        for (; i < last; i++) {\n            result.__setDigit(i, (-borrow & 0x3FFFFFFF) | 0);\n        }\n        let msd = last < x.length ? x.__digit(last) : 0;\n        const msdBitsConsumed = n % 30;\n        let resultMsd;\n        if (msdBitsConsumed === 0) {\n            resultMsd = 0 - msd - borrow;\n            resultMsd &= 0x3FFFFFFF;\n        }\n        else {\n            const drop = 32 - msdBitsConsumed;\n            msd = (msd << drop) >>> drop;\n            const minuendMsd = 1 << (32 - drop);\n            resultMsd = minuendMsd - msd - borrow;\n            resultMsd &= (minuendMsd - 1);\n        }\n        result.__setDigit(last, resultMsd);\n        return result.__trim();\n    }\n    // Digit helpers.\n    __digit(i) {\n        return this[i];\n    }\n    __unsignedDigit(i) {\n        return this[i] >>> 0;\n    }\n    __setDigit(i, digit) {\n        this[i] = digit | 0;\n    }\n    __setDigitGrow(i, digit) {\n        this[i] = digit | 0;\n    }\n    __halfDigitLength() {\n        const len = this.length;\n        if (this.__unsignedDigit(len - 1) <= 0x7FFF)\n            return len * 2 - 1;\n        return len * 2;\n    }\n    __halfDigit(i) {\n        return (this[i >>> 1] >>> ((i & 1) * 15)) & 0x7FFF;\n    }\n    __setHalfDigit(i, value) {\n        const digitIndex = i >>> 1;\n        const previous = this.__digit(digitIndex);\n        const updated = (i & 1) ? (previous & 0x7FFF) | (value << 15)\n            : (previous & 0x3FFF8000) | (value & 0x7FFF);\n        this.__setDigit(digitIndex, updated);\n    }\n    static __digitPow(base, exponent) {\n        let result = 1;\n        while (exponent > 0) {\n            if (exponent & 1)\n                result *= base;\n            exponent >>>= 1;\n            base *= base;\n        }\n        return result;\n    }\n    static __isOneDigitInt(x) {\n        return (x & 0x3FFFFFFF) === x;\n    }\n}\nJSBI.__kMaxLength = 1 << 25;\nJSBI.__kMaxLengthBits = JSBI.__kMaxLength << 5;\n// Lookup table for the maximum number of bits required per character of a\n// base-N string representation of a number. To increase accuracy, the array\n// value is the actual value multiplied by 32. To generate this table:\n//\n// for (let i = 0; i <= 36; i++) {\n//   console.log(Math.ceil(Math.log2(i) * 32) + ',');\n// }\nJSBI.__kMaxBitsPerChar = [\n    0, 0, 32, 51, 64, 75, 83, 90, 96,\n    102, 107, 111, 115, 119, 122, 126, 128,\n    131, 134, 136, 139, 141, 143, 145, 147,\n    149, 151, 153, 154, 156, 158, 159, 160,\n    162, 163, 165, 166, // 33..36\n];\nJSBI.__kBitsPerCharTableShift = 5;\nJSBI.__kBitsPerCharTableMultiplier = 1 << JSBI.__kBitsPerCharTableShift;\nJSBI.__kConversionChars = '0123456789abcdefghijklmnopqrstuvwxyz'.split('');\nJSBI.__kBitConversionBuffer = new ArrayBuffer(8);\nJSBI.__kBitConversionDouble = new Float64Array(JSBI.__kBitConversionBuffer);\nJSBI.__kBitConversionInts = new Int32Array(JSBI.__kBitConversionBuffer);\n// For IE11 compatibility.\n// Note that the custom replacements are tailored for JSBI's needs, and as\n// such are not reusable as general-purpose polyfills.\nJSBI.__clz30 = Math.clz32 ? function (x) {\n    return Math.clz32(x) - 2;\n} : function (x) {\n    if (x === 0)\n        return 30;\n    return 29 - (Math.log(x >>> 0) / Math.LN2 | 0) | 0;\n};\nJSBI.__imul = Math.imul || function (a, b) {\n    return (a * b) | 0;\n};\nexport default JSBI;\n//# sourceMappingURL=jsbi.js.map"],"names":["JSBI","Array","constructor","length","sign","Object","setPrototypeOf","prototype","__kMaxLength","RangeError","BigInt","arg","Math","floor","Number","isFinite","__zero","__isOneDigitInt","__oneDigit","__fromDouble","result","__fromString","SyntaxError","primitive","__toPrimitive","TypeError","toDebugString","digit","push","toString","join","radix","__toStringBasePowerOfTwo","__toStringGeneric","valueOf","Error","toNumber","x","xLength","value","__unsignedDigit","xMsd","__digit","msdLeadingZeros","__clz30","xBitLength","Infinity","exponent","currentDigit","digitIndex","shift","mantissaHigh","mantissaHighBitsUnset","mantissaLow","mantissaLowBitsUnset","rounding","__decideRounding","signBit","__kBitConversionInts","__kBitConversionDouble","unaryMinus","__copy","bitwiseNot","__absoluteSubOne","__trim","__absoluteAddOne","exponentiate","y","expValue","__kMaxLengthBits","neededDigits","__initializeDigits","msd","__setDigit","runningSquare","multiply","resultLength","__clzmsd","i","__multiplyAccumulate","divide","__absoluteCompare","resultSign","divisor","quotient","__absoluteDivSmall","__absoluteDivLarge","remainder","remainderDigit","__absoluteModSmall","add","__absoluteAdd","__absoluteSub","subtract","leftShift","__rightShiftByAbsolute","__leftShiftByAbsolute","signedRightShift","unsignedRightShift","lessThan","__compareToBigInt","lessThanOrEqual","greaterThan","greaterThanOrEqual","equal","notEqual","bitwiseAnd","max","__absoluteAnd","y1","__absoluteOr","__absoluteAndNot","bitwiseXor","__absoluteXor","bitwiseOr","asIntN","n","neededLength","topDigit","compareDigit","__truncateToNBits","__truncateAndSubFromPowerOfTwo","asUintN","bitsInTopDigit","ADD","__toNumeric","__isBigInt","LT","__compare","LE","GT","GE","EQ","__equalToNumber","NE","DataViewGetBigInt64","dataview","byteOffset","littleEndian","DataViewGetBigUint64","h","l","high","getUint32","low","DataViewSetBigInt64","DataViewSetBigUint64","d1","setUint32","newLength","last","pop","mantissaBitsUnset","topUnconsumedBit","mask","rawExponent","digits","kMantissaHighTopBit","msdTopBit","remainingMantissaBits","__isWhitespace","c","string","cursor","current","charCodeAt","chars","bitsPerChar","__kMaxBitsPerChar","roundup","__kBitsPerCharTableMultiplier","bitsMin","__kBitsPerCharTableShift","limDigit","limAlpha","parts","partsBits","done","part","bits","d","__fillFromParts","charsSoFar","multiplier","m","digitsSoFar","__inplaceMultiplyAdd","bitsInDigit","partBits","charMask","charsRequired","pos","availableBits","newDigit","__kConversionChars","consumedBits","isRecursiveCall","bitLength","maxBitsPerChar","minBitsPerChar","secondHalfChars","conqueror","secondHalf","input","__halfDigit","__setHalfDigit","divisionResult","firstHalf","__unequalSign","leftNegative","__absoluteGreater","bothNegative","__absoluteLess","xSign","__compareToNumber","ySign","yAbs","abs","xDigit","__compareToDouble","yBitLength","compareMantissa","__comparisonResultToBool","op","carry","r","borrow","inputLength","__setDigitGrow","yLength","numPairs","tmp","tmpLength","diff","multiplicand","accumulator","accumulatorIndex","m2Low","m2High","acc","m1","m1Low","m1High","rLow","__imul","rMid1","rMid2","rHigh","__internalMultiplyAdd","source","factor","summand","rx","ry","mLow","mHigh","dLow","dHigh","pLow","pMid1","pMid2","pHigh","upperHalf","lowerHalf","dividend","wantQuotient","wantRemainder","__halfDigitLength","n2","q","qhatv","__clz15","__specialLeftShift","u","vn1","halfDigitBuffer","qhat","j","ujn","rhat","vn2","ujn2","__inplaceSub","__inplaceAdd","__inplaceRightShift","startIndex","halfDigits","sum","subtrahend","r0","sub","r15","addDigit","__toShiftAmount","digitShift","bitsShift","grow","__rightShiftByMaximum","mustRoundDown","obj","hint","Symbol","toPrimitive","exoticToPrim","call","drop","min","limit","msdBitsConsumed","resultMsd","minuendMsd","len","previous","updated","__digitPow","base","__kBitConversionBuffer","ArrayBuffer","Float64Array","Int32Array","clz32","log","LN2","imul","a","b"],"mappings":"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"}