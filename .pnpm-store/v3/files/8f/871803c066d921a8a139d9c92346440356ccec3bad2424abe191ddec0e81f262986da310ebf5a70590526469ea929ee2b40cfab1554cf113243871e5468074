{"version":3,"file":"class-validator.js","sources":["../src/class-validator.ts"],"sourcesContent":["import { FieldErrors } from 'react-hook-form';\nimport { toNestError, validateFieldsNatively } from '@hookform/resolvers';\nimport { plainToClass } from 'class-transformer';\nimport { validate, validateSync, ValidationError } from 'class-validator';\nimport type { Resolver } from './types';\n\nconst parseErrors = (\n  errors: ValidationError[],\n  validateAllFieldCriteria: boolean,\n  parsedErrors: FieldErrors = {},\n  path = '',\n) => {\n  return errors.reduce((acc, error) => {\n    const _path = path ? `${path}.${error.property}` : error.property;\n\n    if (error.constraints) {\n      const key = Object.keys(error.constraints)[0];\n      acc[_path] = {\n        type: key,\n        message: error.constraints[key],\n      };\n\n      if (validateAllFieldCriteria && acc[_path]) {\n        Object.assign(acc[_path], { types: error.constraints });\n      }\n    }\n\n    if (error.children && error.children.length) {\n      parseErrors(error.children, validateAllFieldCriteria, acc, _path);\n    }\n\n    return acc;\n  }, parsedErrors);\n};\n\nexport const classValidatorResolver: Resolver =\n  (schema, schemaOptions = {}, resolverOptions = {}) =>\n  async (values, _, options) => {\n    const user = plainToClass(schema, values);\n\n    const rawErrors = await (resolverOptions.mode === 'sync'\n      ? validateSync\n      : validate)(user, schemaOptions);\n\n    if (rawErrors.length) {\n      return {\n        values: {},\n        errors: toNestError(\n          parseErrors(\n            rawErrors,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n\n    options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n    return { values, errors: {} };\n  };\n"],"names":["parseErrors","errors","validateAllFieldCriteria","parsedErrors","path","reduce","acc","error","_path","property","constraints","key","Object","keys","type","message","assign","types","children","length","schema","schemaOptions","resolverOptions","values","_","options","user","plainToClass","mode","validateSync","validate","rawErrors","toNestError","shouldUseNativeValidation","criteriaMode","validateFieldsNatively"],"mappings":"iGAMMA,EAAc,SAAdA,EACJC,EACAC,EACAC,EACAC,GAEA,gBAHAD,IAAAA,EAA4B,aAC5BC,IAAAA,EAAO,IAEAH,EAAOI,OAAO,SAACC,EAAKC,GACzB,IAAMC,EAAQJ,EAAUA,MAAQG,EAAME,SAAaF,EAAME,SAEzD,GAAIF,EAAMG,YAAa,CACrB,IAAMC,EAAMC,OAAOC,KAAKN,EAAMG,aAAa,GAC3CJ,EAAIE,GAAS,CACXM,KAAMH,EACNI,QAASR,EAAMG,YAAYC,IAGzBT,GAA4BI,EAAIE,IAClCI,OAAOI,OAAOV,EAAIE,GAAQ,CAAES,MAAOV,EAAMG,cAQ7C,OAJIH,EAAMW,UAAYX,EAAMW,SAASC,QACnCnB,EAAYO,EAAMW,SAAUhB,EAA0BI,EAAKE,GAGtDF,GACNH,mCAIH,SAACiB,EAAQC,EAAoBC,mBAApBD,IAAAA,EAAgB,aAAIC,IAAAA,EAAkB,aACxCC,EAAQC,EAAGC,OAChB,IAAMC,EAAOC,eAAaP,EAAQG,2BAEgB,SAAzBD,EAAgBM,KACrCC,eACAC,YAAUJ,EAAML,kBAFdU,GAIN,OAAIA,EAAUZ,OACL,CACLI,OAAQ,GACRtB,OAAQ+B,cACNhC,EACE+B,GACCN,EAAQQ,2BACkB,QAAzBR,EAAQS,cAEZT,KAKNA,EAAQQ,2BAA6BE,yBAAuB,GAAIV,GAEzD,CAAEF,OAAAA,EAAQtB,OAAQ,OAxB3B"}