{"version":3,"file":"index.production.js","sources":["../../../table-core/build/esm/index.js","../../src/index.tsx"],"sourcesContent":["/**\n * table-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n// Is this type a tuple?\n// If this type is a tuple, what indices are allowed?\n///\nfunction functionalUpdate(updater, input) {\n  return typeof updater === 'function' ? updater(input) : updater;\n}\nfunction noop() {//\n}\nfunction makeStateUpdater(key, instance) {\n  return updater => {\n    instance.setState(old => {\n      return { ...old,\n        [key]: functionalUpdate(updater, old[key])\n      };\n    });\n  };\n}\nfunction isFunction(d) {\n  return d instanceof Function;\n}\nfunction flattenBy(arr, getChildren) {\n  const flat = [];\n\n  const recurse = subArr => {\n    subArr.forEach(item => {\n      flat.push(item);\n      const children = getChildren(item);\n\n      if (children != null && children.length) {\n        recurse(children);\n      }\n    });\n  };\n\n  recurse(arr);\n  return flat;\n}\nfunction memo(getDeps, fn, opts) {\n  let deps = [];\n  let result;\n  return () => {\n    let depTime;\n    if (opts.key && opts.debug) depTime = Date.now();\n    const newDeps = getDeps();\n    const depsChanged = newDeps.length !== deps.length || newDeps.some((dep, index) => deps[index] !== dep);\n\n    if (!depsChanged) {\n      return result;\n    }\n\n    deps = newDeps;\n    let resultTime;\n    if (opts.key && opts.debug) resultTime = Date.now();\n    result = fn(...newDeps);\n    opts == null ? void 0 : opts.onChange == null ? void 0 : opts.onChange(result);\n\n    if (opts.key && opts.debug) {\n      if (opts != null && opts.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime) * 100) / 100;\n        const resultEndTime = Math.round((Date.now() - resultTime) * 100) / 100;\n        const resultFpsPercentage = resultEndTime / 16;\n\n        const pad = (str, num) => {\n          str = String(str);\n\n          while (str.length < num) {\n            str = ' ' + str;\n          }\n\n          return str;\n        };\n\n        console.info(`%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`, `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120))}deg 100% 31%);`, opts == null ? void 0 : opts.key);\n      }\n    }\n\n    return result;\n  };\n}\n\nfunction createColumn(table, columnDef, depth, parent) {\n  const defaultColumn = table._getDefaultColumnDef();\n\n  const resolvedColumnDef = { ...defaultColumn,\n    ...columnDef\n  };\n  const accessorKey = resolvedColumnDef.accessorKey;\n  let id = resolvedColumnDef.id ?? (accessorKey ? accessorKey.replace('.', '_') : undefined) ?? (typeof resolvedColumnDef.header === 'string' ? resolvedColumnDef.header : undefined);\n  let accessorFn;\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn;\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = originalRow => {\n        let result = originalRow;\n\n        for (const key of accessorKey.split('.')) {\n          result = result[key];\n        }\n\n        return result;\n      };\n    } else {\n      accessorFn = originalRow => originalRow[resolvedColumnDef.accessorKey];\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(resolvedColumnDef.accessorFn ? `Columns require an id when using an accessorFn` : `Columns require an id when using a non-string header`);\n    }\n\n    throw new Error();\n  }\n\n  let column = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent,\n    depth,\n    columnDef: resolvedColumnDef,\n    columns: [],\n    getFlatColumns: memo(() => [true], () => {\n      var _column$columns;\n\n      return [column, ...((_column$columns = column.columns) == null ? void 0 : _column$columns.flatMap(d => d.getFlatColumns()))];\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n      debug: () => table.options.debugAll ?? table.options.debugColumns\n    }),\n    getLeafColumns: memo(() => [table._getOrderColumnsFn()], orderColumns => {\n      var _column$columns2;\n\n      if ((_column$columns2 = column.columns) != null && _column$columns2.length) {\n        let leafColumns = column.columns.flatMap(column => column.getLeafColumns());\n        return orderColumns(leafColumns);\n      }\n\n      return [column];\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n      debug: () => table.options.debugAll ?? table.options.debugColumns\n    })\n  };\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn == null ? void 0 : feature.createColumn(column, table));\n  }, column); // Yes, we have to convert table to uknown, because we know more than the compiler here.\n\n  return column;\n}\n\n//\nfunction createHeader(table, column, options) {\n  const id = options.id ?? column.id;\n  let header = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null,\n    getLeafHeaders: () => {\n      const leafHeaders = [];\n\n      const recurseHeader = h => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader);\n        }\n\n        leafHeaders.push(h);\n      };\n\n      recurseHeader(header);\n      return leafHeaders;\n    },\n    getContext: () => ({\n      table,\n      header: header,\n      column\n    })\n  };\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader == null ? void 0 : feature.createHeader(header, table));\n  });\n\n  return header;\n}\n\nconst Headers = {\n  createTable: table => {\n    return {\n      // Header Groups\n      getHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n        const leftColumns = (left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) ?? [];\n        const rightColumns = (right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) ?? [];\n        const centerColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\n        const headerGroups = buildHeaderGroups(allColumns, [...leftColumns, ...centerColumns, ...rightColumns], table);\n        return headerGroups;\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders\n      }),\n      getCenterHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n        leafColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\n        return buildHeaderGroups(allColumns, leafColumns, table, 'center');\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders\n      }),\n      getLeftHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left], (allColumns, leafColumns, left) => {\n        const orderedLeafColumns = (left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) ?? [];\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'left');\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders\n      }),\n      getRightHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.right], (allColumns, leafColumns, right) => {\n        const orderedLeafColumns = (right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) ?? [];\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'right');\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders\n      }),\n      // Footer Groups\n      getFooterGroups: memo(() => [table.getHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders\n      }),\n      getLeftFooterGroups: memo(() => [table.getLeftHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders\n      }),\n      getCenterFooterGroups: memo(() => [table.getCenterHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders\n      }),\n      getRightFooterGroups: memo(() => [table.getRightHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders\n      }),\n      // Flat Headers\n      getFlatHeaders: memo(() => [table.getHeaderGroups()], headerGroups => {\n        return headerGroups.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders\n      }),\n      getLeftFlatHeaders: memo(() => [table.getLeftHeaderGroups()], left => {\n        return left.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders\n      }),\n      getCenterFlatHeaders: memo(() => [table.getCenterHeaderGroups()], left => {\n        return left.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders\n      }),\n      getRightFlatHeaders: memo(() => [table.getRightHeaderGroups()], left => {\n        return left.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders\n      }),\n      // Leaf Headers\n      getCenterLeafHeaders: memo(() => [table.getCenterFlatHeaders()], flatHeaders => {\n        return flatHeaders.filter(header => {\n          var _header$subHeaders;\n\n          return !((_header$subHeaders = header.subHeaders) != null && _header$subHeaders.length);\n        });\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders\n      }),\n      getLeftLeafHeaders: memo(() => [table.getLeftFlatHeaders()], flatHeaders => {\n        return flatHeaders.filter(header => {\n          var _header$subHeaders2;\n\n          return !((_header$subHeaders2 = header.subHeaders) != null && _header$subHeaders2.length);\n        });\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders\n      }),\n      getRightLeafHeaders: memo(() => [table.getRightFlatHeaders()], flatHeaders => {\n        return flatHeaders.filter(header => {\n          var _header$subHeaders3;\n\n          return !((_header$subHeaders3 = header.subHeaders) != null && _header$subHeaders3.length);\n        });\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders\n      }),\n      getLeafHeaders: memo(() => [table.getLeftHeaderGroups(), table.getCenterHeaderGroups(), table.getRightHeaderGroups()], (left, center, right) => {\n        var _left$, _center$, _right$;\n\n        return [...(((_left$ = left[0]) == null ? void 0 : _left$.headers) ?? []), ...(((_center$ = center[0]) == null ? void 0 : _center$.headers) ?? []), ...(((_right$ = right[0]) == null ? void 0 : _right$.headers) ?? [])].map(header => {\n          return header.getLeafHeaders();\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders\n      })\n    };\n  }\n};\nfunction buildHeaderGroups(allColumns, columnsToGroup, table, headerFamily) {\n  var _headerGroups$;\n\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n  let maxDepth = 0;\n\n  const findMaxDepth = function (columns, depth) {\n    if (depth === void 0) {\n      depth = 1;\n    }\n\n    maxDepth = Math.max(maxDepth, depth);\n    columns.filter(column => column.getIsVisible()).forEach(column => {\n      var _column$columns;\n\n      if ((_column$columns = column.columns) != null && _column$columns.length) {\n        findMaxDepth(column.columns, depth + 1);\n      }\n    }, 0);\n  };\n\n  findMaxDepth(allColumns);\n  let headerGroups = [];\n\n  const createHeaderGroup = (headersToGroup, depth) => {\n    // The header group we are creating\n    const headerGroup = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: []\n    }; // The parent columns we're going to scan next\n\n    const pendingParentHeaders = []; // Scan each column for parents\n\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0];\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth;\n      let column;\n      let isPlaceholder = false;\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent;\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column;\n        isPlaceholder = true;\n      }\n\n      if (latestPendingParentHeader && (latestPendingParentHeader == null ? void 0 : latestPendingParentHeader.column) === column) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup);\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup == null ? void 0 : headerToGroup.id].filter(Boolean).join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder ? `${pendingParentHeaders.filter(d => d.column === column).length}` : undefined,\n          depth,\n          index: pendingParentHeaders.length\n        }); // Add the headerToGroup as a subHeader of the new header\n\n        header.subHeaders.push(headerToGroup); // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n\n        pendingParentHeaders.push(header);\n      }\n\n      headerGroup.headers.push(headerToGroup);\n      headerToGroup.headerGroup = headerGroup;\n    });\n    headerGroups.push(headerGroup);\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1);\n    }\n  };\n\n  const bottomHeaders = columnsToGroup.map((column, index) => createHeader(table, column, {\n    depth: maxDepth,\n    index\n  }));\n  createHeaderGroup(bottomHeaders, maxDepth - 1);\n  headerGroups.reverse(); // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = headers => {\n    const filteredHeaders = headers.filter(header => header.column.getIsVisible());\n    return filteredHeaders.map(header => {\n      let colSpan = 0;\n      let rowSpan = 0;\n      let childRowSpans = [0];\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = [];\n        recurseHeadersForSpans(header.subHeaders).forEach(_ref => {\n          let {\n            colSpan: childColSpan,\n            rowSpan: childRowSpan\n          } = _ref;\n          colSpan += childColSpan;\n          childRowSpans.push(childRowSpan);\n        });\n      } else {\n        colSpan = 1;\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans);\n      rowSpan = rowSpan + minChildRowSpan;\n      header.colSpan = colSpan;\n      header.rowSpan = rowSpan;\n      return {\n        colSpan,\n        rowSpan\n      };\n    });\n  };\n\n  recurseHeadersForSpans(((_headerGroups$ = headerGroups[0]) == null ? void 0 : _headerGroups$.headers) ?? []);\n  return headerGroups;\n}\n\n//\nconst defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER\n};\n\nconst getDefaultColumnSizingInfoState = () => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: []\n});\n\nconst ColumnSizing = {\n  getDefaultColumnDef: () => {\n    return defaultColumnSizing;\n  },\n  getInitialState: state => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table)\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id];\n        return Math.min(Math.max(column.columnDef.minSize ?? defaultColumnSizing.minSize, columnSize ?? column.columnDef.size ?? defaultColumnSizing.size), column.columnDef.maxSize ?? defaultColumnSizing.maxSize);\n      },\n      getStart: position => {\n        const columns = !position ? table.getVisibleLeafColumns() : position === 'left' ? table.getLeftVisibleLeafColumns() : table.getRightVisibleLeafColumns();\n        const index = columns.findIndex(d => d.id === column.id);\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1];\n          return prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize();\n        }\n\n        return 0;\n      },\n      resetSize: () => {\n        table.setColumnSizing(_ref => {\n          let {\n            [column.id]: _,\n            ...rest\n          } = _ref;\n          return rest;\n        });\n      },\n      getCanResize: () => {\n        return (column.columnDef.enableResizing ?? true) && (table.options.enableColumnResizing ?? true);\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id;\n      }\n    };\n  },\n  createHeader: (header, table) => {\n    return {\n      getSize: () => {\n        let sum = 0;\n\n        const recurse = header => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse);\n          } else {\n            sum += header.column.getSize() ?? 0;\n          }\n        };\n\n        recurse(header);\n        return sum;\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader = header.headerGroup.headers[header.index - 1];\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize();\n        }\n\n        return 0;\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id);\n        const canResize = column.getCanResize();\n        return e => {\n          if (!canResize) {\n            return;\n          }\n          e.persist == null ? void 0 : e.persist();\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return;\n            }\n          }\n\n          const startSize = header.getSize();\n          const columnSizingStart = header ? header.getLeafHeaders().map(d => [d.column.id, d.column.getSize()]) : [[column.id, column.getSize()]];\n          const clientX = isTouchStartEvent(e) ? Math.round(e.touches[0].clientX) : e.clientX;\n\n          const updateOffset = (eventType, clientXPos) => {\n            if (typeof clientXPos !== 'number') {\n              return;\n            }\n\n            let newColumnSizing = {};\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - ((old == null ? void 0 : old.startOffset) ?? 0);\n              const deltaPercentage = Math.max(deltaOffset / ((old == null ? void 0 : old.startSize) ?? 0), -0.999999);\n              old.columnSizingStart.forEach(_ref2 => {\n                let [columnId, headerSize] = _ref2;\n                newColumnSizing[columnId] = Math.round(Math.max(headerSize + headerSize * deltaPercentage, 0) * 100) / 100;\n              });\n              return { ...old,\n                deltaOffset,\n                deltaPercentage\n              };\n            });\n\n            if (table.options.columnResizeMode === 'onChange' || eventType === 'end') {\n              table.setColumnSizing(old => ({ ...old,\n                ...newColumnSizing\n              }));\n            }\n          };\n\n          const onMove = clientXPos => updateOffset('move', clientXPos);\n\n          const onEnd = clientXPos => {\n            updateOffset('end', clientXPos);\n            table.setColumnSizingInfo(old => ({ ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: []\n            }));\n          };\n\n          const mouseEvents = {\n            moveHandler: e => onMove(e.clientX),\n            upHandler: e => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler);\n              document.removeEventListener('mouseup', mouseEvents.upHandler);\n              onEnd(e.clientX);\n            }\n          };\n          const passiveIfSupported = passiveEventSupported() ? {\n            passive: false\n          } : false;\n\n          if (isTouchStartEvent(e)) ; else {\n            document.addEventListener('mousemove', mouseEvents.moveHandler, passiveIfSupported);\n            document.addEventListener('mouseup', mouseEvents.upHandler, passiveIfSupported);\n          }\n\n          table.setColumnSizingInfo(old => ({ ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id\n          }));\n        };\n      }\n    };\n  },\n  createTable: table => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange == null ? void 0 : table.options.onColumnSizingChange(updater),\n      setColumnSizingInfo: updater => table.options.onColumnSizingInfoChange == null ? void 0 : table.options.onColumnSizingInfoChange(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(defaultState ? {} : table.initialState.columnSizing ?? {});\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(defaultState ? getDefaultColumnSizingInfoState() : table.initialState.columnSizingInfo ?? getDefaultColumnSizingInfoState());\n      },\n      getTotalSize: () => {\n        var _table$getHeaderGroup;\n\n        return ((_table$getHeaderGroup = table.getHeaderGroups()[0]) == null ? void 0 : _table$getHeaderGroup.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) ?? 0;\n      },\n      getLeftTotalSize: () => {\n        var _table$getLeftHeaderG;\n\n        return ((_table$getLeftHeaderG = table.getLeftHeaderGroups()[0]) == null ? void 0 : _table$getLeftHeaderG.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) ?? 0;\n      },\n      getCenterTotalSize: () => {\n        var _table$getCenterHeade;\n\n        return ((_table$getCenterHeade = table.getCenterHeaderGroups()[0]) == null ? void 0 : _table$getCenterHeade.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) ?? 0;\n      },\n      getRightTotalSize: () => {\n        var _table$getRightHeader;\n\n        return ((_table$getRightHeader = table.getRightHeaderGroups()[0]) == null ? void 0 : _table$getRightHeader.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) ?? 0;\n      }\n    };\n  }\n};\nlet passiveSupported = null;\nfunction passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported;\n  let supported = false;\n\n  try {\n    const options = {\n      get passive() {\n        supported = true;\n        return false;\n      }\n\n    };\n\n    const noop = () => {};\n\n    window.addEventListener('test', noop, options);\n    window.removeEventListener('test', noop);\n  } catch (err) {\n    supported = false;\n  }\n\n  passiveSupported = supported;\n  return passiveSupported;\n}\n\nfunction isTouchStartEvent(e) {\n  return e.type === 'touchstart';\n}\n\n//\nconst Expanding = {\n  getInitialState: state => {\n    return {\n      expanded: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true;\n          });\n\n          return;\n        }\n\n        if (table.options.autoResetAll ?? table.options.autoResetExpanded ?? !table.options.manualExpanding) {\n          if (queued) return;\n          queued = true;\n\n          table._queue(() => {\n            table.resetExpanded();\n            queued = false;\n          });\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange == null ? void 0 : table.options.onExpandedChange(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true);\n        } else {\n          table.setExpanded({});\n        }\n      },\n      resetExpanded: defaultState => {\n        var _table$initialState;\n\n        table.setExpanded(defaultState ? {} : ((_table$initialState = table.initialState) == null ? void 0 : _table$initialState.expanded) ?? {});\n      },\n      getCanSomeRowsExpand: () => {\n        return table.getRowModel().flatRows.some(row => row.getCanExpand());\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return e => {\n          e.persist == null ? void 0 : e.persist();\n          table.toggleAllRowsExpanded();\n        };\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded;\n        return expanded === true || Object.values(expanded).some(Boolean);\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded; // If expanded is true, save some cycles and return true\n\n        if (typeof expanded === 'boolean') {\n          return expanded === true;\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false;\n        } // If any row is not expanded, return false\n\n\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false;\n        } // They must all be expanded :shrug:\n\n\n        return true;\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0;\n        const rowIds = table.getState().expanded === true ? Object.keys(table.getRowModel().rowsById) : Object.keys(table.getState().expanded);\n        rowIds.forEach(id => {\n          const splitId = id.split('.');\n          maxDepth = Math.max(maxDepth, splitId.length);\n        });\n        return maxDepth;\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table);\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel();\n        }\n\n        return table._getExpandedRowModel();\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!(old != null && old[row.id]);\n          let oldExpanded = {};\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true;\n            });\n          } else {\n            oldExpanded = old;\n          }\n\n          expanded = expanded ?? !exists;\n\n          if (!exists && expanded) {\n            return { ...oldExpanded,\n              [row.id]: true\n            };\n          }\n\n          if (exists && !expanded) {\n            const {\n              [row.id]: _,\n              ...rest\n            } = oldExpanded;\n            return rest;\n          }\n\n          return old;\n        });\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded;\n        return !!((table.options.getIsRowExpanded == null ? void 0 : table.options.getIsRowExpanded(row)) ?? (expanded === true || expanded != null && expanded[row.id]));\n      },\n      getCanExpand: () => {\n        var _row$subRows;\n\n        return (table.options.getRowCanExpand == null ? void 0 : table.options.getRowCanExpand(row)) ?? ((table.options.enableExpanding ?? true) && !!((_row$subRows = row.subRows) != null && _row$subRows.length));\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand();\n        return () => {\n          if (!canExpand) return;\n          row.toggleExpanded();\n        };\n      }\n    };\n  }\n};\n\nconst includesString = (row, columnId, filterValue) => {\n  var _row$getValue;\n\n  const search = filterValue.toLowerCase();\n  return (_row$getValue = row.getValue(columnId)) == null ? void 0 : _row$getValue.toLowerCase().includes(search);\n};\n\nincludesString.autoRemove = val => testFalsey(val);\n\nconst includesStringSensitive = (row, columnId, filterValue) => {\n  var _row$getValue2;\n\n  return (_row$getValue2 = row.getValue(columnId)) == null ? void 0 : _row$getValue2.includes(filterValue);\n};\n\nincludesStringSensitive.autoRemove = val => testFalsey(val);\n\nconst equalsString = (row, columnId, filterValue) => {\n  var _row$getValue3;\n\n  return ((_row$getValue3 = row.getValue(columnId)) == null ? void 0 : _row$getValue3.toLowerCase()) === filterValue.toLowerCase();\n};\n\nequalsString.autoRemove = val => testFalsey(val);\n\nconst arrIncludes = (row, columnId, filterValue) => {\n  var _row$getValue4;\n\n  return (_row$getValue4 = row.getValue(columnId)) == null ? void 0 : _row$getValue4.includes(filterValue);\n};\n\narrIncludes.autoRemove = val => testFalsey(val) || !(val != null && val.length);\n\nconst arrIncludesAll = (row, columnId, filterValue) => {\n  return !filterValue.some(val => {\n    var _row$getValue5;\n\n    return !((_row$getValue5 = row.getValue(columnId)) != null && _row$getValue5.includes(val));\n  });\n};\n\narrIncludesAll.autoRemove = val => testFalsey(val) || !(val != null && val.length);\n\nconst arrIncludesSome = (row, columnId, filterValue) => {\n  return filterValue.some(val => {\n    var _row$getValue6;\n\n    return (_row$getValue6 = row.getValue(columnId)) == null ? void 0 : _row$getValue6.includes(val);\n  });\n};\n\narrIncludesSome.autoRemove = val => testFalsey(val) || !(val != null && val.length);\n\nconst equals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) === filterValue;\n};\n\nequals.autoRemove = val => testFalsey(val);\n\nconst weakEquals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) == filterValue;\n};\n\nweakEquals.autoRemove = val => testFalsey(val);\n\nconst inNumberRange = (row, columnId, filterValue) => {\n  let [min, max] = filterValue;\n  const rowValue = row.getValue(columnId);\n  return rowValue >= min && rowValue <= max;\n};\n\ninNumberRange.resolveFilterValue = val => {\n  let [unsafeMin, unsafeMax] = val;\n  let parsedMin = typeof unsafeMin !== 'number' ? parseFloat(unsafeMin) : unsafeMin;\n  let parsedMax = typeof unsafeMax !== 'number' ? parseFloat(unsafeMax) : unsafeMax;\n  let min = unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin;\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax;\n\n  if (min > max) {\n    const temp = min;\n    min = max;\n    max = temp;\n  }\n\n  return [min, max];\n};\n\ninNumberRange.autoRemove = val => testFalsey(val) || testFalsey(val[0]) && testFalsey(val[1]); // Export\n\n\nconst filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange\n};\n\n// Utils\nfunction testFalsey(val) {\n  return val === undefined || val === null || val === '';\n}\n\n//\nconst Filters = {\n  getDefaultColumnDef: () => {\n    return {\n      filterFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        var _table$getCoreRowMode, _table$getCoreRowMode2;\n\n        const value = (_table$getCoreRowMode = table.getCoreRowModel().flatRows[0]) == null ? void 0 : (_table$getCoreRowMode2 = _table$getCoreRowMode._getAllCellsByColumnId()[column.id]) == null ? void 0 : _table$getCoreRowMode2.getValue();\n        return typeof value === 'string' || typeof value === 'number';\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0];\n        const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n\n        if (typeof value === 'string') {\n          return filterFns.includesString;\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange;\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals;\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals;\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes;\n        }\n\n        return filterFns.weakEquals;\n      },\n      getFilterFn: () => {\n        var _table$options$filter;\n\n        return isFunction(column.columnDef.filterFn) ? column.columnDef.filterFn : column.columnDef.filterFn === 'auto' ? column.getAutoFilterFn() : ((_table$options$filter = table.options.filterFns) == null ? void 0 : _table$options$filter[column.columnDef.filterFn]) ?? filterFns[column.columnDef.filterFn];\n      },\n      getCanFilter: () => {\n        return (column.columnDef.enableColumnFilter ?? true) && (table.options.enableColumnFilters ?? true) && (table.options.enableFilters ?? true) && !!column.accessorFn;\n      },\n      getCanGlobalFilter: () => {\n        return (column.columnDef.enableGlobalFilter ?? true) && (table.options.enableGlobalFilter ?? true) && (table.options.enableFilters ?? true) && ((table.options.getColumnCanGlobalFilter == null ? void 0 : table.options.getColumnCanGlobalFilter(column)) ?? true) && !!column.accessorFn;\n      },\n      getIsFiltered: () => column.getFilterIndex() > -1,\n      getFilterValue: () => {\n        var _table$getState$colum, _table$getState$colum2;\n\n        return (_table$getState$colum = table.getState().columnFilters) == null ? void 0 : (_table$getState$colum2 = _table$getState$colum.find(d => d.id === column.id)) == null ? void 0 : _table$getState$colum2.value;\n      },\n      getFilterIndex: () => {\n        var _table$getState$colum3;\n\n        return ((_table$getState$colum3 = table.getState().columnFilters) == null ? void 0 : _table$getState$colum3.findIndex(d => d.id === column.id)) ?? -1;\n      },\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn();\n          const previousfilter = old == null ? void 0 : old.find(d => d.id === column.id);\n          const newFilter = functionalUpdate(value, previousfilter ? previousfilter.value : undefined); //\n\n          if (shouldAutoRemoveFilter(filterFn, newFilter, column)) {\n            return (old == null ? void 0 : old.filter(d => d.id !== column.id)) ?? [];\n          }\n\n          const newFilterObj = {\n            id: column.id,\n            value: newFilter\n          };\n\n          if (previousfilter) {\n            return (old == null ? void 0 : old.map(d => {\n              if (d.id === column.id) {\n                return newFilterObj;\n              }\n\n              return d;\n            })) ?? [];\n          }\n\n          if (old != null && old.length) {\n            return [...old, newFilterObj];\n          }\n\n          return [newFilterObj];\n        });\n      },\n      _getFacetedRowModel: table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel();\n        }\n\n        return column._getFacetedRowModel();\n      },\n      _getFacetedUniqueValues: table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map();\n        }\n\n        return column._getFacetedUniqueValues();\n      },\n      _getFacetedMinMaxValues: table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined;\n        }\n\n        return column._getFacetedMinMaxValues();\n      } // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {}\n    };\n  },\n  createTable: table => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString;\n      },\n      getGlobalFilterFn: () => {\n        var _table$options$filter2;\n\n        const {\n          globalFilterFn: globalFilterFn\n        } = table.options;\n        return isFunction(globalFilterFn) ? globalFilterFn : globalFilterFn === 'auto' ? table.getGlobalAutoFilterFn() : ((_table$options$filter2 = table.options.filterFns) == null ? void 0 : _table$options$filter2[globalFilterFn]) ?? filterFns[globalFilterFn];\n      },\n      setColumnFilters: updater => {\n        const leafColumns = table.getAllLeafColumns();\n\n        const updateFn = old => {\n          var _functionalUpdate;\n\n          return (_functionalUpdate = functionalUpdate(updater, old)) == null ? void 0 : _functionalUpdate.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id);\n\n            if (column) {\n              const filterFn = column.getFilterFn();\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false;\n              }\n            }\n\n            return true;\n          });\n        };\n\n        table.options.onColumnFiltersChange == null ? void 0 : table.options.onColumnFiltersChange(updateFn);\n      },\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange == null ? void 0 : table.options.onGlobalFilterChange(updater);\n      },\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(defaultState ? undefined : table.initialState.globalFilter);\n      },\n      resetColumnFilters: defaultState => {\n        var _table$initialState;\n\n        table.setColumnFilters(defaultState ? [] : ((_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnFilters) ?? []);\n      },\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table);\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel();\n        }\n\n        return table._getFilteredRowModel();\n      },\n      _getGlobalFacetedRowModel: table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, '__global__'),\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel();\n        }\n\n        return table._getGlobalFacetedRowModel();\n      },\n      _getGlobalFacetedUniqueValues: table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map();\n        }\n\n        return table._getGlobalFacetedUniqueValues();\n      },\n      _getGlobalFacetedMinMaxValues: table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return;\n        }\n\n        return table._getGlobalFacetedMinMaxValues();\n      }\n    };\n  }\n};\nfunction shouldAutoRemoveFilter(filterFn, value, column) {\n  return (filterFn && filterFn.autoRemove ? filterFn.autoRemove(value, column) : false) || typeof value === 'undefined' || typeof value === 'string' && !value;\n}\n\nconst sum = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId);\n    return sum + (typeof nextValue === 'number' ? nextValue : 0);\n  }, 0);\n};\n\nconst min = (columnId, _leafRows, childRows) => {\n  let min;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n\n    if (value != null && (min > value || min === undefined && value >= value)) {\n      min = value;\n    }\n  });\n  return min;\n};\n\nconst max = (columnId, _leafRows, childRows) => {\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n\n    if (value != null && (max < value || max === undefined && value >= value)) {\n      max = value;\n    }\n  });\n  return max;\n};\n\nconst extent = (columnId, _leafRows, childRows) => {\n  let min;\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value;\n      } else {\n        if (min > value) min = value;\n        if (max < value) max = value;\n      }\n    }\n  });\n  return [min, max];\n};\n\nconst mean = (columnId, leafRows) => {\n  let count = 0;\n  let sum = 0;\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId);\n\n    if (value != null && (value = +value) >= value) {\n      ++count, sum += value;\n    }\n  });\n  if (count) return sum / count;\n  return;\n};\n\nconst median = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return;\n  }\n\n  let min = 0;\n  let max = 0;\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId);\n\n    if (typeof value === 'number') {\n      min = Math.min(min, value);\n      max = Math.max(max, value);\n    }\n  });\n  return (min + max) / 2;\n};\n\nconst unique = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values());\n};\n\nconst uniqueCount = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size;\n};\n\nconst count = (_columnId, leafRows) => {\n  return leafRows.length;\n};\n\nconst aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count\n};\n\n//\nconst Grouping = {\n  getDefaultColumnDef: () => {\n    return {\n      aggregatedCell: props => {\n        var _props$getValue;\n\n        return ((_props$getValue = props.getValue()) == null ? void 0 : _props$getValue.toString == null ? void 0 : _props$getValue.toString()) ?? null;\n      },\n      aggregationFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      grouping: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder'\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old != null && old.includes(column.id)) {\n            return old.filter(d => d !== column.id);\n          }\n\n          return [...(old ?? []), column.id];\n        });\n      },\n      getCanGroup: () => {\n        return column.columnDef.enableGrouping ?? true ?? table.options.enableGrouping ?? true ?? !!column.accessorFn;\n      },\n      getIsGrouped: () => {\n        var _table$getState$group;\n\n        return (_table$getState$group = table.getState().grouping) == null ? void 0 : _table$getState$group.includes(column.id);\n      },\n      getGroupedIndex: () => {\n        var _table$getState$group2;\n\n        return (_table$getState$group2 = table.getState().grouping) == null ? void 0 : _table$getState$group2.indexOf(column.id);\n      },\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup();\n        return () => {\n          if (!canGroup) return;\n          column.toggleGrouping();\n        };\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0];\n        const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum;\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent;\n        }\n      },\n      getAggregationFn: () => {\n        var _table$options$aggreg;\n\n        if (!column) {\n          throw new Error();\n        }\n\n        return isFunction(column.columnDef.aggregationFn) ? column.columnDef.aggregationFn : column.columnDef.aggregationFn === 'auto' ? column.getAutoAggregationFn() : ((_table$options$aggreg = table.options.aggregationFns) == null ? void 0 : _table$options$aggreg[column.columnDef.aggregationFn]) ?? aggregationFns[column.columnDef.aggregationFn];\n      }\n    };\n  },\n  createTable: table => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange == null ? void 0 : table.options.onGroupingChange(updater),\n      resetGrouping: defaultState => {\n        var _table$initialState;\n\n        table.setGrouping(defaultState ? [] : ((_table$initialState = table.initialState) == null ? void 0 : _table$initialState.grouping) ?? []);\n      },\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table);\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel();\n        }\n\n        return table._getGroupedRowModel();\n      }\n    };\n  },\n  createRow: row => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {}\n    };\n  },\n  createCell: (cell, column, row, table) => {\n\n    return {\n      getIsGrouped: () => column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () => {\n        var _row$subRows;\n\n        return !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n      }\n    };\n  }\n};\nfunction orderColumns(leafColumns, grouping, groupedColumnMode) {\n  if (!(grouping != null && grouping.length) || !groupedColumnMode) {\n    return leafColumns;\n  }\n\n  const nonGroupingColumns = leafColumns.filter(col => !grouping.includes(col.id));\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns;\n  }\n\n  const groupingColumns = grouping.map(g => leafColumns.find(col => col.id === g)).filter(Boolean);\n  return [...groupingColumns, ...nonGroupingColumns];\n}\n\n//\nconst Ordering = {\n  getInitialState: state => {\n    return {\n      columnOrder: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table)\n    };\n  },\n  createTable: table => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange == null ? void 0 : table.options.onColumnOrderChange(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(defaultState ? [] : table.initialState.columnOrder ?? []);\n      },\n      _getOrderColumnsFn: memo(() => [table.getState().columnOrder, table.getState().grouping, table.options.groupedColumnMode], (columnOrder, grouping, groupedColumnMode) => columns => {\n        // Sort grouped columns to the start of the column list\n        // before the headers are built\n        let orderedColumns = []; // If there is no order, return the normal columns\n\n        if (!(columnOrder != null && columnOrder.length)) {\n          orderedColumns = columns;\n        } else {\n          const columnOrderCopy = [...columnOrder]; // If there is an order, make a copy of the columns\n\n          const columnsCopy = [...columns]; // And make a new ordered array of the columns\n          // Loop over the columns and place them in order into the new array\n\n          while (columnsCopy.length && columnOrderCopy.length) {\n            const targetColumnId = columnOrderCopy.shift();\n            const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId);\n\n            if (foundIndex > -1) {\n              orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]);\n            }\n          } // If there are any columns left, add them to the end\n\n\n          orderedColumns = [...orderedColumns, ...columnsCopy];\n        }\n\n        return orderColumns(orderedColumns, grouping, groupedColumnMode);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn' // debug: () => table.options.debugAll ?? table.options.debugTable,\n\n      })\n    };\n  }\n};\n\n//\nconst defaultPageIndex = 0;\nconst defaultPageSize = 10;\n\nconst getDefaultPaginationState = () => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize\n});\n\nconst Pagination = {\n  getInitialState: state => {\n    return { ...state,\n      pagination: { ...getDefaultPaginationState(),\n        ...(state == null ? void 0 : state.pagination)\n      }\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table)\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true;\n          });\n\n          return;\n        }\n\n        if (table.options.autoResetAll ?? table.options.autoResetPageIndex ?? !table.options.manualPagination) {\n          if (queued) return;\n          queued = true;\n\n          table._queue(() => {\n            table.resetPageIndex();\n            queued = false;\n          });\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater = old => {\n          let newState = functionalUpdate(updater, old);\n          return newState;\n        };\n\n        return table.options.onPaginationChange == null ? void 0 : table.options.onPaginationChange(safeUpdater);\n      },\n      resetPagination: defaultState => {\n        table.setPagination(defaultState ? getDefaultPaginationState() : table.initialState.pagination ?? getDefaultPaginationState());\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex);\n          const maxPageIndex = typeof table.options.pageCount === 'undefined' || table.options.pageCount === -1 ? Number.MAX_SAFE_INTEGER : table.options.pageCount - 1;\n          pageIndex = Math.min(Math.max(0, pageIndex), maxPageIndex);\n          return { ...old,\n            pageIndex\n          };\n        });\n      },\n      resetPageIndex: defaultState => {\n        var _table$initialState, _table$initialState$p;\n\n        table.setPageIndex(defaultState ? defaultPageIndex : ((_table$initialState = table.initialState) == null ? void 0 : (_table$initialState$p = _table$initialState.pagination) == null ? void 0 : _table$initialState$p.pageIndex) ?? defaultPageIndex);\n      },\n      resetPageSize: defaultState => {\n        var _table$initialState2, _table$initialState2$;\n\n        table.setPageSize(defaultState ? defaultPageSize : ((_table$initialState2 = table.initialState) == null ? void 0 : (_table$initialState2$ = _table$initialState2.pagination) == null ? void 0 : _table$initialState2$.pageSize) ?? defaultPageSize);\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize));\n          const topRowIndex = old.pageSize * old.pageIndex;\n          const pageIndex = Math.floor(topRowIndex / pageSize);\n          return { ...old,\n            pageIndex,\n            pageSize\n          };\n        });\n      },\n      setPageCount: updater => table.setPagination(old => {\n        let newPageCount = functionalUpdate(updater, table.options.pageCount ?? -1);\n\n        if (typeof newPageCount === 'number') {\n          newPageCount = Math.max(-1, newPageCount);\n        }\n\n        return { ...old,\n          pageCount: newPageCount\n        };\n      }),\n      getPageOptions: memo(() => [table.getPageCount()], pageCount => {\n        let pageOptions = [];\n\n        if (pageCount && pageCount > 0) {\n          pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i);\n        }\n\n        return pageOptions;\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n        debug: () => table.options.debugAll ?? table.options.debugTable\n      }),\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n      getCanNextPage: () => {\n        const {\n          pageIndex\n        } = table.getState().pagination;\n        const pageCount = table.getPageCount();\n\n        if (pageCount === -1) {\n          return true;\n        }\n\n        if (pageCount === 0) {\n          return false;\n        }\n\n        return pageIndex < pageCount - 1;\n      },\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1);\n      },\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1;\n        });\n      },\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (!table._getPaginationRowModel && table.options.getPaginationRowModel) {\n          table._getPaginationRowModel = table.options.getPaginationRowModel(table);\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel();\n        }\n\n        return table._getPaginationRowModel();\n      },\n      getPageCount: () => {\n        return table.options.pageCount ?? Math.ceil(table.getPrePaginationRowModel().rows.length / table.getState().pagination.pageSize);\n      }\n    };\n  }\n};\n\n//\nconst getDefaultPinningState = () => ({\n  left: [],\n  right: []\n});\n\nconst Pinning = {\n  getInitialState: state => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table)\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      pin: position => {\n        const columnIds = column.getLeafColumns().map(d => d.id).filter(Boolean);\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: ((old == null ? void 0 : old.left) ?? []).filter(d => !(columnIds != null && columnIds.includes(d))),\n              right: [...((old == null ? void 0 : old.right) ?? []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds]\n            };\n          }\n\n          if (position === 'left') {\n            return {\n              left: [...((old == null ? void 0 : old.left) ?? []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds],\n              right: ((old == null ? void 0 : old.right) ?? []).filter(d => !(columnIds != null && columnIds.includes(d)))\n            };\n          }\n\n          return {\n            left: ((old == null ? void 0 : old.left) ?? []).filter(d => !(columnIds != null && columnIds.includes(d))),\n            right: ((old == null ? void 0 : old.right) ?? []).filter(d => !(columnIds != null && columnIds.includes(d)))\n          };\n        });\n      },\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns();\n        return leafColumns.some(d => (d.columnDef.enablePinning ?? true) && (table.options.enablePinning ?? true));\n      },\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id);\n        const {\n          left,\n          right\n        } = table.getState().columnPinning;\n        const isLeft = leafColumnIds.some(d => left == null ? void 0 : left.includes(d));\n        const isRight = leafColumnIds.some(d => right == null ? void 0 : right.includes(d));\n        return isLeft ? 'left' : isRight ? 'right' : false;\n      },\n      getPinnedIndex: () => {\n        var _table$getState$colum, _table$getState$colum2;\n\n        const position = column.getIsPinned();\n        return position ? ((_table$getState$colum = table.getState().columnPinning) == null ? void 0 : (_table$getState$colum2 = _table$getState$colum[position]) == null ? void 0 : _table$getState$colum2.indexOf(column.id)) ?? -1 : 0;\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      getCenterVisibleCells: memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allCells, left, right) => {\n        const leftAndRight = [...(left ?? []), ...(right ?? [])];\n        return allCells.filter(d => !leftAndRight.includes(d.column.id));\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row.getCenterVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows\n      }),\n      getLeftVisibleCells: memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left,,], (allCells, left) => {\n        const cells = (left ?? []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({ ...d,\n          position: 'left'\n        }));\n        return cells;\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows\n      }),\n      getRightVisibleCells: memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.right], (allCells, right) => {\n        const cells = (right ?? []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({ ...d,\n          position: 'right'\n        }));\n        return cells;\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows\n      })\n    };\n  },\n  createTable: table => {\n    return {\n      setColumnPinning: updater => table.options.onColumnPinningChange == null ? void 0 : table.options.onColumnPinningChange(updater),\n      resetColumnPinning: defaultState => {\n        var _table$initialState;\n\n        return table.setColumnPinning(defaultState ? getDefaultPinningState() : ((_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnPinning) ?? getDefaultPinningState());\n      },\n      getIsSomeColumnsPinned: position => {\n        var _pinningState$positio;\n\n        const pinningState = table.getState().columnPinning;\n\n        if (!position) {\n          var _pinningState$left, _pinningState$right;\n\n          return Boolean(((_pinningState$left = pinningState.left) == null ? void 0 : _pinningState$left.length) || ((_pinningState$right = pinningState.right) == null ? void 0 : _pinningState$right.length));\n        }\n\n        return Boolean((_pinningState$positio = pinningState[position]) == null ? void 0 : _pinningState$positio.length);\n      },\n      getLeftLeafColumns: memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left], (allColumns, left) => {\n        return (left ?? []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns\n      }),\n      getRightLeafColumns: memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.right], (allColumns, right) => {\n        return (right ?? []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns\n      }),\n      getCenterLeafColumns: memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, left, right) => {\n        const leftAndRight = [...(left ?? []), ...(right ?? [])];\n        return allColumns.filter(d => !leftAndRight.includes(d.id));\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns\n      })\n    };\n  }\n};\n\n//\nconst RowSelection = {\n  getInitialState: state => {\n    return {\n      rowSelection: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n\n    };\n  },\n  createTable: table => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange == null ? void 0 : table.options.onRowSelectionChange(updater),\n      resetRowSelection: defaultState => table.setRowSelection(defaultState ? {} : table.initialState.rowSelection ?? {}),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected();\n          const rowSelection = { ...old\n          };\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows; // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return;\n              }\n\n              rowSelection[row.id] = true;\n            });\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id];\n            });\n          }\n\n          return rowSelection;\n        });\n      },\n      toggleAllPageRowsSelected: value => table.setRowSelection(old => {\n        const resolvedValue = typeof value !== 'undefined' ? value : !table.getIsAllPageRowsSelected();\n        const rowSelection = { ...old\n        };\n        table.getRowModel().rows.forEach(row => {\n          mutateRowIsSelected(rowSelection, row.id, resolvedValue, table);\n        });\n        return rowSelection;\n      }),\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n      //   let include = false\n      //   const selectedRowIds = {}\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(() => [table.getState().rowSelection, table.getCoreRowModel()], (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable\n      }),\n      getFilteredSelectedRowModel: memo(() => [table.getState().rowSelection, table.getFilteredRowModel()], (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'getFilteredSelectedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable\n      }),\n      getGroupedSelectedRowModel: memo(() => [table.getState().rowSelection, table.getSortedRowModel()], (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'getGroupedSelectedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable\n      }),\n      ///\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows;\n        const {\n          rowSelection\n        } = table.getState();\n        let isAllRowsSelected = Boolean(preGroupedFlatRows.length && Object.keys(rowSelection).length);\n\n        if (isAllRowsSelected) {\n          if (preGroupedFlatRows.some(row => row.getCanSelect() && !rowSelection[row.id])) {\n            isAllRowsSelected = false;\n          }\n        }\n\n        return isAllRowsSelected;\n      },\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows;\n        const {\n          rowSelection\n        } = table.getState();\n        let isAllPageRowsSelected = !!paginationFlatRows.length;\n\n        if (isAllPageRowsSelected && paginationFlatRows.some(row => !rowSelection[row.id])) {\n          isAllPageRowsSelected = false;\n        }\n\n        return isAllPageRowsSelected;\n      },\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(table.getState().rowSelection ?? {}).length;\n        return totalSelected > 0 && totalSelected < table.getFilteredRowModel().flatRows.length;\n      },\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows;\n        return table.getIsAllPageRowsSelected() ? false : paginationFlatRows.some(d => d.getIsSelected() || d.getIsSomeSelected());\n      },\n      getToggleAllRowsSelectedHandler: () => {\n        return e => {\n          table.toggleAllRowsSelected(e.target.checked);\n        };\n      },\n      getToggleAllPageRowsSelectedHandler: () => {\n        return e => {\n          table.toggleAllPageRowsSelected(e.target.checked);\n        };\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected();\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected;\n\n          if (isSelected === value) {\n            return old;\n          }\n\n          const selectedRowIds = { ...old\n          };\n          mutateRowIsSelected(selectedRowIds, row.id, value, table);\n          return selectedRowIds;\n        });\n      },\n      getIsSelected: () => {\n        const {\n          rowSelection\n        } = table.getState();\n        return isRowSelected(row, rowSelection);\n      },\n      getIsSomeSelected: () => {\n        const {\n          rowSelection\n        } = table.getState();\n        return isSubRowSelected(row, rowSelection) === 'some';\n      },\n      getIsAllSubRowsSelected: () => {\n        const {\n          rowSelection\n        } = table.getState();\n        return isSubRowSelected(row, rowSelection) === 'all';\n      },\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row);\n        }\n\n        return table.options.enableRowSelection ?? true;\n      },\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row);\n        }\n\n        return table.options.enableSubRowSelection ?? true;\n      },\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row);\n        }\n\n        return table.options.enableMultiRowSelection ?? true;\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect();\n        return e => {\n          var _target;\n\n          if (!canSelect) return;\n          row.toggleSelected((_target = e.target) == null ? void 0 : _target.checked);\n        };\n      }\n    };\n  }\n};\n\nconst mutateRowIsSelected = (selectedRowIds, id, value, table) => {\n  var _row$subRows;\n\n  const row = table.getRow(id); // const isGrouped = row.getIsGrouped()\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key]);\n    }\n\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true;\n    }\n  } else {\n    delete selectedRowIds[id];\n  } // }\n\n\n  if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row => mutateRowIsSelected(selectedRowIds, row.id, value, table));\n  }\n};\n\nfunction selectRowsFn(table, rowModel) {\n  const rowSelection = table.getState().rowSelection;\n  const newSelectedFlatRows = [];\n  const newSelectedRowsById = {}; // Filters top level and nested rows\n\n  const recurseRows = function (rows, depth) {\n\n    return rows.map(row => {\n      var _row$subRows2;\n\n      const isSelected = isRowSelected(row, rowSelection);\n\n      if (isSelected) {\n        newSelectedFlatRows.push(row);\n        newSelectedRowsById[row.id] = row;\n      }\n\n      if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length) {\n        row = { ...row,\n          subRows: recurseRows(row.subRows)\n        };\n      }\n\n      if (isSelected) {\n        return row;\n      }\n    }).filter(Boolean);\n  };\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById\n  };\n}\nfunction isRowSelected(row, selection) {\n  return selection[row.id] ?? false;\n}\nfunction isSubRowSelected(row, selection, table) {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true;\n    let someSelected = false;\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return;\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true;\n      } else {\n        allChildrenSelected = false;\n      }\n    });\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false;\n  }\n\n  return false;\n}\n\nconst reSplitAlphaNumeric = /([0-9]+)/gm;\n\nconst alphanumeric = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\n\nconst alphanumericCaseSensitive = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n}; // The text filter is more basic (less numeric support)\n// but is much faster\n\n\nconst text = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n}; // The text filter is more basic (less numeric support)\n// but is much faster\n\n\nconst textCaseSensitive = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\n\nconst datetime = (rowA, rowB, columnId) => {\n  const a = rowA.getValue(columnId);\n  const b = rowB.getValue(columnId); // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n\n  return a > b ? 1 : a < b ? -1 : 0;\n};\n\nconst basic = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId));\n}; // Utils\n\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1;\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return '';\n    }\n\n    return String(a);\n  }\n\n  if (typeof a === 'string') {\n    return a;\n  }\n\n  return '';\n} // Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\n\n\nfunction compareAlphanumeric(aStr, bStr) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean);\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean); // While\n\n  while (a.length && b.length) {\n    const aa = a.shift();\n    const bb = b.shift();\n    const an = parseInt(aa, 10);\n    const bn = parseInt(bb, 10);\n    const combo = [an, bn].sort(); // Both are string\n\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1;\n      }\n\n      if (bb > aa) {\n        return -1;\n      }\n\n      continue;\n    } // One is a string, one is a number\n\n\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1;\n    } // Both are numbers\n\n\n    if (an > bn) {\n      return 1;\n    }\n\n    if (bn > an) {\n      return -1;\n    }\n  }\n\n  return a.length - b.length;\n} // Exports\n\n\nconst sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic\n};\n\n//\nconst Sorting = {\n  getInitialState: state => {\n    return {\n      sorting: [],\n      ...state\n    };\n  },\n  getDefaultColumnDef: () => {\n    return {\n      sortingFn: 'auto'\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: e => {\n        return e.shiftKey;\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10);\n        let isString = false;\n\n        for (const row of firstRows) {\n          const value = row == null ? void 0 : row.getValue(column.id);\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime;\n          }\n\n          if (typeof value === 'string') {\n            isString = true;\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric;\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text;\n        }\n\n        return sortingFns.basic;\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0];\n        const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n\n        if (typeof value === 'string') {\n          return 'asc';\n        }\n\n        return 'desc';\n      },\n      getSortingFn: () => {\n        var _table$options$sortin;\n\n        if (!column) {\n          throw new Error();\n        }\n\n        return isFunction(column.columnDef.sortingFn) ? column.columnDef.sortingFn : column.columnDef.sortingFn === 'auto' ? column.getAutoSortingFn() : ((_table$options$sortin = table.options.sortingFns) == null ? void 0 : _table$options$sortin[column.columnDef.sortingFn]) ?? sortingFns[column.columnDef.sortingFn];\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder();\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null;\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old == null ? void 0 : old.find(d => d.id === column.id);\n          const existingIndex = old == null ? void 0 : old.findIndex(d => d.id === column.id);\n          let newSorting = []; // What should we do with this sort action?\n\n          let sortAction;\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'; // Multi-mode\n\n          if (old != null && old.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle';\n            } else {\n              sortAction = 'add';\n            }\n          } else {\n            // Normal mode\n            if (old != null && old.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace';\n            } else if (existingSorting) {\n              sortAction = 'toggle';\n            } else {\n              sortAction = 'replace';\n            }\n          } // Handle toggle states that will remove the sorting\n\n\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove';\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [...old, {\n              id: column.id,\n              desc: nextDesc\n            }]; // Take latest n columns\n\n            newSorting.splice(0, newSorting.length - (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER));\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return { ...d,\n                  desc: nextDesc\n                };\n              }\n\n              return d;\n            });\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id);\n          } else {\n            newSorting = [{\n              id: column.id,\n              desc: nextDesc\n            }];\n          }\n\n          return newSorting;\n        });\n      },\n      getFirstSortDir: () => {\n        const sortDescFirst = column.columnDef.sortDescFirst ?? table.options.sortDescFirst ?? column.getAutoSortDir() === 'desc';\n        return sortDescFirst ? 'desc' : 'asc';\n      },\n      getNextSortingOrder: multi => {\n        const firstSortDirection = column.getFirstSortDir();\n        const isSorted = column.getIsSorted();\n\n        if (!isSorted) {\n          return firstSortDirection;\n        }\n\n        if (isSorted !== firstSortDirection && (table.options.enableSortingRemoval ?? true) && ( // If enableSortRemove, enable in general\n        multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false;\n        }\n\n        return isSorted === 'desc' ? 'asc' : 'desc';\n      },\n      getCanSort: () => {\n        return (column.columnDef.enableSorting ?? true) && (table.options.enableSorting ?? true) && !!column.accessorFn;\n      },\n      getCanMultiSort: () => {\n        return column.columnDef.enableMultiSort ?? table.options.enableMultiSort ?? !!column.accessorFn;\n      },\n      getIsSorted: () => {\n        var _table$getState$sorti;\n\n        const columnSort = (_table$getState$sorti = table.getState().sorting) == null ? void 0 : _table$getState$sorti.find(d => d.id === column.id);\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc';\n      },\n      getSortIndex: () => {\n        var _table$getState$sorti2;\n\n        return ((_table$getState$sorti2 = table.getState().sorting) == null ? void 0 : _table$getState$sorti2.findIndex(d => d.id === column.id)) ?? -1;\n      },\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old => old != null && old.length ? old.filter(d => d.id !== column.id) : []);\n      },\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort();\n        return e => {\n          if (!canSort) return;\n          e.persist == null ? void 0 : e.persist();\n          column.toggleSorting == null ? void 0 : column.toggleSorting(undefined, column.getCanMultiSort() ? table.options.isMultiSortEvent == null ? void 0 : table.options.isMultiSortEvent(e) : false);\n        };\n      }\n    };\n  },\n  createTable: table => {\n    return {\n      setSorting: updater => table.options.onSortingChange == null ? void 0 : table.options.onSortingChange(updater),\n      resetSorting: defaultState => {\n        var _table$initialState;\n\n        table.setSorting(defaultState ? [] : ((_table$initialState = table.initialState) == null ? void 0 : _table$initialState.sorting) ?? []);\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table);\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel();\n        }\n\n        return table._getSortedRowModel();\n      }\n    };\n  }\n};\n\n//\nconst Visibility = {\n  getInitialState: state => {\n    return {\n      columnVisibility: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table)\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({ ...old,\n            [column.id]: value ?? !column.getIsVisible()\n          }));\n        }\n      },\n      getIsVisible: () => {\n        var _table$getState$colum;\n\n        return ((_table$getState$colum = table.getState().columnVisibility) == null ? void 0 : _table$getState$colum[column.id]) ?? true;\n      },\n      getCanHide: () => {\n        return (column.columnDef.enableHiding ?? true) && (table.options.enableHiding ?? true);\n      },\n      getToggleVisibilityHandler: () => {\n        return e => {\n          column.toggleVisibility == null ? void 0 : column.toggleVisibility(e.target.checked);\n        };\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      _getAllVisibleCells: memo(() => [row.getAllCells(), table.getState().columnVisibility], cells => {\n        return cells.filter(cell => cell.column.getIsVisible());\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows\n      }),\n      getVisibleCells: memo(() => [row.getLeftVisibleCells(), row.getCenterVisibleCells(), row.getRightVisibleCells()], (left, center, right) => [...left, ...center, ...right], {\n        key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows\n      })\n    };\n  },\n  createTable: table => {\n    const makeVisibleColumnsMethod = (key, getColumns) => {\n      return memo(() => [getColumns(), getColumns().filter(d => d.getIsVisible()).map(d => d.id).join('_')], columns => {\n        return columns.filter(d => d.getIsVisible == null ? void 0 : d.getIsVisible());\n      }, {\n        key,\n        debug: () => table.options.debugAll ?? table.options.debugColumns\n      });\n    };\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod('getVisibleFlatColumns', () => table.getAllFlatColumns()),\n      getVisibleLeafColumns: makeVisibleColumnsMethod('getVisibleLeafColumns', () => table.getAllLeafColumns()),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod('getLeftVisibleLeafColumns', () => table.getLeftLeafColumns()),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod('getRightVisibleLeafColumns', () => table.getRightLeafColumns()),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod('getCenterVisibleLeafColumns', () => table.getCenterLeafColumns()),\n      setColumnVisibility: updater => table.options.onColumnVisibilityChange == null ? void 0 : table.options.onColumnVisibilityChange(updater),\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(defaultState ? {} : table.initialState.columnVisibility ?? {});\n      },\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible();\n        table.setColumnVisibility(table.getAllLeafColumns().reduce((obj, column) => ({ ...obj,\n          [column.id]: !value ? !(column.getCanHide != null && column.getCanHide()) : value\n        }), {}));\n      },\n      getIsAllColumnsVisible: () => !table.getAllLeafColumns().some(column => !(column.getIsVisible != null && column.getIsVisible())),\n      getIsSomeColumnsVisible: () => table.getAllLeafColumns().some(column => column.getIsVisible == null ? void 0 : column.getIsVisible()),\n      getToggleAllColumnsVisibilityHandler: () => {\n        return e => {\n          var _target;\n\n          table.toggleAllColumnsVisible((_target = e.target) == null ? void 0 : _target.checked);\n        };\n      }\n    };\n  }\n};\n\nconst features = [Headers, Visibility, Ordering, Pinning, Filters, Sorting, Grouping, Expanding, Pagination, RowSelection, ColumnSizing]; //\n\nfunction createTable(options) {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...');\n  }\n\n  let table = {\n    _features: features\n  };\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions == null ? void 0 : feature.getDefaultOptions(table));\n  }, {});\n\n  const mergeOptions = options => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options);\n    }\n\n    return { ...defaultOptions,\n      ...options\n    };\n  };\n\n  const coreInitialState = {};\n  let initialState = { ...coreInitialState,\n    ...(options.initialState ?? {})\n  };\n\n  table._features.forEach(feature => {\n    initialState = (feature.getInitialState == null ? void 0 : feature.getInitialState(initialState)) ?? initialState;\n  });\n\n  const queued = [];\n  let queuedTimeout = false;\n  const coreInstance = {\n    _features: features,\n    options: { ...defaultOptions,\n      ...options\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb);\n\n      if (!queuedTimeout) {\n        queuedTimeout = true; // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n\n        Promise.resolve().then(() => {\n          while (queued.length) {\n            queued.shift()();\n          }\n\n          queuedTimeout = false;\n        }).catch(error => setTimeout(() => {\n          throw error;\n        }));\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState);\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options);\n      table.options = mergeOptions(newOptions);\n    },\n    getState: () => {\n      return table.options.state;\n    },\n    setState: updater => {\n      table.options.onStateChange == null ? void 0 : table.options.onStateChange(updater);\n    },\n    _getRowId: (row, index, parent) => (table.options.getRowId == null ? void 0 : table.options.getRowId(row, index, parent)) ?? `${parent ? [parent.id, index].join('.') : index}`,\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table);\n      }\n\n      return table._getCoreRowModel();\n    },\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n    getRowModel: () => {\n      return table.getPaginationRowModel();\n    },\n    getRow: id => {\n      const row = table.getRowModel().rowsById[id];\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`);\n        }\n\n        throw new Error();\n      }\n\n      return row;\n    },\n    _getDefaultColumnDef: memo(() => [table.options.defaultColumn], defaultColumn => {\n      defaultColumn = defaultColumn ?? {};\n      return {\n        header: props => {\n          const resolvedColumnDef = props.header.column.columnDef;\n\n          if (resolvedColumnDef.accessorKey) {\n            return resolvedColumnDef.accessorKey;\n          }\n\n          if (resolvedColumnDef.accessorFn) {\n            return resolvedColumnDef.id;\n          }\n\n          return null;\n        },\n        // footer: props => props.header.column.id,\n        cell: props => {\n          var _props$renderValue;\n\n          return ((_props$renderValue = props.renderValue()) == null ? void 0 : _props$renderValue.toString == null ? void 0 : _props$renderValue.toString()) ?? null;\n        },\n        ...table._features.reduce((obj, feature) => {\n          return Object.assign(obj, feature.getDefaultColumnDef == null ? void 0 : feature.getDefaultColumnDef());\n        }, {}),\n        ...defaultColumn\n      };\n    }, {\n      debug: () => table.options.debugAll ?? table.options.debugColumns,\n      key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef'\n    }),\n    _getColumnDefs: () => table.options.columns,\n    getAllColumns: memo(() => [table._getColumnDefs()], columnDefs => {\n      const recurseColumns = function (columnDefs, parent, depth) {\n        if (depth === void 0) {\n          depth = 0;\n        }\n\n        return columnDefs.map(columnDef => {\n          const column = createColumn(table, columnDef, depth, parent);\n          const groupingColumnDef = columnDef;\n          column.columns = groupingColumnDef.columns ? recurseColumns(groupingColumnDef.columns, column, depth + 1) : [];\n          return column;\n        });\n      };\n\n      return recurseColumns(columnDefs);\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n      debug: () => table.options.debugAll ?? table.options.debugColumns\n    }),\n    getAllFlatColumns: memo(() => [table.getAllColumns()], allColumns => {\n      return allColumns.flatMap(column => {\n        return column.getFlatColumns();\n      });\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n      debug: () => table.options.debugAll ?? table.options.debugColumns\n    }),\n    _getAllFlatColumnsById: memo(() => [table.getAllFlatColumns()], flatColumns => {\n      return flatColumns.reduce((acc, column) => {\n        acc[column.id] = column;\n        return acc;\n      }, {});\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n      debug: () => table.options.debugAll ?? table.options.debugColumns\n    }),\n    getAllLeafColumns: memo(() => [table.getAllColumns(), table._getOrderColumnsFn()], (allColumns, orderColumns) => {\n      let leafColumns = allColumns.flatMap(column => column.getLeafColumns());\n      return orderColumns(leafColumns);\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n      debug: () => table.options.debugAll ?? table.options.debugColumns\n    }),\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId];\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`[Table] Column with id ${columnId} does not exist.`);\n        }\n\n        throw new Error();\n      }\n\n      return column;\n    }\n  };\n  Object.assign(table, coreInstance);\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable == null ? void 0 : feature.createTable(table));\n  });\n\n  return table;\n}\n\nfunction createCell(table, row, column, columnId) {\n  const getRenderValue = () => cell.getValue() ?? table.options.renderFallbackValue;\n\n  const cell = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(() => [table, column, row, cell], (table, column, row, cell) => ({\n      table,\n      column,\n      row,\n      cell: cell,\n      getValue: cell.getValue,\n      renderValue: cell.renderValue\n    }), {\n      key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n      debug: () => table.options.debugAll\n    })\n  };\n\n  table._features.forEach(feature => {\n    Object.assign(cell, feature.createCell == null ? void 0 : feature.createCell(cell, column, row, table));\n  }, {});\n\n  return cell;\n}\n\nconst createRow = (table, id, original, rowIndex, depth, subRows) => {\n  let row = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    _valuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId];\n      }\n\n      const column = table.getColumn(columnId);\n\n      if (!column.accessorFn) {\n        return undefined;\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(row.original, rowIndex);\n      return row._valuesCache[columnId];\n    },\n    renderValue: columnId => row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getAllCells: memo(() => [table.getAllLeafColumns()], leafColumns => {\n      return leafColumns.map(column => {\n        return createCell(table, row, column, column.id);\n      });\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n      debug: () => table.options.debugAll ?? table.options.debugRows\n    }),\n    _getAllCellsByColumnId: memo(() => [row.getAllCells()], allCells => {\n      return allCells.reduce((acc, cell) => {\n        acc[cell.column.id] = cell;\n        return acc;\n      }, {});\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n      debug: () => table.options.debugAll ?? table.options.debugRows\n    })\n  };\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i];\n    Object.assign(row, feature == null ? void 0 : feature.createRow == null ? void 0 : feature.createRow(row, table));\n  }\n\n  return row;\n};\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n// const helper = createColumnHelper<Person>()\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\nfunction createColumnHelper() {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function' ? { ...column,\n        accessorFn: accessor\n      } : { ...column,\n        accessorKey: accessor\n      };\n    },\n    display: column => column,\n    group: column => column\n  };\n}\n\nfunction getCoreRowModel() {\n  return table => memo(() => [table.options.data], data => {\n    const rowModel = {\n      rows: [],\n      flatRows: [],\n      rowsById: {}\n    };\n\n    const accessRows = function (originalRows, depth, parent) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n\n      const rows = [];\n\n      for (let i = 0; i < originalRows.length; i++) {\n        // This could be an expensive check at scale, so we should move it somewhere else, but where?\n        // if (!id) {\n        //   if (process.env.NODE_ENV !== 'production') {\n        //     throw new Error(`getRowId expected an ID, but got ${id}`)\n        //   }\n        // }\n        // Make the row\n        const row = createRow(table, table._getRowId(originalRows[i], i, parent), originalRows[i], i, depth); // Keep track of every row in a flat array\n\n        rowModel.flatRows.push(row); // Also keep track of every row by its ID\n\n        rowModel.rowsById[row.id] = row; // Push table row into parent\n\n        rows.push(row); // Get the original subrows\n\n        if (table.options.getSubRows) {\n          var _row$originalSubRows;\n\n          row.originalSubRows = table.options.getSubRows(originalRows[i], i); // Then recursively access them\n\n          if ((_row$originalSubRows = row.originalSubRows) != null && _row$originalSubRows.length) {\n            row.subRows = accessRows(row.originalSubRows, depth + 1, row);\n          }\n        }\n      }\n\n      return rows;\n    };\n\n    rowModel.rows = accessRows(data);\n    return rowModel;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getRowModel',\n    debug: () => table.options.debugAll ?? table.options.debugTable,\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\n\nfunction filterRows(rows, filterRowImpl, table) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table);\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table);\n}\nfunction filterRowModelFromLeafs(rowsToFilter, filterRow, table) {\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {};\n\n  const recurseFilterRows = function (rowsToFilter, depth) {\n\n    const rows = []; // Filter from children up first\n\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      var _row$subRows;\n\n      let row = rowsToFilter[i];\n\n      if ((_row$subRows = row.subRows) != null && _row$subRows.length) {\n        const newRow = createRow(table, row.id, row.original, row.index, row.depth);\n        newRow.columnFilters = row.columnFilters;\n        newRow.subRows = recurseFilterRows(row.subRows);\n\n        if (!newRow.subRows.length) {\n          continue;\n        }\n\n        row = newRow;\n      }\n\n      if (filterRow(row)) {\n        rows.push(row);\n        newFilteredRowsById[row.id] = row;\n        newFilteredRowsById[i] = row;\n      }\n    }\n\n    return rows;\n  };\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\nfunction filterRowModelFromRoot(rowsToFilter, filterRow, table) {\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {}; // Filters top level and nested rows\n\n  const recurseFilterRows = function (rowsToFilter, depth) {\n\n    // Filter from parents downward first\n    const rows = []; // Apply the filter to any subRows\n\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i];\n      const pass = filterRow(row);\n\n      if (pass) {\n        var _row$subRows2;\n\n        if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length) {\n          const newRow = createRow(table, row.id, row.original, row.index, row.depth);\n          newRow.subRows = recurseFilterRows(row.subRows);\n          row = newRow;\n        }\n\n        rows.push(row);\n        newFilteredFlatRows.push(row);\n        newFilteredRowsById[row.id] = row;\n      }\n    }\n\n    return rows;\n  };\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\n\nfunction getFilteredRowModel() {\n  return table => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter], (rowModel, columnFilters, globalFilter) => {\n    if (!rowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n      for (let i = 0; i < rowModel.flatRows.length; i++) {\n        rowModel.flatRows[i].columnFilters = {};\n        rowModel.flatRows[i].columnFiltersMeta = {};\n      }\n\n      return rowModel;\n    }\n\n    const resolvedColumnFilters = [];\n    const resolvedGlobalFilters = [];\n    (columnFilters ?? []).forEach(d => {\n      const column = table.getColumn(d.id);\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`Table: Could not find a column to filter with columnId: ${d.id}`);\n        }\n      }\n\n      const filterFn = column.getFilterFn();\n\n      if (!filterFn) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`);\n        }\n\n        return;\n      }\n\n      resolvedColumnFilters.push({\n        id: d.id,\n        filterFn,\n        resolvedValue: (filterFn.resolveFilterValue == null ? void 0 : filterFn.resolveFilterValue(d.value)) ?? d.value\n      });\n    });\n    const filterableIds = columnFilters.map(d => d.id);\n    const globalFilterFn = table.getGlobalFilterFn();\n    const globallyFilterableColumns = table.getAllLeafColumns().filter(column => column.getCanGlobalFilter());\n\n    if (globalFilter && globalFilterFn && globallyFilterableColumns.length) {\n      filterableIds.push('__global__');\n      globallyFilterableColumns.forEach(column => {\n        resolvedGlobalFilters.push({\n          id: column.id,\n          filterFn: globalFilterFn,\n          resolvedValue: (globalFilterFn.resolveFilterValue == null ? void 0 : globalFilterFn.resolveFilterValue(globalFilter)) ?? globalFilter\n        });\n      });\n    }\n\n    let currentColumnFilter;\n    let currentGlobalFilter; // Flag the prefiltered row model with each filter state\n\n    for (let j = 0; j < rowModel.flatRows.length; j++) {\n      const row = rowModel.flatRows[j];\n      row.columnFilters = {};\n\n      if (resolvedColumnFilters.length) {\n        for (let i = 0; i < resolvedColumnFilters.length; i++) {\n          currentColumnFilter = resolvedColumnFilters[i];\n          const id = currentColumnFilter.id; // Tag the row with the column filter state\n\n          row.columnFilters[id] = currentColumnFilter.filterFn(row, id, currentColumnFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          });\n        }\n      }\n\n      if (resolvedGlobalFilters.length) {\n        for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n          currentGlobalFilter = resolvedGlobalFilters[i];\n          const id = currentGlobalFilter.id; // Tag the row with the first truthy global filter state\n\n          if (currentGlobalFilter.filterFn(row, id, currentGlobalFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          })) {\n            row.columnFilters.__global__ = true;\n            break;\n          }\n        }\n\n        if (row.columnFilters.__global__ !== true) {\n          row.columnFilters.__global__ = false;\n        }\n      }\n    }\n\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n\n      return true;\n    }; // Filter final rows using all of the active filters\n\n\n    return filterRows(rowModel.rows, filterRowsImpl, table);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n    debug: () => table.options.debugAll ?? table.options.debugTable,\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\n\nfunction getFacetedRowModel() {\n  return (table, columnId) => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter, table.getFilteredRowModel()], (preRowModel, columnFilters, globalFilter) => {\n    if (!preRowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n      return preRowModel;\n    }\n\n    const filterableIds = [...columnFilters.map(d => d.id).filter(d => d !== columnId), globalFilter ? '__global__' : undefined].filter(Boolean);\n\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    return filterRows(preRowModel.rows, filterRowsImpl, table);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFacetedRowModel_' + columnId,\n    debug: () => table.options.debugAll ?? table.options.debugTable,\n    onChange: () => {}\n  });\n}\n\nfunction getFacetedUniqueValues() {\n  return (table, columnId) => memo(() => [table.getColumn(columnId).getFacetedRowModel()], facetedRowModel => {\n    let facetedUniqueValues = new Map();\n\n    for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n      var _facetedRowModel$flat;\n\n      const value = (_facetedRowModel$flat = facetedRowModel.flatRows[i]) == null ? void 0 : _facetedRowModel$flat.getValue(columnId);\n\n      if (facetedUniqueValues.has(value)) {\n        facetedUniqueValues.set(value, (facetedUniqueValues.get(value) ?? 0) + 1);\n      } else {\n        facetedUniqueValues.set(value, 1);\n      }\n    }\n\n    return facetedUniqueValues;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFacetedUniqueValues_' + columnId,\n    debug: () => table.options.debugAll ?? table.options.debugTable,\n    onChange: () => {}\n  });\n}\n\nfunction getFacetedMinMaxValues() {\n  return (table, columnId) => memo(() => [table.getColumn(columnId).getFacetedRowModel()], facetedRowModel => {\n    var _facetedRowModel$flat;\n\n    const firstValue = (_facetedRowModel$flat = facetedRowModel.flatRows[0]) == null ? void 0 : _facetedRowModel$flat.getValue(columnId);\n\n    if (typeof firstValue === 'undefined') {\n      return undefined;\n    }\n\n    let facetedMinMaxValues = [firstValue, firstValue];\n\n    for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n      const value = facetedRowModel.flatRows[i].getValue(columnId);\n\n      if (value < facetedMinMaxValues[0]) {\n        facetedMinMaxValues[0] = value;\n      } else if (value > facetedMinMaxValues[1]) {\n        facetedMinMaxValues[1] = value;\n      }\n    }\n\n    return facetedMinMaxValues;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFacetedMinMaxValues_' + columnId,\n    debug: () => table.options.debugAll ?? table.options.debugTable,\n    onChange: () => {}\n  });\n}\n\nfunction getSortedRowModel() {\n  return table => memo(() => [table.getState().sorting, table.getPreSortedRowModel()], (sorting, rowModel) => {\n    if (!rowModel.rows.length || !(sorting != null && sorting.length)) {\n      return rowModel;\n    }\n\n    const sortingState = table.getState().sorting;\n    const sortedFlatRows = []; // Filter out sortings that correspond to non existing columns\n\n    const availableSorting = sortingState.filter(sort => table.getColumn(sort.id).getCanSort());\n    const columnInfoById = {};\n    availableSorting.forEach(sortEntry => {\n      const column = table.getColumn(sortEntry.id);\n      columnInfoById[sortEntry.id] = {\n        sortUndefined: column.columnDef.sortUndefined,\n        invertSorting: column.columnDef.invertSorting,\n        sortingFn: column.getSortingFn()\n      };\n    });\n\n    const sortData = rows => {\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = rows.slice();\n      sortedData.sort((rowA, rowB) => {\n        for (let i = 0; i < availableSorting.length; i += 1) {\n          const sortEntry = availableSorting[i];\n          const columnInfo = columnInfoById[sortEntry.id];\n          const isDesc = (sortEntry == null ? void 0 : sortEntry.desc) ?? false;\n\n          if (columnInfo.sortUndefined) {\n            const aValue = rowA.getValue(sortEntry.id);\n            const bValue = rowB.getValue(sortEntry.id);\n            const aUndefined = typeof aValue === 'undefined';\n            const bUndefined = typeof bValue === 'undefined';\n\n            if (aUndefined || bUndefined) {\n              return aUndefined && bUndefined ? 0 : aUndefined ? columnInfo.sortUndefined : -columnInfo.sortUndefined;\n            }\n          } // This function should always return in ascending order\n\n\n          let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id);\n\n          if (sortInt !== 0) {\n            if (isDesc) {\n              sortInt *= -1;\n            }\n\n            if (columnInfo.invertSorting) {\n              sortInt *= -1;\n            }\n\n            return sortInt;\n          }\n        }\n\n        return rowA.index - rowB.index;\n      }); // If there are sub-rows, sort them\n\n      sortedData.forEach(row => {\n        sortedFlatRows.push(row);\n\n        if (!row.subRows || row.subRows.length <= 1) {\n          return;\n        }\n\n        row.subRows = sortData(row.subRows);\n      });\n      return sortedData;\n    };\n\n    return {\n      rows: sortData(rowModel.rows),\n      flatRows: sortedFlatRows,\n      rowsById: rowModel.rowsById\n    };\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n    debug: () => table.options.debugAll ?? table.options.debugTable,\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\n\nfunction getGroupedRowModel() {\n  return table => memo(() => [table.getState().grouping, table.getPreGroupedRowModel()], (grouping, rowModel) => {\n    if (!rowModel.rows.length || !grouping.length) {\n      return rowModel;\n    } // Filter the grouping list down to columns that exist\n\n\n    const existingGrouping = grouping.filter(columnId => table.getColumn(columnId));\n    const groupedFlatRows = [];\n    const groupedRowsById = {}; // const onlyGroupedFlatRows: Row[] = [];\n    // const onlyGroupedRowsById: Record<RowId, Row> = {};\n    // const nonGroupedFlatRows: Row[] = [];\n    // const nonGroupedRowsById: Record<RowId, Row> = {};\n    // Recursively group the data\n\n    const groupUpRecursively = function (rows, depth, parentId) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n\n      // Grouping depth has been been met\n      // Stop grouping and simply rewrite thd depth and row relationships\n      if (depth >= existingGrouping.length) {\n        return rows.map(row => {\n          row.depth = depth;\n          groupedFlatRows.push(row);\n          groupedRowsById[row.id] = row;\n\n          if (row.subRows) {\n            row.subRows = groupUpRecursively(row.subRows, depth + 1);\n          }\n\n          return row;\n        });\n      }\n\n      const columnId = existingGrouping[depth]; // Group the rows together for this level\n\n      const rowGroupsMap = groupBy(rows, columnId); // Peform aggregations for each group\n\n      const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map((_ref, index) => {\n        let [groupingValue, groupedRows] = _ref;\n        let id = `${columnId}:${groupingValue}`;\n        id = parentId ? `${parentId}>${id}` : id; // First, Recurse to group sub rows before aggregation\n\n        const subRows = groupUpRecursively(groupedRows, depth + 1, id); // Flatten the leaf rows of the rows in this group\n\n        const leafRows = depth ? flattenBy(groupedRows, row => row.subRows) : groupedRows;\n        const row = createRow(table, id, leafRows[0].original, index, depth);\n        Object.assign(row, {\n          groupingColumnId: columnId,\n          groupingValue,\n          subRows,\n          leafRows,\n          getValue: columnId => {\n            // Don't aggregate columns that are in the grouping\n            if (existingGrouping.includes(columnId)) {\n              if (row._valuesCache.hasOwnProperty(columnId)) {\n                return row._valuesCache[columnId];\n              }\n\n              if (groupedRows[0]) {\n                row._valuesCache[columnId] = groupedRows[0].getValue(columnId) ?? undefined;\n              }\n\n              return row._valuesCache[columnId];\n            }\n\n            if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n              return row._groupingValuesCache[columnId];\n            } // Aggregate the values\n\n\n            const column = table.getColumn(columnId);\n            const aggregateFn = column.getAggregationFn();\n\n            if (aggregateFn) {\n              row._groupingValuesCache[columnId] = aggregateFn(columnId, leafRows, groupedRows);\n              return row._groupingValuesCache[columnId];\n            }\n          }\n        });\n        subRows.forEach(subRow => {\n          groupedFlatRows.push(subRow);\n          groupedRowsById[subRow.id] = subRow; // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        });\n        return row;\n      });\n      return aggregatedGroupedRows;\n    };\n\n    const groupedRows = groupUpRecursively(rowModel.rows, 0, '');\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow);\n      groupedRowsById[subRow.id] = subRow; // if (subRow.getIsGrouped?.()) {\n      //   onlyGroupedFlatRows.push(subRow);\n      //   onlyGroupedRowsById[subRow.id] = subRow;\n      // } else {\n      //   nonGroupedFlatRows.push(subRow);\n      //   nonGroupedRowsById[subRow.id] = subRow;\n      // }\n    });\n    return {\n      rows: groupedRows,\n      flatRows: groupedFlatRows,\n      rowsById: groupedRowsById\n    };\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n    debug: () => table.options.debugAll ?? table.options.debugTable,\n    onChange: () => {\n      table._queue(() => {\n        table._autoResetExpanded();\n\n        table._autoResetPageIndex();\n      });\n    }\n  });\n}\n\nfunction groupBy(rows, columnId) {\n  const groupMap = new Map();\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getValue(columnId)}`;\n    const previous = map.get(resKey);\n\n    if (!previous) {\n      map.set(resKey, [row]);\n    } else {\n      map.set(resKey, [...previous, row]);\n    }\n\n    return map;\n  }, groupMap);\n}\n\nfunction getExpandedRowModel() {\n  return table => memo(() => [table.getState().expanded, table.getPreExpandedRowModel(), table.options.paginateExpandedRows], (expanded, rowModel, paginateExpandedRows) => {\n    if (!rowModel.rows.length || expanded !== true && !Object.keys(expanded ?? {}).length) {\n      return rowModel;\n    }\n\n    if (!paginateExpandedRows) {\n      // Only expand rows at this point if they are being paginated\n      return rowModel;\n    }\n\n    return expandRows(rowModel);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n    debug: () => table.options.debugAll ?? table.options.debugTable\n  });\n}\nfunction expandRows(rowModel) {\n  const expandedRows = [];\n\n  const handleRow = row => {\n    var _row$subRows;\n\n    expandedRows.push(row);\n\n    if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow);\n    }\n  };\n\n  rowModel.rows.forEach(handleRow);\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById\n  };\n}\n\nfunction getPaginationRowModel(opts) {\n  return table => memo(() => [table.getState().pagination, table.getPrePaginationRowModel(), table.options.paginateExpandedRows ? undefined : table.getState().expanded], (pagination, rowModel) => {\n    if (!rowModel.rows.length) {\n      return rowModel;\n    }\n\n    const {\n      pageSize,\n      pageIndex\n    } = pagination;\n    let {\n      rows,\n      flatRows,\n      rowsById\n    } = rowModel;\n    const pageStart = pageSize * pageIndex;\n    const pageEnd = pageStart + pageSize;\n    rows = rows.slice(pageStart, pageEnd);\n    let paginatedRowModel;\n\n    if (!table.options.paginateExpandedRows) {\n      paginatedRowModel = expandRows({\n        rows,\n        flatRows,\n        rowsById\n      });\n    } else {\n      paginatedRowModel = {\n        rows,\n        flatRows,\n        rowsById\n      };\n    }\n\n    paginatedRowModel.flatRows = [];\n\n    const handleRow = row => {\n      paginatedRowModel.flatRows.push(row);\n\n      if (row.subRows.length) {\n        row.subRows.forEach(handleRow);\n      }\n    };\n\n    paginatedRowModel.rows.forEach(handleRow);\n    return paginatedRowModel;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n    debug: () => table.options.debugAll ?? table.options.debugTable\n  });\n}\n\nexport { ColumnSizing, Expanding, Filters, Grouping, Headers, Ordering, Pagination, Pinning, RowSelection, Sorting, Visibility, aggregationFns, buildHeaderGroups, createCell, createColumn, createColumnHelper, createRow, createTable, defaultColumnSizing, expandRows, filterFns, flattenBy, functionalUpdate, getCoreRowModel, getExpandedRowModel, getFacetedMinMaxValues, getFacetedRowModel, getFacetedUniqueValues, getFilteredRowModel, getGroupedRowModel, getPaginationRowModel, getSortedRowModel, isFunction, isRowSelected, isSubRowSelected, makeStateUpdater, memo, noop, orderColumns, passiveEventSupported, reSplitAlphaNumeric, selectRowsFn, shouldAutoRemoveFilter, sortingFns };\n//# sourceMappingURL=index.js.map\n","import * as React from 'react'\nexport * from '@tanstack/table-core'\n\nimport {\n  TableOptions,\n  TableOptionsResolved,\n  RowData,\n  createTable,\n} from '@tanstack/table-core'\n\nexport type Renderable<TProps> = React.ReactNode | React.ComponentType<TProps>\n\n//\n\nexport function flexRender<TProps extends object>(\n  Comp: Renderable<TProps>,\n  props: TProps\n): React.ReactNode | JSX.Element {\n  return !Comp ? null : isReactComponent<TProps>(Comp) ? (\n    <Comp {...props} />\n  ) : (\n    Comp\n  )\n}\n\nfunction isReactComponent<TProps>(\n  component: unknown\n): component is React.ComponentType<TProps> {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component: any) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component: any) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\nexport function useReactTable<TData extends RowData>(\n  options: TableOptions<TData>\n) {\n  // Compose in the generic options to the user options\n  const resolvedOptions: TableOptionsResolved<TData> = {\n    state: {}, // Dummy state\n    onStateChange: () => {}, // noop\n    renderFallbackValue: null,\n    ...options,\n  }\n\n  // Create a new table and store it in state\n  const [tableRef] = React.useState(() => ({\n    current: createTable<TData>(resolvedOptions),\n  }))\n\n  // By default, manage table state here using the table's initial state\n  const [state, setState] = React.useState(() => tableRef.current.initialState)\n\n  // Compose the default state above with any user state. This will allow the user\n  // to only control a subset of the state if desired.\n  tableRef.current.setOptions(prev => ({\n    ...prev,\n    ...options,\n    state: {\n      ...state,\n      ...options.state,\n    },\n    // Similarly, we'll maintain both our internal state and any user-provided\n    // state.\n    onStateChange: updater => {\n      setState(updater)\n      options.onStateChange?.(updater)\n    },\n  }))\n\n  return tableRef.current\n}\n"],"names":["functionalUpdate","updater","input","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","result","deps","depTime","debug","Date","now","newDeps","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","resolvedColumnDef","_getDefaultColumnDef","accessorKey","accessorFn","id","replace","undefined","header","includes","originalRow","split","Error","column","columns","getFlatColumns","_column$columns","flatMap","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","leafColumns","_features","reduce","obj","feature","Object","assign","createHeader","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","leftColumns","columnId","find","filter","Boolean","rightColumns","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","getRightHeaderGroups","getFooterGroups","headerGroups","reverse","getLeftFooterGroups","getCenterFooterGroups","getRightFooterGroups","getFlatHeaders","headers","getLeftFlatHeaders","getCenterFlatHeaders","getRightFlatHeaders","getCenterLeafHeaders","flatHeaders","_header$subHeaders","getLeftLeafHeaders","_header$subHeaders2","getRightLeafHeaders","_header$subHeaders3","center","_left$","_center$","_right$","columnsToGroup","headerFamily","_headerGroups$","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","bottomHeaders","recurseHeadersForSpans","childRowSpans","_ref","childColSpan","childRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_","rest","getCanResize","enableResizing","enableColumnResizing","getIsResizing","sum","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","updateOffset","eventType","clientXPos","newColumnSizing","setColumnSizingInfo","_ref2","headerSize","mouseEvents","moveHandler","onMove","upHandler","document","removeEventListener","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","initialState","resetHeaderSizeInfo","getTotalSize","_table$getHeaderGroup","getLeftTotalSize","_table$getLeftHeaderG","getCenterTotalSize","_table$getCenterHeade","getRightTotalSize","_table$getRightHeader","passiveSupported","supported","noop","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","autoResetAll","autoResetExpanded","manualExpanding","_queue","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState","getCanSomeRowsExpand","getRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getIsExpanded","getExpandedDepth","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","exists","oldExpanded","rowId","getIsRowExpanded","_row$subRows","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","_row$getValue","search","toLowerCase","getValue","autoRemove","val","testFalsey","includesStringSensitive","_row$getValue2","equalsString","_row$getValue3","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","globalFilterFn","getColumnCanGlobalFilter","_table$getCoreRowMode","_table$getCoreRowMode2","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","Array","isArray","getFilterFn","_table$options$filter","getCanFilter","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","setFilterValue","setColumnFilters","previousfilter","newFilter","shouldAutoRemoveFilter","newFilterObj","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter2","getAllLeafColumns","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","aggregationFns","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","unique","from","Set","uniqueCount","_columnId","Grouping","aggregatedCell","props","_props$getValue","toString","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","_table$getState$group","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","_table$options$aggreg","resetGrouping","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","_groupingValuesCache","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","Pagination","pagination","pageIndex","pageSize","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","resetPagination","setPageIndex","maxPageIndex","pageCount","_table$initialState$p","resetPageSize","_table$initialState2","_table$initialState2$","setPageSize","topRowIndex","floor","setPageCount","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPrePaginationRowModel","getPaginationRowModel","_getPaginationRowModel","ceil","rows","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","getCanPin","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","compareBasic","a","b","compareAlphanumeric","aStr","bStr","aa","bb","an","parseInt","bn","combo","sort","sortingFns","alphanumeric","rowA","rowB","alphanumericCaseSensitive","text","textCaseSensitive","datetime","basic","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","_table$options$sortin","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","sortAction","newSorting","nextDesc","getCanMultiSort","maxMultiSortColCount","getFirstSortDir","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","_table$getState$sorti","columnSort","getSortIndex","_table$getState$sorti2","clearSorting","getToggleSortingHandler","canSort","resetSorting","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","cells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","defaultOptions","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","mergeOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","defaultColumn","_props$renderValue","renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","acc","renderFallbackValue","original","rowIndex","_valuesCache","hasOwnProperty","getLeafRows","filterRows","filterRowImpl","rowsToFilter","filterRow","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","filterRowModelFromLeafs","filterRowModelFromRoot","expandRows","expandedRows","handleRow","accessor","display","group","Comp","component","proto","getPrototypeOf","isReactComponent","isClassComponent","$$typeof","description","isExoticComponent","React","data","accessRows","originalRows","_row$originalSubRows","getSubRows","originalSubRows","facetedRowModel","_facetedRowModel$flat","firstValue","facetedMinMaxValues","preRowModel","filterableIds","facetedUniqueValues","has","set","get","resolvedColumnFilters","resolvedGlobalFilters","globallyFilterableColumns","currentColumnFilter","currentGlobalFilter","j","filterMeta","__global__","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","parentId","rowGroupsMap","groupMap","resKey","previous","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","aggregateFn","pageStart","pageEnd","paginatedRowModel","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","columnInfo","isDesc","aUndefined","bUndefined","sortInt","resolvedOptions","tableRef","useState","current","prev"],"mappings":"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"}