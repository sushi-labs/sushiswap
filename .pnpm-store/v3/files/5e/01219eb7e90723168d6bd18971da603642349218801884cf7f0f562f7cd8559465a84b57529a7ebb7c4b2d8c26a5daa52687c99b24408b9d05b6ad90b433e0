"use strict";

var assert = require("assert");
var uts46 = require("../uts46");

suite('toASCII', function() {
  test('Basic tests', function() {
    assert.equal(uts46.toAscii("√∂bb.at"), "xn--bb-eka.at");
    assert.equal(uts46.toAscii("xn--bb-eka.at"), "xn--bb-eka.at");
    assert.equal(uts46.toAscii("XN--BB-EKA.AT"), "xn--bb-eka.at");
    assert.equal(uts46.toAscii("fa√ü.de", {
      transitional: true
    }), "fass.de");
    assert.equal(uts46.toAscii("fa√ü.de", {
      transitional: false
    }), "xn--fa-hia.de");
    assert.equal(uts46.toAscii("xn--fa-hia.de", {
      transitional: true
    }), "xn--fa-hia.de");
    // Default to not processing STD3 rules (that's what URL.domainToASCII
    // is specifying).
    assert.equal(uts46.toAscii("not=std3"), "not=std3");
    assert.throws(function() {
      uts46.toAscii("not=std3", {
        useStd3ASCII: true
      });
    });
    assert.throws(function() {
      uts46.toAscii(String.fromCodePoint(0xd0000));
    });
    // Check verify DNS length
    assert.equal(uts46.toAscii("", {
      verifyDnsLength: false
    }), "");
    assert.throws(function() {
      uts46.toAscii("", {
        verifyDnsLength: true
      });
    });
  });
  test('Verify DNS length parameter', function() {
    assert.throws(function() {
      uts46.toAscii("this..is.almost.right", {
        verifyDnsLength: true
      });
    });
    assert.throws(function() {
      uts46.toAscii("a.".repeat(252 / 2) + "aa", {
        verifyDnsLength: true
      });
    });
    assert.doesNotThrow(function() {
      // Exactly 253 characters.
      uts46.toAscii("a.".repeat(252 / 2) + "a", {
        verifyDnsLength: true
      });
    });
    assert.throws(function() {
      uts46.toAscii("a".repeat(64), {
        verifyDnsLength: true
      });
    });
    assert.doesNotThrow(function() {
      uts46.toAscii("a".repeat(63), {
        verifyDnsLength: true
      });
    });
    // Default is to not verify it.
    assert.equal(uts46.toAscii(""), "");
  });
  test('Defaults to transitional', function() {
    assert.equal("fass.de", uts46.toAscii("fa√ü.de"));
  });
  test('Non-BMP characters', function() {
    assert.equal(uts46.toAscii("\ud83d\udca9"), "xn--ls8h");
    // This non-BMP character gets mapped to another non-BMP character.
    assert.equal(uts46.toAscii("\ud87e\udcca"), "xn--w60j");
    // ... and let's throw in a variant selector before it (which gets ignored)!
    assert.equal(uts46.toAscii("\udb40\udd00\ud87e\udcca"), "xn--w60j");
  });
});

suite('toUnicode', function() {
  test('Basic tests', function() {
    assert.equal(uts46.toUnicode("√∂bb.at"), "√∂bb.at");
    assert.equal(uts46.toUnicode("√ñbb.at"), "√∂bb.at");
    assert.equal(uts46.toUnicode("O\u0308bb.at"), "√∂bb.at");
    assert.equal(uts46.toUnicode("xn--bb-eka.at"), "√∂bb.at");
    assert.equal(uts46.toUnicode("fa√ü.de"), "fa√ü.de");
    assert.equal(uts46.toUnicode("fass.de"), "fass.de");
    assert.equal(uts46.toUnicode("xn--fa-hia.de"), "fa√ü.de");
    // Default to not processing STD3 rules (that's what URL.domainToASCII
    // is specifying).
    assert.equal(uts46.toUnicode("not=std3"), "not=std3");
    assert.throws(function() {
      uts46.toUnicode("not=std3", {
        useStd3ASCII: true
      });
    });
    assert.throws(function() {
      uts46.toUnicode(String.fromCodePoint(0xd0000));
    });
  });
  test('Non-BMP characters', function() {
    assert.equal(uts46.toUnicode("\ud83d\udca9"), "\ud83d\udca9");
    // This non-BMP character gets mapped to another non-BMP character.
    assert.equal(uts46.toUnicode("\ud87e\udcca"), "\ud84c\udc0a");
    // ... and let's throw in a variant selector before it (which gets ignored)!
    assert.equal(uts46.toUnicode("\udb40\udd00\ud87e\udcca"), "\ud84c\udc0a");
  });
});

suite('unicode.org', function() {
  test('Unicode Utilities: Internationalized Domain Names (IDN)', function() { //http://unicode.org/cldr/utility/idna.jsp
    //NOTE: some of the results below need further research as they are marked
    //as error cases on the web page but working here (or otherwise)

    //fass.de
    assert.equal(uts46.toUnicode("fass.de"), "fass.de");
    assert.equal(uts46.toAscii("fass.de", {
      transitional: true
    }), "fass.de");
    assert.equal(uts46.toAscii("fass.de", {
      transitional: false
    }), "fass.de");

    //fa√ü.de
    assert.equal(uts46.toUnicode("fa√ü.de"), "fa√ü.de");
    assert.equal(uts46.toAscii("fa√ü.de", {
      transitional: true
    }), "fass.de");
    assert.equal(uts46.toAscii("fa√ü.de", {
      transitional: false
    }), "xn--fa-hia.de");

    //f√§√ü.de
    assert.equal(uts46.toUnicode("f√§√ü.de"), "f√§√ü.de");
    assert.equal(uts46.toAscii("f√§√ü.de", {
      transitional: true
    }), "xn--fss-qla.de");
    assert.equal(uts46.toAscii("f√§√ü.de", {
      transitional: false
    }), "xn--f-qfao.de");

    //xn--fa-hia.de
    assert.equal(uts46.toUnicode("xn--fa-hia.de"), "fa√ü.de");
    assert.equal(uts46.toAscii("xn--fa-hia.de", {
      transitional: true
    }), "xn--fa-hia.de");
    assert.equal(uts46.toAscii("xn--fa-hia.de", {
      transitional: false
    }), "xn--fa-hia.de");

    //‚Çπ.com
    assert.equal(uts46.toUnicode("‚Çπ.com"), "‚Çπ.com"); //no error thrown
    assert.equal(uts46.toAscii("‚Çπ.com", {
      transitional: true
    }), "xn--yzg.com");
    assert.equal(uts46.toAscii("‚Çπ.com", {
      transitional: false
    }), "xn--yzg.com"); //no error thrown

    //ëÄì.com
    assert.equal(uts46.toUnicode("ëÄì.com"), "ëÄì.com"); //no error thrown
    assert.equal(uts46.toAscii("ëÄì.com", {
      transitional: true
    }), "xn--n00d.com");
    assert.equal(uts46.toAscii("ëÄì.com", {
      transitional: false
    }), "xn--n00d.com");

    // \u0080.com
    assert.throws(function() {
      uts46.toUnicode("\u0080.com");
    });
    assert.throws(function() {
      uts46.toAscii("\u0080.com", {
        transitional: true
      });
    });
    assert.throws(function() {
      uts46.toAscii("\u0080.com", {
        transitional: false
      });
    });

    //xn--a.com [might be wrong one compare results in web]
    assert.throws(function() {
      uts46.toUnicode("xn--a.com");
    });
    assert.throws(function() {
      uts46.toAscii("xn--a.com", {
        transitional: true
      });
    });
    assert.throws(function() {
      uts46.toAscii("xn--a.com", {
        transitional: false
      });
    });

    /* jshint -W100 */
    //a‚Äåb
    assert.equal(uts46.toUnicode("a‚Äåb"), "a\u200Cb"); //no error thrown
    assert.equal(uts46.toAscii("a‚Äåb", {
      transitional: true
    }), "ab");
    assert.equal(uts46.toAscii("a‚Äåb", {
      transitional: false
    }), "xn--ab-j1t");
    /* jshint +W100 */

    //xn--ab-j1t
    assert.equal(uts46.toUnicode("xn--ab-j1t"), "a\u200Cb"); //no error thrown
    assert.equal(uts46.toAscii("xn--ab-j1t", { //no error thrown
      transitional: true
    }), "xn--ab-j1t");
    assert.equal(uts46.toAscii("xn--ab-j1t", {
      transitional: false
    }), "xn--ab-j1t");

    //√∂bb.at
    assert.equal(uts46.toUnicode("√∂bb.at"), "√∂bb.at");
    assert.equal(uts46.toAscii("√∂bb.at", {
      transitional: true
    }), "xn--bb-eka.at");
    assert.equal(uts46.toAscii("√∂bb.at", {
      transitional: false
    }), "xn--bb-eka.at");

    //√ñBB.at
    assert.equal(uts46.toUnicode("√ñBB.at"), "√∂bb.at");
    assert.equal(uts46.toAscii("√ñBB.at", {
      transitional: true
    }), "xn--bb-eka.at");
    assert.equal(uts46.toAscii("√ñBB.at", {
      transitional: false
    }), "xn--bb-eka.at");

    //»°og.de
    assert.equal(uts46.toUnicode("»°og.de"), "»°og.de");
    assert.equal(uts46.toAscii("»°og.de", {
      transitional: true
    }), "xn--og-09a.de");
    assert.equal(uts46.toAscii("»°og.de", {
      transitional: false
    }), "xn--og-09a.de");

    //‚òï.de
    assert.equal(uts46.toUnicode("‚òï.de"), "‚òï.de");
    assert.equal(uts46.toAscii("‚òï.de", {
      transitional: true
    }), "xn--53h.de");
    assert.equal(uts46.toAscii("‚òï.de", {
      transitional: false
    }), "xn--53h.de");

    //I‚ô•NY.de
    assert.equal(uts46.toUnicode("I‚ô•NY.de"), "i‚ô•ny.de");
    assert.equal(uts46.toAscii("I‚ô•NY.de", {
      transitional: true
    }), "xn--iny-zx5a.de");
    assert.equal(uts46.toAscii("I‚ô•NY.de", {
      transitional: false
    }), "xn--iny-zx5a.de");

    //Ôº°Ôº¢Ôº£„ÉªÊó•Êú¨.co.jp
    assert.equal(uts46.toUnicode("Ôº°Ôº¢Ôº£„ÉªÊó•Êú¨.co.jp"), "abc„ÉªÊó•Êú¨.co.jp");
    assert.equal(uts46.toAscii("Ôº°Ôº¢Ôº£„ÉªÊó•Êú¨.co.jp", {
      transitional: true
    }), "xn--abc-rs4b422ycvb.co.jp");
    assert.equal(uts46.toAscii("Ôº°Ôº¢Ôº£„ÉªÊó•Êú¨.co.jp", {
      transitional: false
    }), "xn--abc-rs4b422ycvb.co.jp");

    //Êó•Êú¨ÔΩ°coÔΩ°jp
    assert.equal(uts46.toUnicode("Êó•Êú¨ÔΩ°coÔΩ°jp"), "Êó•Êú¨.co.jp");
    assert.equal(uts46.toAscii("Êó•Êú¨ÔΩ°coÔΩ°jp", {
      transitional: true
    }), "xn--wgv71a.co.jp");
    assert.equal(uts46.toAscii("Êó•Êú¨ÔΩ°coÔΩ°jp", {
      transitional: false
    }), "xn--wgv71a.co.jp");

    //Êó•Êú¨ÔΩ°coÔºéjp
    assert.equal(uts46.toUnicode("Êó•Êú¨ÔΩ°coÔºéjp"), "Êó•Êú¨.co.jp");
    assert.equal(uts46.toAscii("Êó•Êú¨ÔΩ°coÔºéjp", {
      transitional: true
    }), "xn--wgv71a.co.jp");
    assert.equal(uts46.toAscii("Êó•Êú¨ÔΩ°coÔºéjp", {
      transitional: false
    }), "xn--wgv71a.co.jp");

    //Êó•Êú¨‚íàcoÔºéjp
    assert.throws(function() {
      uts46.toUnicode("Êó•Êú¨‚íàcoÔºéjp");
    });
    assert.throws(function() {
      uts46.toAscii("Êó•Êú¨‚íàcoÔºéjp", {
        transitional: true
      });
    });
    assert.throws(function() {
      uts46.toAscii("Êó•Êú¨‚íàcoÔºéjp", {
        transitional: false
      });
    });

    //x\u0327\u0301.de
    assert.equal(uts46.toUnicode("x\u0327\u0301.de"), "xÃßÃÅ.de");
    assert.equal(uts46.toAscii("x\u0327\u0301.de", {
      transitional: true
    }), "xn--x-xbb7i.de");
    assert.equal(uts46.toAscii("x\u0327\u0301.de", {
      transitional: false
    }), "xn--x-xbb7i.de");

    //x\u0301\u0327.de
    assert.equal(uts46.toUnicode("x\u0301\u0327.de"), "xÃßÃÅ.de");
    assert.equal(uts46.toAscii("x\u0301\u0327.de", {
      transitional: true
    }), "xn--x-xbb7i.de");
    assert.equal(uts46.toAscii("x\u0301\u0327.de", {
      transitional: false
    }), "xn--x-xbb7i.de");

    //œÉœåŒªŒøœÇ.gr
    assert.equal(uts46.toUnicode("œÉœåŒªŒøœÇ.gr"), 'œÉœåŒªŒøœÇ.gr');
    assert.equal(uts46.toAscii("œÉœåŒªŒøœÇ.gr", {
      transitional: true
    }), "xn--wxaikc6b.gr");
    assert.equal(uts46.toAscii("œÉœåŒªŒøœÇ.gr", {
      transitional: false
    }), "xn--wxaijb9b.gr");

    //Œ£œåŒªŒøœÇ.gr
    assert.equal(uts46.toUnicode("Œ£œåŒªŒøœÇ.gr"), 'œÉœåŒªŒøœÇ.gr');
    assert.equal(uts46.toAscii("Œ£œåŒªŒøœÇ.gr", {
      transitional: true
    }), "xn--wxaikc6b.gr");
    assert.equal(uts46.toAscii("Œ£œåŒªŒøœÇ.gr", {
      transitional: false
    }), "xn--wxaijb9b.gr"); //might be wrong

    //Œ£ŒåŒõŒüŒ£.grÔªãÔ∫ÆÔ∫ëÔª≤.de
    assert.equal(uts46.toUnicode("Œ£ŒåŒõŒüŒ£.grÔªãÔ∫ÆÔ∫ëÔª≤.de"), 'œÉœåŒªŒøœÉ.grÿπÿ±ÿ®Ÿä.de');
    assert.equal(uts46.toAscii("Œ£ŒåŒõŒüŒ£.grÔªãÔ∫ÆÔ∫ëÔª≤.de", {
      transitional: true
    }), "xn--wxaikc6b.xn--gr-gtd9a1b0g.de");
    assert.equal(uts46.toAscii("Œ£ŒåŒõŒüŒ£.grÔªãÔ∫ÆÔ∫ëÔª≤.de", {
      transitional: false
    }), "xn--wxaikc6b.xn--gr-gtd9a1b0g.de"); //might be wrong

    //ÿπÿ±ÿ®Ÿä.de
    assert.equal(uts46.toUnicode("ÿπÿ±ÿ®Ÿä.de"), 'ÿπÿ±ÿ®Ÿä.de');
    assert.equal(uts46.toAscii("ÿπÿ±ÿ®Ÿä.de", {
      transitional: true
    }), "xn--ngbrx4e.de");
    assert.equal(uts46.toAscii("ÿπÿ±ÿ®Ÿä.de", {
      transitional: false
    }), "xn--ngbrx4e.de");

    //ŸÜÿßŸÖŸáÿß€å.de
    assert.equal(uts46.toUnicode("ŸÜÿßŸÖŸáÿß€å.de"), 'ŸÜÿßŸÖŸáÿß€å.de');
    assert.equal(uts46.toAscii("ŸÜÿßŸÖŸáÿß€å.de", {
      transitional: true
    }), "xn--mgba3gch31f.de");
    assert.equal(uts46.toAscii("ŸÜÿßŸÖŸáÿß€å.de", {
      transitional: false
    }), "xn--mgba3gch31f.de");

    //ŸÜÿßŸÖŸá\u200Cÿß€å.de
    /* jshint -W100 */
    assert.equal(uts46.toUnicode("ŸÜÿßŸÖŸá\u200Cÿß€å.de"), 'ŸÜÿßŸÖŸá‚Äåÿß€å.de');
    assert.equal(uts46.toAscii("ŸÜÿßŸÖŸá\u200Cÿß€å.de", {
      transitional: true
    }), "xn--mgba3gch31f.de");
    assert.equal(uts46.toAscii("ŸÜÿßŸÖŸá\u200Cÿß€å.de", {
      transitional: false
    }), "xn--mgba3gch31f060k.de");
    /* jshint +W100 */
  });
});
