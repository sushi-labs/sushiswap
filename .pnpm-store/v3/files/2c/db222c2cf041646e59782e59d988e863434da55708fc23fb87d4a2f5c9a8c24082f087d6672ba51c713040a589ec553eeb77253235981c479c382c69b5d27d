{"version":3,"file":"index.production.js","sources":["../../src/index.ts"],"sourcesContent":["import {\n  PersistedClient,\n  Persister,\n  PersistRetryer,\n} from '@tanstack/react-query-persist-client'\n\ninterface Storage {\n  getItem: (key: string) => string | null\n  setItem: (key: string, value: string) => void\n  removeItem: (key: string) => void\n}\n\ninterface CreateSyncStoragePersisterOptions {\n  /** The storage client used for setting and retrieving items from cache.\n   * For SSR pass in `undefined`.\n   */\n  storage: Storage | undefined\n  /** The key to use when storing the cache */\n  key?: string\n  /** To avoid spamming,\n   * pass a time in ms to throttle saving the cache to disk */\n  throttleTime?: number\n  /**\n   * How to serialize the data to storage.\n   * @default `JSON.stringify`\n   */\n  serialize?: (client: PersistedClient) => string\n  /**\n   * How to deserialize the data from storage.\n   * @default `JSON.parse`\n   */\n  deserialize?: (cachedString: string) => PersistedClient\n\n  retry?: PersistRetryer\n}\n\nexport function createSyncStoragePersister({\n  storage,\n  key = `REACT_QUERY_OFFLINE_CACHE`,\n  throttleTime = 1000,\n  serialize = JSON.stringify,\n  deserialize = JSON.parse,\n  retry,\n}: CreateSyncStoragePersisterOptions): Persister {\n  if (typeof storage !== 'undefined') {\n    const trySave = (persistedClient: PersistedClient): Error | undefined => {\n      try {\n        storage.setItem(key, serialize(persistedClient))\n      } catch (error) {\n        return error as Error\n      }\n    }\n    return {\n      persistClient: throttle((persistedClient) => {\n        let client: PersistedClient | undefined = persistedClient\n        let error = trySave(client)\n        let errorCount = 0\n        while (error && client) {\n          errorCount++\n          client = retry?.({\n            persistedClient: client,\n            error,\n            errorCount,\n          })\n\n          if (client) {\n            error = trySave(client)\n          }\n        }\n      }, throttleTime),\n      restoreClient: () => {\n        const cacheString = storage.getItem(key)\n\n        if (!cacheString) {\n          return\n        }\n\n        return deserialize(cacheString) as PersistedClient\n      },\n      removeClient: () => {\n        storage.removeItem(key)\n      },\n    }\n  }\n\n  return {\n    persistClient: noop,\n    restoreClient: () => undefined,\n    removeClient: noop,\n  }\n}\n\nfunction throttle<TArgs extends any[]>(\n  func: (...args: TArgs) => any,\n  wait = 100,\n) {\n  let timer: ReturnType<typeof setTimeout> | null = null\n  let params: TArgs\n  return function (...args: TArgs) {\n    params = args\n    if (timer === null) {\n      timer = setTimeout(() => {\n        func(...params)\n        timer = null\n      }, wait)\n    }\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n"],"names":["throttle","func","wait","params","timer","args","setTimeout","noop","storage","key","throttleTime","serialize","JSON","stringify","deserialize","parse","retry","trySave","persistedClient","setItem","error","persistClient","client","errorCount","restoreClient","cacheString","getItem","removeClient","removeItem"],"mappings":"iQA4FA,SAASA,EACPC,EACAC,EAAO,KAEP,IACIC,EADAC,EAA8C,KAElD,OAAO,YAAaC,GAClBF,EAASE,EACK,OAAVD,IACFA,EAAQE,YAAW,KACjBL,KAAQE,GACRC,EAAQ,OACPF,KAMT,SAASK,kCA1EF,UAAoCC,QACzCA,EADyCC,IAEzCA,EAFyC,4BAAAC,aAGzCA,EAAe,IAH0BC,UAIzCA,EAAYC,KAAKC,UAJwBC,YAKzCA,EAAcF,KAAKG,MALsBC,MAMzCA,IAEA,QAAuB,IAAZR,EAAyB,CAClC,MAAMS,EAAWC,IACf,IACEV,EAAQW,QAAQV,EAAKE,EAAUO,IAC/B,MAAOE,GACP,OAAOA,IAGX,MAAO,CACLC,cAAerB,GAAUkB,IACvB,IAAII,EAAsCJ,EACtCE,EAAQH,EAAQK,GAChBC,EAAa,EACjB,KAAOH,GAASE,GACdC,IACAD,EAASN,MAAAA,OAAAA,EAAAA,EAAQ,CACfE,gBAAiBI,EACjBF,QACAG,eAGED,IACFF,EAAQH,EAAQK,MAGnBZ,GACHc,cAAe,KACb,MAAMC,EAAcjB,EAAQkB,QAAQjB,GAEpC,GAAKgB,EAIL,OAAOX,EAAYW,IAErBE,aAAc,KACZnB,EAAQoB,WAAWnB,KAKzB,MAAO,CACLY,cAAed,EACfiB,cAAe,OACfG,aAAcpB"}