{"version":3,"file":"redux-multicall.cjs.production.min.js","sources":["../src/constants.ts","../src/utils/callKeys.ts","../src/utils/callState.ts","../src/validation.ts","../src/hooks.ts","../src/slice.ts","../node_modules/regenerator-runtime/runtime.js","../src/utils/retry.ts","../src/updater.tsx","../src/utils/useDebounce.ts","../src/utils/chunkCalls.ts","../src/create.ts"],"sourcesContent":["import type { CallResult, CallState, ListenerOptions } from './types'\n\nexport const DEFAULT_BLOCKS_PER_FETCH = 1\nexport const DEFAULT_CALL_GAS_REQUIRED = 1_000_000\nexport const DEFAULT_CHUNK_GAS_REQUIRED = 200_000\nexport const CHUNK_GAS_LIMIT = 100_000_000\nexport const CONSERVATIVE_BLOCK_GAS_LIMIT = 10_000_000 // conservative, hard-coded estimate of the current block gas limit\n\n// Consts for hooks\nexport const INVALID_RESULT: CallResult = { valid: false, blockNumber: undefined, data: undefined }\nexport const NEVER_RELOAD: ListenerOptions = {\n  blocksPerFetch: Infinity,\n}\n\nexport const INVALID_CALL_STATE: CallState = {\n  valid: false,\n  result: undefined,\n  loading: false,\n  syncing: false,\n  error: false,\n}\nexport const LOADING_CALL_STATE: CallState = {\n  valid: true,\n  result: undefined,\n  loading: true,\n  syncing: true,\n  error: false,\n}\n","import { Call } from '../types'\n\nexport function toCallKey(call: Call): string {\n  let key = `${call.address}-${call.callData}`\n  if (call.gasRequired) {\n    if (!Number.isSafeInteger(call.gasRequired)) {\n      throw new Error(`Invalid number: ${call.gasRequired}`)\n    }\n    key += `-${call.gasRequired}`\n  }\n  return key\n}\n\nexport function parseCallKey(callKey: string): Call {\n  const pcs = callKey.split('-')\n  if (![2, 3].includes(pcs.length)) {\n    throw new Error(`Invalid call key: ${callKey}`)\n  }\n  return {\n    address: pcs[0],\n    callData: pcs[1],\n    ...(pcs[2] ? { gasRequired: Number.parseInt(pcs[2]) } : {}),\n  }\n}\n\nexport function callsToCallKeys(calls?: Array<Call | undefined>) {\n  return (\n    calls\n      ?.filter((c): c is Call => Boolean(c))\n      ?.map(toCallKey)\n      ?.sort() ?? []\n  )\n}\n\nexport function callKeysToCalls(callKeys: string[]) {\n  if (!callKeys?.length) return null\n  return callKeys.map((key) => parseCallKey(key))\n}\n","import type { FunctionFragment, Interface } from '@ethersproject/abi'\nimport { INVALID_CALL_STATE, LOADING_CALL_STATE } from '../constants'\nimport type { CallResult, CallState, CallStateResult } from '../types'\n\nexport function toCallState(\n  callResult: CallResult | undefined,\n  contractInterface: Interface | undefined,\n  fragment: FunctionFragment | undefined,\n  latestBlockNumber: number | undefined\n): CallState {\n  if (!callResult) return INVALID_CALL_STATE\n  const { valid, data, blockNumber } = callResult\n  if (!valid) return INVALID_CALL_STATE\n  if (valid && !blockNumber) return LOADING_CALL_STATE\n  if (!contractInterface || !fragment || !latestBlockNumber) return LOADING_CALL_STATE\n  const success = data && data.length > 2\n  const syncing = (blockNumber ?? 0) < latestBlockNumber\n  let result: CallStateResult | undefined = undefined\n  if (success && data) {\n    try {\n      result = contractInterface.decodeFunctionResult(fragment, data)\n    } catch (error) {\n      console.debug('Result data parsing failed', fragment, data)\n      return {\n        valid: true,\n        loading: false,\n        error: true,\n        syncing,\n        result,\n      }\n    }\n  }\n  return {\n    valid: true,\n    loading: false,\n    syncing,\n    result,\n    error: !success,\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\n\nexport type MethodArg = string | number | BigNumber\nexport type MethodArgs = Array<MethodArg | MethodArg[]>\n\nexport function isMethodArg(x: unknown): x is MethodArg {\n  return BigNumber.isBigNumber(x) || ['string', 'number'].indexOf(typeof x) !== -1\n}\n\nexport function isValidMethodArgs(x: unknown): x is MethodArgs | undefined {\n  return (\n    x === undefined ||\n    (Array.isArray(x) && x.every((xi) => isMethodArg(xi) || (Array.isArray(xi) && xi.every(isMethodArg))))\n  )\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { Interface } from '@ethersproject/abi'\nimport { useEffect, useMemo, useRef } from 'react'\nimport { batch, useDispatch, useSelector } from 'react-redux'\nimport { INVALID_CALL_STATE, INVALID_RESULT, DEFAULT_BLOCKS_PER_FETCH } from './constants'\nimport type { MulticallContext } from './context'\nimport type { Call, CallResult, CallState, ListenerOptions, ListenerOptionsWithGas, WithMulticallState } from './types'\nimport { callKeysToCalls, callsToCallKeys, toCallKey } from './utils/callKeys'\nimport { toCallState } from './utils/callState'\nimport { isValidMethodArgs, MethodArg } from './validation'\n\ntype OptionalMethodInputs = Array<MethodArg | MethodArg[] | undefined> | undefined\n\n// the lowest level call for subscribing to contract data\nexport function useCallsDataSubscription(\n  context: MulticallContext,\n  chainId: number | undefined,\n  calls: Array<Call | undefined>,\n  listenerOptions?: ListenerOptions\n): CallResult[] {\n  const { reducerPath, actions } = context\n  const callResults = useSelector((state: WithMulticallState) => state[reducerPath].callResults)\n  const defaultListenerOptions = useSelector((state: WithMulticallState) => state[reducerPath].listenerOptions)\n  const dispatch = useDispatch()\n  const serializedCallKeys: string = useMemo(() => JSON.stringify(callsToCallKeys(calls)), [calls])\n\n  // update listeners when there is an actual change that persists for at least 100ms\n  useEffect(() => {\n    const callKeys: string[] = JSON.parse(serializedCallKeys)\n    const calls = callKeysToCalls(callKeys)\n    if (!chainId || !calls) return\n    const blocksPerFetchFromState = (defaultListenerOptions ?? {})[chainId]?.blocksPerFetch\n    const blocksPerFetchForChain =\n      listenerOptions?.blocksPerFetch ?? blocksPerFetchFromState ?? DEFAULT_BLOCKS_PER_FETCH\n\n    dispatch(\n      actions.addMulticallListeners({\n        chainId,\n        calls,\n        options: { blocksPerFetch: blocksPerFetchForChain },\n      })\n    )\n\n    return () => {\n      dispatch(\n        actions.removeMulticallListeners({\n          chainId,\n          calls,\n          options: { blocksPerFetch: blocksPerFetchForChain },\n        })\n      )\n    }\n  }, [actions, chainId, dispatch, listenerOptions, serializedCallKeys, defaultListenerOptions])\n\n  // Ensure that call results arrays remain referentially equivalent when unchanged to prevent\n  // spurious re-renders, which would otherwise occur because mapping always creates a new object.\n  const stableResults = useRef<CallResult[]>([])\n  return useMemo(() => {\n    // Construct results using a for-loop to handle sparse arrays.\n    // Array.prototype.map would skip empty entries.\n    let results: CallResult[] = []\n    for (let i = 0; i < calls.length; ++i) {\n      const call = calls[i]\n      if (!chainId || !call) {\n        results.push(INVALID_RESULT)\n        continue\n      }\n      const result = callResults[chainId]?.[toCallKey(call)]\n      const data = result?.data && result.data !== '0x' ? result.data : undefined\n      results.push({ valid: true, data, blockNumber: result?.blockNumber })\n    }\n\n    if (!areCallResultsEqual(results, stableResults.current)) {\n      stableResults.current = results\n    }\n    return stableResults.current\n  }, [callResults, calls, chainId])\n}\n\nfunction areCallResultsEqual(a: CallResult[], b: CallResult[]) {\n  if (a.length !== b.length) return false\n  return a.every(\n    (_, i) => a[i].valid === b[i].valid && a[i].data === b[i].data && a[i].blockNumber === b[i].blockNumber\n  )\n}\n\n// Similar to useCallsDataSubscription above but for subscribing to\n// calls to multiple chains at once\nfunction useMultichainCallsDataSubscription(\n  context: MulticallContext,\n  chainToCalls: Record<number, Array<Call | undefined>>,\n  listenerOptions?: ListenerOptions\n): Record<number, CallResult[]> {\n  const { reducerPath, actions } = context\n  const callResults = useSelector((state: WithMulticallState) => state[reducerPath].callResults)\n  const defaultListenerOptions = useSelector((state: WithMulticallState) => state[reducerPath].listenerOptions)\n  const dispatch = useDispatch()\n\n  const serializedCallKeys: string = useMemo(() => {\n    const sortedChainIds = getChainIds(chainToCalls).sort()\n    const chainCallKeysTuple = sortedChainIds.map((chainId) => {\n      const calls = chainToCalls[chainId]\n      const callKeys = callsToCallKeys(calls)\n      // Note, using a tuple to ensure consistent order when serialized\n      return [chainId, callKeys]\n    })\n    return JSON.stringify(chainCallKeysTuple)\n  }, [chainToCalls])\n\n  useEffect(() => {\n    const chainCallKeysTuples: Array<[number, string[]]> = JSON.parse(serializedCallKeys)\n    if (!chainCallKeysTuples?.length) return\n\n    batch(() => {\n      for (const [chainId, callKeys] of chainCallKeysTuples) {\n        const calls = callKeysToCalls(callKeys)\n        if (!calls?.length) continue\n        const blocksPerFetchFromState = (defaultListenerOptions ?? {})[chainId]?.blocksPerFetch\n        const blocksPerFetchForChain =\n          listenerOptions?.blocksPerFetch ?? blocksPerFetchFromState ?? DEFAULT_BLOCKS_PER_FETCH\n\n        dispatch(\n          actions.addMulticallListeners({\n            chainId,\n            calls,\n            options: { blocksPerFetch: blocksPerFetchForChain },\n          })\n        )\n      }\n    })\n\n    return () => {\n      batch(() => {\n        for (const [chainId, callKeys] of chainCallKeysTuples) {\n          const calls = callKeysToCalls(callKeys)\n          if (!calls?.length) continue\n          const blocksPerFetchFromState = (defaultListenerOptions ?? {})[chainId]?.blocksPerFetch\n          const blocksPerFetchForChain =\n            listenerOptions?.blocksPerFetch ?? blocksPerFetchFromState ?? DEFAULT_BLOCKS_PER_FETCH\n          dispatch(\n            actions.removeMulticallListeners({\n              chainId,\n              calls,\n              options: { blocksPerFetch: blocksPerFetchForChain },\n            })\n          )\n        }\n      })\n    }\n  }, [actions, dispatch, listenerOptions, serializedCallKeys, defaultListenerOptions])\n\n  return useMemo(\n    () =>\n      getChainIds(chainToCalls).reduce((result, chainId) => {\n        const calls = chainToCalls[chainId]\n        result[chainId] = calls.map<CallResult>((call) => {\n          if (!chainId || !call) return INVALID_RESULT\n          const result = callResults[chainId]?.[toCallKey(call)]\n          const data = result?.data && result.data !== '0x' ? result.data : undefined\n          return { valid: true, data, blockNumber: result?.blockNumber }\n        })\n        return result\n      }, {} as Record<number, CallResult[]>),\n    [callResults, chainToCalls]\n  )\n}\n\n// formats many calls to a single function on a single contract, with the function name and inputs specified\nexport function useSingleContractMultipleData(\n  context: MulticallContext,\n  chainId: number | undefined,\n  latestBlockNumber: number | undefined,\n  contract: Contract | null | undefined,\n  methodName: string,\n  callInputs: OptionalMethodInputs[],\n  options?: Partial<ListenerOptionsWithGas>\n): CallState[] {\n  const { gasRequired } = options ?? {}\n\n  // Create ethers function fragment\n  const fragment = useMemo(() => contract?.interface?.getFunction(methodName), [contract, methodName])\n\n  // Get encoded call data. Note can't use useCallData below b.c. this is  for a list of CallInputs\n  const callDatas = useMemo(() => {\n    if (!contract || !fragment) return []\n    return callInputs.map<string | undefined>((callInput) =>\n      isValidMethodArgs(callInput) ? contract.interface.encodeFunctionData(fragment, callInput) : undefined\n    )\n  }, [callInputs, contract, fragment])\n\n  // Create call objects\n  const calls = useMemo(() => {\n    if (!contract) return []\n    return callDatas.map<Call | undefined>((callData) => {\n      if (!callData) return undefined\n      return {\n        address: contract.address,\n        callData,\n        gasRequired,\n      }\n    })\n  }, [contract, callDatas, gasRequired])\n\n  // Subscribe to call data\n  const results = useCallsDataSubscription(context, chainId, calls, options as ListenerOptions)\n\n  return useMemo(() => {\n    return results.map((result) => toCallState(result, contract?.interface, fragment, latestBlockNumber))\n  }, [results, contract, fragment, latestBlockNumber])\n}\n\nexport function useMultipleContractSingleData(\n  context: MulticallContext,\n  chainId: number | undefined,\n  latestBlockNumber: number | undefined,\n  addresses: (string | undefined)[],\n  contractInterface: Interface,\n  methodName: string,\n  callInputs?: OptionalMethodInputs,\n  options?: Partial<ListenerOptionsWithGas>\n): CallState[] {\n  const { gasRequired } = options ?? {}\n\n  const { fragment, callData } = useCallData(methodName, contractInterface, callInputs)\n\n  // Create call objects\n  const calls = useMemo(() => {\n    if (!callData) return []\n    return addresses.map<Call | undefined>((address) => {\n      if (!address) return undefined\n      return { address, callData, gasRequired }\n    })\n  }, [addresses, callData, gasRequired])\n\n  // Subscribe to call data\n  const results = useCallsDataSubscription(context, chainId, calls, options as ListenerOptions)\n\n  return useMemo(() => {\n    return results.map((result) => toCallState(result, contractInterface, fragment, latestBlockNumber))\n  }, [fragment, results, contractInterface, latestBlockNumber])\n}\n\nexport function useSingleCallResult(\n  context: MulticallContext,\n  chainId: number | undefined,\n  latestBlockNumber: number | undefined,\n  contract: Contract | null | undefined,\n  methodName: string,\n  inputs?: OptionalMethodInputs,\n  options?: Partial<ListenerOptionsWithGas>\n): CallState {\n  return (\n    useSingleContractMultipleData(context, chainId, latestBlockNumber, contract, methodName, [inputs], options)[0] ??\n    INVALID_CALL_STATE\n  )\n}\n\n// formats many calls to any number of functions on a single contract, with only the calldata specified\nexport function useSingleContractWithCallData(\n  context: MulticallContext,\n  chainId: number | undefined,\n  latestBlockNumber: number | undefined,\n  contract: Contract | null | undefined,\n  callDatas: string[],\n  options?: Partial<ListenerOptionsWithGas>\n): CallState[] {\n  const { gasRequired } = options ?? {}\n\n  // Create call objects\n  const calls = useMemo(() => {\n    if (!contract) return []\n    return callDatas.map<Call>((callData) => ({\n      address: contract.address,\n      callData,\n      gasRequired,\n    }))\n  }, [contract, callDatas, gasRequired])\n\n  // Subscribe to call data\n  const results = useCallsDataSubscription(context, chainId, calls, options as ListenerOptions)\n\n  return useMemo(() => {\n    return results.map((result, i) =>\n      toCallState(\n        result,\n        contract?.interface,\n        contract?.interface?.getFunction(callDatas[i].substring(0, 10)),\n        latestBlockNumber\n      )\n    )\n  }, [results, contract, callDatas, latestBlockNumber])\n}\n\n// Similar to useMultipleContractSingleData but instead of multiple contracts on one chain,\n// this is for querying compatible contracts on multiple chains\nexport function useMultiChainMultiContractSingleData(\n  context: MulticallContext,\n  chainToBlockNumber: Record<number, number | undefined>,\n  chainToAddresses: Record<number, Array<string | undefined>>,\n  contractInterface: Interface,\n  methodName: string,\n  callInputs?: OptionalMethodInputs,\n  options?: Partial<ListenerOptionsWithGas>\n): Record<number, CallState[]> {\n  const { gasRequired } = options ?? {}\n\n  const { fragment, callData } = useCallData(methodName, contractInterface, callInputs)\n\n  // Create call objects\n  const chainToCalls = useMemo(() => {\n    if (!callData || !chainToAddresses) return {}\n    return getChainIds(chainToAddresses).reduce((result, chainId) => {\n      const addresses = chainToAddresses[chainId]\n      const calls = addresses.map<Call | undefined>((address) => {\n        if (!address) return undefined\n        return { address, callData, gasRequired }\n      })\n      result[chainId] = calls\n      return result\n    }, {} as Record<number, Array<Call | undefined>>)\n  }, [chainToAddresses, callData, gasRequired])\n\n  // Subscribe to call data\n  const chainIdToResults = useMultichainCallsDataSubscription(context, chainToCalls, options as ListenerOptions)\n\n  return useMemo(() => {\n    return getChainIds(chainIdToResults).reduce((combinedResults, chainId) => {\n      const latestBlockNumber = chainToBlockNumber?.[chainId]\n      const results = chainIdToResults[chainId]\n      combinedResults[chainId] = results.map((result) =>\n        toCallState(result, contractInterface, fragment, latestBlockNumber)\n      )\n      return combinedResults\n    }, {} as Record<number, CallState[]>)\n  }, [fragment, contractInterface, chainIdToResults, chainToBlockNumber])\n}\n\n// Similar to useSingleCallResult but instead of one contract on one chain,\n// this is for querying a contract on multiple chains\nexport function useMultiChainSingleContractSingleData(\n  context: MulticallContext,\n  chainToBlockNumber: Record<number, number | undefined>,\n  chainToAddress: Record<number, string | undefined>,\n  contractInterface: Interface,\n  methodName: string,\n  callInputs?: OptionalMethodInputs,\n  options?: Partial<ListenerOptionsWithGas>\n): Record<number, CallState> {\n  // This hook uses the more flexible useMultiChainMultiContractSingleData internally,\n  // but transforms the inputs and outputs for convenience\n  const chainIdToAddresses = useMemo(() => {\n    return getChainIds(chainToAddress).reduce((result, chainId) => {\n      result[chainId] = [chainToAddress[chainId]]\n      return result\n    }, {} as Record<number, Array<string | undefined>>)\n  }, [chainToAddress])\n\n  const multiContractResults = useMultiChainMultiContractSingleData(\n    context,\n    chainToBlockNumber,\n    chainIdToAddresses,\n    contractInterface,\n    methodName,\n    callInputs,\n    options\n  )\n\n  return useMemo(() => {\n    return getChainIds(chainToAddress).reduce((result, chainId) => {\n      result[chainId] = multiContractResults[chainId]?.[0] ?? INVALID_CALL_STATE\n      return result\n    }, {} as Record<number, CallState>)\n  }, [chainToAddress, multiContractResults])\n}\n\nfunction useCallData(\n  methodName: string,\n  contractInterface: Interface | null | undefined,\n  callInputs: OptionalMethodInputs | undefined\n) {\n  // Create ethers function fragment\n  const fragment = useMemo(() => contractInterface?.getFunction(methodName), [contractInterface, methodName])\n  // Get encoded call data\n  const callData: string | undefined = useMemo(\n    () =>\n      fragment && isValidMethodArgs(callInputs)\n        ? contractInterface?.encodeFunctionData(fragment, callInputs)\n        : undefined,\n    [callInputs, contractInterface, fragment]\n  )\n  return { fragment, callData }\n}\n\nfunction getChainIds(chainIdMap: Record<number, any>) {\n  return Object.keys(chainIdMap).map((c) => parseInt(c, 10))\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport {\n  MulticallFetchingPayload,\n  MulticallListenerPayload,\n  MulticallResultsPayload,\n  MulticallState,\n  MulticallListenerOptionsPayload,\n} from './types'\nimport { toCallKey } from './utils/callKeys'\n\nconst initialState: MulticallState = {\n  callResults: {},\n}\n\nexport function createMulticallSlice(reducerPath: string) {\n  return createSlice({\n    name: reducerPath,\n    initialState,\n    reducers: {\n      addMulticallListeners: (state, action: PayloadAction<MulticallListenerPayload>) => {\n        const {\n          calls,\n          chainId,\n          options: { blocksPerFetch },\n        } = action.payload\n        const listeners: MulticallState['callListeners'] = state.callListeners\n          ? state.callListeners\n          : (state.callListeners = {})\n        listeners[chainId] = listeners[chainId] ?? {}\n        calls.forEach((call) => {\n          const callKey = toCallKey(call)\n          listeners[chainId][callKey] = listeners[chainId][callKey] ?? {}\n          listeners[chainId][callKey][blocksPerFetch] = (listeners[chainId][callKey][blocksPerFetch] ?? 0) + 1\n        })\n      },\n\n      removeMulticallListeners: (state, action: PayloadAction<MulticallListenerPayload>) => {\n        const {\n          calls,\n          chainId,\n          options: { blocksPerFetch },\n        } = action.payload\n        const listeners: MulticallState['callListeners'] = state.callListeners\n          ? state.callListeners\n          : (state.callListeners = {})\n\n        if (!listeners[chainId]) return\n        calls.forEach((call) => {\n          const callKey = toCallKey(call)\n          if (!listeners[chainId][callKey]) return\n          if (!listeners[chainId][callKey][blocksPerFetch]) return\n\n          if (listeners[chainId][callKey][blocksPerFetch] === 1) {\n            delete listeners[chainId][callKey][blocksPerFetch]\n          } else {\n            listeners[chainId][callKey][blocksPerFetch]--\n          }\n        })\n      },\n\n      fetchingMulticallResults: (state, action: PayloadAction<MulticallFetchingPayload>) => {\n        const { chainId, fetchingBlockNumber, calls } = action.payload\n        state.callResults[chainId] = state.callResults[chainId] ?? {}\n        calls.forEach((call) => {\n          const callKey = toCallKey(call)\n          const current = state.callResults[chainId][callKey]\n          if (!current) {\n            state.callResults[chainId][callKey] = {\n              fetchingBlockNumber,\n            }\n          } else {\n            if ((current.fetchingBlockNumber ?? 0) >= fetchingBlockNumber) return\n            state.callResults[chainId][callKey].fetchingBlockNumber = fetchingBlockNumber\n          }\n        })\n      },\n\n      errorFetchingMulticallResults: (state, action: PayloadAction<MulticallFetchingPayload>) => {\n        const { chainId, fetchingBlockNumber, calls } = action.payload\n        state.callResults[chainId] = state.callResults[chainId] ?? {}\n        calls.forEach((call) => {\n          const callKey = toCallKey(call)\n          const current = state.callResults[chainId][callKey]\n          if (!current || typeof current.fetchingBlockNumber !== 'number') return // only should be dispatched if we are already fetching\n          if (current.fetchingBlockNumber <= fetchingBlockNumber) {\n            delete current.fetchingBlockNumber\n            current.data = null\n            current.blockNumber = fetchingBlockNumber\n          }\n        })\n      },\n\n      updateMulticallResults: (state, action: PayloadAction<MulticallResultsPayload>) => {\n        const { chainId, results, blockNumber } = action.payload\n        state.callResults[chainId] = state.callResults[chainId] ?? {}\n        Object.keys(results).forEach((callKey) => {\n          const current = state.callResults[chainId][callKey]\n          if ((current?.blockNumber ?? 0) > blockNumber) return\n          if (current?.data === results[callKey] && current?.blockNumber === blockNumber) return\n          state.callResults[chainId][callKey] = {\n            data: results[callKey],\n            blockNumber,\n          }\n        })\n      },\n\n      updateListenerOptions: (state, action: PayloadAction<MulticallListenerOptionsPayload>) => {\n        const { chainId, listenerOptions } = action.payload\n        state.listenerOptions = state.listenerOptions ?? {}\n        state.listenerOptions[chainId] = listenerOptions\n      },\n    },\n  })\n}\n\nexport type MulticallActions = ReturnType<typeof createMulticallSlice>['actions']\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","// TODO de-duplicate this file with web interface\n// https://github.com/Uniswap/interface/blob/main/src/utils/retry.ts\n\nfunction wait(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\nfunction waitRandom(min: number, max: number): Promise<void> {\n  return wait(min + Math.round(Math.random() * Math.max(0, max - min)))\n}\n\n/**\n * This error is thrown if the function is cancelled before completing\n */\nclass CancelledError extends Error {\n  public isCancelledError: true = true\n  constructor() {\n    super('Cancelled')\n  }\n}\n\n/**\n * Throw this error if the function should retry\n */\nexport class RetryableError extends Error {\n  public isRetryableError: true = true\n}\n\nexport interface RetryOptions {\n  n: number\n  minWait: number\n  maxWait: number\n}\n\n/**\n * Retries the function that returns the promise until the promise successfully resolves up to n retries\n * @param fn function to retry\n * @param n how many times to retry\n * @param minWait min wait between retries in ms\n * @param maxWait max wait between retries in ms\n */\nexport function retry<T>(\n  fn: () => Promise<T>,\n  { n, minWait, maxWait }: RetryOptions\n): { promise: Promise<T>; cancel: () => void } {\n  let completed = false\n  let rejectCancelled: (error: Error) => void\n  const promise = new Promise<T>(async (resolve, reject) => {\n    rejectCancelled = reject\n    while (true) {\n      let result: T\n      try {\n        result = await fn()\n        if (!completed) {\n          resolve(result)\n          completed = true\n        }\n        break\n      } catch (error) {\n        if (completed) {\n          break\n        }\n        if (n <= 0 || !(error as any).isRetryableError) {\n          reject(error)\n          completed = true\n          break\n        }\n        n--\n      }\n      await waitRandom(minWait, maxWait)\n    }\n  })\n  return {\n    promise,\n    cancel: () => {\n      if (completed) return\n      completed = true\n      rejectCancelled(new CancelledError())\n    },\n  }\n}\n","import React, { Dispatch, useEffect, useMemo, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport type { UniswapInterfaceMulticall } from './abi/types'\nimport { CHUNK_GAS_LIMIT, DEFAULT_CALL_GAS_REQUIRED } from './constants'\nimport type { MulticallContext } from './context'\nimport type { MulticallActions } from './slice'\nimport type { Call, MulticallState, WithMulticallState, ListenerOptions } from './types'\nimport { parseCallKey, toCallKey } from './utils/callKeys'\nimport chunkCalls from './utils/chunkCalls'\nimport { retry, RetryableError } from './utils/retry'\nimport useDebounce from './utils/useDebounce'\n\nconst FETCH_RETRY_CONFIG = {\n  n: Infinity,\n  minWait: 1000,\n  maxWait: 2500,\n}\n\n/**\n * Fetches a chunk of calls, enforcing a minimum block number constraint\n * @param multicall multicall contract to fetch against\n * @param chunk chunk of calls to make\n * @param blockNumber block number passed as the block tag in the eth_call\n */\nasync function fetchChunk(\n  multicall: UniswapInterfaceMulticall,\n  chunk: Call[],\n  blockNumber: number,\n  isDebug?: boolean\n): Promise<{ success: boolean; returnData: string }[]> {\n  console.debug('Fetching chunk', chunk, blockNumber)\n  try {\n    const { returnData } = await multicall.callStatic.multicall(\n      chunk.map((obj) => ({\n        target: obj.address,\n        callData: obj.callData,\n        gasLimit: obj.gasRequired ?? DEFAULT_CALL_GAS_REQUIRED,\n      })),\n      // we aren't passing through the block gas limit we used to create the chunk, because it causes a problem with the integ tests\n      { blockTag: blockNumber }\n    )\n\n    if (isDebug) {\n      returnData.forEach(({ gasUsed, returnData, success }, i) => {\n        if (\n          !success &&\n          returnData.length === 2 &&\n          gasUsed.gte(Math.floor((chunk[i].gasRequired ?? DEFAULT_CALL_GAS_REQUIRED) * 0.95))\n        ) {\n          console.warn(\n            `A call failed due to requiring ${gasUsed.toString()} vs. allowed ${\n              chunk[i].gasRequired ?? DEFAULT_CALL_GAS_REQUIRED\n            }`,\n            chunk[i]\n          )\n        }\n      })\n    }\n\n    return returnData\n  } catch (e) {\n    const error = e as any\n    if (error.code === -32000 || error.message?.indexOf('header not found') !== -1) {\n      throw new RetryableError(`header not found for block number ${blockNumber}`)\n    } else if (error.code === -32603 || error.message?.indexOf('execution ran out of gas') !== -1) {\n      if (chunk.length > 1) {\n        if (process.env.NODE_ENV === 'development') {\n          console.debug('Splitting a chunk in 2', chunk)\n        }\n        const half = Math.floor(chunk.length / 2)\n        const [c0, c1] = await Promise.all([\n          fetchChunk(multicall, chunk.slice(0, half), blockNumber),\n          fetchChunk(multicall, chunk.slice(half, chunk.length), blockNumber),\n        ])\n        return c0.concat(c1)\n      }\n    }\n    console.error('Failed to fetch chunk', error)\n    throw error\n  }\n}\n\n/**\n * From the current all listeners state, return each call key mapped to the\n * minimum number of blocks per fetch. This is how often each key must be fetched.\n * @param allListeners the all listeners state\n * @param chainId the current chain id\n */\nexport function activeListeningKeys(\n  allListeners: MulticallState['callListeners'],\n  chainId?: number\n): { [callKey: string]: number } {\n  if (!allListeners || !chainId) return {}\n  const listeners = allListeners[chainId]\n  if (!listeners) return {}\n\n  return Object.keys(listeners).reduce<{ [callKey: string]: number }>((memo, callKey) => {\n    const keyListeners = listeners[callKey]\n\n    memo[callKey] = Object.keys(keyListeners)\n      .filter((key) => {\n        const blocksPerFetch = parseInt(key)\n        if (blocksPerFetch <= 0) return false\n        return keyListeners[blocksPerFetch] > 0\n      })\n      .reduce((previousMin, current) => {\n        return Math.min(previousMin, parseInt(current))\n      }, Infinity)\n    return memo\n  }, {})\n}\n\n/**\n * Return the keys that need to be refetched\n * @param callResults current call result state\n * @param listeningKeys each call key mapped to how old the data can be in blocks\n * @param chainId the current chain id\n * @param latestBlockNumber the latest block number\n */\nexport function outdatedListeningKeys(\n  callResults: MulticallState['callResults'],\n  listeningKeys: { [callKey: string]: number },\n  chainId: number | undefined,\n  latestBlockNumber: number | undefined\n): string[] {\n  if (!chainId || !latestBlockNumber) return []\n  const results = callResults[chainId]\n  // no results at all, load everything\n  if (!results) return Object.keys(listeningKeys)\n\n  return Object.keys(listeningKeys).filter((callKey) => {\n    const blocksPerFetch = listeningKeys[callKey]\n\n    const data = callResults[chainId][callKey]\n    // no data, must fetch\n    if (!data) return true\n\n    const minDataBlockNumber = latestBlockNumber - (blocksPerFetch - 1)\n\n    // already fetching it for a recent enough block, don't refetch it\n    if (data.fetchingBlockNumber && data.fetchingBlockNumber >= minDataBlockNumber) return false\n\n    // if data is older than minDataBlockNumber, fetch it\n    return !data.blockNumber || data.blockNumber < minDataBlockNumber\n  })\n}\n\ninterface FetchChunkContext {\n  actions: MulticallActions\n  dispatch: Dispatch<any>\n  chainId: number\n  latestBlockNumber: number\n  isDebug?: boolean\n}\n\nfunction onFetchChunkSuccess(\n  context: FetchChunkContext,\n  chunk: Call[],\n  result: Array<{ success: boolean; returnData: string }>\n) {\n  const { actions, dispatch, chainId, latestBlockNumber, isDebug } = context\n\n  // split the returned slice into errors and results\n  const { erroredCalls, results } = chunk.reduce<{\n    erroredCalls: Call[]\n    results: { [callKey: string]: string | null }\n  }>(\n    (memo, call, i) => {\n      if (result[i].success) {\n        memo.results[toCallKey(call)] = result[i].returnData ?? null\n      } else {\n        memo.erroredCalls.push(call)\n      }\n      return memo\n    },\n    { erroredCalls: [], results: {} }\n  )\n\n  // dispatch any new results\n  if (Object.keys(results).length > 0)\n    dispatch(\n      actions.updateMulticallResults({\n        chainId,\n        results,\n        blockNumber: latestBlockNumber,\n      })\n    )\n\n  // dispatch any errored calls\n  if (erroredCalls.length > 0) {\n    if (isDebug) {\n      result.forEach((returnData, ix) => {\n        if (!returnData.success) {\n          console.debug('Call failed', chunk[ix], returnData)\n        }\n      })\n    } else {\n      console.debug('Calls errored in fetch', erroredCalls)\n    }\n    dispatch(\n      actions.errorFetchingMulticallResults({\n        calls: erroredCalls,\n        chainId,\n        fetchingBlockNumber: latestBlockNumber,\n      })\n    )\n  }\n}\n\nfunction onFetchChunkFailure(context: FetchChunkContext, chunk: Call[], error: any) {\n  const { actions, dispatch, chainId, latestBlockNumber } = context\n\n  if (error.isCancelledError) {\n    console.debug('Cancelled fetch for blockNumber', latestBlockNumber, chunk, chainId)\n    return\n  }\n  console.error('Failed to fetch multicall chunk', chunk, chainId, error)\n  dispatch(\n    actions.errorFetchingMulticallResults({\n      calls: chunk,\n      chainId,\n      fetchingBlockNumber: latestBlockNumber,\n    })\n  )\n}\n\nexport interface UpdaterProps {\n  context: MulticallContext\n  chainId: number | undefined // For now, one updater is required for each chainId to be watched\n  latestBlockNumber: number | undefined\n  contract: UniswapInterfaceMulticall\n  isDebug?: boolean\n  listenerOptions?: ListenerOptions\n}\n\nfunction Updater(props: UpdaterProps): null {\n  const { context, chainId, latestBlockNumber, contract, isDebug, listenerOptions } = props\n  const { actions, reducerPath } = context\n  const dispatch = useDispatch()\n\n  // set user configured listenerOptions in state for given chain ID.\n  if (chainId && listenerOptions) dispatch(actions.updateListenerOptions({ chainId, listenerOptions }))\n  const state = useSelector((state: WithMulticallState) => state[reducerPath])\n\n  // wait for listeners to settle before triggering updates\n  const debouncedListeners = useDebounce(state.callListeners, 100)\n  const cancellations = useRef<{ blockNumber: number; cancellations: (() => void)[] }>()\n\n  const listeningKeys: { [callKey: string]: number } = useMemo(() => {\n    return activeListeningKeys(debouncedListeners, chainId)\n  }, [debouncedListeners, chainId])\n\n  const serializedOutdatedCallKeys = useMemo(() => {\n    const outdatedCallKeys = outdatedListeningKeys(state.callResults, listeningKeys, chainId, latestBlockNumber)\n    return JSON.stringify(outdatedCallKeys.sort())\n  }, [chainId, state.callResults, listeningKeys, latestBlockNumber])\n\n  useEffect(() => {\n    if (!latestBlockNumber || !chainId || !contract) return\n\n    const outdatedCallKeys: string[] = JSON.parse(serializedOutdatedCallKeys)\n    if (outdatedCallKeys.length === 0) return\n    const calls = outdatedCallKeys.map((key) => parseCallKey(key))\n\n    const chunkedCalls = chunkCalls(calls, CHUNK_GAS_LIMIT)\n\n    if (cancellations.current && cancellations.current.blockNumber !== latestBlockNumber) {\n      cancellations.current.cancellations.forEach((c) => c())\n    }\n\n    dispatch(\n      actions.fetchingMulticallResults({\n        calls,\n        chainId,\n        fetchingBlockNumber: latestBlockNumber,\n      })\n    )\n\n    const fetchChunkContext = {\n      actions,\n      dispatch,\n      chainId,\n      latestBlockNumber,\n      isDebug,\n    }\n    // Execute fetches and gather cancellation callbacks\n    const newCancellations = chunkedCalls.map((chunk) => {\n      const { cancel, promise } = retry(\n        () => fetchChunk(contract, chunk, latestBlockNumber, isDebug),\n        FETCH_RETRY_CONFIG\n      )\n      promise\n        .then((result) => onFetchChunkSuccess(fetchChunkContext, chunk, result))\n        .catch((error) => onFetchChunkFailure(fetchChunkContext, chunk, error))\n      return cancel\n    })\n\n    cancellations.current = {\n      blockNumber: latestBlockNumber,\n      cancellations: newCancellations,\n    }\n  }, [actions, chainId, contract, dispatch, serializedOutdatedCallKeys, latestBlockNumber, isDebug])\n\n  return null\n}\n\nexport function createUpdater(context: MulticallContext) {\n  const UpdaterContextBound = (props: Omit<UpdaterProps, 'context'>) => {\n    return <Updater context={context} {...props} />\n  }\n  return UpdaterContextBound\n}\n","// TODO de-duplicate this file with web interface\n// https://github.com/Uniswap/interface/blob/main/src/hooks/useDebounce.ts\n\nimport { useEffect, useState } from 'react'\n\n// modified from https://usehooks.com/useDebounce/\nexport default function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n\n  useEffect(() => {\n    // Update debounced value after delay\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [value, delay])\n\n  return debouncedValue\n}\n","import { DEFAULT_CHUNK_GAS_REQUIRED } from '../constants'\n\ninterface Bin<T> {\n  calls: T[]\n  cumulativeGasLimit: number\n}\n\n/**\n * Tries to pack a list of items into as few bins as possible using the first-fit bin packing algorithm\n * @param calls the calls to chunk\n * @param chunkGasLimit the gas limit of any one chunk of calls, i.e. bin capacity\n * @param defaultGasRequired the default amount of gas an individual call should cost if not specified\n */\nexport default function chunkCalls<T extends { gasRequired?: number }>(\n  calls: T[],\n  chunkGasLimit: number,\n  defaultGasRequired: number = DEFAULT_CHUNK_GAS_REQUIRED\n): T[][] {\n  return (\n    calls\n      // first sort by gas required\n      .sort((c1, c2) => (c2.gasRequired ?? defaultGasRequired) - (c1.gasRequired ?? defaultGasRequired))\n      // then bin the calls according to the first fit algorithm\n      .reduce<Bin<T>[]>((bins, call) => {\n        const gas = call.gasRequired ?? defaultGasRequired\n        for (const bin of bins) {\n          if (bin.cumulativeGasLimit + gas <= chunkGasLimit) {\n            bin.calls.push(call)\n            bin.cumulativeGasLimit += gas\n            return bins\n          }\n        }\n        // didn't find a bin for the call, make a new bin\n        bins.push({\n          calls: [call],\n          cumulativeGasLimit: gas,\n        })\n        return bins\n      }, [])\n      // pull out just the calls from each bin\n      .map((b) => b.calls)\n  )\n}\n","import type { MulticallContext } from './context'\nimport {\n  useMultiChainMultiContractSingleData as _useMultiChainMultiContractSingleData,\n  useMultiChainSingleContractSingleData as _useMultiChainSingleContractSingleData,\n  useMultipleContractSingleData as _useMultipleContractSingleData,\n  useSingleCallResult as _useSingleCallResult,\n  useSingleContractMultipleData as _useSingleContractMultipleData,\n  useSingleContractWithCallData as _useSingleContractWithCallData,\n} from './hooks'\nimport { createMulticallSlice } from './slice'\nimport { createUpdater } from './updater'\n\ntype RemoveFirstFromTuple<T extends any[]> = T['length'] extends 0\n  ? undefined\n  : ((...b: T) => void) extends (a: any, ...b: infer I) => void\n  ? I\n  : []\ntype ParamsWithoutContext<T extends (...args: any) => any> = RemoveFirstFromTuple<Parameters<T>>\n\nexport interface MulticallOptions {\n  reducerPath?: string\n  // More options can be added here as multicall's capabilities are extended\n}\n\n// Inspired by RTK Query's createApi\nexport function createMulticall(options?: MulticallOptions) {\n  const reducerPath = options?.reducerPath ?? 'multicall'\n  const slice = createMulticallSlice(reducerPath)\n  const { actions, reducer } = slice\n  const context: MulticallContext = { reducerPath, actions }\n\n  const useMultipleContractSingleData = (...args: ParamsWithoutContext<typeof _useMultipleContractSingleData>) =>\n    _useMultipleContractSingleData(context, ...args)\n  const useSingleContractMultipleData = (...args: ParamsWithoutContext<typeof _useSingleContractMultipleData>) =>\n    _useSingleContractMultipleData(context, ...args)\n  const useSingleContractWithCallData = (...args: ParamsWithoutContext<typeof _useSingleContractWithCallData>) =>\n    _useSingleContractWithCallData(context, ...args)\n  const useSingleCallResult = (...args: ParamsWithoutContext<typeof _useSingleCallResult>) =>\n    _useSingleCallResult(context, ...args)\n  const useMultiChainMultiContractSingleData = (\n    ...args: ParamsWithoutContext<typeof _useMultiChainMultiContractSingleData>\n  ) => _useMultiChainMultiContractSingleData(context, ...args)\n  const useMultiChainSingleContractSingleData = (\n    ...args: ParamsWithoutContext<typeof _useMultiChainSingleContractSingleData>\n  ) => _useMultiChainSingleContractSingleData(context, ...args)\n  const hooks = {\n    useMultipleContractSingleData,\n    useSingleContractMultipleData,\n    useSingleContractWithCallData,\n    useSingleCallResult,\n    useMultiChainMultiContractSingleData,\n    useMultiChainSingleContractSingleData,\n  }\n\n  const Updater = createUpdater(context)\n\n  return {\n    reducerPath,\n    reducer,\n    actions,\n    hooks,\n    Updater,\n  }\n}\n"],"names":["INVALID_RESULT","valid","blockNumber","undefined","data","INVALID_CALL_STATE","result","loading","syncing","error","LOADING_CALL_STATE","toCallKey","call","key","address","callData","gasRequired","Number","isSafeInteger","Error","parseCallKey","callKey","pcs","split","includes","length","parseInt","callsToCallKeys","calls","filter","c","Boolean","_calls$filter","map","_calls$filter$map","sort","callKeysToCalls","callKeys","toCallState","callResult","contractInterface","fragment","latestBlockNumber","success","decodeFunctionResult","console","debug","isMethodArg","x","BigNumber","isBigNumber","indexOf","isValidMethodArgs","Array","isArray","every","xi","useCallsDataSubscription","context","chainId","listenerOptions","reducerPath","actions","callResults","useSelector","state","defaultListenerOptions","dispatch","useDispatch","serializedCallKeys","useMemo","JSON","stringify","useEffect","parse","blocksPerFetchFromState","_chainId","blocksPerFetch","blocksPerFetchForChain","addMulticallListeners","options","removeMulticallListeners","stableResults","useRef","a","b","results","i","_callResults$chainId","push","current","_","useSingleContractMultipleData","contract","methodName","callInputs","_contract$interface","getFunction","callDatas","callInput","encodeFunctionData","useMultipleContractSingleData","addresses","useCallData","useSingleCallResult","inputs","useSingleContractWithCallData","_contract$interface2","substring","useMultiChainMultiContractSingleData","chainToBlockNumber","chainToAddresses","chainIdToResults","chainToCalls","chainCallKeysTuple","getChainIds","chainCallKeysTuples","batch","_chainId2","_chainId3","reduce","_callResults$chainId2","useMultichainCallsDataSubscription","combinedResults","useMultiChainSingleContractSingleData","chainToAddress","multiContractResults","_multiContractResults2","chainIdMap","Object","keys","initialState","runtime","exports","Op","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","Context","_invoke","method","arg","done","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","fn","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","__await","then","unwrapped","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","doneResult","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","globalThis","Function","waitRandom","min","max","ms","Math","round","random","setTimeout","CancelledError","RetryableError","FETCH_RETRY_CONFIG","n","Infinity","minWait","maxWait","fetchChunk","multicall","chunk","isDebug","callStatic","target","gasLimit","blockTag","returnData","gasUsed","gte","floor","warn","toString","code","message","half","all","concat","Updater","props","updateListenerOptions","debouncedValue","setDebouncedValue","debouncedListeners","useState","callListeners","handler","clearTimeout","cancellations","listeningKeys","allListeners","listeners","memo","keyListeners","previousMin","activeListeningKeys","serializedOutdatedCallKeys","outdatedCallKeys","minDataBlockNumber","fetchingBlockNumber","outdatedListeningKeys","chunkedCalls","chunkGasLimit","defaultGasRequired","c1","c2","bins","gas","bin","cumulativeGasLimit","chunkCalls","fetchingMulticallResults","fetchChunkContext","newCancellations","rejectCancelled","completed","promise","_context","isRetryableError","cancel","erroredCalls","updateMulticallResults","ix","errorFetchingMulticallResults","onFetchChunkSuccess","isCancelledError","onFetchChunkFailure","createUpdater","React","createSlice","reducers","action","payload","createMulticallSlice","reducer","hooks","args","_useMultipleContractSingleData","_useSingleContractMultipleData","_useSingleContractWithCallData","_useSingleCallResult","_useMultiChainMultiContractSingleData","_useMultiChainSingleContractSingleData"],"mappings":"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"}