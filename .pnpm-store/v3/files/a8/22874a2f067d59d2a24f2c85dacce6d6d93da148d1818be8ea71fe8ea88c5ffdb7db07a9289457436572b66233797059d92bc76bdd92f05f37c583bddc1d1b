/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ISwapperInterface extends ethers.utils.Interface {
  functions: {
    "swap(address,address,address,uint256,uint256)": FunctionFragment;
    "swapExact(address,address,address,address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "swap",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExact",
    values: [string, string, string, string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapExact", data: BytesLike): Result;

  events: {};
}

export class ISwapper extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ISwapperInterface;

  functions: {
    swap(
      fromToken: string,
      toToken: string,
      recipient: string,
      shareToMin: BigNumberish,
      shareFrom: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swap(address,address,address,uint256,uint256)"(
      fromToken: string,
      toToken: string,
      recipient: string,
      shareToMin: BigNumberish,
      shareFrom: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapExact(
      fromToken: string,
      toToken: string,
      recipient: string,
      refundTo: string,
      shareFromSupplied: BigNumberish,
      shareToExact: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapExact(address,address,address,address,uint256,uint256)"(
      fromToken: string,
      toToken: string,
      recipient: string,
      refundTo: string,
      shareFromSupplied: BigNumberish,
      shareToExact: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  swap(
    fromToken: string,
    toToken: string,
    recipient: string,
    shareToMin: BigNumberish,
    shareFrom: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swap(address,address,address,uint256,uint256)"(
    fromToken: string,
    toToken: string,
    recipient: string,
    shareToMin: BigNumberish,
    shareFrom: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapExact(
    fromToken: string,
    toToken: string,
    recipient: string,
    refundTo: string,
    shareFromSupplied: BigNumberish,
    shareToExact: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapExact(address,address,address,address,uint256,uint256)"(
    fromToken: string,
    toToken: string,
    recipient: string,
    refundTo: string,
    shareFromSupplied: BigNumberish,
    shareToExact: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    swap(
      fromToken: string,
      toToken: string,
      recipient: string,
      shareToMin: BigNumberish,
      shareFrom: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        extraShare: BigNumber;
        shareReturned: BigNumber;
      }
    >;

    "swap(address,address,address,uint256,uint256)"(
      fromToken: string,
      toToken: string,
      recipient: string,
      shareToMin: BigNumberish,
      shareFrom: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        extraShare: BigNumber;
        shareReturned: BigNumber;
      }
    >;

    swapExact(
      fromToken: string,
      toToken: string,
      recipient: string,
      refundTo: string,
      shareFromSupplied: BigNumberish,
      shareToExact: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        shareUsed: BigNumber;
        shareReturned: BigNumber;
      }
    >;

    "swapExact(address,address,address,address,uint256,uint256)"(
      fromToken: string,
      toToken: string,
      recipient: string,
      refundTo: string,
      shareFromSupplied: BigNumberish,
      shareToExact: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        shareUsed: BigNumber;
        shareReturned: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    swap(
      fromToken: string,
      toToken: string,
      recipient: string,
      shareToMin: BigNumberish,
      shareFrom: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swap(address,address,address,uint256,uint256)"(
      fromToken: string,
      toToken: string,
      recipient: string,
      shareToMin: BigNumberish,
      shareFrom: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapExact(
      fromToken: string,
      toToken: string,
      recipient: string,
      refundTo: string,
      shareFromSupplied: BigNumberish,
      shareToExact: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapExact(address,address,address,address,uint256,uint256)"(
      fromToken: string,
      toToken: string,
      recipient: string,
      refundTo: string,
      shareFromSupplied: BigNumberish,
      shareToExact: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    swap(
      fromToken: string,
      toToken: string,
      recipient: string,
      shareToMin: BigNumberish,
      shareFrom: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swap(address,address,address,uint256,uint256)"(
      fromToken: string,
      toToken: string,
      recipient: string,
      shareToMin: BigNumberish,
      shareFrom: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapExact(
      fromToken: string,
      toToken: string,
      recipient: string,
      refundTo: string,
      shareFromSupplied: BigNumberish,
      shareToExact: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapExact(address,address,address,address,uint256,uint256)"(
      fromToken: string,
      toToken: string,
      recipient: string,
      refundTo: string,
      shareFromSupplied: BigNumberish,
      shareToExact: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
