{"version":3,"file":"getSortedRowModel.js","sources":["../../../src/utils/getSortedRowModel.ts"],"sourcesContent":["import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id).getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = rows.slice()\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (!row.subRows || row.subRows.length <= 1) {\n              return\n            }\n            row.subRows = sortData(row.subRows)\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n"],"names":["getSortedRowModel","table","memo","getState","sorting","getPreSortedRowModel","rowModel","rows","length","sortingState","sortedFlatRows","availableSorting","filter","sort","getColumn","id","getCanSort","columnInfoById","forEach","sortEntry","column","sortUndefined","columnDef","invertSorting","sortingFn","getSortingFn","sortData","sortedData","slice","rowA","rowB","i","columnInfo","isDesc","desc","aValue","getValue","bValue","aUndefined","bUndefined","sortInt","index","row","push","subRows","flatRows","rowsById","key","process","env","NODE_ENV","debug","options","debugAll","debugTable","onChange","_autoResetPageIndex"],"mappings":"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"}