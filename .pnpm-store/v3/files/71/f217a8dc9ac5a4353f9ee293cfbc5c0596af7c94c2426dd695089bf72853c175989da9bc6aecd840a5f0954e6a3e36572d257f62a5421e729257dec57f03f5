/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type MintParamsStruct = {
  lowerOld: BigNumberish;
  lower: BigNumberish;
  upperOld: BigNumberish;
  upper: BigNumberish;
  amount0Desired: BigNumberish;
  amount1Desired: BigNumberish;
  native: boolean;
};

export type MintParamsStructOutput = [
  number,
  number,
  number,
  number,
  BigNumber,
  BigNumber,
  boolean
] & {
  lowerOld: number;
  lower: number;
  upperOld: number;
  upper: number;
  amount0Desired: BigNumber;
  amount1Desired: BigNumber;
  native: boolean;
};

export interface ConcentratedLiquidityPoolInterface extends utils.Interface {
  functions: {
    "barFee()": FunctionFragment;
    "burn(int24,int24,uint128)": FunctionFragment;
    "collect(int24,int24)": FunctionFragment;
    "collectProtocolFee()": FunctionFragment;
    "feeGrowthGlobal0()": FunctionFragment;
    "feeGrowthGlobal1()": FunctionFragment;
    "getAmountIn(bytes)": FunctionFragment;
    "getAssets()": FunctionFragment;
    "getImmutables()": FunctionFragment;
    "getPriceAndNearestTicks()": FunctionFragment;
    "getReserves()": FunctionFragment;
    "getSecondsGrowthAndLastObservation()": FunctionFragment;
    "getTokenProtocolFees()": FunctionFragment;
    "liquidity()": FunctionFragment;
    "mint((int24,int24,int24,int24,uint128,uint128,bool))": FunctionFragment;
    "positions(address,int24,int24)": FunctionFragment;
    "rangeFeeGrowth(int24,int24)": FunctionFragment;
    "setPrice(uint160)": FunctionFragment;
    "swap(bytes)": FunctionFragment;
    "ticks(int24)": FunctionFragment;
    "updateBarFee()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "barFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectProtocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeGrowthGlobal0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeGrowthGlobal1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountIn",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getAssets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getImmutables",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceAndNearestTicks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSecondsGrowthAndLastObservation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenProtocolFees",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "liquidity", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [MintParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rangeFeeGrowth",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "swap", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "ticks", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "updateBarFee",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "barFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeGrowthGlobal0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeGrowthGlobal1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAssets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getImmutables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceAndNearestTicks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecondsGrowthAndLastObservation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenProtocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rangeFeeGrowth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ticks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateBarFee",
    data: BytesLike
  ): Result;

  events: {
    "Burn(address,uint256,uint256)": EventFragment;
    "Collect(address,uint256,uint256)": EventFragment;
    "Mint(address,uint256,uint256)": EventFragment;
    "Swap(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Collect"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
}

export type BurnEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { owner: string; amount0: BigNumber; amount1: BigNumber }
>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export type CollectEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { sender: string; amount0: BigNumber; amount1: BigNumber }
>;

export type CollectEventFilter = TypedEventFilter<CollectEvent>;

export type MintEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { owner: string; amount0: BigNumber; amount1: BigNumber }
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export type SwapEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    recipient: string;
    tokenIn: string;
    tokenOut: string;
    amountIn: BigNumber;
    amountOut: BigNumber;
  }
>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface ConcentratedLiquidityPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConcentratedLiquidityPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    barFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      lower: BigNumberish,
      upper: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collect(
      lower: BigNumberish,
      upper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectProtocolFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeGrowthGlobal0(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeGrowthGlobal1(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAmountIn(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { finalAmountIn: BigNumber }>;

    getAssets(
      overrides?: CallOverrides
    ): Promise<[string[]] & { assets: string[] }>;

    getImmutables(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, string, string, string, string, string] & {
        _MAX_TICK_LIQUIDITY: BigNumber;
        _tickSpacing: number;
        _swapFee: number;
        _barFeeTo: string;
        _bento: string;
        _masterDeployer: string;
        _token0: string;
        _token1: string;
      }
    >;

    getPriceAndNearestTicks(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { _price: BigNumber; _nearestTick: number }
    >;

    getReserves(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _reserve0: BigNumber; _reserve1: BigNumber }
    >;

    getSecondsGrowthAndLastObservation(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & {
        _secondsGrowthGlobal: BigNumber;
        _lastObservation: number;
      }
    >;

    getTokenProtocolFees(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _token0ProtocolFee: BigNumber;
        _token1ProtocolFee: BigNumber;
      }
    >;

    liquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      mintParams: MintParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    positions(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        feeGrowthInside0Last: BigNumber;
        feeGrowthInside1Last: BigNumber;
      }
    >;

    rangeFeeGrowth(
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeGrowthInside0: BigNumber;
        feeGrowthInside1: BigNumber;
      }
    >;

    setPrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ticks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        previousTick: number;
        nextTick: number;
        liquidity: BigNumber;
        feeGrowthOutside0: BigNumber;
        feeGrowthOutside1: BigNumber;
        secondsGrowthOutside: BigNumber;
      }
    >;

    updateBarFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  barFee(overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    lower: BigNumberish,
    upper: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collect(
    lower: BigNumberish,
    upper: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectProtocolFee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeGrowthGlobal0(overrides?: CallOverrides): Promise<BigNumber>;

  feeGrowthGlobal1(overrides?: CallOverrides): Promise<BigNumber>;

  getAmountIn(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  getAssets(overrides?: CallOverrides): Promise<string[]>;

  getImmutables(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, string, string, string, string, string] & {
      _MAX_TICK_LIQUIDITY: BigNumber;
      _tickSpacing: number;
      _swapFee: number;
      _barFeeTo: string;
      _bento: string;
      _masterDeployer: string;
      _token0: string;
      _token1: string;
    }
  >;

  getPriceAndNearestTicks(
    overrides?: CallOverrides
  ): Promise<[BigNumber, number] & { _price: BigNumber; _nearestTick: number }>;

  getReserves(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _reserve0: BigNumber; _reserve1: BigNumber }
  >;

  getSecondsGrowthAndLastObservation(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number] & {
      _secondsGrowthGlobal: BigNumber;
      _lastObservation: number;
    }
  >;

  getTokenProtocolFees(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      _token0ProtocolFee: BigNumber;
      _token1ProtocolFee: BigNumber;
    }
  >;

  liquidity(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    mintParams: MintParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  positions(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      liquidity: BigNumber;
      feeGrowthInside0Last: BigNumber;
      feeGrowthInside1Last: BigNumber;
    }
  >;

  rangeFeeGrowth(
    lowerTick: BigNumberish,
    upperTick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      feeGrowthInside0: BigNumber;
      feeGrowthInside1: BigNumber;
    }
  >;

  setPrice(
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ticks(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
      previousTick: number;
      nextTick: number;
      liquidity: BigNumber;
      feeGrowthOutside0: BigNumber;
      feeGrowthOutside1: BigNumber;
      secondsGrowthOutside: BigNumber;
    }
  >;

  updateBarFee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    barFee(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      lower: BigNumberish,
      upper: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        token0Amount: BigNumber;
        token1Amount: BigNumber;
        token0Fees: BigNumber;
        token1Fees: BigNumber;
      }
    >;

    collect(
      lower: BigNumberish,
      upper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amount0fees: BigNumber;
        amount1fees: BigNumber;
      }
    >;

    collectProtocolFee(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    feeGrowthGlobal0(overrides?: CallOverrides): Promise<BigNumber>;

    feeGrowthGlobal1(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountIn(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getAssets(overrides?: CallOverrides): Promise<string[]>;

    getImmutables(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, string, string, string, string, string] & {
        _MAX_TICK_LIQUIDITY: BigNumber;
        _tickSpacing: number;
        _swapFee: number;
        _barFeeTo: string;
        _bento: string;
        _masterDeployer: string;
        _token0: string;
        _token1: string;
      }
    >;

    getPriceAndNearestTicks(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { _price: BigNumber; _nearestTick: number }
    >;

    getReserves(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _reserve0: BigNumber; _reserve1: BigNumber }
    >;

    getSecondsGrowthAndLastObservation(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & {
        _secondsGrowthGlobal: BigNumber;
        _lastObservation: number;
      }
    >;

    getTokenProtocolFees(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _token0ProtocolFee: BigNumber;
        _token1ProtocolFee: BigNumber;
      }
    >;

    liquidity(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      mintParams: MintParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positions(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        feeGrowthInside0Last: BigNumber;
        feeGrowthInside1Last: BigNumber;
      }
    >;

    rangeFeeGrowth(
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeGrowthInside0: BigNumber;
        feeGrowthInside1: BigNumber;
      }
    >;

    setPrice(_price: BigNumberish, overrides?: CallOverrides): Promise<void>;

    swap(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    ticks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        previousTick: number;
        nextTick: number;
        liquidity: BigNumber;
        feeGrowthOutside0: BigNumber;
        feeGrowthOutside1: BigNumber;
        secondsGrowthOutside: BigNumber;
      }
    >;

    updateBarFee(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Burn(address,uint256,uint256)"(
      owner?: string | null,
      amount0?: null,
      amount1?: null
    ): BurnEventFilter;
    Burn(
      owner?: string | null,
      amount0?: null,
      amount1?: null
    ): BurnEventFilter;

    "Collect(address,uint256,uint256)"(
      sender?: string | null,
      amount0?: null,
      amount1?: null
    ): CollectEventFilter;
    Collect(
      sender?: string | null,
      amount0?: null,
      amount1?: null
    ): CollectEventFilter;

    "Mint(address,uint256,uint256)"(
      owner?: string | null,
      amount0?: null,
      amount1?: null
    ): MintEventFilter;
    Mint(
      owner?: string | null,
      amount0?: null,
      amount1?: null
    ): MintEventFilter;

    "Swap(address,address,address,uint256,uint256)"(
      recipient?: string | null,
      tokenIn?: string | null,
      tokenOut?: string | null,
      amountIn?: null,
      amountOut?: null
    ): SwapEventFilter;
    Swap(
      recipient?: string | null,
      tokenIn?: string | null,
      tokenOut?: string | null,
      amountIn?: null,
      amountOut?: null
    ): SwapEventFilter;
  };

  estimateGas: {
    barFee(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      lower: BigNumberish,
      upper: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collect(
      lower: BigNumberish,
      upper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectProtocolFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeGrowthGlobal0(overrides?: CallOverrides): Promise<BigNumber>;

    feeGrowthGlobal1(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountIn(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getImmutables(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceAndNearestTicks(overrides?: CallOverrides): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<BigNumber>;

    getSecondsGrowthAndLastObservation(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenProtocolFees(overrides?: CallOverrides): Promise<BigNumber>;

    liquidity(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      mintParams: MintParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    positions(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rangeFeeGrowth(
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ticks(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    updateBarFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    barFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      lower: BigNumberish,
      upper: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collect(
      lower: BigNumberish,
      upper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectProtocolFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeGrowthGlobal0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeGrowthGlobal1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAmountIn(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getImmutables(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPriceAndNearestTicks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSecondsGrowthAndLastObservation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenProtocolFees(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      mintParams: MintParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    positions(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rangeFeeGrowth(
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ticks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateBarFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
