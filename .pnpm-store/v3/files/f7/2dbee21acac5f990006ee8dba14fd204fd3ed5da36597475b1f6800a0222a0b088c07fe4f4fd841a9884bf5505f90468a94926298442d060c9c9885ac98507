/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { ERC20Data } from "../ERC20Data";

export class ERC20Data__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<ERC20Data> {
    return super.deploy(overrides || {}) as Promise<ERC20Data>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC20Data {
    return super.attach(address) as ERC20Data;
  }
  connect(signer: Signer): ERC20Data__factory {
    return super.connect(signer) as ERC20Data__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Data {
    return new Contract(address, _abi, signerOrProvider) as ERC20Data;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610188806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806370a08231146100465780637ecebe001461006f578063dd62ed3e14610082575b600080fd5b6100596100543660046100f3565b610095565b6040516100669190610149565b60405180910390f35b61005961007d3660046100f3565b6100a7565b610059610090366004610115565b6100b9565b60006020819052908152604090205481565b60026020526000908152604090205481565b600160209081526000928352604080842090915290825290205481565b80356001600160a01b03811681146100ed57600080fd5b92915050565b600060208284031215610104578081fd5b61010e83836100d6565b9392505050565b60008060408385031215610127578081fd5b61013184846100d6565b915061014084602085016100d6565b90509250929050565b9081526020019056fea26469706673582212203e904f73bdbebf06370ec7c24716e3701a811a5eefaab72dd7e23752b17cb96064736f6c634300060c0033";
