{"version":3,"file":"row.js","sources":["../../../src/core/row.ts"],"sourcesContent":["import { Cell, Row, TableGenerics, TableInstance } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport type CoreRow<TGenerics extends TableGenerics> = {\n  id: string\n  index: number\n  original?: TGenerics['Row']\n  depth: number\n  _valuesCache: Record<string, any>\n  getValue: (columnId: string) => any\n  subRows: Row<TGenerics>[]\n  getLeafRows: () => Row<TGenerics>[]\n  originalSubRows?: TGenerics['Row'][]\n  getAllCells: () => Cell<TGenerics>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TGenerics>>\n}\n\nexport const createRow = <TGenerics extends TableGenerics>(\n  instance: TableInstance<TGenerics>,\n  id: string,\n  original: TGenerics['Row'] | undefined,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TGenerics>[]\n): Row<TGenerics> => {\n  let row: CoreRow<TGenerics> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    _valuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = instance.getColumn(columnId)\n\n      if (!column.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(row.original, rowIndex)\n\n      return row._valuesCache[columnId]\n    },\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getAllCells: memo(\n      () => [instance.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(instance, row as Row<TGenerics>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => instance.options.debugAll ?? instance.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TGenerics>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => instance.options.debugAll ?? instance.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < instance._features.length; i++) {\n    const feature = instance._features[i]\n    Object.assign(row, feature?.createRow?.(row, instance))\n  }\n\n  return row as Row<TGenerics>\n}\n"],"names":["createRow","instance","id","original","rowIndex","depth","subRows","row","index","_valuesCache","getValue","columnId","hasOwnProperty","column","getColumn","accessorFn","undefined","getLeafRows","flattenBy","d","getAllCells","memo","getAllLeafColumns","leafColumns","map","createCell","key","process","env","NODE_ENV","debug","options","debugAll","debugRows","_getAllCellsByColumnId","allCells","reduce","acc","cell","i","_features","length","feature","Object","assign"],"mappings":"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"}