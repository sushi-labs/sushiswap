{"version":3,"names":["DONE","WeakSet","declare","api","opts","assertVersion","throwIfClosureRequired","tdz","tdzEnabled","Error","name","visitor","VariableDeclaration","path","node","parent","scope","isBlockScoped","convertBlockScopedToVar","_tdzThis","nodes","i","declarations","length","decl","assign","t","assignmentExpression","cloneNode","id","init","buildUndefinedNode","_ignoreBlockScopingTDZ","push","expressionStatement","addHelper","_blockHoist","isCompletionRecord","replaceWithMultiple","Loop","state","ensureBlock","blockScoping","BlockScoping","get","replace","run","replaceWith","CatchClause","ignoreBlock","isLoop","isCatchClause","buildRetCheck","template","statement","isVariableDeclaration","BLOCK_SCOPED_SYMBOL","kind","isInLoop","loopOrFunctionParent","find","isFunction","moveBindingsToParent","isFor","declar","parentScope","getFunctionParent","getProgramParent","Object","keys","getBindingIdentifiers","binding","getOwnBinding","moveBindingTo","isVar","letReferenceBlockVisitor","traverse","visitors","merge","enter","loopDepth","exit","FunctionParent","letReferenceFunctionVisitor","tdzVisitor","skip","ReferencedIdentifier","ref","letReferences","localBinding","getBindingIdentifier","closurify","hoistVarDeclarationsVisitor","self","isForStatement","pushDeclar","sequenceExpression","isForInStatement","isForOfStatement","left","map","expr","loopLabelVisitor","LabeledStatement","innerLabels","label","continuationVisitor","isAssignmentExpression","isUpdateExpression","outsideReferences","reassignments","isReturnStatement","returnStatements","loopNodeTo","isBreakStatement","isContinueStatement","loopVisitor","oldIgnoreLabeless","ignoreLabeless","Function","SwitchCase","oldInSwitchCase","inSwitchCase","loopIgnored","has","loopText","indexOf","hasBreakContinue","set","stringLiteral","hasReturn","objectExpression","objectProperty","identifier","argument","returnStatement","add","inherits","isStrict","isProgram","sourceType","isBlockStatement","directives","some","directive","value","constructor","loopPath","blockPath","block","outsideLetReferences","hasLetReferences","body","loopParent","loopLabel","loop","Map","isLabeledStatement","needsClosure","getLetReferences","checkConstants","updateScopeInfo","wrapClosure","remap","labeledStatement","constBindings","Set","bindings","violation","constantViolations","readOnlyError","throwNode","callExpression","operator","includes","logicalExpression","slice","binaryExpression","unaryExpression","isForXStatement","variableDeclaration","variableDeclarator","generateUidIdentifier","unshift","wrappedInClosure","blockScope","letRefs","key","getBinding","hasOwnBinding","removeBinding","outsideLetRefs","blockPathScope","parentHasBinding","hasGlobal","parentBinding","async","generator","parentPath","rename","buildCodeFrameError","outsideRefs","Array","from","delete","checkLoop","hoistVarDeclarations","args","values","params","isSwitch","type","fn","functionExpression","blockStatement","addContinuations","call","nullLiteral","basePath","hasYield","hasType","FUNCTION_TYPES","yieldExpression","hasAsync","awaitExpression","placeholderPath","index","ret","generateUid","buildHas","callPath","listKey","placeholder","fnPath","loopId","p","insertBefore","unwrapFunctionEnvironment","param","paramName","newParamName","forEach","declarators","names","addDeclarationsFromChild","isClassDeclaration","isFunctionDeclaration","declarPaths","cases","consequents","consequent","j","declars","ifStatement","RETURN"],"sources":["../src/index.ts"],"sourcesContent":["import { declare } from \"@babel/helper-plugin-utils\";\nimport type { NodePath, Visitor, Scope, Binding } from \"@babel/traverse\";\nimport { visitor as tdzVisitor } from \"./tdz\";\nimport type { TDZVisitorState } from \"./tdz\";\nimport { traverse, template, types as t } from \"@babel/core\";\nimport type { PluginPass } from \"@babel/core\";\n\nconst DONE = new WeakSet();\n\nexport interface Options {\n  tdz?: boolean;\n  throwIfClosureRequired?: boolean;\n}\n\nexport default declare((api, opts: Options) => {\n  api.assertVersion(7);\n\n  const { throwIfClosureRequired = false, tdz: tdzEnabled = false } = opts;\n  if (typeof throwIfClosureRequired !== \"boolean\") {\n    throw new Error(`.throwIfClosureRequired must be a boolean, or undefined`);\n  }\n  if (typeof tdzEnabled !== \"boolean\") {\n    throw new Error(`.tdz must be a boolean, or undefined`);\n  }\n\n  return {\n    name: \"transform-block-scoping\",\n\n    visitor: {\n      VariableDeclaration(path) {\n        const { node, parent, scope } = path;\n        if (!isBlockScoped(node)) return;\n        convertBlockScopedToVar(path, null, parent, scope, true);\n\n        // @ts-expect-error todo(flow->ts): avoid mutations\n        if (node._tdzThis) {\n          const nodes: t.Node[] = [node];\n\n          for (let i = 0; i < node.declarations.length; i++) {\n            const decl = node.declarations[i];\n            const assign = t.assignmentExpression(\n              \"=\",\n              t.cloneNode(decl.id),\n              decl.init || scope.buildUndefinedNode(),\n            );\n            // @ts-expect-error todo(flow->ts): avoid mutations\n            assign._ignoreBlockScopingTDZ = true;\n            nodes.push(t.expressionStatement(assign));\n            decl.init = this.addHelper(\"temporalUndefined\");\n          }\n\n          // @ts-expect-error todo(flow->ts): avoid mutations\n          node._blockHoist = 2;\n\n          if (path.isCompletionRecord()) {\n            // ensure we don't break completion record semantics by returning\n            // the initialiser of the last declarator\n            nodes.push(t.expressionStatement(scope.buildUndefinedNode()));\n          }\n\n          path.replaceWithMultiple(nodes);\n        }\n      },\n\n      Loop(path: NodePath<t.Loop>, state) {\n        const { parent, scope } = path;\n        path.ensureBlock();\n        const blockScoping = new BlockScoping(\n          path,\n          path.get(\"body\"),\n          parent,\n          scope,\n          throwIfClosureRequired,\n          tdzEnabled,\n          state,\n        );\n        const replace = blockScoping.run();\n        if (replace) path.replaceWith(replace);\n      },\n\n      CatchClause(path, state) {\n        const { parent, scope } = path;\n        const blockScoping = new BlockScoping(\n          null,\n          path.get(\"body\"),\n          parent,\n          scope,\n          throwIfClosureRequired,\n          tdzEnabled,\n          state,\n        );\n        blockScoping.run();\n      },\n\n      \"BlockStatement|SwitchStatement|Program\"(\n        path: NodePath<t.BlockStatement | t.SwitchStatement | t.Program>,\n        state,\n      ) {\n        if (!ignoreBlock(path)) {\n          const blockScoping = new BlockScoping(\n            null,\n            path,\n            path.parent,\n            path.scope,\n            throwIfClosureRequired,\n            tdzEnabled,\n            state,\n          );\n          blockScoping.run();\n        }\n      },\n    },\n  };\n});\n\nfunction ignoreBlock(\n  path: NodePath<t.BlockStatement | t.SwitchStatement | t.Program>,\n) {\n  return t.isLoop(path.parent) || t.isCatchClause(path.parent);\n}\n\nconst buildRetCheck = template.statement(`\n  if (typeof RETURN === \"object\") return RETURN.v;\n`);\n\nfunction isBlockScoped(node: t.Node): node is t.VariableDeclaration {\n  if (!t.isVariableDeclaration(node)) return false;\n  if (\n    // @ts-expect-error Fixme: document symbol properties\n    node[t.BLOCK_SCOPED_SYMBOL]\n  ) {\n    return true;\n  }\n\n  if (node.kind !== \"let\" && node.kind !== \"const\") return false;\n  return true;\n}\n\n/**\n * If there is a loop ancestor closer than the closest function, we\n * consider ourselves to be in a loop.\n */\nfunction isInLoop(path: NodePath) {\n  const loopOrFunctionParent = path.find(\n    path => path.isLoop() || path.isFunction(),\n  );\n\n  return loopOrFunctionParent?.isLoop();\n}\n\nfunction convertBlockScopedToVar(\n  path: NodePath<t.VariableDeclaration>,\n  node: t.VariableDeclaration,\n  parent: t.Node,\n  scope: Scope,\n  moveBindingsToParent = false,\n) {\n  if (!node) {\n    node = path.node;\n  }\n\n  // https://github.com/babel/babel/issues/255\n  if (isInLoop(path) && !t.isFor(parent)) {\n    for (let i = 0; i < node.declarations.length; i++) {\n      const declar = node.declarations[i];\n      declar.init = declar.init || scope.buildUndefinedNode();\n    }\n  }\n\n  // @ts-expect-error todo(flow->ts): avoid mutations\n  node[t.BLOCK_SCOPED_SYMBOL] = true;\n  node.kind = \"var\";\n\n  // Move bindings from current block scope to function scope.\n  if (moveBindingsToParent) {\n    const parentScope = scope.getFunctionParent() || scope.getProgramParent();\n    for (const name of Object.keys(path.getBindingIdentifiers())) {\n      const binding = scope.getOwnBinding(name);\n      if (binding) binding.kind = \"var\";\n      scope.moveBindingTo(name, parentScope);\n    }\n  }\n}\n\nfunction isVar(node: t.Node): node is t.VariableDeclaration {\n  return t.isVariableDeclaration(node, { kind: \"var\" }) && !isBlockScoped(node);\n}\n\ninterface LetReferenceVisitorState extends TDZVisitorState {\n  loopDepth: number;\n  closurify: boolean;\n}\n\nconst letReferenceBlockVisitor = traverse.visitors.merge([\n  {\n    Loop: {\n      enter(path, state) {\n        state.loopDepth++;\n      },\n      exit(path, state) {\n        state.loopDepth--;\n      },\n    },\n    FunctionParent(path, state) {\n      // References to block-scoped variables only require added closures if it's\n      // possible for the code to run more than once -- otherwise it is safe to\n      // simply rename the variables.\n      if (state.loopDepth > 0) {\n        path.traverse(letReferenceFunctionVisitor, state);\n      } else {\n        path.traverse(tdzVisitor, state);\n      }\n      return path.skip();\n    },\n  },\n  tdzVisitor,\n] as Visitor<LetReferenceVisitorState>[]);\n\nconst letReferenceFunctionVisitor = traverse.visitors.merge([\n  {\n    ReferencedIdentifier(path, state) {\n      const ref = state.letReferences.get(path.node.name);\n\n      // not a part of our scope\n      if (!ref) return;\n\n      // this scope has a variable with the same name so it couldn't belong\n      // to our let scope\n      const localBinding = path.scope.getBindingIdentifier(path.node.name);\n      if (localBinding && localBinding !== ref) return;\n\n      state.closurify = true;\n    },\n  },\n  tdzVisitor,\n] as Visitor<LetReferenceVisitorState>[]);\n\nconst hoistVarDeclarationsVisitor: Visitor<BlockScoping> = {\n  enter(path, self) {\n    if (path.isForStatement()) {\n      const { node } = path;\n      if (isVar(node.init)) {\n        const nodes = self.pushDeclar(node.init);\n        if (nodes.length === 1) {\n          node.init = nodes[0];\n        } else {\n          node.init = t.sequenceExpression(nodes);\n        }\n      }\n    } else if (path.isForInStatement() || path.isForOfStatement()) {\n      const { node } = path;\n      if (isVar(node.left)) {\n        self.pushDeclar(node.left);\n        node.left = node.left.declarations[0].id;\n      }\n    } else if (isVar(path.node)) {\n      path.replaceWithMultiple(\n        self.pushDeclar(path.node).map(expr => t.expressionStatement(expr)),\n      );\n    } else if (path.isFunction()) {\n      return path.skip();\n    }\n  },\n};\n\ntype LoopVisitorState = {\n  inSwitchCase: boolean;\n  hasBreakContinue: boolean;\n  innerLabels: string[];\n  hasReturn: boolean;\n  ignoreLabeless: boolean;\n  loopIgnored: WeakSet<t.Node>;\n  isLoop: boolean;\n  map: Map<string, t.BreakStatement | t.ContinueStatement>;\n};\n\nconst loopLabelVisitor: Visitor<LoopVisitorState> = {\n  LabeledStatement({ node }, state) {\n    state.innerLabels.push(node.label.name);\n  },\n};\n\ninterface ContinuationVisitorState {\n  returnStatements: NodePath<t.ReturnStatement>[];\n  reassignments: { [k: string]: boolean | undefined };\n  outsideReferences: Map<string, t.Identifier>;\n}\n\nconst continuationVisitor: Visitor<ContinuationVisitorState> = {\n  enter(path, state) {\n    if (path.isAssignmentExpression() || path.isUpdateExpression()) {\n      for (const name of Object.keys(path.getBindingIdentifiers())) {\n        if (\n          state.outsideReferences.get(name) !==\n          path.scope.getBindingIdentifier(name)\n        ) {\n          continue;\n        }\n        state.reassignments[name] = true;\n      }\n    } else if (path.isReturnStatement()) {\n      state.returnStatements.push(path);\n    }\n  },\n};\n\nfunction loopNodeTo(node: t.Node) {\n  if (t.isBreakStatement(node)) {\n    return \"break\";\n  } else if (t.isContinueStatement(node)) {\n    return \"continue\";\n  }\n}\n\nconst loopVisitor: Visitor<LoopVisitorState> = {\n  Loop(path, state) {\n    const oldIgnoreLabeless = state.ignoreLabeless;\n    state.ignoreLabeless = true;\n    path.traverse(loopVisitor, state);\n    state.ignoreLabeless = oldIgnoreLabeless;\n    path.skip();\n  },\n\n  Function(path) {\n    path.skip();\n  },\n\n  SwitchCase(path, state) {\n    const oldInSwitchCase = state.inSwitchCase;\n    state.inSwitchCase = true;\n    path.traverse(loopVisitor, state);\n    state.inSwitchCase = oldInSwitchCase;\n    path.skip();\n  },\n\n  \"BreakStatement|ContinueStatement|ReturnStatement\"(\n    path: NodePath<t.BreakStatement | t.ContinueStatement | t.ReturnStatement>,\n    state,\n  ) {\n    const { node, scope } = path;\n    if (state.loopIgnored.has(node)) return;\n\n    let replace;\n    let loopText = loopNodeTo(node);\n\n    if (loopText) {\n      if (t.isReturnStatement(node)) {\n        throw new Error(\n          \"Internal error: unexpected return statement with `loopText`\",\n        );\n      }\n      if (node.label) {\n        // we shouldn't be transforming this because it exists somewhere inside\n        if (state.innerLabels.indexOf(node.label.name) >= 0) {\n          return;\n        }\n\n        loopText = `${loopText}|${node.label.name}`;\n      } else {\n        // we shouldn't be transforming these statements because\n        // they don't refer to the actual loop we're scopifying\n        if (state.ignoreLabeless) return;\n\n        // break statements mean something different in this context\n        if (t.isBreakStatement(node) && state.inSwitchCase) return;\n      }\n\n      state.hasBreakContinue = true;\n      state.map.set(loopText, node);\n      replace = t.stringLiteral(loopText);\n    }\n\n    if (t.isReturnStatement(node)) {\n      state.hasReturn = true;\n      replace = t.objectExpression([\n        t.objectProperty(\n          t.identifier(\"v\"),\n          node.argument || scope.buildUndefinedNode(),\n        ),\n      ]);\n    }\n\n    if (replace) {\n      replace = t.returnStatement(replace);\n      state.loopIgnored.add(replace);\n      path.skip();\n      path.replaceWith(t.inherits(replace, node));\n    }\n  },\n};\n\nfunction isStrict(path: NodePath) {\n  return !!path.find(({ node }) => {\n    if (t.isProgram(node)) {\n      if (node.sourceType === \"module\") return true;\n    } else if (!t.isBlockStatement(node)) return false;\n\n    return node.directives.some(\n      directive => directive.value.value === \"use strict\",\n    );\n  });\n}\n\nclass BlockScoping {\n  private parent: t.Node;\n  private state: PluginPass;\n  private scope: Scope;\n  private throwIfClosureRequired: boolean;\n  private tdzEnabled: boolean;\n  private blockPath: NodePath<t.Block | t.SwitchStatement>;\n  private block: t.Block | t.SwitchStatement;\n  private outsideLetReferences: Map<string, t.Identifier>;\n  private hasLetReferences: boolean;\n  private letReferences: Map<string, t.Identifier>;\n  private body: t.Statement[];\n  // todo(flow->ts) add more specific type\n  private loopParent: t.Node;\n  private loopLabel: t.Identifier;\n  private loopPath: NodePath<t.Loop>;\n  private loop: t.Loop;\n  private has: LoopVisitorState;\n  constructor(\n    loopPath: NodePath<t.Loop> | undefined | null,\n    blockPath: NodePath<t.Block | t.SwitchStatement>,\n    parent: t.Node,\n    scope: Scope,\n    throwIfClosureRequired: boolean,\n    tdzEnabled: boolean,\n    state: PluginPass,\n  ) {\n    this.parent = parent;\n    this.scope = scope;\n    this.state = state;\n    this.throwIfClosureRequired = throwIfClosureRequired;\n    this.tdzEnabled = tdzEnabled;\n\n    this.blockPath = blockPath;\n    this.block = blockPath.node;\n\n    this.outsideLetReferences = new Map();\n    this.hasLetReferences = false;\n    this.letReferences = new Map();\n    this.body = [];\n\n    if (loopPath) {\n      this.loopParent = loopPath.parent;\n      this.loopLabel =\n        t.isLabeledStatement(this.loopParent) && this.loopParent.label;\n      this.loopPath = loopPath;\n      this.loop = loopPath.node;\n    }\n  }\n\n  /**\n   * Start the ball rolling.\n   */\n\n  run() {\n    const block = this.block;\n    if (DONE.has(block)) return;\n    DONE.add(block);\n\n    const needsClosure = this.getLetReferences();\n\n    this.checkConstants();\n\n    // this is a block within a `Function/Program` so we can safely leave it be\n    if (t.isFunction(this.parent) || t.isProgram(this.block)) {\n      this.updateScopeInfo();\n      return;\n    }\n\n    // we can skip everything\n    if (!this.hasLetReferences) return;\n\n    if (needsClosure) {\n      this.wrapClosure();\n    } else {\n      this.remap();\n    }\n\n    this.updateScopeInfo(needsClosure);\n\n    if (this.loopLabel && !t.isLabeledStatement(this.loopParent)) {\n      return t.labeledStatement(this.loopLabel, this.loop);\n    }\n  }\n\n  checkConstants() {\n    const constBindings = new Map<string, Binding>();\n\n    // In some cases, there are two different scopes: for example,\n    // for (const x of y) {} has a scope for the loop head and one\n    // for the body.\n    for (const scope of new Set([this.scope, this.blockPath.scope])) {\n      for (const name of Object.keys(scope.bindings)) {\n        const binding = scope.bindings[name];\n        if (binding.kind === \"const\") constBindings.set(name, binding);\n      }\n    }\n\n    const { state } = this;\n\n    for (const [name, binding] of constBindings) {\n      for (const violation of binding.constantViolations) {\n        const readOnlyError = state.addHelper(\"readOnlyError\");\n        const throwNode = t.callExpression(readOnlyError, [\n          t.stringLiteral(name),\n        ]);\n\n        if (violation.isAssignmentExpression()) {\n          const { operator } = violation.node;\n          if (operator === \"=\") {\n            violation.replaceWith(\n              t.sequenceExpression([violation.get(\"right\").node, throwNode]),\n            );\n          } else if ([\"&&=\", \"||=\", \"??=\"].includes(operator)) {\n            violation.replaceWith(\n              t.logicalExpression(\n                // @ts-expect-error todo(flow->ts)\n                operator.slice(0, -1),\n                violation.get(\"left\").node,\n                t.sequenceExpression([violation.get(\"right\").node, throwNode]),\n              ),\n            );\n          } else {\n            violation.replaceWith(\n              t.sequenceExpression([\n                t.binaryExpression(\n                  // @ts-expect-error todo(flow->ts)\n                  operator.slice(0, -1),\n                  violation.get(\"left\").node,\n                  violation.get(\"right\").node,\n                ),\n                throwNode,\n              ]),\n            );\n          }\n        } else if (violation.isUpdateExpression()) {\n          violation.replaceWith(\n            t.sequenceExpression([\n              t.unaryExpression(\"+\", violation.get(\"argument\").node),\n              throwNode,\n            ]),\n          );\n        } else if (violation.isForXStatement()) {\n          // @ts-expect-error TS requires explicit annotation of \"violation\"\n          violation.ensureBlock();\n          violation\n            .get(\"left\")\n            .replaceWith(\n              t.variableDeclaration(\"var\", [\n                t.variableDeclarator(\n                  violation.scope.generateUidIdentifier(name),\n                ),\n              ]),\n            );\n          // @ts-expect-error todo(flow->ts): possible bug \"for(…) switch(){}\"\n          violation.node.body.body.unshift(t.expressionStatement(throwNode));\n        }\n      }\n    }\n  }\n\n  updateScopeInfo(wrappedInClosure?: boolean) {\n    const blockScope = this.blockPath.scope;\n\n    const parentScope =\n      blockScope.getFunctionParent() || blockScope.getProgramParent();\n    const letRefs = this.letReferences;\n\n    for (const key of letRefs.keys()) {\n      const ref = letRefs.get(key);\n      const binding = blockScope.getBinding(ref.name);\n      if (!binding) continue;\n      if (binding.kind === \"let\" || binding.kind === \"const\") {\n        binding.kind = \"var\";\n\n        if (wrappedInClosure) {\n          if (blockScope.hasOwnBinding(ref.name)) {\n            blockScope.removeBinding(ref.name);\n          }\n        } else {\n          blockScope.moveBindingTo(ref.name, parentScope);\n        }\n      }\n    }\n  }\n\n  remap() {\n    const letRefs = this.letReferences;\n    const outsideLetRefs = this.outsideLetReferences;\n    const scope = this.scope;\n    const blockPathScope = this.blockPath.scope;\n\n    // alright, so since we aren't wrapping this block in a closure\n    // we have to check if any of our let variables collide with\n    // those in upper scopes and then if they do, generate a uid\n    // for them and replace all references with it\n\n    for (const key of letRefs.keys()) {\n      // just an Identifier node we collected in `getLetReferences`\n      // this is the defining identifier of a declaration\n      const ref = letRefs.get(key);\n\n      // todo: could skip this if the colliding binding is in another function\n      if (scope.parentHasBinding(key) || scope.hasGlobal(key)) {\n        const binding = scope.getOwnBinding(key);\n        if (binding) {\n          const parentBinding = scope.parent.getOwnBinding(key);\n          if (\n            binding.kind === \"hoisted\" &&\n            // @ts-expect-error todo(flow->ts)\n            !binding.path.node.async &&\n            // @ts-expect-error todo(flow->ts)\n            !binding.path.node.generator &&\n            (!parentBinding || isVar(parentBinding.path.parent)) &&\n            !isStrict(binding.path.parentPath)\n          ) {\n            continue;\n          }\n          // The same identifier might have been bound separately in the block scope and\n          // the enclosing scope (e.g. loop or catch statement), so we should handle both\n          // individually\n          scope.rename(ref.name);\n        }\n\n        if (blockPathScope.hasOwnBinding(key)) {\n          blockPathScope.rename(ref.name);\n        }\n      }\n    }\n\n    for (const key of outsideLetRefs.keys()) {\n      const ref = letRefs.get(key);\n      // check for collisions with a for loop's init variable and the enclosing scope's bindings\n      // https://github.com/babel/babel/issues/8498\n      if (isInLoop(this.blockPath) && blockPathScope.hasOwnBinding(key)) {\n        blockPathScope.rename(ref.name);\n      }\n    }\n  }\n\n  wrapClosure() {\n    if (this.throwIfClosureRequired) {\n      throw this.blockPath.buildCodeFrameError(\n        \"Compiling let/const in this block would add a closure \" +\n          \"(throwIfClosureRequired).\",\n      );\n    }\n    const block = this.block;\n\n    const outsideRefs = this.outsideLetReferences;\n\n    // remap loop heads with colliding variables\n    if (this.loop) {\n      // nb: clone outsideRefs keys since the map is modified within the loop\n      for (const name of Array.from(outsideRefs.keys())) {\n        const id = outsideRefs.get(name);\n\n        if (\n          this.scope.hasGlobal(id.name) ||\n          this.scope.parentHasBinding(id.name)\n        ) {\n          outsideRefs.delete(id.name);\n          this.letReferences.delete(id.name);\n\n          this.scope.rename(id.name);\n\n          this.letReferences.set(id.name, id);\n          outsideRefs.set(id.name, id);\n        }\n      }\n    }\n\n    // if we're inside of a for loop then we search to see if there are any\n    // `break`s, `continue`s, `return`s etc\n    this.has = this.checkLoop();\n\n    // hoist let references to retain scope\n    this.hoistVarDeclarations();\n\n    // turn outsideLetReferences into an array\n    const args = Array.from(outsideRefs.values(), node => t.cloneNode(node));\n    const params = args.map(id => t.cloneNode(id));\n\n    const isSwitch = block.type === \"SwitchStatement\";\n\n    // build the closure that we're going to wrap the block with, possible wrapping switch(){}\n    const fn = t.functionExpression(\n      null,\n      params,\n      t.blockStatement(isSwitch ? [block] : block.body),\n    ) as t.FunctionExpression & { params: t.Identifier[] };\n\n    // continuation\n    this.addContinuations(fn);\n\n    let call: t.CallExpression | t.YieldExpression | t.AwaitExpression =\n      t.callExpression(t.nullLiteral(), args);\n    let basePath = \".callee\";\n\n    // handle generators\n    const hasYield = traverse.hasType(\n      fn.body,\n      \"YieldExpression\",\n      t.FUNCTION_TYPES,\n    );\n    if (hasYield) {\n      fn.generator = true;\n      call = t.yieldExpression(call, true);\n      basePath = \".argument\" + basePath;\n    }\n\n    // handlers async functions\n    const hasAsync = traverse.hasType(\n      fn.body,\n      \"AwaitExpression\",\n      t.FUNCTION_TYPES,\n    );\n    if (hasAsync) {\n      fn.async = true;\n      call = t.awaitExpression(call);\n      basePath = \".argument\" + basePath;\n    }\n\n    let placeholderPath;\n    let index;\n    if (this.has.hasReturn || this.has.hasBreakContinue) {\n      const ret = this.scope.generateUid(\"ret\");\n\n      this.body.push(\n        t.variableDeclaration(\"var\", [\n          t.variableDeclarator(t.identifier(ret), call),\n        ]),\n      );\n      placeholderPath = \"declarations.0.init\" + basePath;\n      index = this.body.length - 1;\n\n      this.buildHas(ret);\n    } else {\n      this.body.push(t.expressionStatement(call));\n      placeholderPath = \"expression\" + basePath;\n      index = this.body.length - 1;\n    }\n\n    let callPath: NodePath;\n    // replace the current block body with the one we're going to build\n    if (isSwitch) {\n      const { parentPath, listKey, key } = this.blockPath;\n\n      this.blockPath.replaceWithMultiple(this.body);\n      callPath = parentPath.get(listKey)[(key as number) + index];\n    } else {\n      block.body = this.body;\n      callPath = this.blockPath.get(\"body\")[index];\n    }\n\n    const placeholder = callPath.get(placeholderPath) as NodePath;\n\n    let fnPath;\n    if (this.loop) {\n      const loopId = this.scope.generateUid(\"loop\");\n      const p = this.loopPath.insertBefore(\n        t.variableDeclaration(\"var\", [\n          t.variableDeclarator(t.identifier(loopId), fn),\n        ]),\n      );\n\n      placeholder.replaceWith(t.identifier(loopId));\n      fnPath = p[0].get(\"declarations.0.init\");\n    } else {\n      placeholder.replaceWith(fn);\n      fnPath = placeholder;\n    }\n\n    // Ensure \"this\", \"arguments\", and \"super\" continue to work in the wrapped function.\n    fnPath.unwrapFunctionEnvironment();\n  }\n\n  /**\n   * If any of the outer let variables are reassigned then we need to rename them in\n   * the closure so we can get direct access to the outer variable to continue the\n   * iteration with bindings based on each iteration.\n   *\n   * Reference: https://github.com/babel/babel/issues/1078\n   */\n\n  addContinuations(fn: t.FunctionExpression & { params: t.Identifier[] }) {\n    const state: ContinuationVisitorState = {\n      reassignments: {},\n      returnStatements: [],\n      outsideReferences: this.outsideLetReferences,\n    };\n\n    this.scope.traverse(fn, continuationVisitor, state);\n\n    for (let i = 0; i < fn.params.length; i++) {\n      const param = fn.params[i];\n      if (!state.reassignments[param.name]) continue;\n\n      const paramName = param.name;\n      const newParamName = this.scope.generateUid(param.name);\n      fn.params[i] = t.identifier(newParamName);\n\n      this.scope.rename(paramName, newParamName, fn);\n\n      state.returnStatements.forEach(returnStatement => {\n        returnStatement.insertBefore(\n          t.expressionStatement(\n            t.assignmentExpression(\n              \"=\",\n              t.identifier(paramName),\n              t.identifier(newParamName),\n            ),\n          ),\n        );\n      });\n\n      // assign outer reference as it's been modified internally and needs to be retained\n      fn.body.body.push(\n        t.expressionStatement(\n          t.assignmentExpression(\n            \"=\",\n            t.identifier(paramName),\n            t.identifier(newParamName),\n          ),\n        ),\n      );\n    }\n  }\n\n  getLetReferences() {\n    const block = this.block;\n\n    const declarators = [];\n\n    if (this.loop) {\n      // @ts-expect-error todo(flow->ts) add check for loop type\n      const init = this.loop.left || this.loop.init;\n      if (isBlockScoped(init)) {\n        declarators.push(init);\n        const names = t.getBindingIdentifiers(init);\n        for (const name of Object.keys(names)) {\n          this.outsideLetReferences.set(name, names[name]);\n        }\n      }\n    }\n\n    const addDeclarationsFromChild = (\n      path: NodePath<t.Statement | t.SwitchCase>,\n      node: t.Statement | t.SwitchCase,\n    ) => {\n      if (\n        t.isClassDeclaration(node) ||\n        t.isFunctionDeclaration(node) ||\n        isBlockScoped(node)\n      ) {\n        if (isBlockScoped(node)) {\n          convertBlockScopedToVar(\n            path as NodePath<t.VariableDeclaration>,\n            node,\n            block,\n            this.scope,\n          );\n        }\n        if (node.type === \"VariableDeclaration\") {\n          for (let i = 0; i < node.declarations.length; i++) {\n            declarators.push(node.declarations[i]);\n          }\n        } else {\n          declarators.push(node);\n        }\n      }\n      if (t.isLabeledStatement(node)) {\n        addDeclarationsFromChild(path.get(\"body\"), node.body);\n      }\n    };\n\n    if (block.type === \"SwitchStatement\") {\n      const declarPaths = (this.blockPath as NodePath<t.SwitchStatement>).get(\n        \"cases\",\n      );\n      for (let i = 0; i < block.cases.length; i++) {\n        const consequents = block.cases[i].consequent;\n\n        for (let j = 0; j < consequents.length; j++) {\n          const declar = consequents[j];\n          addDeclarationsFromChild(declarPaths[i], declar);\n        }\n      }\n    } else {\n      const declarPaths = (this.blockPath as NodePath<t.Block>).get(\"body\");\n      for (let i = 0; i < block.body.length; i++) {\n        addDeclarationsFromChild(declarPaths[i], declarPaths[i].node);\n      }\n    }\n\n    //\n    for (let i = 0; i < declarators.length; i++) {\n      const declar = declarators[i];\n      // Passing true as the third argument causes t.getBindingIdentifiers\n      // to return only the *outer* binding identifiers of this\n      // declaration, rather than (for example) mistakenly including the\n      // parameters of a function declaration. Fixes #4880.\n      const keys = t.getBindingIdentifiers(declar, false, true);\n      for (const key of Object.keys(keys)) {\n        this.letReferences.set(key, keys[key]);\n      }\n      this.hasLetReferences = true;\n    }\n\n    // no let references so we can just quit\n    if (!this.hasLetReferences) return;\n\n    const state: LetReferenceVisitorState = {\n      letReferences: this.letReferences,\n      closurify: false,\n      loopDepth: 0,\n      tdzEnabled: this.tdzEnabled,\n      addHelper: name => this.state.addHelper(name),\n    };\n\n    if (isInLoop(this.blockPath)) {\n      state.loopDepth++;\n    }\n\n    // traverse through this block, stopping on functions and checking if they\n    // contain any local let references\n    this.blockPath.traverse(letReferenceBlockVisitor, state);\n\n    return state.closurify;\n  }\n\n  /**\n   * If we're inside of a loop then traverse it and check if it has one of\n   * the following node types `ReturnStatement`, `BreakStatement`,\n   * `ContinueStatement` and replace it with a return value that we can track\n   * later on.\n   */\n\n  checkLoop() {\n    const state: LoopVisitorState = {\n      hasBreakContinue: false,\n      ignoreLabeless: false,\n      inSwitchCase: false,\n      innerLabels: [],\n      hasReturn: false,\n      isLoop: !!this.loop,\n      map: new Map(),\n      loopIgnored: new WeakSet(),\n    };\n\n    this.blockPath.traverse(loopLabelVisitor, state);\n    this.blockPath.traverse(loopVisitor, state);\n\n    return state;\n  }\n\n  /**\n   * Hoist all let declarations in this block to before it so they retain scope\n   * once we wrap everything in a closure.\n   */\n\n  hoistVarDeclarations() {\n    this.blockPath.traverse(hoistVarDeclarationsVisitor, this);\n  }\n\n  /**\n   * Turn a `VariableDeclaration` into an array of `AssignmentExpressions` with\n   * their declarations hoisted to before the closure wrapper.\n   */\n\n  pushDeclar(node: t.VariableDeclaration): Array<t.AssignmentExpression> {\n    const declars = [];\n    const names = t.getBindingIdentifiers(node);\n    for (const name of Object.keys(names)) {\n      declars.push(t.variableDeclarator(names[name]));\n    }\n\n    this.body.push(t.variableDeclaration(node.kind, declars));\n\n    const replace = [];\n\n    for (let i = 0; i < node.declarations.length; i++) {\n      const declar = node.declarations[i];\n      if (!declar.init) continue;\n\n      const expr = t.assignmentExpression(\n        \"=\",\n        t.cloneNode(declar.id),\n        t.cloneNode(declar.init),\n      );\n      replace.push(t.inherits(expr, declar));\n    }\n\n    return replace;\n  }\n\n  buildHas(ret: string) {\n    const body = this.body;\n    const has = this.has;\n\n    if (has.hasBreakContinue) {\n      for (const key of has.map.keys()) {\n        body.push(\n          t.ifStatement(\n            t.binaryExpression(\"===\", t.identifier(ret), t.stringLiteral(key)),\n            has.map.get(key),\n          ),\n        );\n      }\n    }\n\n    // typeof ret === \"object\"\n    if (has.hasReturn) {\n      body.push(\n        buildRetCheck({\n          RETURN: t.identifier(ret),\n        }),\n      );\n    }\n  }\n}\n"],"mappings":"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"}