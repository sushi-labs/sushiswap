{"version":3,"file":"filterRowsUtils.js","sources":["../../../src/utils/filterRowsUtils.ts"],"sourcesContent":["import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      if (row.subRows?.length) {\n        const newRow = createRow(\n          table,\n          row.id,\n          row.original,\n          row.index,\n          row.depth\n        )\n        newRow.columnFilters = row.columnFilters\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        if (!newRow.subRows.length) {\n          continue\n        }\n        row = newRow\n      }\n\n      if (filterRow(row)) {\n        rows.push(row)\n        newFilteredRowsById[row.id] = row\n        newFilteredRowsById[i] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n"],"names":["filterRows","rows","filterRowImpl","table","options","filterFromLeafRows","filterRowModelFromLeafs","filterRowModelFromRoot","rowsToFilter","filterRow","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","depth","i","length","row","subRows","newRow","createRow","id","original","index","columnFilters","push","flatRows","rowsById","pass"],"mappings":"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"}