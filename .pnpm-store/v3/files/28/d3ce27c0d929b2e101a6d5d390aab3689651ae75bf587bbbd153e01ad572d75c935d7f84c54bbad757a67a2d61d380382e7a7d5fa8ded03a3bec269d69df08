{"version":3,"file":"edge-vm.js","sourceRoot":"","sources":["../src/edge-vm.ts"],"names":[],"mappings":";;;AAGA,yDAAwD;AACxD,6BAAyB;AAoBzB;;;GAGG;AACH,MAAa,MAA6B,SAAQ,OAAK;IACrD,YAAY,UAA4B,EAAE;QACxC,KAAK,CAAC;YACJ,GAAG,OAAO;YACV,MAAM,EAAE,CAAC,OAAO,EAAE,EAAE;gBAClB,OAAO,OAAO,CAAC,MAAM;oBACnB,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,IAAA,0BAAa,EAAC,OAAO,CAAC,CAAC;oBACxC,CAAC,CAAE,IAAA,0BAAa,EAAC,OAAO,CAAO,CAAA;YACnC,CAAC;SACF,CAAC,CAAA;IACJ,CAAC;CACF;AAXD,wBAWC","sourcesContent":["import type { ExtendedDictionary } from './types'\nimport type { Primitives } from '@edge-runtime/primitives'\nimport type { VMOptions } from './vm'\nimport { addPrimitives } from '@edge-runtime/primitives'\nimport { VM } from './vm'\n\nexport interface EdgeVMOptions<T> {\n  /**\n   * Provide code generation options to the Node.js VM.\n   * If you don't provide any option, code generation will be disabled.\n   */\n  codeGeneration?: VMOptions<T>['codeGeneration']\n  /**\n   * Allows to extend the VMContext. Note that it must return a contextified\n   * object so ideally it should return the same reference it receives.\n   */\n  extend?: (context: ExtendedDictionary<Primitives>) => ExtendedDictionary<T>\n  /**\n   * Provides an initial map to the require cache.\n   * If none is given, it will be initialized to an empty map.\n   */\n  requireCache?: VMOptions<T>['requireCache']\n}\n\n/**\n * An implementation of a VM that pre-loads on its context Edge Primitives.\n * The context can be extended from its constructor.\n */\nexport class EdgeVM<T extends Primitives> extends VM<T> {\n  constructor(options: EdgeVMOptions<T> = {}) {\n    super({\n      ...options,\n      extend: (context) => {\n        return options.extend\n          ? options.extend(addPrimitives(context))\n          : (addPrimitives(context) as T)\n      },\n    })\n  }\n}\n"]}