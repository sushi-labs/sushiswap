import { CustomFilterFns, FilterFn } from './features/Filters';
import { AggregationFn, CustomAggregationFns } from './features/Grouping';
import { CustomSortingFns, SortingFn } from './features/Sorting';
import { ColumnDef, AccessorFn, AnyRender, TableGenerics, TableOptionsResolved, TableOptions } from './types';
import { IfDefined, Overwrite } from './utils';
export declare type TableFactory<TGenerics extends TableGenerics> = () => Table<TGenerics>;
export declare type CreateTableOptions<TRender extends AnyRender, TFilterFns extends CustomFilterFns<any>, TSortingFns extends CustomSortingFns<any>, TAggregationFns extends CustomAggregationFns<any>, TGenerics extends TableGenerics> = Partial<{
    render?: TRender;
    filterFns?: TFilterFns;
    sortingFns?: TSortingFns;
    aggregationFns?: TAggregationFns;
} & Omit<TableOptionsResolved<TGenerics>, 'filterFns' | 'sortingFns' | 'aggregationFns'>>;
export declare type Table<TGenerics extends TableGenerics> = {
    generics: TGenerics;
    options: Partial<TableOptionsResolved<TGenerics>>;
    setRowType: <TRow>() => Table<Overwrite<TGenerics, {
        Row: TRow;
    }>>;
    setTableMetaType: <TTableMeta>() => Table<Overwrite<TGenerics, {
        TableMeta: TTableMeta;
    }>>;
    setColumnMetaType: <TColumnMeta>() => Table<Overwrite<TGenerics, {
        ColumnMeta: TColumnMeta;
    }>>;
    setFilterMetaType: <TFilterMeta>() => Table<Overwrite<TGenerics, {
        FilterMeta: TFilterMeta;
    }>>;
    setOptions: <TFilterFns extends Record<string, FilterFn<TGenerics>>, TSortingFns extends Record<string, SortingFn<TGenerics>>, TAggregationFns extends Record<string, AggregationFn<TGenerics>>>(options: CreateTableOptions<any, TFilterFns, TSortingFns, TAggregationFns, TGenerics>) => Table<Overwrite<TGenerics, {
        FilterFns: IfDefined<TFilterFns, TGenerics['FilterFns']>;
        SortingFns: IfDefined<TSortingFns, TGenerics['SortingFns']>;
        AggregationFns: IfDefined<TAggregationFns, TGenerics['AggregationFns']>;
    }>>;
    createGroup: (column: Overwrite<Overwrite<ColumnDef<any>, {
        header: string;
        id?: string;
    }> | Overwrite<ColumnDef<any>, {
        id: string;
        header?: string | ((...any: any) => any);
    }>, {
        accessorFn?: never;
        accessorKey?: never;
        columns?: ColumnDef<any>[];
    }>) => ColumnDef<TGenerics>;
    createDisplayColumn: (column: Omit<ColumnDef<TGenerics>, 'columns'>) => ColumnDef<TGenerics>;
    createDataColumn: <TAccessor extends AccessorFn<TGenerics['Row']> | keyof TGenerics['Row']>(accessor: TAccessor, column: Overwrite<TAccessor extends (...args: any[]) => any ? ColumnDef<Overwrite<TGenerics, {
        Value: ReturnType<TAccessor>;
    }>> : TAccessor extends keyof TGenerics['Row'] ? Overwrite<ColumnDef<Overwrite<TGenerics, {
        Value: TGenerics['Row'][TAccessor];
    }>>, {
        id?: string;
    }> : never, {
        accessorFn?: never;
        accessorKey?: never;
        columns?: ColumnDef<any>[];
    }>) => ColumnDef<TGenerics>;
    createOptions: (options: TableOptions<TGenerics>) => TableOptions<TGenerics>;
};
export declare function createTableFactory<TRenderer extends AnyRender>(opts: {
    render: TRenderer;
}): () => Table<{
    Renderer: TRenderer;
    Rendered: ReturnType<TRenderer>;
}>;
