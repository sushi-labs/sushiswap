{"version":3,"file":"getFilteredRowModel.js","sources":["../../../src/utils/getFilteredRowModel.ts"],"sourcesContent":["import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Table: Could not find a column to filter with columnId: ${d.id}`\n              )\n            }\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n"],"names":["getFilteredRowModel","table","memo","getPreFilteredRowModel","getState","columnFilters","globalFilter","rowModel","rows","length","i","flatRows","columnFiltersMeta","resolvedColumnFilters","resolvedGlobalFilters","forEach","d","column","getColumn","id","process","env","NODE_ENV","console","warn","filterFn","getFilterFn","push","resolvedValue","resolveFilterValue","value","filterableIds","map","globalFilterFn","getGlobalFilterFn","globallyFilterableColumns","getAllLeafColumns","filter","getCanGlobalFilter","currentColumnFilter","currentGlobalFilter","j","row","filterMeta","__global__","filterRowsImpl","filterRows","key","debug","options","debugAll","debugTable","onChange","_autoResetPageIndex"],"mappings":"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"}