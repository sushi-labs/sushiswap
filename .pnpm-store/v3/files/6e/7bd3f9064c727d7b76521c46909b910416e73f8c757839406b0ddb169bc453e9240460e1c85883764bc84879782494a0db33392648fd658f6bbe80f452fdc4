{"version":3,"file":"core-sdk.cjs.production.min.js","sources":["../src/enums/ChainId.ts","../src/enums/ChainKey.ts","../src/enums/Rounding.ts","../src/enums/SolidityType.ts","../src/enums/TradeType.ts","../src/enums/TradeVersion.ts","../src/constants/addresses.ts","../src/constants/chain.ts","../src/constants/legacy.ts","../src/entities/AbstractCurrency.ts","../src/entities/NativeCurrency.ts","../src/functions/validateAndParseAddress.ts","../src/entities/Token.ts","../src/constants/tokens.ts","../src/entities/Native/Avalanche.ts","../src/entities/Native/Binance.ts","../src/entities/Native/Celo.ts","../src/entities/Native/Ether.ts","../src/entities/Native/Fantom.ts","../src/entities/Native/Harmony.ts","../src/entities/Native/Heco.ts","../src/entities/Native/Matic.ts","../src/entities/Native/Movr.ts","../src/entities/Native/Okex.ts","../src/entities/Native/xDai.ts","../src/entities/Native/Palm.ts","../src/entities/Native/Fuse.ts","../src/entities/Native/Telos.ts","../src/entities/Native/Glmr.ts","../src/constants/natives.ts","../src/constants/numbers.ts","../src/constants/solidity.ts","../src/errors.ts","../src/entities/Fraction.ts","../src/entities/CurrencyAmount.ts","../src/entities/Price.ts","../src/functions/computePairAddress.ts","../src/functions/math.ts","../src/entities/Pair.ts","../src/entities/Percent.ts","../src/entities/Route.ts","../src/functions/computePriceImpact.ts","../src/functions/sortedInsert.ts","../src/entities/Trade.ts","../src/functions/contract.ts","../src/router.ts","../src/functions/rebase.ts","../src/functions/validateSolidityTypeInstance.ts"],"sourcesContent":["export enum ChainId {\n  ETHEREUM = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  MATIC = 137,\n  MATIC_TESTNET = 80001,\n  FANTOM = 250,\n  FANTOM_TESTNET = 4002,\n  XDAI = 100,\n  BSC = 56,\n  BSC_TESTNET = 97,\n  ARBITRUM = 42161,\n  ARBITRUM_TESTNET = 79377087078960,\n  MOONBEAM_TESTNET = 1287,\n  AVALANCHE = 43114,\n  AVALANCHE_TESTNET = 43113,\n  HECO = 128,\n  HECO_TESTNET = 256,\n  HARMONY = 1666600000,\n  HARMONY_TESTNET = 1666700000,\n  OKEX = 66,\n  OKEX_TESTNET = 65,\n  CELO = 42220,\n  PALM = 11297108109,\n  PALM_TESTNET = 11297108099,\n  MOONRIVER = 1285,\n  FUSE = 122,\n  TELOS = 40,\n  HARDHAT = 31337,\n  MOONBEAM = 1284,\n  OPTIMISM = 10\n}\n","export enum ChainKey {\n  ARBITRUM = 'arbitrum',\n  ARBITRUM_TESTNET = 'arbitrum-testnet',\n  AVALANCHE = 'avalanche',\n  AVALANCHE_TESTNET = 'avalance-testnet',\n  BSC = 'bsc',\n  BSC_TESTNET = 'bsc-testnet',\n  CELO = 'celo',\n  ETHEREUM = 'ethereum',\n  FANTOM = 'fantom',\n  FANTOM_TESTNET = 'fantom-testnet',\n  FUSE = 'fuse',\n  GÖRLI = 'goerli',\n  HARMONY = 'harmony',\n  HARMONY_TESTNET = 'harmony-testnet',\n  HECO = 'heco',\n  HECO_TESTNET = 'heco-testnet',\n  KOVAN = 'kovan',\n  ROPSTEN = 'ropsten',\n  MATIC = 'polygon',\n  MATIC_TESTNET = 'matic-testnet',\n  MOONBEAM_TESTNET = 'moonbeam-testnet',\n  MOONRIVER = 'moonriver',\n  OKEX = 'okex',\n  OKEX_TESTNET = 'okex-testnet',\n  PALM = 'palm',\n  PALM_TESTNET = 'palm-testnet',\n  RINKEBY = 'rinkeby',\n  TELOS = 'telos',\n  XDAI = 'xdai',\n  MOONBEAM = 'moonbeam',\n  OPTIMISM = 'optimism',\n}\n","export enum Rounding {\n  ROUND_DOWN = 0,\n  ROUND_HALF_UP = 1,\n  ROUND_UP = 3,\n}\n","export enum SolidityType {\n    uint8 = 'uint8',\n    uint256 = 'uint256',\n}","export enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT,\n}\n","export enum TradeVersion {\n  V2TRADE,\n  V3TRADE,\n}\n","import { AddressMap } from '../types'\nimport { ChainId } from '../enums'\n\nexport const SUSHI_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x6B3595068778DD592e39A122f4f5a5cF09C90fE2',\n  [ChainId.ROPSTEN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.RINKEBY]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.GÖRLI]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.KOVAN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.FANTOM]: '0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC',\n  [ChainId.MATIC]: '0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a',\n  [ChainId.XDAI]: '0x2995D1317DcD4f0aB89f4AE60F3f020A4F17C7CE',\n  [ChainId.BSC]: '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4',\n  [ChainId.ARBITRUM]: '0xd4d42F0b6DEF4CE0383636770eF773390d85c61A',\n  [ChainId.AVALANCHE]: '0x37B608519F91f70F2EeB0e5Ed9AF4061722e4F76',\n  [ChainId.HECO]: '0x52E00B2dA5Bd7940fFe26B609A42F957f31118D5',\n  [ChainId.HARMONY]: '0xBEC775Cb42AbFa4288dE81F387a9b1A3c4Bc552A',\n  [ChainId.OKEX]: '0x2218E0D5E0173769F5b4939a3aE423f7e5E4EAB7',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.PALM]: '',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0xf390830DF829cf22c53c8840554B98eafC5dCBc2',\n  [ChainId.CELO]: '0x29dFce9c22003A4999930382Fd00f9Fd6133Acd1',\n  [ChainId.TELOS]: '0x922D641a426DcFFaeF11680e5358F34d97d112E1',\n  [ChainId.FUSE]: '0x90708b20ccC1eb95a4FA7C8b18Fd2C22a0Ff9E78',\n  [ChainId.MOONBEAM]: '0x2C78f1b70Ccf63CDEe49F9233e9fAa99D43AA07e',\n}\n\nexport const USDC_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n  [ChainId.ROPSTEN]: '0x0D9C8723B343A8368BebE0B5E89273fF8D712e3C',\n  [ChainId.KOVAN]: '0xb7a4F3E9097C08dA09517b5aB877F7a917224ede',\n  [ChainId.MATIC]: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n  [ChainId.MATIC_TESTNET]: '0x742DfA5Aa70a8212857966D491D67B09Ce7D6ec7',\n  [ChainId.FANTOM]: '0x04068DA6C83AFCFA0e13ba15A6696662335D5B75',\n  [ChainId.BSC]: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\n  [ChainId.HARMONY]: '0x985458E523dB3d53125813eD68c274899e9DfAb4',\n  [ChainId.HECO]: '0x9362Bbef4B8313A8Aa9f0c9808B80577Aa26B73B',\n  [ChainId.OKEX]: '0xc946DAf81b08146B1C7A8Da2A851Ddf2B3EAaf85',\n  [ChainId.XDAI]: '0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83',\n  [ChainId.ARBITRUM]: '0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8',\n  [ChainId.AVALANCHE]: '0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664',\n  [ChainId.MOONRIVER]: '0xE3F5a90F9cb311505cd691a46596599aA1A0AD7D',\n  [ChainId.CELO]: '0xef4229c8c3250C675F21BCefa42f58EfbfF6002a',\n  [ChainId.TELOS]: '0x818ec0A7Fe18Ff94269904fCED6AE3DaE6d6dC0b',\n  [ChainId.FUSE]: '0x620fd5fa44BE6af63715Ef4E65DDFA0387aD13F5',\n  [ChainId.MOONBEAM]: '0x8f552a71EFE5eeFc207Bf75485b356A0b3f01eC9',\n  [ChainId.OPTIMISM]: '0x7F5c764cBc14f9669B88837ca1490cCa17c31607',\n}\n\nexport const USD_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: USDC_ADDRESS[ChainId.ETHEREUM],\n  [ChainId.ROPSTEN]: USDC_ADDRESS[ChainId.ROPSTEN],\n  [ChainId.KOVAN]: USDC_ADDRESS[ChainId.KOVAN],\n  [ChainId.MATIC]: USDC_ADDRESS[ChainId.MATIC],\n  [ChainId.MATIC_TESTNET]: USDC_ADDRESS[ChainId.MATIC_TESTNET],\n  [ChainId.FANTOM]: USDC_ADDRESS[ChainId.FANTOM],\n  [ChainId.BSC]: USDC_ADDRESS[ChainId.BSC],\n  [ChainId.HARMONY]: USDC_ADDRESS[ChainId.HARMONY],\n  [ChainId.HECO]: USDC_ADDRESS[ChainId.HECO],\n  [ChainId.OKEX]: USDC_ADDRESS[ChainId.OKEX],\n  [ChainId.XDAI]: USDC_ADDRESS[ChainId.XDAI],\n  [ChainId.ARBITRUM]: USDC_ADDRESS[ChainId.ARBITRUM],\n  [ChainId.AVALANCHE]: USDC_ADDRESS[ChainId.AVALANCHE],\n  [ChainId.MOONRIVER]: USDC_ADDRESS[ChainId.MOONRIVER],\n  [ChainId.CELO]: '0x765DE816845861e75A25fCA122bb6898B8B1282a',\n  [ChainId.TELOS]: USDC_ADDRESS[ChainId.TELOS],\n  [ChainId.FUSE]: USDC_ADDRESS[ChainId.FUSE],\n  [ChainId.MOONBEAM]: USDC_ADDRESS[ChainId.MOONBEAM],\n  [ChainId.OPTIMISM]: USDC_ADDRESS[ChainId.OPTIMISM],\n}\n\nexport const WETH9_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n  [ChainId.ROPSTEN]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.RINKEBY]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.GÖRLI]: '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',\n  [ChainId.KOVAN]: '0xd0A1E359811322d97991E03f863a0C30C2cF029C',\n  [ChainId.ARBITRUM]: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n  [ChainId.ARBITRUM_TESTNET]: '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\n  [ChainId.BSC]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.FANTOM]: '0x74b23882a30290451A17c44f4F05243b6b58C76d',\n  [ChainId.MATIC]: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n  [ChainId.MATIC_TESTNET]: '0x714550C2C1Ea08688607D86ed8EeF4f5E4F22323',\n  [ChainId.OKEX]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.HECO]: '0x64FF637fB478863B7468bc97D30a5bF3A428a1fD',\n  [ChainId.HARMONY]: '0x6983D1E6DEf3690C4d616b13597A09e6193EA013',\n  [ChainId.XDAI]: '0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1',\n  [ChainId.AVALANCHE]: '0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB',\n  [ChainId.PALM]: '0x726138359C17F1E56bA8c4F737a7CAf724F6010b',\n  [ChainId.CELO]: '0x122013fd7dF1C6F636a5bb8f03108E876548b455',\n  [ChainId.MOONRIVER]: '0x639A647fbe20b6c8ac19E48E2de44ea792c62c5C',\n  [ChainId.TELOS]: '0xfA9343C3897324496A05fC75abeD6bAC29f8A40f',\n  [ChainId.FUSE]: '0xa722c13135930332Eb3d749B2F0906559D2C5b99',\n  [ChainId.MOONBEAM]: '0x30D2a9F5FDf90ACe8c17952cbb4eE48a55D916A7',\n  [ChainId.OPTIMISM]: '0x4200000000000000000000000000000000000006',\n}\n\nexport const WNATIVE_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: WETH9_ADDRESS[ChainId.ETHEREUM],\n  [ChainId.ROPSTEN]: WETH9_ADDRESS[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9_ADDRESS[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9_ADDRESS[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9_ADDRESS[ChainId.KOVAN],\n  [ChainId.OPTIMISM]: WETH9_ADDRESS[ChainId.OPTIMISM],\n  [ChainId.ARBITRUM]: WETH9_ADDRESS[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n  [ChainId.FANTOM]: '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\n  [ChainId.FANTOM_TESTNET]: '0xf1277d1Ed8AD466beddF92ef448A132661956621',\n  [ChainId.MATIC]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n  [ChainId.MATIC_TESTNET]: '0x5B67676a984807a212b1c59eBFc9B3568a474F0a',\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\n  [ChainId.BSC]: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n  [ChainId.BSC_TESTNET]: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n  [ChainId.MOONBEAM_TESTNET]: '0x372d0695E75563D9180F8CE31c9924D7e8aaac47',\n  [ChainId.AVALANCHE]: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F',\n  [ChainId.HECO_TESTNET]: '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\n  [ChainId.HARMONY]: '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\n  [ChainId.HARMONY_TESTNET]: '0x7a2afac38517d512E55C0bCe3b6805c10a04D60F',\n  [ChainId.OKEX]: '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',\n  [ChainId.OKEX_TESTNET]: '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',\n  [ChainId.PALM]: '0xF98cABF0a963452C5536330408B2590567611a71',\n  [ChainId.CELO]: '0x471EcE3750Da237f93B8E339c536989b8978a438',\n  [ChainId.MOONRIVER]: '0xf50225a84382c74CbdeA10b0c176f71fc3DE0C4d',\n  [ChainId.FUSE]: '0x0BE9e53fd7EDaC9F859882AfdDa116645287C629',\n  [ChainId.TELOS]: '0xD102cE6A4dB07D247fcc28F366A623Df0938CA9E',\n  [ChainId.MOONBEAM]: '0xAcc15dC74880C9944775448304B263D191c6077F',\n}\n\nexport const DAI_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x6B175474E89094C44Da98b954EedeAC495271d0F',\n  [ChainId.ROPSTEN]: '0xc2118d4d90b274016cB7a54c03EF52E6c537D957',\n  [ChainId.KOVAN]: '0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa',\n  [ChainId.MATIC]: '0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063',\n  [ChainId.FANTOM]: '0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E',\n  [ChainId.BSC]: '0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3',\n  [ChainId.HARMONY]: '0xEf977d2f931C1978Db5F6747666fa1eACB0d0339',\n  [ChainId.HECO]: '0x3D760a45D0887DFD89A2F5385a236B29Cb46ED2a',\n  [ChainId.OKEX]: '0x21cDE7E32a6CAF4742d00d44B07279e7596d26B9',\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\n  [ChainId.ARBITRUM]: '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1',\n  [ChainId.AVALANCHE]: '0xd586E7F844cEa2F87f50152665BCbc2C279D8d70',\n  [ChainId.CELO]: '0x90Ca507a5D4458a4C6C6249d186b6dCb02a5BCCd',\n  [ChainId.MOONRIVER]: '0x80A16016cC4A2E6a2CACA8a4a498b1699fF0f844',\n  // [ChainId.TELOS]: '',\n  [ChainId.FUSE]: '0x94Ba7A27c7A95863d1bdC7645AC2951E0cca06bA',\n  [ChainId.MOONBEAM]: '0xc234A67a4F840E61adE794be47de455361b52413',\n  [ChainId.OPTIMISM]: '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1',\n}\n\nexport const USDT_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n  [ChainId.ROPSTEN]: '0x110a13FC3efE6A245B50102D2d79B3E76125Ae83',\n  [ChainId.KOVAN]: '0x07de306FF27a2B630B1141956844eB1552B956B5',\n  [ChainId.MATIC]: '0xc2132D05D31c914a87C6611C10748AEb04B58e8F',\n  [ChainId.FANTOM]: '0x049d68029688eAbF473097a2fC38ef61633A3C7A',\n  [ChainId.BSC]: '0x55d398326f99059fF775485246999027B3197955',\n  [ChainId.HARMONY]: '0x3C2B8Be99c50593081EAA2A724F0B8285F5aba8f',\n  [ChainId.HECO]: '0xa71EdC38d189767582C38A3145b5873052c3e47a',\n  [ChainId.OKEX]: '0x382bB369d343125BfB2117af9c149795C6C65C50',\n  [ChainId.XDAI]: '0x4ECaBa5870353805a9F068101A40E0f32ed605C6',\n  [ChainId.ARBITRUM]: '0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9',\n  [ChainId.AVALANCHE]: '0xc7198437980c041c805A1EDcbA50c1Ce5db95118',\n  [ChainId.CELO]: '0x88eeC49252c8cbc039DCdB394c0c2BA2f1637EA0',\n  [ChainId.MOONRIVER]: '0xB44a9B6905aF7c801311e8F4E76932ee959c663C',\n  [ChainId.TELOS]: '0xeFAeeE334F0Fd1712f9a8cc375f427D9Cdd40d73',\n  [ChainId.FUSE]: '0xFaDbBF8Ce7D5b7041bE672561bbA99f79c532e10',\n  [ChainId.MOONBEAM]: '0x8e70cd5b4ff3f62659049e74b6649c6603a0e594',\n  [ChainId.OPTIMISM]: '0x94b008aA00579c1307B0EF2c499aD98a8ce58e58',\n}\n\nexport const MIM_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3',\n  [ChainId.FANTOM]: '0x82f0B8B456c1A451378467398982d4834b6829c1',\n  [ChainId.BSC]: '0xfE19F0B51438fd612f6FD59C1dbB3eA319f433Ba',\n  [ChainId.ARBITRUM]: '0xFEa7a6a0B346362BF88A9e4A88416B77a57D6c2A',\n  [ChainId.AVALANCHE]: '0x130966628846BFd36ff31a822705796e8cb8C18D',\n  [ChainId.MATIC]: '0x49a0400587A7F65072c87c4910449fDcC5c47242',\n  [ChainId.MOONRIVER]: '0x0caE51e1032e8461f4806e26332c030E34De3aDb',\n}\n\nexport const FRAX_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x853d955aCEf822Db058eb8505911ED77F175b99e',\n  [ChainId.FANTOM]: '0xdc301622e621166BD8E82f2cA0A26c13Ad0BE355',\n  [ChainId.BSC]: '0x90C97F71E18723b0Cf0dfa30ee176Ab653E89F40',\n  [ChainId.ARBITRUM]: '0x17FC002b466eEc40DaE837Fc4bE5c67993ddBd6F',\n  [ChainId.AVALANCHE]: '0xD24C2Ad096400B6FBcd2ad8B24E7acBc21A1da64',\n  [ChainId.MATIC]: '0x45c32fA6DF82ead1e2EF74d17b76547EDdFaFF89',\n  [ChainId.MOONRIVER]: '0x1A93B23281CC1CDE4C4741353F3064709A16197d',\n  [ChainId.MOONBEAM]: '0x322E86852e492a7Ee17f28a78c663da38FB33bfb',\n  [ChainId.HARMONY]: '0xFa7191D292d5633f702B0bd7E3E3BcCC0e633200',\n}\n\nexport const FACTORY_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\n  [ChainId.ROPSTEN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.RINKEBY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.GÖRLI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.KOVAN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.MATIC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.XDAI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '0x2Ce3F07dD4c62b56a502E223A7cBE38b1d77A1b5',\n  [ChainId.AVALANCHE]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HECO_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HARMONY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HARMONY_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OKEX]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OKEX_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.CELO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.PALM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FUSE]: '0x43eA90e2b786728520e4f930d2A71a477BF2737C',\n  [ChainId.TELOS]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.MOONBEAM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n}\n\nexport const ROUTER_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F',\n  [ChainId.RINKEBY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ROPSTEN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.GÖRLI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.KOVAN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.MATIC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.XDAI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '0xeB5c2BB5E83B51d83F3534Ae21E84336B8B376ef',\n  [ChainId.AVALANCHE]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.AVALANCHE_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HECO]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HECO_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HARMONY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HARMONY_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OKEX]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OKEX_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.CELO]: '0x1421bDe4B10e8dd459b3BCb598810B1337D56842',\n  [ChainId.PALM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FUSE]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n  [ChainId.TELOS]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.MOONBEAM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n}\n\nexport const MASTERCHEF_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n  [ChainId.ROPSTEN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.RINKEBY]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.GÖRLI]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.KOVAN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n}\n\nexport const BAR_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272',\n  [ChainId.ROPSTEN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.RINKEBY]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.GÖRLI]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.KOVAN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n}\n\nexport const MAKER_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50',\n  [ChainId.ROPSTEN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.RINKEBY]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.GÖRLI]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.KOVAN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n}\n\nexport const TIMELOCK_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x9a8541Ddf3a932a9A922B607e9CF7301f1d47bD1',\n}\n\nexport const BENTOBOX_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.ROPSTEN]: '0x6BdD85290001C8Aef74f35A7606065FA15aD5ACF',\n  [ChainId.RINKEBY]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.GÖRLI]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.KOVAN]: '0xc381a85ed7C7448Da073b7d6C9d4cBf1Cbf576f0',\n  [ChainId.FANTOM]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.MATIC]: '0x0319000133d3AdA02600f0875d2cf03D442C3367',\n  [ChainId.MATIC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.XDAI]: '0xE2d7F5dd869Fc7c126D21b13a9080e75a4bDb324',\n  [ChainId.BSC]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.BSC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.ARBITRUM]: '0x74c764D41B77DBbb4fe771daB1939B00b146894A',\n  [ChainId.AVALANCHE]: '0x0711B6026068f736bae6B213031fCE978D48E026',\n  [ChainId.HECO]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.CELO]: '0x0711B6026068f736bae6B213031fCE978D48E026',\n  [ChainId.HARMONY]: '0xA28cfF72b04f83A7E3f912e6ad34d5537708a2C2',\n  [ChainId.MOONBEAM]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.MOONRIVER]: '0x145d82bCa93cCa2AE057D1c6f26245d1b9522E6F',\n  [ChainId.OPTIMISM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n}\n\nexport const KASHI_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.KOVAN]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.MATIC]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\n  [ChainId.XDAI]: '0x7a6DA9903d0a481F40b8336c1463487BC8C0407e',\n  [ChainId.BSC]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.ARBITRUM]: '0xa010eE0226cd071BeBd8919A1F675cAE1f1f5D3e',\n  [ChainId.AVALANCHE]: '0x513037395FA0C9c35E41f89189ceDfE3bD42fAdb',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n}\n\nexport const SUSHISWAP_SWAPPER_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x1766733112408b95239aD1951925567CB1203084',\n  [ChainId.MATIC]: '0xe9589382130Ded5DF2397E2fD7A3E9b41DD2701D',\n  [ChainId.XDAI]: '0xE02BDb31C353CE95A1D74F81C93eEa70Bf7371B9',\n  [ChainId.BSC]: '0x1766733112408b95239aD1951925567CB1203084',\n  [ChainId.ARBITRUM]: '0x0bFcD5dD76218bF9e3BE8A1055f9e6D27E5745eb',\n  [ChainId.AVALANCHE]: '0x062eee8B38ab5E8ee3bc58CE505939db53E63785',\n  [ChainId.HECO]: '0x1766733112408b95239aD1951925567CB1203084',\n}\n\nexport const SUSHISWAP_MULTISWAPPER_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x545820d5Cc05248da112419fEfb18522c63C8e12',\n  [ChainId.KOVAN]: '0xc0c1649b2c67f1a9f5ff1dd618188165e2555bcf',\n  [ChainId.MATIC]: '0x73BE093B84c773fe8eE0f76DDc0829E45c215415',\n  [ChainId.XDAI]: '0x735f0FbEb3b6389986BcaAf073Af07D2F8be2b93',\n  [ChainId.BSC]: '0x86c655cAc122e9A2fd9Ae1f79Df27b30E357968c',\n  [ChainId.ARBITRUM]: '0xbe7D5968296843756109D42946D01195320922EF',\n  [ChainId.AVALANCHE]: '0xB7C8b5BFcd7212f034Be42a2aAb08b8773B76920',\n}\n\nexport const SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\n  [ChainId.KOVAN]: '0x75AE0Aa596D39b20addC921DeB5EE3c96279dABE',\n  [ChainId.MATIC]: '0xDB6C4EDd9545d3b815dA85E6429B699c418886f9',\n  [ChainId.XDAI]: '0x07b6e34EeCF38B02e83b6B4702699717e298967E',\n  [ChainId.BSC]: '0x1B16149Edaf1EFa6ADE6aEEF33e63C6e08c9bB1B',\n  [ChainId.ARBITRUM]: '0x860D841bfD1cfEf72A14B2b734005799F07dC7ED',\n  [ChainId.AVALANCHE]: '0x2c46217Fae90D302d1Fb5467ADA504bC2A84f448',\n}\n\nexport const PEGGED_ORACLE_ADDRESS = '0x6cbfbB38498Df0E1e7A4506593cDB02db9001564'\n\nexport const SUSHISWAP_TWAP_0_ORACLE_ADDRESS = '0x66F03B0d30838A3fee971928627ea6F59B236065'\n\nexport const SUSHISWAP_TWAP_1_ORACLE_ADDRESS = '0x0D51b575591F8f74a2763Ade75D3CDCf6789266f'\n\nexport const CHAINLINK_ORACLE_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.MATIC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.XDAI]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.BSC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.ARBITRUM]: '0xB2B5C26B6868be10fF77e4E233fD231ceB90162a',\n  [ChainId.AVALANCHE]: '0x43198B6fA5d89B88D2E072fA4841724571De5A59',\n}\n\nexport const BORING_HELPER_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.KOVAN]: '0x5bd6e4eFA335192FDA5D6B42a344ccA3d45894B8',\n  [ChainId.MATIC]: '0xA77a7fD5a16237B85E0FAd02C51f459D18AE93Cd',\n  [ChainId.XDAI]: '0x97e4a0fb71243A83A6FbaEF7Cf73617594e4cF2F',\n  [ChainId.BSC]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.ARBITRUM]: '0x9AF28d4f7Fa007686958c306BD4c8c52c2b615b8',\n  [ChainId.AVALANCHE]: '0xD18cA07a599bf5eBb9B7327871ad682F0b660748',\n  [ChainId.HECO]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n}\n\nexport const MINICHEF_ADDRESS: AddressMap = {\n  [ChainId.MATIC]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.XDAI]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HARMONY]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\n  [ChainId.ARBITRUM]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n  [ChainId.CELO]: '0x8084936982D089130e001b470eDf58faCA445008',\n  [ChainId.MOONRIVER]: '0x3dB01570D97631f69bbb0ba39796865456Cf89A5',\n  [ChainId.FUSE]: '0x182CD0C6F1FaEc0aED2eA83cd0e160c8Bd4cb063',\n  [ChainId.FANTOM]: '0xf731202A3cf7EfA9368C2d7bD613926f7A144dB5',\n  [ChainId.MOONBEAM]: '0x011E52E4E40CF9498c79273329E8827b21E2e581',\n}\n\nexport const MASTERCHEF_V2_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xEF0881eC094552b2e128Cf945EF17a6752B4Ec5d',\n}\n\nexport const ENS_REGISTRAR_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.GÖRLI]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.ROPSTEN]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.RINKEBY]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n}\n\nexport const ZAPPER_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\n  [ChainId.ROPSTEN]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\n}\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xcBE6B83e77cdc011Cc18F6f0Df8444E5783ed982',\n  [ChainId.ROPSTEN]: '0x84d1f7202e0e7dac211617017ca72a2cb5e2b955',\n}\n\nexport const MULTICALL2_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.ROPSTEN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.RINKEBY]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.GÖRLI]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.KOVAN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.ARBITRUM]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.ARBITRUM_TESTNET]: '0xa501c031958F579dB7676fF1CE78AD305794d579',\n  [ChainId.CELO]: '0x9aac9048fC8139667D6a2597B902865bfdc225d3',\n  [ChainId.FANTOM]: '0x22D4cF72C45F8198CfbF4B568dBdB5A85e8DC0B5',\n  [ChainId.MATIC]: '0x02817C1e3543c2d908a590F5dB6bc97f933dB4BD',\n  [ChainId.XDAI]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\n  [ChainId.BSC]: '0xa9193376D09C7f31283C54e56D013fCF370Cd9D9',\n  [ChainId.AVALANCHE]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HECO]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HARMONY]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.OKEX]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n  [ChainId.PALM]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.MOONRIVER]: '0x270f2F35bED92B7A59eA5F08F6B3fd34c8D9D9b5',\n  [ChainId.FUSE]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.TELOS]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.MOONBEAM]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n}\n\nexport const BALANCE_FETCHER_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x386a4B75578C7843A6082EFe181D5d629236C047',\n  [ChainId.MATIC]: '0x06a846BA430Ed005bE60f8598B4C563dbaa6feF0',\n  [ChainId.AVALANCHE]: '0x4d4A0D45a98AE8EC25b359D93A088A87BC9eF70b',\n  [ChainId.XDAI]: '0x26DC4e2f63bad22BCdF99087E40bd5B6c456e69d',\n  [ChainId.BSC]: '0x9d6c13Bc5269E553C4697767b4c267FB33Dd8d1A',\n  [ChainId.ARBITRUM]: '0x0e9b6C08Fe70Aac8fd08a74a076c2B1C9f7c7d14',\n  [ChainId.HECO]: '0x4d4A0D45a98AE8EC25b359D93A088A87BC9eF70b',\n  [ChainId.KOVAN]: '0x980bE39AC44E5500f0f16bA692084A6E44e6549A',\n}\n\nexport const MULTISIG_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x19B3Eb3Af5D93b77a5619b047De0EED7115A19e7',\n  // [ChainId.ROPSTEN]: '',\n  // [ChainId.RINKEBY]: '',\n  // [ChainId.GÖRLI]: '',\n  // [ChainId.KOVAN]: '',\n  [ChainId.FANTOM]: '0xF9E7d4c6d36ca311566f46c81E572102A2DC9F52',\n  [ChainId.MATIC]: '0x850a57630A2012B2494779fBc86bBc24F2a7baeF',\n  [ChainId.XDAI]: '0xc375411C6597F692Add6a7a3AD5b3C38626B0F26',\n  [ChainId.BSC]: '0xc6fD91aD4919Fd91e2c84077ba648092cB499638',\n  [ChainId.ARBITRUM]: '0x978982772b8e4055B921bf9295c0d74eB36Bc54e',\n  [ChainId.AVALANCHE]: '0x09842Ce338647906B686aBB3B648A6457fbB25DA',\n  // [ChainId.HECO]: '',\n  [ChainId.HARMONY]: '0x30af69A3f4a6f266961313Ce0943719dF4A8AA10',\n  // [ChainId.OKEX]: '',\n  // [ChainId.OKEX_TESTNET]: '',\n  // [ChainId.PALM]: '',\n  // [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0x939f7E76cc515cc296dD3ce362D9a52e148A7D5f',\n  [ChainId.CELO]: '0x751b01Fa14fD9640a1DF9014e2D0f3a03A198b81',\n  // [ChainId.TELOS]: '',\n  [ChainId.FUSE]: '0x33b6beb37837459Ee84a1Ffed2C6a4ca22e5F316',\n}\n","import { ChainId } from '../enums'\nimport { ChainKey } from '../enums'\n\nexport const CHAIN_KEY: { [chainId: number]: ChainKey } = {\n  [ChainId.ETHEREUM]: ChainKey.ETHEREUM,\n  [ChainId.ROPSTEN]: ChainKey.ROPSTEN,\n  [ChainId.RINKEBY]: ChainKey.RINKEBY,\n  [ChainId.GÖRLI]: ChainKey.GÖRLI,\n  [ChainId.KOVAN]: ChainKey.KOVAN,\n  [ChainId.MATIC]: ChainKey.MATIC,\n  [ChainId.MATIC_TESTNET]: ChainKey.MATIC_TESTNET,\n  [ChainId.FANTOM]: ChainKey.FANTOM,\n  [ChainId.FANTOM_TESTNET]: ChainKey.FANTOM_TESTNET,\n  [ChainId.XDAI]: ChainKey.XDAI,\n  [ChainId.BSC]: ChainKey.BSC,\n  [ChainId.BSC_TESTNET]: ChainKey.BSC_TESTNET,\n  [ChainId.ARBITRUM]: ChainKey.ARBITRUM,\n  [ChainId.ARBITRUM_TESTNET]: ChainKey.ARBITRUM_TESTNET,\n  [ChainId.MOONBEAM_TESTNET]: ChainKey.MOONBEAM_TESTNET,\n  [ChainId.AVALANCHE]: ChainKey.AVALANCHE,\n  [ChainId.AVALANCHE_TESTNET]: ChainKey.AVALANCHE_TESTNET,\n  [ChainId.HECO]: ChainKey.HECO,\n  [ChainId.HECO_TESTNET]: ChainKey.HECO_TESTNET,\n  [ChainId.HARMONY]: ChainKey.HARMONY,\n  [ChainId.HARMONY_TESTNET]: ChainKey.HARMONY_TESTNET,\n  [ChainId.OKEX]: ChainKey.OKEX,\n  [ChainId.OKEX_TESTNET]: ChainKey.OKEX_TESTNET,\n  [ChainId.CELO]: ChainKey.CELO,\n  [ChainId.PALM]: ChainKey.PALM,\n  [ChainId.PALM_TESTNET]: ChainKey.PALM_TESTNET,\n  [ChainId.MOONRIVER]: ChainKey.MOONRIVER,\n  [ChainId.FUSE]: ChainKey.FUSE,\n  [ChainId.TELOS]: ChainKey.TELOS,\n  [ChainId.MOONBEAM]: ChainKey.MOONBEAM,\n  [ChainId.OPTIMISM]: ChainKey.OPTIMISM,\n}\n","import { ChainId } from '../enums/ChainId'\n\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\n  [ChainId.ETHEREUM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.ROPSTEN]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.RINKEBY]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.GÖRLI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.KOVAN]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.FANTOM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MATIC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MATIC_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.XDAI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.BSC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.BSC_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.ARBITRUM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MOONBEAM_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.AVALANCHE]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.AVALANCHE_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HECO]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HECO_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HARMONY]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HARMONY_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.OKEX]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.OKEX_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.CELO]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.PALM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MOONRIVER]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.FUSE]: '0x1901958ef8b470f2c0a3875a79ee0bd303866d85102c0f1ea820d317024d50b5',\n  [ChainId.TELOS]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MOONBEAM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n}\n","import { Currency } from './Currency'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class AbstractCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { AbstractCurrency } from './AbstractCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends AbstractCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n","import { AbstractCurrency } from './AbstractCurrency'\nimport { Currency } from './Currency'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../functions/validateAndParseAddress'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends AbstractCurrency {\n  public readonly chainId: number\n  public readonly address: string\n\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  public constructor(chainId: number, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n\n  /**\n   * Return logo\n   */\n  // public get logo(): string | null {\n  //   return this.chainId in CHAIN_KEY ? `https://raw.githubusercontent.com/sushiswap/logos/main/network/${CHAIN_KEY[this.chainId]}/.jpg` : undefined\n  // }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n","import { ChainTokenMap, TokenMap } from '../types'\nimport { SUSHI_ADDRESS, USDC_ADDRESS, USD_ADDRESS, WETH9_ADDRESS, WNATIVE_ADDRESS } from './addresses'\n\nimport { ChainId } from '../enums'\nimport { Token } from '../entities/Token'\n\nexport const USDC: TokenMap = {\n  [ChainId.ETHEREUM]: new Token(ChainId.ETHEREUM, USDC_ADDRESS[ChainId.ETHEREUM], 6, 'USDC', 'USD Coin'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, USDC_ADDRESS[ChainId.ROPSTEN], 6, 'USDC', 'USD Coin'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, USDC_ADDRESS[ChainId.KOVAN], 6, 'USDC', 'USD Coin'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, USDC_ADDRESS[ChainId.MATIC], 6, 'USDC', 'USD Coin'),\n  [ChainId.MATIC_TESTNET]: new Token(ChainId.MATIC_TESTNET, USDC_ADDRESS[ChainId.MATIC_TESTNET], 6, 'USDC', 'USD Coin'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, USDC_ADDRESS[ChainId.FANTOM], 6, 'USDC', 'USD Coin'),\n  [ChainId.BSC]: new Token(ChainId.BSC, USDC_ADDRESS[ChainId.BSC], 18, 'USDC', 'USD Coin'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, USDC_ADDRESS[ChainId.HARMONY], 6, 'USDC', 'USD Coin'),\n  [ChainId.HECO]: new Token(ChainId.HECO, USDC_ADDRESS[ChainId.HECO], 6, 'USDC', 'USD Coin'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, USDC_ADDRESS[ChainId.OKEX], 18, 'USDC', 'USD Coin'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, USDC_ADDRESS[ChainId.XDAI], 6, 'USDC', 'USD Coin'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, USDC_ADDRESS[ChainId.ARBITRUM], 6, 'USDC', 'USD Coin'),\n  [ChainId.MOONRIVER]: new Token(ChainId.MOONRIVER, USDC_ADDRESS[ChainId.MOONRIVER], 6, 'USDC', 'USD Coin'),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, USDC_ADDRESS[ChainId.AVALANCHE], 6, 'USDC', 'USD Coin'),\n  [ChainId.FUSE]: new Token(ChainId.FUSE, USDC_ADDRESS[ChainId.FUSE], 6, 'USDC', 'USD Coin'),\n  [ChainId.TELOS]: new Token(ChainId.TELOS, USDC_ADDRESS[ChainId.TELOS], 6, 'USDC', 'USD Coin'),\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, USDC_ADDRESS[ChainId.MOONBEAM], 6, 'USDC', 'USD Coin'),\n  [ChainId.OPTIMISM]: new Token(ChainId.OPTIMISM, USDC_ADDRESS[ChainId.OPTIMISM], 6, 'USDC', 'USD Coin'),\n}\n\nexport const USD: TokenMap = {\n  ...USDC,\n  [ChainId.CELO]: new Token(ChainId.CELO, USD_ADDRESS[ChainId.CELO], 18, 'cUSD', 'Celo Dollar'),\n}\n\nexport const WETH9: TokenMap = {\n  [ChainId.ETHEREUM]: new Token(ChainId.ETHEREUM, WETH9_ADDRESS[ChainId.ETHEREUM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, WETH9_ADDRESS[ChainId.ROPSTEN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, WETH9_ADDRESS[ChainId.RINKEBY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, WETH9_ADDRESS[ChainId.GÖRLI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, WETH9_ADDRESS[ChainId.KOVAN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, WETH9_ADDRESS[ChainId.ARBITRUM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM_TESTNET]: new Token(\n    ChainId.ARBITRUM_TESTNET,\n    WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.BSC]: new Token(ChainId.BSC, WETH9_ADDRESS[ChainId.BSC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WETH9_ADDRESS[ChainId.FANTOM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WETH9_ADDRESS[ChainId.MATIC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    WETH9_ADDRESS[ChainId.MATIC_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WETH9_ADDRESS[ChainId.OKEX], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HECO]: new Token(ChainId.HECO, WETH9_ADDRESS[ChainId.HECO], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WETH9_ADDRESS[ChainId.HARMONY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WETH9_ADDRESS[ChainId.XDAI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WETH9_ADDRESS[ChainId.AVALANCHE], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.PALM]: new Token(ChainId.PALM, WETH9_ADDRESS[ChainId.PALM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.TELOS]: new Token(ChainId.TELOS, WETH9_ADDRESS[ChainId.TELOS], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.FUSE]: new Token(ChainId.FUSE, WETH9_ADDRESS[ChainId.FUSE], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, WETH9_ADDRESS[ChainId.MOONBEAM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.OPTIMISM]: new Token(ChainId.OPTIMISM, WETH9_ADDRESS[ChainId.OPTIMISM], 18, 'WETH', 'Wrapped Ether'),\n}\n\nexport const WNATIVE: TokenMap = {\n  [ChainId.ETHEREUM]: WETH9[ChainId.ETHEREUM],\n  [ChainId.ROPSTEN]: WETH9[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9[ChainId.KOVAN],\n  [ChainId.OPTIMISM]: WETH9[ChainId.OPTIMISM],\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WNATIVE_ADDRESS[ChainId.FANTOM], 18, 'WFTM', 'Wrapped FTM'),\n  [ChainId.FANTOM_TESTNET]: new Token(\n    ChainId.FANTOM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.FANTOM_TESTNET],\n    18,\n    'FTM',\n    'Wrapped FTM'\n  ),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WNATIVE_ADDRESS[ChainId.MATIC], 18, 'WMATIC', 'Wrapped Matic'),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MATIC_TESTNET],\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WNATIVE_ADDRESS[ChainId.XDAI], 18, 'WXDAI', 'Wrapped xDai'),\n  [ChainId.BSC]: new Token(ChainId.BSC, WNATIVE_ADDRESS[ChainId.BSC], 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.BSC_TESTNET],\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.ARBITRUM]: WETH9[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9[ChainId.ARBITRUM_TESTNET],\n  [ChainId.MOONBEAM_TESTNET]: new Token(\n    ChainId.MOONBEAM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MOONBEAM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WNATIVE_ADDRESS[ChainId.AVALANCHE], 18, 'WAVAX', 'Wrapped AVAX'),\n  [ChainId.AVALANCHE_TESTNET]: new Token(\n    ChainId.AVALANCHE_TESTNET,\n    WNATIVE_ADDRESS[ChainId.AVALANCHE_TESTNET],\n    18,\n    'WAVAX',\n    'Wrapped AVAX'\n  ),\n  [ChainId.HECO]: new Token(ChainId.HECO, WNATIVE_ADDRESS[ChainId.HECO], 18, 'WHT', 'Wrapped HT'),\n  [ChainId.HECO_TESTNET]: new Token(\n    ChainId.HECO_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HECO_TESTNET],\n    18,\n    'WHT',\n    'Wrapped HT'\n  ),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WNATIVE_ADDRESS[ChainId.HARMONY], 18, 'WONE', 'Wrapped ONE'),\n  [ChainId.HARMONY_TESTNET]: new Token(\n    ChainId.HARMONY_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HARMONY_TESTNET],\n    18,\n    'WONE',\n    'Wrapped ONE'\n  ),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WNATIVE_ADDRESS[ChainId.OKEX], 18, 'WOKT', 'Wrapped OKExChain'),\n  [ChainId.OKEX_TESTNET]: new Token(\n    ChainId.OKEX_TESTNET,\n    WNATIVE_ADDRESS[ChainId.OKEX_TESTNET],\n    18,\n    'WOKT',\n    'Wrapped OKExChain'\n  ),\n  [ChainId.CELO]: new Token(ChainId.CELO, WNATIVE_ADDRESS[ChainId.CELO], 18, 'CELO', 'Celo'),\n  [ChainId.PALM]: new Token(ChainId.PALM, WNATIVE_ADDRESS[ChainId.PALM], 18, 'WPALM', 'Wrapped Palm'),\n  [ChainId.MOONRIVER]: new Token(\n    ChainId.MOONRIVER,\n    WNATIVE_ADDRESS[ChainId.MOONRIVER],\n    18,\n    'WMOVR',\n    'Wrapped Moonriver'\n  ),\n  [ChainId.FUSE]: new Token(ChainId.FUSE, WNATIVE_ADDRESS[ChainId.FUSE], 18, 'WFUSE', 'Wrapped Fuse'),\n  [ChainId.TELOS]: new Token(ChainId.TELOS, WNATIVE_ADDRESS[ChainId.TELOS], 18, 'WTLOS', 'Wrapped Telos'),\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, WNATIVE_ADDRESS[ChainId.MOONBEAM], 18, 'WGLMR', 'Wrapped Glimmer'),\n}\n\nexport const SUSHI: ChainTokenMap = {\n  [ChainId.ETHEREUM]: new Token(ChainId.ETHEREUM, SUSHI_ADDRESS[ChainId.ETHEREUM], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, SUSHI_ADDRESS[ChainId.ROPSTEN], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, SUSHI_ADDRESS[ChainId.RINKEBY], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, SUSHI_ADDRESS[ChainId.GÖRLI], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, SUSHI_ADDRESS[ChainId.KOVAN], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, SUSHI_ADDRESS[ChainId.MATIC], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, SUSHI_ADDRESS[ChainId.FANTOM], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, SUSHI_ADDRESS[ChainId.XDAI], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.BSC]: new Token(ChainId.BSC, SUSHI_ADDRESS[ChainId.BSC], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, SUSHI_ADDRESS[ChainId.ARBITRUM], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, SUSHI_ADDRESS[ChainId.AVALANCHE], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, SUSHI_ADDRESS[ChainId.OKEX], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, SUSHI_ADDRESS[ChainId.HARMONY], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.HECO]: new Token(ChainId.HECO, SUSHI_ADDRESS[ChainId.HECO], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.CELO]: new Token(ChainId.CELO, SUSHI_ADDRESS[ChainId.CELO], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.MOONRIVER]: new Token(ChainId.MOONRIVER, SUSHI_ADDRESS[ChainId.MOONRIVER], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.FUSE]: new Token(ChainId.FUSE, SUSHI_ADDRESS[ChainId.FUSE], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.TELOS]: new Token(ChainId.TELOS, SUSHI_ADDRESS[ChainId.TELOS], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, SUSHI_ADDRESS[ChainId.MOONBEAM], 18, 'SUSHI', 'SushiToken'),\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Avalanche extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'AVAX', 'Avalanche')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Avalanche } = {}\n\n  public static onChain(chainId: number): Avalanche {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Avalanche(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Binance extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'BNB', 'Binance Coin')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Binance } = {}\n\n  public static onChain(chainId: number): Binance {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Binance(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Celo extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'CELO', 'Celo')\n  }\n\n  public get wrapped(): Token {\n    const wcelo = WNATIVE[this.chainId]\n    invariant(!!wcelo, 'WRAPPED')\n    return wcelo\n  }\n\n  private static _cache: { [chainId: number]: Celo } = {}\n\n  public static onChain(chainId: number): Celo {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Celo(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WETH9 } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Fantom extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FTM', 'Fantom')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fantom } = {}\n\n  public static onChain(chainId: number): Fantom {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fantom(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Harmony extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ONE', 'Harmony')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Harmony } = {}\n\n  public static onChain(chainId: number): Harmony {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Harmony(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Heco extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'HT', 'Huobi Token')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Heco } = {}\n\n  public static onChain(chainId: number): Heco {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Heco(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Matic extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MATIC', 'Matic')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Matic } = {}\n\n  public static onChain(chainId: number): Matic {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Matic(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Movr extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MOVR', 'Moonriver')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Movr } = {}\n\n  public static onChain(chainId: number): Movr {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Movr(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Okex extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'OKT', 'OKExChain')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Okex } = {}\n\n  public static onChain(chainId: number): Okex {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Okex(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class xDai extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'XDAI', 'xDai')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: xDai } = {}\n\n  public static onChain(chainId: number): xDai {\n    return this._cache[chainId] ?? (this._cache[chainId] = new xDai(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Palm extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'PALM', 'Palm')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Palm } = {}\n\n  public static onChain(chainId: number): Palm {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Palm(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Fuse extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FUSE', 'Fuse')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fuse } = {}\n\n  public static onChain(chainId: number): Fuse {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fuse(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Telos extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'TLOS', 'Telos')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Telos } = {}\n\n  public static onChain(chainId: number): Telos {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Telos(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Glmr extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'GLMR', 'Glimmer')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Glmr } = {}\n\n  public static onChain(chainId: number): Glmr {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Glmr(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import {\n  Avalanche,\n  Binance,\n  Celo,\n  Ether,\n  Fantom,\n  Fuse,\n  Glmr,\n  Harmony,\n  Heco,\n  Matic,\n  Movr,\n  Okex,\n  Palm,\n  Telos,\n  xDai,\n} from '../entities/Native'\n\nimport { ChainId } from '../enums'\nimport { NativeMap } from '../types'\n\nexport const NATIVE: NativeMap = {\n  [ChainId.ETHEREUM]: Ether.onChain(ChainId.ETHEREUM),\n  [ChainId.ROPSTEN]: Ether.onChain(ChainId.ROPSTEN),\n  [ChainId.RINKEBY]: Ether.onChain(ChainId.RINKEBY),\n  [ChainId.GÖRLI]: Ether.onChain(ChainId.GÖRLI),\n  [ChainId.KOVAN]: Ether.onChain(ChainId.KOVAN),\n  [ChainId.FANTOM]: Fantom.onChain(ChainId.FANTOM),\n  [ChainId.FANTOM_TESTNET]: Fantom.onChain(ChainId.FANTOM_TESTNET),\n  [ChainId.MATIC]: Matic.onChain(ChainId.MATIC),\n  [ChainId.MATIC_TESTNET]: Matic.onChain(ChainId.MATIC_TESTNET),\n  [ChainId.XDAI]: xDai.onChain(ChainId.XDAI),\n  [ChainId.BSC]: Binance.onChain(ChainId.BSC),\n  [ChainId.BSC_TESTNET]: Binance.onChain(ChainId.BSC_TESTNET),\n  // [ChainId.MOONBEAM_TESTNET]: Currency.GLMR,\n  [ChainId.ARBITRUM]: Ether.onChain(ChainId.ARBITRUM),\n  [ChainId.ARBITRUM_TESTNET]: Ether.onChain(ChainId.ARBITRUM_TESTNET),\n  [ChainId.AVALANCHE]: Avalanche.onChain(ChainId.AVALANCHE),\n  [ChainId.AVALANCHE_TESTNET]: Avalanche.onChain(ChainId.AVALANCHE_TESTNET),\n  [ChainId.HECO]: Heco.onChain(ChainId.HECO),\n  [ChainId.HECO_TESTNET]: Heco.onChain(ChainId.HECO_TESTNET),\n  [ChainId.HARMONY]: Harmony.onChain(ChainId.HARMONY),\n  [ChainId.HARMONY_TESTNET]: Harmony.onChain(ChainId.HARMONY_TESTNET),\n  [ChainId.OKEX]: Okex.onChain(ChainId.OKEX),\n  [ChainId.OKEX_TESTNET]: Okex.onChain(ChainId.OKEX_TESTNET),\n  [ChainId.CELO]: Celo.onChain(ChainId.CELO),\n  [ChainId.PALM]: Palm.onChain(ChainId.PALM),\n  [ChainId.MOONRIVER]: Movr.onChain(ChainId.MOONRIVER),\n  [ChainId.FUSE]: Fuse.onChain(ChainId.FUSE),\n  [ChainId.TELOS]: Telos.onChain(ChainId.TELOS),\n  [ChainId.MOONBEAM]: Glmr.onChain(ChainId.MOONBEAM),\n  [ChainId.OPTIMISM]: Ether.onChain(ChainId.OPTIMISM),\n}\n","import JSBI from 'jsbi'\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)","import JSBI from 'jsbi'\nimport { SolidityType } from \"../enums/SolidityType\";\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),\n}","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import _Big, { RoundingMode } from 'big.js'\n\nimport { BigintIsh } from '../types'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport _Decimal from 'decimal.js-light'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nBig.strict = true\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding],\n    })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { MaxUint256 } from '../constants'\nimport { Rounding } from '../enums'\nimport { Token } from './Token'\nimport _Big from 'big.js'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Big = toFormat(_Big)\n\nBig.strict = true\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n\n  /**\n   * Returns a string representation of the address and currency amount.\n   * Useful in cases where a dependency is needed to detect changes (e.g. useEffect).\n   * @return string [0x6B3595068778DD592e39A122f4f5a5cF09C90fE2 - 1323.94]\n   */\n  public serialize(): string {\n    return `[${this.currency.wrapped.address} - ${this.toExact()}]`\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport invariant from 'tiny-invariant'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [\n          {\n            baseAmount: CurrencyAmount<TBase>\n            quoteAmount: CurrencyAmount<TQuote>\n          }\n        ]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { INIT_CODE_HASH } from '../constants'\nimport { Token } from '../entities/Token'\nimport { getCreate2Address } from '@ethersproject/address'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH[token0.chainId]\n  )\n}\n","import { ONE, TWO, ZERO } from '../constants/numbers'\n\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n\n/**\n * Returns the smallest member of the array\n * @param values the values from which the smallest gets returned\n * @returns the smallest memmber of the array\n */\nexport function minimum(...values: JSBI[]): JSBI {\n  let lowest = values[0]\n  for (let i = 1; i < values.length; i++) {\n    const value = values[i]\n    if (JSBI.LT(value, lowest)) {\n      lowest = value\n    }\n  }\n  return lowest\n}\n\n/**\n * Returns the biggest member of the array\n * @param values the values from which the biggest gets returned\n * @returns the biggest memmber of the array\n */\nexport function maximum(...values: JSBI[]): JSBI {\n  let highest = values[0]\n  for (let i = 1; i < values.length; i++) {\n    const value = values[i]\n    if (JSBI.GT(value, highest)) {\n      highest = value\n    }\n  }\n  return highest\n}\n\nexport function difference(a: JSBI, b: JSBI): JSBI {\n  if (JSBI.greaterThan(a, b)) {\n    return JSBI.subtract(a, b)\n  }\n  return JSBI.subtract(b, a)\n}\n","import { FACTORY_ADDRESS, FIVE, MINIMUM_LIQUIDITY, ONE, ZERO, _1000, _997 } from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nimport { BigintIsh } from '../types'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport JSBI from 'jsbi'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport { computePairAddress } from '../functions/computePairAddress'\nimport invariant from 'tiny-invariant'\nimport { sqrt } from '../functions/math'\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({\n      factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\n      tokenA,\n      tokenB,\n    })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, currencyAmountB: CurrencyAmount<Token>) {\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\n      ? [currencyAmountA, currencyAmountB]\n      : [currencyAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      currencyAmounts[0].currency.chainId,\n      Pair.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = currencyAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n\n      console.log({\n        amount0: amount0.toString(),\n        amount1: amount1.toString(),\n        liquidity: liquidity.toString(),\n        totalSupply: totalSupply.quotient.toString(),\n        kLast: sqrt(JSBI.multiply(this.tokenAmounts[0].quotient, this.tokenAmounts[1].quotient)),\n      })\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Currency } from './Currency'\nimport { Pair } from './Pair'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every((pair) => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import { Currency } from '../entities/Currency'\nimport { CurrencyAmount } from '../entities/CurrencyAmount'\nimport { Percent } from '../entities/Percent'\nimport { Price } from '../entities/Price'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import { ONE, ZERO } from '../constants'\n\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport { Pair } from './Pair'\nimport { Percent } from './Percent'\nimport { Price } from './Price'\nimport { Route } from './Route'\nimport { Token } from './Token'\nimport { TradeType } from '../enums/TradeType'\nimport { computePriceImpact } from '../functions/computePriceImpact'\nimport invariant from 'tiny-invariant'\nimport { sortedInsert } from '../functions/sortedInsert'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE)\n        .add(slippageTolerance)\n        .multiply(this.inputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n","import { Currency } from './entities/Currency'\nimport { CurrencyAmount } from './entities/CurrencyAmount'\nimport { Percent } from './entities/Percent'\nimport { Token } from './entities/Token'\nimport { Trade } from './entities/Trade'\nimport { TradeType } from './enums/TradeType'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nexport function toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { ONE, ZERO } from '../constants'\nimport { Rebase } from '../interfaces'\n\nexport function rebase(value: JSBI, from: JSBI, to: JSBI): JSBI {\n  return from ? JSBI.divide(JSBI.multiply(value, to), from) : ZERO\n}\n\nexport function toElastic(total: Rebase, base: JSBI, roundUp: boolean): JSBI {\n  let elastic: JSBI\n  if (JSBI.equal(total.base, ZERO)) {\n    elastic = base\n  } else {\n    elastic = JSBI.divide(JSBI.multiply(base, total.elastic), total.base)\n    if (roundUp && JSBI.lessThan(JSBI.divide(JSBI.multiply(elastic, total.base), total.elastic), base)) {\n      elastic = JSBI.add(elastic, ONE)\n    }\n  }\n\n  return elastic\n}\n","import { SOLIDITY_TYPE_MAXIMA, ZERO } from '../constants'\nimport { SolidityType } from '../enums'\n\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n"],"names":["ChainId","ChainKey","Rounding","SolidityType","TradeType","TradeVersion","SUSHI_ADDRESS","ETHEREUM","ROPSTEN","RINKEBY","GÖRLI","KOVAN","FANTOM","MATIC","XDAI","BSC","ARBITRUM","AVALANCHE","HECO","HARMONY","OKEX","OKEX_TESTNET","PALM","PALM_TESTNET","MOONRIVER","CELO","TELOS","FUSE","MOONBEAM","USDC_ADDRESS","MATIC_TESTNET","OPTIMISM","USD_ADDRESS","WETH9_ADDRESS","ARBITRUM_TESTNET","WNATIVE_ADDRESS","FANTOM_TESTNET","BSC_TESTNET","MOONBEAM_TESTNET","AVALANCHE_TESTNET","HECO_TESTNET","HARMONY_TESTNET","DAI_ADDRESS","USDT_ADDRESS","MIM_ADDRESS","FRAX_ADDRESS","FACTORY_ADDRESS","ROUTER_ADDRESS","MASTERCHEF_ADDRESS","BAR_ADDRESS","MAKER_ADDRESS","TIMELOCK_ADDRESS","BENTOBOX_ADDRESS","KASHI_ADDRESS","SUSHISWAP_SWAPPER_ADDRESS","SUSHISWAP_MULTISWAPPER_ADDRESS","SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS","CHAINLINK_ORACLE_ADDRESS","BORING_HELPER_ADDRESS","MINICHEF_ADDRESS","MASTERCHEF_V2_ADDRESS","ENS_REGISTRAR_ADDRESS","ZAPPER_ADDRESS","MERKLE_DISTRIBUTOR_ADDRESS","MULTICALL2_ADDRESS","BALANCE_FETCHER_ADDRESS","MULTISIG_ADDRESS","CHAIN_KEY","INIT_CODE_HASH","AbstractCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","invariant","isInteger","NativeCurrency","validateAndParseAddress","address","getAddress","error","Token","equals","other","isToken","this","sortsBefore","toLowerCase","USDC","USD","WETH9","WNATIVE","SUSHI","Avalanche","_NativeCurrency","onChain","_cache","isNative","wnative","Binance","Celo","wcelo","Ether","_etherCache","weth9","Fantom","Harmony","Heco","Matic","Movr","Okex","xDai","Palm","Fuse","Telos","Glmr","NATIVE","MaxUint256","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","MINIMUM_LIQUIDITY","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","Decimal","toFormat","_Decimal","Big","_Big","strict","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","_Fraction","toExact","serialize","wrapped","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","fraction","quote","currencyAmount","adjustedForDecimals","computePairAddress","factoryAddress","tokenA","tokenB","token0","getCreate2Address","keccak256","pack","MAX_SAFE_INTEGER","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x","Pair","currencyAmountA","currencyAmountB","currencyAmounts","liquidityToken","tokenAmounts","involvesToken","token","token1","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","tokenAmountA","tokenAmountB","liquidity","amount0","amount1","console","log","kLast","getLiquidityValue","feeOn","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","ONE_HUNDRED","toPercent","Percent","Route","pairs","input","output","every","pair","wrappedInput","path","entries","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","computePriceImpact","midPrice","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","isFull","lo","hi","mid","splice","pop","inputOutputComparator","a","b","tradeComparator","ioComp","route","Trade","amount","tradeType","Array","EXACT_INPUT","i","executionPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","getSigner","library","account","connectUnchecked","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","to","recipient","allowedSlippage","map","deadline","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","currencyA","currencyB","highest","arguments","GT","lowest","LT","from","total","base","roundUp","elastic","solidityType"],"mappings":"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"}