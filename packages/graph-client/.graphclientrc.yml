sources:
  - name: xSUSHI
    handler:
      graphql:
        endpoint: https://api.thegraph.com/subgraphs/name/sushi-labs/xsushi
        retry: 3
    # transforms:

  - name: BentoBox
    handler:
      graphql:
        endpoint: https://{context.subgraphHost:api.thegraph.com/subgraphs/name}/{context.subgraphName:matthewlilley/bentobox-ethereum}
        retry: 3
    # transforms:

  - name: Blocks
    handler:
      graphql:
        endpoint: https://{context.subgraphHost:api.thegraph.com/subgraphs/name}/{context.subgraphName:blocklytics/ethereum-blocks}
        retry: 3
    transforms:

  - name: FuroStream
    handler:
      graphql:
        endpoint: https://{context.subgraphHost:api.thegraph.com/subgraphs/name}/{context.subgraphName:sushi-subgraphs/furo-ethereum}
    transforms:
      - autoPagination:
          validateSchema: true

  - name: Exchange
    handler:
      graphql:
        endpoint: https://{context.subgraphHost:api.thegraph.com/subgraphs/name}/{context.subgraphName:sushiswap/exchange-ethereum}
        retry: 3
    transforms:
      # - addSourceName: true
      - autoPagination:
          if: false
          validateSchema: false
      - prefix:
          value: deprecated_
          includeRootOperations: true
          includeTypes: true

  - name: SushiSwap
    handler:
      graphql:
        endpoint: https://{context.subgraphHost:api.thegraph.com/subgraphs/name}/{context.subgraphName:subgraph-qa/sushiswap-ethereum}
        retry: 3
    transforms:
      - rename:
          renames:
            - from:
                type: Query
                field: swaps
              to:
                type: Query
                field: v2Swaps
            - from:
                type: Swap
              to:
                type: V2Swap
            - from:
                type: Query
                field: burns
              to:
                type: Query
                field: v2Burns
            - from:
                type: Burn
              to:
                type: V2Burn
            - from:
                type: Query
                field: mints
              to:
                type: Query
                field: v2Mints
            - from:
                type: Mint
              to:
                type: V2Mint
            - from:
                type: Query
                field: transactions
              to:
                type: Query
                field: v2Transactions
            - from:
                type: Transaction
              to:
                type: V2Transaction
      # - addSourceName: true
      # - autoPagination:
      #     validateSchema: true
      # transforms:
      # Rename type names and field names to let stitching merger merges them
      # - rename:
      #     renames:
      #       - from:
      #           type: PairWithIncentives
      #         to:
      #           type: Pair
      #       - from:
      #           type: Query
      #           field: pairWithIncentives
      #         to:
      #           type: Query
      #           field: pair
      #       - from:
      #           type: Query
      #           field: pairsWithIncentives
      #         to:
      #           type: Query
      #           field: pairs
      # - typeMerging:
      #     queryFields:
      #       - queryFieldName: incentives
      #         keyField: id
      #       - queryFieldName: pairs
      #         keyField: id

  - name: Trident
    handler:
      graphql:
        endpoint: https://{context.subgraphHost:api.thegraph.com/subgraphs/name}/{context.subgraphName:sushi-qa/trident-optimism}
        retry: 3
    transforms:

  - name: MasterChefV1
    handler:
      graphql:
        endpoint: https://{context.subgraphHost:api.thegraph.com/subgraphs/name}/{context.subgraphName:jiro-ono/masterchef-staging}
        retry: 3
    transforms:
      - addSourceName: true
      - autoPagination:
          validateSchema: true
      - prefix:
          value: MASTERCHEF_V1_
          includeRootOperations: true
          includeTypes: false
          ignore:
            - _SubgraphErrorPolicy_
      - rename:
          mode: wrap
          renames:
            - from:
                type: Pool
                field: owner
              to:
                type: Pool
                field: masterChef
            - from:
                type: Pool
                field: balance
              to:
                type: Pool
                field: slpBalance

  - name: MasterChefV2
    handler:
      graphql:
        endpoint: https://api.thegraph.com/subgraphs/name/sushiswap/master-chefv2
        retry: 3
    transforms:
      - addSourceName: true
      - autoPagination:
          validateSchema: true
      - prefix:
          value: MASTERCHEF_V2_
          includeRootOperations: true
          includeTypes: false
          ignore:
            - _SubgraphErrorPolicy_
  
  - name: GraphNode
    handler:
      graphql:
        endpoint: https://{context.node:api.thegraph.com/index-node/graphql}

  - name: Concentrated
    handler:
      graphql:
        endpoint: https://{context.subgraphHost:api.thegraph.com/subgraphs/name}/{context.subgraphName:uniswap/uniswap-v3}
        retry: 3
    transforms:
      - prefix:
          value: CONCENTRATED_
          includeRootOperations: true
          includeTypes: true
          ignore:
            - _SubgraphErrorPolicy_

  - name: SushiSwapV3
    handler:
      graphql:
        endpoint: https://{context.subgraphHost:api.thegraph.com/subgraphs/name}/{context.subgraphName:uniswap/uniswap-v3}
        retry: 3
    transforms:
      - prefix:
          value: SUSHISWAP_V3_
          includeRootOperations: true
          includeTypes: true
          ignore:
            - _SubgraphErrorPolicy_

# Had to disable global transforms since we have a jsonSchema handler in here now...
transforms:
  # - autoPagination:
  #     validateSchema: false
  - autoTypeMerging: true
  - addSourceName: true

additionalTypeDefs: |
  # Deprecated 
  extend type deprecated_Token {
    chainId: BigInt!
  }
  extend type deprecated_Pair {
    chainId: BigInt!
  }
  extend type deprecated_LiquidityPosition {
    chainId: BigInt!
  }

  # Custom types

  # type User {
  #   id: ID!
  #   positions: [Position!]!
  # }
  # type Apr {
  #   fee: BigDecimal!
  #   incentive: BigDecimal!
  #   combined: BigDecimal!
  # }

  type UserPosition {
    id: ID!
    pool: String!
    chainId: BigInt!
    balance: BigInt!
    unstakedBalance: BigInt!
    stakedBalance: BigInt!
  }
  type Furo_token {
    id: ID!
    liquidityShares: BigInt!
    symbol: String!
    name: String!
    decimals: Int!
    chainId: Int!
    rebase: Rebase!
  }
  type ChefUserPool {
    id: BigInt!
    pair: String!
  }
  type ChefUser {
    id: ID!
    chainId: BigInt!
    address: String!
    amount: BigInt!
    pool: ChefUserPool
  }  
  type RewardToken {
    address: String!
    symbol: String!
    decimals: Int!
  }
  type Incentive {
    chainId: BigInt!
    poolId: String!
    pid: Int!
    type: String!
    apr: BigDecimal!
    rewardPerDay: BigDecimal!
    rewardToken: RewardToken!
    rewarderAddress: String!
    rewarderType: String!
  }
  type Farm {
    id: ID!
    incentives: [Incentive!]!
    chefType: String!
    poolType: String!
  }
  # Input
  input Pagination {
    pageIndex: Int! = 0
    pageSize: Int! = 20
  }
  # Type Extensions
  extend type Block {
    chainId: BigInt!
  }
  extend type Bundle {
    chainId: BigInt!
  }
  extend type Factory {
    chainId: BigInt!
  }
  extend type SUSHISWAP_V3_Factory {
    chainId: Int!
  }
  extend type Rebase {
    chainId: BigInt!
  }
  extend type Token {
    chainId: BigInt!
    source: String!
  }
  extend type FactoryDaySnapshot {
    chainId: BigInt!
  }
  extend type Pair {
    chainId: BigInt!
    address: String!
    liquidity1dChange: BigDecimal
    liquidity1wChange: BigDecimal
    volume1d: BigDecimal
    volume1dChange: BigDecimal
    volume1w: BigDecimal
    fees1d: BigDecimal
    fees1w: BigDecimal
    fees1dChange: BigDecimal
    utilisation1d: BigDecimal
    utilisation2d: BigDecimal
    utilisation1dChange: BigDecimal
    txCount1d: BigDecimal
    txCount1dChange: BigDecimal
    txCount1w: BigDecimal
    feeApr: BigDecimal
  }
  extend type LiquidityPosition {
    chainId: BigInt!
  }

  extend type BentoBoxKpi {
    chainId: BigInt
  }
  extend type StrategyKpi {
    chainId: BigInt
  }

  enum SubgraphType {
    Current
    Pending
  }
  enum SubgraphStatus {
    Synced
    Syncing
    Failed
  }
  type Subgraph {
    subgraphName: String
    subgraphId: String
    type: SubgraphType
    status: SubgraphStatus
    startBlock: BigInt
    lastSyncedBlock: BigInt
    chainHeadBlock: BigInt
    hasFailed: Boolean
    nonFatalErrorCount: BigInt
    entityCount: BigInt
  }
  input SubgraphWithNode {
    subgraphName: String!
    nodeUrl: String!
  }

  # Query Extensions
  extend type Query {
    # Internal app
    
    subgraphs(subgraphs: [SubgraphWithNode!]!, type: SubgraphType!): [Subgraph!]!

    crossChainBentoBoxKpis(
      first: Int!
      chainIds: [BigInt!]!
    ): [BentoBoxKpi!]!
    crossChainStrategyKpis(
      skip: Int = 0
      first: Int = 100
      where: StrategyKpi_filter
      orderBy: StrategyKpi_orderBy
      orderDirection: OrderDirection
      block: Block_height
      chainIds: [BigInt!]!
    ): [StrategyKpi!]!

    # / Internal app
    furoTokensByChainIds(
      skip: Int = 0
      chainIds: [BigInt!]!
      orderBy: Token_orderBy
      orderDirection: OrderDirection
      first: Int = 100
      where: Token_filter
    ): [Furo_token!]!
    bundlesByChainIds(
      chainIds: [BigInt!]!
    ): [Bundle!]!
    blocksByChainIds(
      skip: Int = 0
      first: Int = 100
      where: Block_filter
      orderBy: Block_orderBy
      orderDirection: OrderDirection
      chainIds: [BigInt!]!
    ): [Block!]!
    factoriesByChainIds(
      chainIds: [BigInt!]!
    ): [Factory!]!
    v3factoriesByChainIds(
      chainIds: [BigInt!]!
    ): [SUSHISWAP_V3_Factory!]!
    liquidityPositionsByChainIds(
      skip: Int = 0
      first: Int = 100
      where: LiquidityPosition_filter
      orderBy: LiquidityPosition_orderBy
      orderDirection: OrderDirection
      block: Block_height
      chainIds: [BigInt!]!
    ): [LiquidityPosition!]!
    # pairsByIds(
    #   skip: Int = 0
    #   first: Int = 100
    #   where: Pair_filter
    #   orderBy: Pair_orderBy
    #   orderDirection: OrderDirection
    #   block: Block_height
    #   ids: [String!]!
    # ): [Pair!]!
    pairsWithIncentives(
      skip: Int = 0
      first: Int = 100
      where: Pair_filter
      orderBy: Pair_orderBy
      orderDirection: OrderDirection
      block: Block_height
      chainIds: [BigInt!]!
      farmsOnly: Boolean
      pagination: Pagination
    ): [Pair!]!
    pairsByChainId(
      skip: Int = 0
      first: Int = 100
      where: Pair_filter
      orderBy: Pair_orderBy
      orderDirection: OrderDirection
      block: Block_height
      chainId: BigInt!
    ): [Pair!]!
    pairsByChainIds(
      skip: Int = 0
      first: Int = 100
      where: Pair_filter
      orderBy: Pair_orderBy
      orderDirection: OrderDirection
      block: Block_height
      chainIds: [BigInt!]!
      blocks: [Block_height!]
    ): [Pair!]!
    pairById(
      id: ID!
      block: Block_height
    ): Pair
    pairsByIds(
      ids: [ID!]!
      block: Block_height
    ): [Pair!]!
    # pairWithIncentives(
    #   id: ID!
    # ): PairWithIncentives!
    # pairsWithIncentives(
    #   ids: [ID!]
    #   skip: Int = 0
    #   first: Int = 100
    #   where: Pair_filter
    #   orderBy: Pair_orderBy
    #   orderDirection: OrderDirection
    #   chainIds: [BigInt!]!
    # ): [PairWithIncentives!]!
    rebasesByChainIds(
      skip: Int = 0
      first: Int = 100
      where: Rebase_filter
      chainIds: [BigInt!]!
    ): [Rebase!]!
    tokensByChainIds(
      skip: Int = 0
      first: Int = 100
      where: Token_filter
      orderBy: Token_orderBy
      orderDirection: OrderDirection
      block: Block_height
      pagination: Pagination
      chainIds: [BigInt!]! 
    ): [Token!]!
    tokensByChainId(
      skip: Int = 0
      first: Int = 100
      where: Token_filter
      orderBy: Token_orderBy
      orderDirection: OrderDirection
      block: Block_height
      chainId: BigInt!
    ): [Token!]!
    tokenById(
      id: ID!
      block: Block_height
    ): Token!
    tokensByIds(
      ids: [ID!]!
      block: Block_height
    ): [Token!]!
    
    # CONCENTRADED
    ticksById(
      id: ID!
    ): [CONCENTRATED_Tick!]!

    poolsByTokenPair(
      tokenId0: String!
      tokenId1: String!
    ): [CONCENTRATED_Pool!]!

    # TODO: REFACTOR BELOW
    crossChainChefUser(
      skip: Int = 0
      first: Int = 100
      where: User_filter
      orderBy: User_orderBy
      orderDirection: OrderDirection
      block: Block_height
      chainIds: [BigInt!]!
    ): [ChefUser!]!
    crossChainUserPositions(
      id: ID!
      chainIds: [BigInt!]!
    ): [UserPosition!]!
    factoryDaySnapshotsByChainIds(
      first: Int
      skip: Int
      where: FactoryDaySnapshot_filter
      orderBy: FactoryDaySnapshot_orderBy
      orderDirection: OrderDirection
      block: Block_height
      chainIds: [BigInt!]!
    ): [FactoryDaySnapshot!]!
    crossChainToken(id: ID! now: Int! chainId: BigInt!): Token!
    crossChainStats(
      first: Int
      skip: Int
      where: Pair_filter
      orderBy: Pair_orderBy
      orderDirection: OrderDirection
      block: Block_height
      chainIds: [BigInt!]!
      now: Int!
    ): [Pair!]!
    oneDayBlocks(
      skip: Int = 0
      first: Int = 100
      chainIds: [BigInt!]!
    ): [Block!]!
    twoDayBlocks(
      skip: Int = 0
      first: Int = 100
      chainIds: [BigInt!]!
    ): [Block!]!
    oneWeekBlocks(
      skip: Int = 0
      first: Int = 100
      chainIds: [BigInt!]!
    ): [Block!]!
    customBlocks(
      skip: Int = 0
      first: Int = 100
      timestamp: Int!
      chainIds: [BigInt!]!
    ): [Block!]!
  }

additionalResolvers:
  - ./resolvers/index.js

documents:
  - ./queries/*.graphql

serve:
  endpoint: /api/graphql
  playground: true

codegen:
  contextType: 'MeshContext & { chainId: string; subgraphName: string; subgraphHost: string }'

# cache:
#   redis:
#     url: '${env.REDIS_URL}'
