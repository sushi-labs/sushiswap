sources: !includes ./src/sources

additionalTypeDefs: |
  input Pagination {
    pageIndex: Int! = 0
    pageSize: Int! = 20
  }
  type RewardToken {
    address: String!
    symbol: String!
    decimals: Int!
  }
  type Incentive {
    apr: BigDecimal!
    rewardPerDay: BigDecimal!
    rewardToken: RewardToken!
    rewarderAddress: String!
    rewarderType: String!
  }
  type Farm {
    id: ID!
    incentives: [Incentive!]!
    chefType: String!
    poolType: String!
  }
  type ChefUserPool {
    id: BigInt!
    pair: String!
  }
  type ChefUser {
    id: ID!
    address: String!
    amount: BigInt!
    pool: ChefUserPool
    chainId: Int!
    chainName: String!
  }
  type UserWithFarm {
    id: ID!
    unstakedBalance: BigInt!
    stakedBalance: BigInt!
    valueUSD: BigDecimal!
    pair: Pair!
    chainId: Int!
    chainName: String!
  }
  extend type Block {
    chainId: Int!
  }
  extend type Rebase {
    chainId: Int!
  }
  extend type Bundle {
    chainId: Int!
  }
  extend type Factory {
    chainId: Int!
  }
  extend type FactoryDaySnapshot {
    chainId: Int!
    chainName: String!
    chainShortName: String!
  }
  extend type LiquidityPosition {
    chainId: Int!
    chainName: String!
    chainShortName: String!
  }
  extend type Pair {
    chainId: Int!
    chainName: String!
    chainShortName: String!
    liquidity1dChange: BigDecimal
    liquidity1wChange: BigDecimal
    volume1d: BigDecimal!
    volume1dChange: BigDecimal
    volume1w: BigDecimal!
    fees1d: BigDecimal!
    fees1w: BigDecimal!
    txCount1d: BigInt!
    txCount1dChange: BigDecimal
    txCount1w: BigInt!
    farm: Farm
    incentiveApr: BigDecimal!
    feeApr: BigDecimal!
  }
  extend type User {
    chainId: Int!
    chainName: String!
  }
  extend type Token {
    chainId: Int!
    chainName: String!
    chainShortName: String!
    source: String!
  }
  extend type Query {
    # BLOCKS
    crossChainBlocks(
      first: Int,
      skip: Int,
      where: Block_filter,
      orderBy: Block_orderBy,
      orderDirection: OrderDirection,
      chainIds: [Int!]!
    ): [Block!]!
    oneDayBlocks(
      chainIds: [Int!]!
    ): [Block!]!
    twoDayBlocks(
      chainIds: [Int!]!
    ): [Block!]!
    oneWeekBlocks(
      chainIds: [Int!]!
    ): [Block!]!
    customBlocks(
      timestamp: Int!
      chainIds: [Int!]!
    ): [Block!]!
    # BENTOBOX
    crossChainRebases(
      first: Int!,
      chainIds: [Int!]!
    ): [Rebase!]!
    # EXCHANGE
    crossChainBundles(
      chainIds: [Int!]!
    ): [Bundle!]!
    crossChainFactories(
      chainIds: [Int!]!
    ): [Factory!]!
    crossChainFactoryDaySnapshots(
      first: Int, 
      skip: Int, 
      where: FactoryDaySnapshot_filter, 
      orderBy: FactoryDaySnapshot_orderBy, 
      orderDirection: OrderDirection, 
      block: Block_height, 
      chainIds: [Int!]!
    ): [FactoryDaySnapshot!]!
    crossChainPairs(
      first: Int,
      skip: Int, 
      where: Pair_filter, 
      orderBy: Pair_orderBy, 
      orderDirection: OrderDirection, 
      block: Block_height,
      pagination: Pagination,
      chainIds: [Int!]!,
      farmsOnly: Boolean
    ): [Pair!]!
    crossChainPair(id: ID!, now: Int!, chainId: Int!): Pair
    crossChainLiquidityPositions(
      block: Block_height,
      where: LiquidityPosition_filter,
      chainIds: [Int!]!,
    ): [LiquidityPosition!]!
    crossChainChefUser(
      first: Int,
      skip: Int,
      where: User_filter,
      chainIds: [Int!]!,
    ): [ChefUser]
    crossChainUserWithFarms(
      id: ID!,
      block: Block_height,
      chainIds: [Int!]!,
    ): [UserWithFarm!]
    crossChainToken(id: ID!, now: Int!, chainId: Int!): Token!
    crossChainTokens(
      first: Int,
      skip: Int,
      where: Token_filter,
      orderBy: Token_orderBy,
      orderDirection: OrderDirection,
      block: Block_height,
      pagination: Pagination,
      chainIds: [Int!]! 
    ): [Token!]!
    crossChainStats(
      first: Int,
      skip: Int,
      where: Pair_filter,
      orderBy: Pair_orderBy, 
      orderDirection: OrderDirection,
      block: Block_height,
      chainIds: [Int!]!, 
      now: Int!
    ): [Pair!]!
  }

additionalResolvers:
  - .graphclient/resolvers/bentobox.js
  - .graphclient/resolvers/blocks.js
  - .graphclient/resolvers/sushiswap.js

documents:
  - './src/queries/*.graphql'
  # - './queries/bar.graphql'
  # - './queries/bentobox.graphql'
  # - './queries/blocks.graphql'
  # - './queries/exchange.graphql'
  # - './queries/masterchef.graphql'
  # - './queries/sushiswap.graphql'
codegen:
  contextType: 'MeshContext & { chainId: string; chainName: string; chainShortName: string; subgraphName: string; subgraphHost: string }'

serve:
   endpoint: /api/graphql