"""
Directive for specifying field complexity in the GraphQL schema.
The complexity is calculated as: value × (multiplier1_value × multiplier2_value × ...)
"""
directive @complexity(value: Int!, multipliers: [String!]) on FIELD_DEFINITION

"""
Indicates exactly one field must be supplied and this field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""Floats that will have a value of 0 or more."""
scalar Decimal

"""Time frame for chart data"""
enum TimeFrame {
  """Last 24 hours"""
  DAY

  """Last 7 days"""
  WEEK

  """Last 30 days"""
  MONTH

  """Last 365 days"""
  YEAR

  """All available data"""
  ALL
}

"""A single data point in a chart"""
type ChartDataPoint {
  """The timestamp of the data point"""
  timestamp: DateTime!

  """The value at this timestamp"""
  value: Decimal!
}

"""Chart data for a pool"""
type PoolCharts {
  """Volume data points"""
  volume: [ChartDataPoint!]!

  """TVL data points"""
  tvl: [ChartDataPoint!]!

  """Fees data points"""
  fees: [ChartDataPoint!]!
}

type Subscription {
  """Subscribe to new blocks."""
  newBlocks(chainIds: [String!], quantity: Int = 20): [Block!]

  """Listen for a transaction by request key."""
  transaction(chainId: String, requestKey: String!): Transaction

  """Listen for transactions by chain ID and minimum confirmation depth."""
  transactions(quantity: Int = 20): [Transaction!]

  """
  Listen for events by qualifiedName (e.g. `coin.TRANSFER`).
         
        The parametersFilter is a stringified JSON object that matches the [JSON object property filters](https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types/working-with-json-fields#filter-on-object-property) from Prisma.
         
        An example of such a filter parameter value: `events(parametersFilter: "{\"array_starts_with\": \"k:abcdefg\"}")`
  """
  events(chainId: String, minimumDepth: Int, parametersFilter: String, qualifiedEventName: String!, quantity: Int = 20): [Event!]

  """Subscribe to new blocks from a specific depth."""
  newBlocksFromDepth(chainIds: [String!], minimumDepth: Int!, quantity: Int = 20): [Block!]
}

type Query {
  """
  Retrieve live balances for a given account with optional filtering by chains and module. Default page size is 20.
  """
  balance(accountName: String, chainIds: [String!], module: String, after: String, before: String, first: Int, last: Int): QueryBalanceConnection!

  """Retrieve a block by hash."""
  block(hash: String!): Block

  """Retrieve blocks by chain and minimal depth. Default page size is 20."""
  blocksFromDepth(after: String, before: String, chainIds: [String!], first: Int, last: Int, minimumDepth: Int!): QueryBlocksFromDepthConnection

  """Retrieve blocks by chain and minimal height. Default page size is 20."""
  blocksFromHeight(
    after: String
    before: String

    """Default: all chains"""
    chainIds: [String!]
    endHeight: Int
    first: Int
    last: Int
    startHeight: Int!
  ): QueryBlocksFromHeightConnection!

  """
  Retrieve all completed blocks from a given height. Default page size is 20.
  """
  completedBlockHeights(
    after: String
    before: String

    """Default: all chains"""
    chainIds: [String!]

    """Retrieve blocks from completed heights only. Default: true"""
    completedHeights: Boolean = true
    first: Int
    heightCount: Int = 3
    last: Int
  ): QueryCompletedBlockHeightsConnection!

  """
  Retrieve events by qualifiedName (e.g. `coin.TRANSFER`). Default page size is 20.
  
        The parametersFilter is a stringified JSON object that matches the [JSON object property filters](https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types/working-with-json-fields#filter-on-object-property) from Prisma.
  
        An example of such a filter parameter value: `events(parametersFilter: "{\"array_starts_with\": \"k:abcdefg\"}")`
  """
  events(after: String, before: String, first: Int, last: Int, qualifiedEventName: String, moduleName: String, blockHash: String, requestKey: String, chainId: String, maxHeight: Int, minHeight: Int, minimumDepth: Int, orderIndex: Int, parametersFilter: String): QueryEventsConnection!

  """
  Retrieve an fungible specific account by its name and fungible, such as coin.
  """
  fungibleAccount(accountName: String!, fungibleName: String = "coin"): FungibleAccount

  """Retrieve an account by public key."""
  fungibleAccountsByPublicKey(fungibleName: String = "coin", publicKey: String!): [FungibleAccount!]!

  """
  Retrieve an account by its name and fungible, such as coin, on a specific chain.
  """
  fungibleChainAccount(accountName: String!, chainId: String!, fungibleName: String = "coin"): FungibleChainAccount

  """
  Retrieve an account by its name and fungible, such as coin, on a specific chain.
  """
  fungibleChainAccounts(accountName: String!, chainIds: [String!], fungibleName: String = "coin"): [FungibleChainAccount!]

  """Retrieve a chain account by public key."""
  fungibleChainAccountsByPublicKey(chainId: String!, fungibleName: String = "coin", publicKey: String!): [FungibleChainAccount!]!

  """
  Estimate the gas limit for one or more transactions. Throws an error when the transaction fails or is invalid. The input accepts a JSON object and based on the parameters passed it will determine what type of format it is and return the gas limit estimation. The following types are supported:
         
        - `full-transaction`: A complete transaction object. Required parameters: `cmd`, `hash` and `sigs`.
        - `stringified-command`: A JSON stringified command. Required parameters: `cmd`. It also optionally accepts `sigs`.
        - `full-command`: A full command. Required parameters: `payload`, `meta` and `signers`.
        - `partial-command`: A partial command. Required parameters: `payload` and either `meta` or `signers`. In case `meta` is not given, but `signers` is given, you can also add `chainId` as a parameter.
        - `payload`: A just the payload of a command. Required parameters: `payload` and `chainId`.
        - `code`: The code of an execution. Required parameters: `code` and `chainId`.
         
        Every type accepts an optional parameter called `networkId` to override the default value from the environment variables.
         
        Example of the input needed for a type `code` query: `gasLimitEstimate(input: "{\"code\":\"(coin.details \\\"k:1234\\\")\",\"chainId\":\"3\"}")`
  """
  gasLimitEstimate(input: [String!]!): [GasLimitEstimation!]!

  """Get the configuration of the graph."""
  graphConfiguration: GraphConfiguration!

  """Get the height of the block with the highest height."""
  lastBlockHeight: BigInt

  """Get information about the network."""
  networkInfo: NetworkInfo
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!

  """Retrieve a non-fungible specific account by its name."""
  nonFungibleAccount(accountName: String!): NonFungibleAccount

  """Retrieve an account by its name on a specific chain."""
  nonFungibleChainAccount(accountName: String!, chainId: String!): NonFungibleChainAccount

  """
  Execute arbitrary Pact code via a local call without gas-estimation or signature-verification (e.g. (+ 1 2) or (coin.get-details <account>)).
  """
  pactQuery(pactQuery: [PactQuery!]!): [PactQueryResponse!]!

  """
  Retrieve one transaction by its unique key. Throws an error if multiple transactions are found.
  """
  transaction(blockHash: String, minimumDepth: Int, requestKey: String!): Transaction

  """
  Retrieve transactions. Default page size is 20.
  At least one of accountName, fungibleName, blockHash, or requestKey must be provided.
  """
  transactions(accountName: String, after: String, before: String, blockHash: String, chainId: String, first: Int, fungibleName: String, last: Int, maxHeight: Int, minHeight: Int, minimumDepth: Int, requestKey: String, isCoinbase: Boolean): QueryTransactionsConnection!

  """Retrieve all transactions by a given public key."""
  transactionsByPublicKey(after: String, before: String, first: Int, last: Int, publicKey: String!): QueryTransactionsByPublicKeyConnection!

  """Retrieve all transactions by a given pact code."""
  transactionsByPactCode(after: String, before: String, first: Int, last: Int, pactCode: String!): QueryTransactionsByPactCodeConnection!

  """Retrieve transfers. Default page size is 20."""
  transfers(after: String, before: String, first: Int, last: Int, blockHash: String, requestKey: String, accountName: String, chainId: String, fungibleName: String, isNFT: Boolean): QueryTransfersConnection!
  tokens(after: String, before: String, first: Int, last: Int): QueryTokensConnection!

  """Retrieve liquidity pools. Default page size is 20."""
  pools(after: String, before: String, first: Int, last: Int, orderBy: PoolOrderBy = TVL_USD_DESC, protocolAddress: String): QueryPoolsConnection!

  """Retrieve a specific pool by its ID."""
  pool(id: ID!, timeFrame: TimeFrame, type: PoolTransactionType, first: Int, after: String, last: Int, before: String): Pool
  poolTransactions(pairId: String!, type: PoolTransactionType, first: Int, after: String, last: Int, before: String): PoolTransactionsConnection

  """Get user's liquidity positions"""
  liquidityPositions(walletAddress: String!, first: Int, after: String, last: Int, before: String, orderBy: LiquidityPositionOrderBy = VALUE_USD_DESC): LiquidityPositionsConnection!

  """Get DEX metrics including TVL, volume, and pool count"""
  dexMetrics(
    """Start date for historical data"""
    startDate: DateTime

    """End date for historical data"""
    endDate: DateTime

    """Filter metrics by protocol address"""
    protocolAddress: String
  ): DexMetrics!

  """Get last price for a specific token in KDA"""
  lastTokenPriceInKda(moduleName: String!): Decimal

  """Get price for a specific token"""
  tokenPrice(tokenAddress: String!, protocolAddress: String): TokenPrice

  """Get prices for all tokens in a protocol"""
  tokenPrices(protocolAddress: String): [TokenPrice!]!
}

type QueryTransactionsByPactCodeConnection {
  edges: [QueryTransactionsByPactCodeConnectionEdge!]!
  pageInfo: PageInfo!
}

type QueryTransactionsByPactCodeConnectionEdge {
  cursor: String!
  node: TransactionSummary!
}

type TransactionSummary {
  requestKey: String!
  height: BigInt!
  chainId: BigInt!
  canonical: Boolean!
  creationTime: DateTime!
  badResult: String
  sender: String!
  gas: String!
  gasLimit: String!
  gasPrice: String!
  code: String
}

"""Connection type for balance query results."""
type QueryBalanceConnection {
  edges: [QueryBalanceConnectionEdge!]!
  pageInfo: PageInfo!
}

type QueryBalanceConnectionEdge {
  cursor: String!
  node: BalanceNode!
}

type BalanceNode {
  accountName: String!
  module: String!
  chainId: String!
  balance: String!
}

"""A fungible-specific account."""
type FungibleAccount implements Node {
  id: ID!
  accountName: String!

  """
  Uses "length" multiplier which scales with the number of items in the returned array.
  Each chain account requires a separate database lookup, so complexity = 5 × array_length.
  Example: 3 chain accounts = 5 × 3 = 15 complexity points.
  This pattern is ideal for array fields where complexity scales linearly with result size.
  """
  chainAccounts: [FungibleChainAccount!]!
  fungibleName: String!
  totalBalance: Decimal!

  """
  Default page size is 20.
  Uses "first" multiplier to control pagination complexity.
  Transactions are expensive operations requiring joins, so base value is higher.
  Example: requesting 20 transactions = 10 × 20 = 200 complexity points.
  """
  transactions(after: String, before: String, first: Int, last: Int): FungibleAccountTransactionsConnection!
  transfers(after: String, before: String, first: Int, last: Int): FungibleAccountTransfersConnection!
}

type FungibleAccountTransactionsConnection {
  edges: [FungibleAccountTransactionsConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type FungibleAccountTransactionsConnectionEdge {
  cursor: String!
  node: Transaction!
}

type FungibleAccountTransfersConnection {
  edges: [FungibleAccountTransfersConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type FungibleAccountTransfersConnectionEdge {
  cursor: String!
  node: Transfer!
}

"""A chain and non-fungible-specific account."""
type NonFungibleChainAccount implements Node {
  id: ID!
  accountName: String!
  chainId: String!
  nonFungibleTokenBalances: [NonFungibleTokenBalance!]!

  """
  Default page size is 20. Note that custom token related transactions are not included.
  """
  transactions(after: String, before: String, first: Int, last: Int): NonFungibleChainAccountTransactionsConnection!

  """Default page size is 20."""
  transfers(after: String, before: String, first: Int, last: Int): NonFungibleChainAccountTransfersConnection!
}

type QueryCompletedBlockHeightsConnection {
  edges: [QueryCompletedBlockHeightsConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryCompletedBlockHeightsConnectionEdge {
  cursor: String!
  node: Block!
}

"""The token identifier and its balance."""
type NonFungibleTokenBalance implements Node {
  accountName: String!
  balance: Int!
  chainId: String!
  guard: IGuard!
  id: ID!
  info: NonFungibleToken
  tokenId: String!
  version: String!
}

"""Information related to a token."""
type NonFungibleToken {
  precision: Int!
  supply: Int!
  uri: String!
}

type QueryTransactionsByPublicKeyConnection {
  edges: [QueryTransactionsByPublicKeyConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type QueryTransactionsByPublicKeyConnectionEdge {
  cursor: String!
  node: Transaction!
}

type QueryEventsConnection {
  edges: [QueryEventsConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type QueryEventsConnectionEdge {
  cursor: String!
  node: Event!
}

type QueryBlocksFromHeightConnection {
  edges: [QueryBlocksFromHeightConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type QueryBlocksFromHeightConnectionEdge {
  cursor: String!
  node: Block!
}

type QueryBlocksFromDepthConnection {
  edges: [QueryBlocksFromDepthConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type QueryBlocksFromDepthConnectionEdge {
  cursor: String!
  node: Block!
}

type QueryTransactionsConnection {
  edges: [QueryTransactionsConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type QueryTransactionsConnectionEdge {
  cursor: String!
  node: Transaction!
}

type QueryTransfersConnection {
  edges: [QueryTransfersConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type QueryTransfersConnectionEdge {
  cursor: String!
  node: Transfer!
}

"""A unit of information that stores a set of verified transactions."""
type Block implements Node {
  id: ID!
  hash: String!
  chainId: BigInt!
  creationTime: DateTime!

  """The difficulty of the block."""
  difficulty: BigInt!

  """
  The moment the difficulty is adjusted to maintain a block validation time of 30 seconds.
  """
  epoch: DateTime!
  flags: Decimal!
  height: BigInt!
  nonce: Decimal!
  payloadHash: String!
  weight: String!
  target: String!
  coinbase: String!
  neighbors: [BlockNeighbor!]!

  """The proof of work hash."""
  powHash: String!
  canonical: Boolean!
  parent: Block
  totalGasUsedInKda: Decimal!

  """Default page size is 20."""
  events(after: String, before: String, first: Int, last: Int): BlockEventsConnection!
  minerAccount: FungibleChainAccount!

  """Default page size is 20."""
  transactions(after: String, before: String, first: Int, last: Int): BlockTransactionsConnection!
}

interface Node {
  id: ID!
}

"""The neighbor of a block."""
type BlockNeighbor {
  chainId: String!
  hash: String!
}

type BlockEventsConnection {
  edges: [BlockEventsConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BlockEventsConnectionEdge {
  cursor: String!
  node: Event!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

"""An event emitted by the execution of a smart-contract function."""
type Event implements Node {
  id: ID!
  name: String!
  block: Block!
  chainId: BigInt!

  """The height of the block where the event was emitted."""
  height: BigInt!
  moduleName: String!

  """
  The order index of this event, in the case that there are multiple events in one transaction.
  """
  orderIndex: BigInt!
  requestKey: String!
  parameters: String
  parameterText: String!

  """
  The full eventname, containing module and eventname, e.g. coin.TRANSFER
  """
  qualifiedName: String!
  transaction: Transaction
}

"""A fungible specific chain-account."""
type FungibleChainAccount implements Node {
  id: ID!
  accountName: String!
  balance: Float!
  chainId: String!
  fungibleName: String!
  guard: IGuard!

  """
  Transactions that the current account is sender of. Default page size is 20.
  """
  transactions(after: String, before: String, first: Int, last: Int): FungibleChainAccountTransactionsConnection!

  """Default page size is 20."""
  transfers(after: String, before: String, first: Int, last: Int): FungibleChainAccountTransfersConnection!
}

type FungibleChainAccountTransactionsConnection {
  edges: [FungibleChainAccountTransactionsConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type FungibleChainAccountTransactionsConnectionEdge {
  cursor: String!
  node: Transaction!
}

type BlockTransactionsConnection {
  edges: [BlockTransactionsConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BlockTransactionsConnectionEdge {
  cursor: String!
  node: Transaction!
}

"""A transaction."""
type Transaction implements Node {
  id: ID!
  cmd: TransactionCommand!
  hash: String!
  result: TransactionInfo!
  sigs: [TransactionSignature!]!
  orphanedTransactions: [Transaction]
}

"""A transaction command."""
type TransactionCommand {
  meta: TransactionMeta!

  """The network id of the environment."""
  networkId: String!
  nonce: String!
  payload: TransactionPayload!
  signers: [Signer!]!
}

"""The metadata of a transaction."""
type TransactionMeta {
  chainId: BigInt!
  creationTime: DateTime!
  gasLimit: BigInt!
  gasPrice: String!
  sender: String!
  ttl: BigInt!
}

"""The payload of a transaction."""
union TransactionPayload = ContinuationPayload | ExecutionPayload

"""The result of a transaction."""
union TransactionInfo = TransactionMempoolInfo | TransactionResult

"""List of capabilities associated with/installed by this signer."""
type TransactionSignature {
  sig: String!
}

"""The payload of an cont transaction."""
type ContinuationPayload {
  """
  The environment data made available to the transaction. Formatted as raw JSON.
  """
  data: String!

  """
  A unique id when a pact (defpact) is initiated. See the "Pact execution scope and pact-id" explanation in the docs for more information.
  """
  pactId: String

  """The proof provided to continue the cross-chain transaction."""
  proof: String

  """Whether or not this transaction can be rolled back."""
  rollback: Boolean

  """
  The step-number when this is an execution of a `defpact`, aka multi-step transaction.
  """
  step: Int
}

"""The payload of an exec transaction."""
type ExecutionPayload {
  """
  The Pact expressions executed in this transaction when it is an `exec` transaction.
  """
  code: String

  """
  The environment data made available to the transaction. Formatted as raw JSON.
  """
  data: String!
}

"""The mempool information."""
type TransactionMempoolInfo {
  """The status of the mempool."""
  status: String
}

"""The result of a transaction."""
type TransactionResult {
  """The transaction result when it was successful. Formatted as raw JSON."""
  badResult: String

  """
  The JSON stringified continuation in the case that it is a continuation.
  """
  continuation: String
  eventCount: BigInt
  gas: BigInt!

  """The transaction result when it was successful. Formatted as raw JSON."""
  goodResult: String

  """Identifier to retrieve the logs for the execution of the transaction."""
  logs: String
  transactionId: BigInt

  """The height of the block this transaction belongs to."""
  height: BigInt! @deprecated(reason: "Use `block.height` instead.")
  metadata: String! @deprecated(reason: "Not used.")
  block: Block!
  transfers(after: String, before: String, first: Int, last: Int): TransactionResultTransfersConnection!
  events(after: String, before: String, first: Int, last: Int): TransactionResultEventsConnection!
}

type TransactionResultEventsConnection {
  edges: [TransactionResultEventsConnectionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type TransactionResultEventsConnectionEdge {
  cursor: String!
  node: Event!
}

type TransactionResultTransfersConnection {
  edges: [TransactionResultTransfersConnectionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type TransactionResultTransfersConnectionEdge {
  cursor: String!
  node: Transfer!
}

"""A signer for a specific transaction."""
type Signer implements Node {
  """The signer for the gas."""
  address: String
  id: ID!
  orderIndex: Int
  pubkey: String!

  """The signature scheme that was used to sign."""
  scheme: String
  clist: [TransactionCapability!]!
}

"""List of capabilities associated with/installed by this signer."""
type TransactionCapability {
  args: String!
  name: String!
}

type FungibleChainAccountTransfersConnection {
  edges: [FungibleChainAccountTransfersConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type FungibleChainAccountTransfersConnectionEdge {
  cursor: String!
  node: Transfer!
}

"""A transfer of funds from a fungible between two accounts."""
type Transfer implements Node {
  amount: Decimal!
  block: Block!
  blockHash: String! @deprecated(reason: "Use `block.hash` field instead.")
  chainId: BigInt! @deprecated(reason: "Use `block.chainId` field instead.")
  creationTime: DateTime!

  """
  The counterpart of the crosschain-transfer. `null` when it is not a cross-chain-transfer.
  """
  crossChainTransfer: Transfer
  height: BigInt! @deprecated(reason: "Use `block.height` field instead.")
  id: ID!
  moduleHash: String!
  moduleName: String!

  """
  The order of the transfer when it is a `defpact` (multi-step transaction) execution.
  """
  orderIndex: BigInt!
  receiverAccount: String!
  requestKey: String!
  senderAccount: String!

  """The token id if this is a poly-fungible transfer."""
  tokenId: String

  """The transaction that initiated this transfer."""
  transaction: Transaction
}

"""General information about the graph and chainweb-data."""
type GraphConfiguration {
  """The lowest block-height that is indexed in this endpoint."""
  minimumBlockHeight: BigInt

  """The version of the graphl api."""
  version: String!
}

"""Information about the network."""
type NetworkInfo {
  """The version of the API."""
  apiVersion: String!

  """The number of circulating coins."""
  coinsInCirculation: Float!

  """The network hash rate."""
  networkHashRate: Float!

  """The host of the network."""
  networkHost: String!

  """The ID of the network."""
  networkId: String!

  """The total difficulty."""
  totalDifficulty: Float!

  """The total number of transactions."""
  transactionCount: Int!
  nodeBlockDelay: Int!
  nodeChains: [String!]!
  numberOfChains: Int!
  genesisHeights: [GenesisHeight!]!
  nodePackageVersion: String!
  nodeServiceDate: DateTime
  nodeLatestBehaviorHeight: Int!
  countersOfEachChain: [CountersOfEachChain!]!
}

type CountersOfEachChain {
  chainId: String!
  blocksCount: Int!
  transactionCount: Int!
  totalGasUsedInKda: String!
}

type GenesisHeight {
  chainId: String!
  height: Int!
}

input PactQuery {
  chainId: String!
  code: String!
  data: [PactQueryData!]
}

input PactQueryData {
  key: String!
  value: String!
}

"""Information related to a token."""
type PactQueryResponse {
  chainId: String!
  code: String!
  error: String
  result: String
  status: String!
}

type GasLimitEstimation {
  amount: Int!
  inputType: String!
  transaction: String!
  usedPreflight: Boolean!
  usedSignatureVerification: Boolean!
}

"""A non-fungible-specific account."""
type NonFungibleAccount implements Node {
  accountName: String!
  chainAccounts: [NonFungibleChainAccount!]!
  id: ID!
  nonFungibleTokenBalances: [NonFungibleTokenBalance!]!

  """
  Default page size is 20. Note that custom token related transactions are not included.
  """
  transactions(after: String, before: String, first: Int, last: Int): NonFungibleAccountTransactionsConnection!

  """Default page size is 20."""
  transfers(after: String, before: String, first: Int, last: Int): NonFungibleAccountTransfersConnection!
}

type NonFungibleAccountTransactionsConnection {
  edges: [NonFungibleAccountTransactionsConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type NonFungibleAccountTransactionsConnectionEdge {
  cursor: String!
  node: Transaction!
}

type NonFungibleChainAccountTransactionsConnection {
  edges: [NonFungibleChainAccountTransactionsConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type NonFungibleAccountTransfersConnection {
  edges: [NonFungibleAccountTransfersConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type NonFungibleAccountTransfersConnectionEdge {
  cursor: String!
  node: Transfer!
}

type NonFungibleChainAccountTransactionsConnectionEdge {
  cursor: String!
  node: Transaction!
}

type NonFungibleChainAccountTransfersConnection {
  edges: [NonFungibleChainAccountTransfersConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type NonFungibleChainAccountTransfersConnectionEdge {
  cursor: String!
  node: Transfer!
}

"""
A guard. This is a union of all the different types of guards that can be used in a pact.
"""
interface IGuard {
  keys: [String!]! @deprecated(reason: "deprecated, use KeysetGuard.keys")
  predicate: String! @deprecated(reason: "deprecated, use KeysetGuard.predicate")
  raw: String!
}

"""A keyset guard."""
type KeysetGuard implements IGuard {
  keys: [String!]!
  predicate: String!
  raw: String!
}

type UserGuard implements IGuard {
  args: [String!]!
  fun: String!
  keys: [String!]! @deprecated(reason: "deprecated, use KeysetGuard.keys")
  predicate: String! @deprecated(reason: "deprecated, use KeysetGuard.predicate")
  raw: String!
}

"""DEPRECATED: a fallthrough IGuard type to cover non-KeysetGuard types."""
type RawGuard implements IGuard {
  keys: [String!]! @deprecated(reason: "deprecated, use KeysetGuard.keys")
  predicate: String! @deprecated(reason: "deprecated, use KeysetGuard.predicate")
  raw: String!
}

type QueryTokensConnection {
  edges: [QueryTokensEdge!]!
  pageInfo: PageInfo!
}

type QueryTokensEdge {
  cursor: String!
  node: Token!
}

type Token {
  id: ID!
  name: String!
  chainId: String!
  address: String
}

"""A liquidity pool for a token pair."""
type Pool implements Node {
  id: ID!
  address: String!
  token0: Token!
  token1: Token!
  reserve0: String!
  reserve1: String!
  totalSupply: String!
  key: String!
  tvlUsd: Float!
  tvlChange24h: Float!
  volume24hUsd: Float!
  volumeChange24h: Float!
  volume7dUsd: Float!
  fees24hUsd: Float!
  feesChange24h: Float!
  transactionCount24h: Int!
  transactionCountChange24h: Float!
  apr24h: Float!
  createdAt: DateTime!
  updatedAt: DateTime!

  """Get chart data for this pool"""
  charts(timeFrame: TimeFrame!): PoolCharts!

  """Get transactions for this pool"""
  transactions(
    """Type of transactions to fetch"""
    type: PoolTransactionType

    """Number of items to fetch"""
    first: Int

    """Cursor for pagination"""
    after: String

    """Number of items to fetch"""
    last: Int

    """Cursor for pagination"""
    before: String
  ): PoolTransactionsConnection
}

type QueryPoolsConnection {
  edges: [QueryPoolsConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type QueryPoolsConnectionEdge {
  cursor: String!
  node: Pool!
}

"""Sort options for pools"""
enum PoolOrderBy {
  TVL_USD_ASC
  TVL_USD_DESC
  VOLUME_24H_ASC
  VOLUME_24H_DESC
  VOLUME_7D_ASC
  VOLUME_7D_DESC
  APR_24H_ASC
  APR_24H_DESC
  TRANSACTION_COUNT_24H_ASC
  TRANSACTION_COUNT_24H_DESC
}

"""Transaction type for pool events"""
enum PoolTransactionType {
  """Swap transaction"""
  SWAP

  """Add liquidity transaction"""
  ADD_LIQUIDITY

  """Remove liquidity transaction"""
  REMOVE_LIQUIDITY
}

"""A swap transaction in a pool"""
type PoolTransaction {
  """Unique identifier"""
  id: ID!

  """User who made the swap"""
  maker: String!

  """Amount of token0 swapped in"""
  amount0In: Decimal!

  """Amount of token1 swapped in"""
  amount1In: Decimal!

  """Amount of token0 swapped out"""
  amount0Out: Decimal!

  """Amount of token1 swapped out"""
  amount1Out: Decimal!

  """Total amount in USD"""
  amountUsd: Decimal!

  """Transaction timestamp"""
  timestamp: DateTime!

  """ID of the transaction"""
  transactionId: Int

  """Request key of the transaction"""
  requestkey: String!

  """The type of transaction"""
  transactionType: PoolTransactionType!
}

"""Connection type for pool transactions"""
type PoolTransactionsConnection {
  """List of transaction edges"""
  edges: [PoolTransactionEdge!]

  """Pagination information"""
  pageInfo: PageInfo

  """Total number of transactions"""
  totalCount: Int
}

"""Edge type for pool transactions"""
type PoolTransactionEdge {
  """Cursor for pagination"""
  cursor: String!

  """The transaction node"""
  node: PoolTransaction!
}

type LiquidityBalance {
  id: Int!
  pairId: String!
  liquidity: String!
  walletAddress: String!
  pair: Pool!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""Sort options for liquidity positions"""
enum LiquidityPositionOrderBy {
  VALUE_USD_ASC
  VALUE_USD_DESC
  LIQUIDITY_ASC
  LIQUIDITY_DESC
  APR_ASC
  APR_DESC
}

"""A user's liquidity position in a pool"""
type LiquidityPosition {
  id: ID!
  pairId: String!
  liquidity: String!
  walletAddress: String!
  valueUsd: Decimal!
  apr24h: Decimal!
  pair: Pool!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LiquidityPositionsConnection {
  edges: [LiquidityPositionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type LiquidityPositionEdge {
  cursor: String!
  node: LiquidityPosition!
}

"""DEX metrics including TVL, volume, and pool count"""
type DexMetrics {
  """Total number of pools"""
  totalPools: Int!

  """Current total value locked in USD"""
  currentTvlUsd: Decimal!

  """Historical TVL data points"""
  tvlHistory: [ChartDataPoint!]!

  """Historical volume data points"""
  volumeHistory: [ChartDataPoint!]!

  """Total volume in USD for the specified period"""
  totalVolumeUsd: Decimal!
}

type TokenPrice {
  id: ID!
  token: Token!
  priceInKda: Decimal!
  priceInUsd: Decimal!
  protocolAddress: String!
  updatedAt: DateTime!
}