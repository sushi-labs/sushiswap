"""
Indicates exactly one field must be supplied and this field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

type Bucket {
  id: ID!
  date: Int!
  volumeUSD: Float!
  volumeUSDUntracked: Float!
  liquidityUSD: Float!
  feesUSD: Float!
  txCount: Int!
}

type SushiDayBuckets {
  v2: [Bucket!]!
  v3: [Bucket!]!
  blade: [Bucket!]
}

type Query {
  sushiDayBuckets(chainId: SushiSwapChainId!): SushiDayBuckets!
  bladePools(chainId: BladeChainId!): [BladePool!]!
  bladePool(address: Bytes!, chainId: BladeChainId!): BladePool!
  bladePoolPairsChart(address: Bytes!, chainId: BladeChainId!, duration: BladePoolPairsChartDuration!): [BladePoolPairStats!]!
  bladePoolTxSourcesChart(address: Bytes!, chainId: BladeChainId!, duration: BladePoolPairsChartDuration!): [BladePoolTxSourcesStats!]!
  bladePoolBuckets(address: Bytes!, chainId: BladeChainId!): PoolBuckets!
  bladePositions(user: Bytes!, chainId: BladeChainId!): [BladePosition!]!
  bladeMints(address: Bytes!, chainId: BladeChainId!, user: Bytes): [BladeMint!]!
  bladeBurns(address: Bytes!, chainId: BladeChainId!, user: Bytes): [BladeBurn!]!
  bladeSwaps(address: Bytes!, chainId: BladeChainId!, user: Bytes): [BladeSwap!]!
  exploreTokens(chainId: SushiSwapChainId!): [ExploreToken!]!
  exploreTokenChart(chainId: SushiSwapChainId!, address: Bytes!, duration: ExploreTokenChartDuration!): [OHLC!]!
  exploreTokenChartV2(chainId: SushiSwapChainId!, address: Bytes!, interval: ExploreTokenChartInterval!, from: Int!, to: Int!): [OHLC!]!
  exploreTokenInfo(chainId: SushiSwapChainId!, address: Bytes!): ExploreTokenInfo
  exploreTokenPools(chainId: PoolChainId!, address: Bytes!): Pools!
  pools(chainId: PoolChainId!, page: Int = 1, search: [String], protocols: [Protocol], onlyIncentivized: Boolean = false, orderBy: PoolsOrderBy = liquidityUSD, orderDirection: OrderDirection = desc): Pools!
  poolAddresses(chainId: PoolChainId!, protocols: [Protocol]): [Bytes!]!
  topPools(chainId: ChainId!): [TopPool!]!
  v2Pool(address: Bytes!, chainId: SushiSwapV2ChainId!): V2Pool!
  v3Pool(address: Bytes!, chainId: SushiSwapV3ChainId!): V3Pool!
  v2PoolBuckets(address: Bytes!, chainId: SushiSwapV2ChainId!): PoolBuckets!
  v3PoolBuckets(address: Bytes!, chainId: SushiSwapV3ChainId!): PoolBuckets!
  multiChainPools(chainIds: [PoolChainId!]!, page: Int = 1, search: [String], protocols: [Protocol], onlyIncentivized: Boolean = false, orderBy: PoolsOrderBy = liquidityUSD, orderDirection: OrderDirection = desc, minTvl: Float, maxTvl: Float): Pools!
  v3PoolsByTokens(token0: Bytes!, token1: Bytes!, chainId: SushiSwapV3ChainId!): [V3BasePool!]!
  v3Pools(chainId: SushiSwapV3ChainId!): [V3BasePool!]!
  trendingPools: [TrendingPool!]!
  explorePoolStatistics: ExplorePoolStatistics!
  portfolioWallet(id: ID!): PortfolioWallet!
  portfolioLiquidityPositions(id: ID!): PortfolioPositions!
  portfolioClaimables(id: ID!): PortfolioClaimables!
  portfolioHistory(id: ID!): [PortfolioTransaction!]!
  portfolioV2LiquidityPositions(user: Bytes!, chainIds: [PoolChainId!]!, protocols: [PortfolioV2Protocol!]!, orderBy: PortfolioV2LiquidityPositionOrderBy = SIZE, orderDirection: OrderDirection = desc): PortfolioV2LiquidityPositions!
  portfolioV2Tokens(address: Bytes!, chainIds: [PoolChainId!]!): PortfolioTokensResponse!
  portfolioV2Chart(address: Bytes!, chainIds: [PoolChainId!]!, tokenFilter: PortfolioChartTokenFilter, range: PortfolioChartRange = THIRTY_DAYS): PortfolioChartResponse!
  portfolioV2PnL(address: Bytes!, chainId: PnLHistoryChainId!, assets: [Bytes!]!): PortfolioPnLResponse!
  featuresByChainId(chainId: ChainId!): [ChainIdFeature!]!
  chainIdsByFeature(feature: ChainIdFeature!): [ChainId!]!
  sushiBarStats: SushiBarStats!
  sushiBarHistory: SushiBarHistory!
  tokenList(chainId: TokenListChainId!, first: Int = 50, skip: Int, search: String, customTokens: [Bytes!]): [TokenListEntry!]!
  tokenListBalances(chainId: TokenListChainId!, account: Bytes!, includeNative: Boolean = true, customTokens: [Bytes!]): [TokenListEntryWithBalance!]!
  tokenListV2(chainIds: [TokenListV2ChainId!]!, first: Int = 50, skip: Int, search: String, customTokens: [MultiChainTokenInput!]): [TokenListEntryV2!]!
  tokenListBalancesV2(chainIds: [TokenListV2ChainId!]!, account: Bytes!, includeNative: Boolean = true, customTokens: [MultiChainTokenInput!]): TokenListBalancesV2Response!
  recentSwaps(account: Bytes!, chainIds: [TokenListV2ChainId!]!): [SwapPnL!]!
  quickSelectTokens(account: Bytes!, chainIds: [TokenListV2ChainId!]!): [QuickSelectToken!]!
  searchTokens(account: Bytes!, first: Int = 50, skip: Int, chainIds: [TokenListV2ChainId!]!, search: String, tokens: [MultiChainTokenInput!]): [TokenListEntryWithBalanceV2!]!
  tokenAnalysis(chainId: Int!, address: Bytes!): TokenAnalysis!
  pendingTokens: [PendingToken!]!
  approvedCommunityTokens: [ApprovedToken!]!
  trendingTokens(chainId: TrendingTokensChainId!): [TrendingToken!]!
  trendingTokensV2(chainIds: [TrendingTokensChainId!]!): [TrendingTokenV2!]!
  v2LiquidityPositions(user: Bytes!, chainId: SushiSwapV2ChainId!): [V2LiquidityPosition!]!
  v2Swaps(address: Bytes!, chainId: SushiSwapV2ChainId!, user: Bytes): [V2Swap!]!
  v2Burns(address: Bytes!, chainId: SushiSwapV2ChainId!, user: Bytes): [V2Burn!]!
  v2Mints(address: Bytes!, chainId: SushiSwapV2ChainId!, user: Bytes): [V2Mint!]!
  v2Transactions(address: Bytes!, chainId: SushiSwapV2ChainId!, user: Bytes): [V2Transaction!]!
  v3Swaps(address: Bytes!, chainId: SushiSwapV3ChainId!, user: Bytes): [V3Swap!]!
  v3Burns(address: Bytes!, chainId: SushiSwapV3ChainId!, user: Bytes): [V3Burn!]!
  v3Mints(address: Bytes!, chainId: SushiSwapV3ChainId!, user: Bytes): [V3Mint!]!
  v3Collects(address: Bytes!, chainId: SushiSwapV3ChainId!, user: Bytes): [V3Collect!]!
  v3Transactions(address: Bytes!, chainId: SushiSwapV3ChainId!, user: Bytes): [V3Transaction!]!
}

type BladePoolToken {
  token: Token!
  liquidity: Float!
  liquidityUSD: Float!
  weight: Float!
  targetWeight: Float
}

enum BladePoolAbi {
  ClipperPackedVerifiedExchange
  ClipperApproximateCaravelExchange
  ClipperVerifiedCaravelExchange
  ClipperCaravelExchange
  ClipperVerifiedExchange
  ClipperDirectExchangeV0
  ClipperDirectExchangeV1
  ClipperPackedExchange
  ClipperPackedOracleVerifiedExchange
  BladeVerifiedExchange
  BladeApproximateCaravelExchange
}

enum BladePoolVaultType {
  PROTOCOL_DEPOSIT
  FEE_SPLIT
  FARM
}

enum BladePoolFarmVaultAbi {
  LinearVestingVault
  SplitFeeFarm
}

type BladePoolVault {
  id: ID!
  address: Bytes!
  type: BladePoolVaultType!
  name: String
  farm: BladePoolFarmVault
  protocolDeposit: BladePoolProtocolDepositVault
  createdAt: Int!
}

type BladePoolFarmVault {
  rewardToken: Token!
  farmingHelper: Bytes!
  abi: BladePoolFarmVaultAbi!
}

type BladePoolProtocolDepositVault {
  transferHelper: Bytes!
}

type BladePool {
  id: ID!
  address: Bytes!
  chainId: Int!
  abi: BladePoolAbi!
  tokens: [BladePoolToken!]!
  liquidity: BigInt!
  liquidityUSD: Float!
  liquidityUSDChange1d: Float!
  volumeUSD: Float!
  volumeUSD1d: Float!
  volumeUSDChange1d: Float!
  volumeUSD1w: Float!
  volumeUSDChange1w: Float!
  feeUSD1d: Float!
  feeApr1d: Float!
  totalApr1d: Float!
  incentiveApr: Float!
  isIncentivized: Boolean!
  wasIncentivized: Boolean!
  incentives: [Incentive!]!
  isDeprecated: Boolean!
  isSingleAssetWithdrawEnabled: Boolean!
  newPoolAddress: Bytes
  lpTransfersFrom: [BladePoolLpTransfer!]!
  vaults: [BladePoolVault!]!
}

type BladePoolLpTransfer {
  id: ID!
  oldPoolAddress: Bytes!
  newPoolAddress: Bytes!
}

type BladePoolPairStats {
  token0: Token!
  token1: Token!
  volumeUSD: Float!
  txCount: Int!
}

enum BladePoolPairsChartDuration {
  DAY
  WEEK
  MONTH
  ALL
}

type BladePoolTxSourcesStats {
  source: String!
  volumeUSD: Float!
  txCount: Int!
}

enum BladePoolTxSourcesChartDuration {
  DAY
  WEEK
  MONTH
  ALL
}

type BladePosition {
  user: Bytes!
  stakedBalance: BigInt!
  unstakedBalance: BigInt!
  vestingBalance: BigInt!
  pool: BladePool!
}

type BladeBurn {
  txHash: Bytes!
  user: Bytes!
  timestamp: Int!
  amountUSD: Float!
}

type BladeMint {
  txHash: Bytes!
  user: Bytes!
  timestamp: Int!
  amountUSD: Float!
}

type BladeSwap {
  txHash: Bytes!
  user: Bytes!
  timestamp: Int!
  amountInUSD: Float!
  amountInRaw: BigInt!
  inToken: Token!
  amountOutUSD: Float!
  amountOutRaw: BigInt!
  outToken: Token!
  feeUSD: Float!
}

type ExploreToken {
  address: Bytes!
  chainId: SushiSwapChainId!
  symbol: String!
  name: String!
  decimals: Int!
  logoUrl: String
  price: Float!
  priceChangePercentage1d: Float!
  marketCapUSD: Float!
  sparkline7d: [Float!]!
}

type ExploreTokenInfo {
  categories: [String!]!
  description: String
  website: String
  twitter: String
  telegram: String
  discord: String
}

enum ExploreTokenChartDuration {
  DAY
  WEEK
  MONTH
  YEAR
}

enum ExploreTokenChartInterval {
  DAILY
  HOURLY
}

type OHLC {
  timestamp: Int!
  open: Float!
  high: Float!
  low: Float!
  close: Float!
}

enum PoolsOrderBy {
  liquidityUSD
  volumeUSD1d
  volumeUSD1w
  txCount1d
  totalApr1d
  totalApr1w
  volumeTvlRatio
}

enum OrderDirection {
  asc
  desc
}

enum Protocol {
  SUSHISWAP_V2
  SUSHISWAP_V3
}

type Token {
  id: ID!
  chainId: Int!
  address: String!
  name: String!
  symbol: String!
  decimals: Int!
}

type V2Pool {
  id: ID!
  chainId: SushiSwapV2ChainId!
  name: String!
  address: Bytes!
  createdAt: String!
  swapFee: Float!
  protocol: String!
  token0: Token!
  token1: Token!
  source: DataSource!
  reserve0: String!
  reserve1: String!
  liquidity: String!
  volumeUSD: Float!
  liquidityUSD: Float!
  token0Price: Float!
  token1Price: Float!
  volumeUSD1d: Float!
  feeUSD1d: Float!
  txCount1d: Int!
  feeApr1d: Float!
  totalApr1d: Float!
  volumeUSD1dChange: Float!
  feeUSD1dChange: Float!
  txCount1dChange: Float!
  liquidityUSD1dChange: Float!
  incentiveApr: Float!
  isIncentivized: Boolean!
  wasIncentivized: Boolean!
  incentives: [Incentive!]!
}

type V3Pool {
  id: ID!
  chainId: SushiSwapV3ChainId!
  name: String!
  address: Bytes!
  createdAt: String!
  swapFee: Float!
  protocol: String!
  token0: Token!
  token1: Token!
  source: DataSource!
  reserve0: String!
  reserve1: String!
  liquidity: String!
  sqrtPrice: String!
  tick: String!
  observationIndex: String!
  feeGrowthGlobal0X128: String!
  feeGrowthGlobal1X128: String!
  volumeUSD: Float!
  liquidityUSD: Float!
  token0Price: Float!
  token1Price: Float!
  volumeUSD1d: Float!
  feeUSD1d: Float!
  txCount1d: Int!
  feeApr1d: Float!
  totalApr1d: Float!
  volumeUSD1dChange: Float!
  feeUSD1dChange: Float!
  txCount1dChange: Float!
  liquidityUSD1dChange: Float!
  incentiveApr: Float!
  isIncentivized: Boolean!
  wasIncentivized: Boolean!
  incentives: [Incentive!]!
}

type V3BasePool {
  id: ID!
  address: Bytes!
  chainId: SushiSwapV3ChainId!
  protocol: String!
  isProtocolFeeEnabled: Boolean!
  name: String!
  createdAt: String!
  swapFee: Float!
  token0: Token!
  token1: Token!
  source: String!
  reserve0: String!
  reserve1: String!
  liquidity: String!
  token0Price: Float!
  token1Price: Float!
  sqrtPrice: String!
  tick: String!
  observationIndex: String!
  feeGrowthGlobal0X128: String!
  feeGrowthGlobal1X128: String!
  volumeUSD: Float!
  liquidityUSD: Float!
  feesUSD: Float!
  txCount: Int!
}

type Incentive {
  id: ID!
  chainId: SushiSwapChainId!
  chefType: String!
  apr: Float!
  rewardToken: Token!
  rewardPerDay: Float!
  poolAddress: Bytes!
  pid: Int!
  rewarderAddress: Bytes!
  rewarderType: String!
}

type PoolBucket {
  id: ID!
  date: Int!
  volumeUSD: Float!
  liquidityUSD: Float!
  txCount: Int!
  feesUSD: Float!
  token0Price: Float!
  token1Price: Float!
  apr: Float!
}

type TopPool {
  id: ID!
  chainId: ChainId!
  name: String!
  address: String!
  createdAt: String!
  swapFee: Float!
  protocol: String!
  token0Price: Float!
  token1Price: Float!
  token0Address: String!
  token1Address: String!
  token0PriceUSD: Float!
  token1PriceUSD: Float!
  liquidityUSD: Float!
  txCount1h: Int!
  txCount1d: Int!
  feeUSD1h: Float!
  feeUSD1d: Float!
  volumeUSD1h: Float!
  volumeUSD1d: Float!
  feeApr1d: Float!
  totalApr1d: Float!
  incentiveApr: Float!
  isIncentivized: Boolean!
  wasIncentivized: Boolean!
  source: String!
}

type Pool {
  id: ID!
  chainId: Int!
  name: String!
  address: String!
  swapFee: Float!
  protocol: String!
  token0Address: String!
  token1Address: String!
  liquidityUSD: Float!
  liquidityUSDChange1d: Float!
  volumeUSD1d: Float!
  volumeUSD1w: Float!
  volumeUSDChange1d: Float!
  volumeUSDChange1w: Float!
  txCount1d: Int!
  txCountChange1d: Float!
  feeUSD1d: Float!
  feeApr1d: Float!
  feeApr1w: Float!
  feeApr1wSparkLine: [Float!]!
  totalApr1d: Float!
  totalApr1w: Float!
  tvlVolumeRatio: Float!
  percentageOfLiquidityInPoolToken0: Float!
  percentageOfLiquidityInPoolToken1: Float!
  incentiveApr: Float!
  isIncentivized: Boolean!
  wasIncentivized: Boolean!
  incentives: [Incentive!]!
  source: String!
}

type TrendingPool {
  id: ID!
  chainId: Int!
  name: String!
  address: String!
  swapFee: Float!
  protocol: String!
  token0: Token!
  token1: Token!
  liquidityUSD: Float!
  volumeUSD1d: Float!
  volumeUSD1w: Float!
  totalApr1d: Float!
}

type PoolStatistics {
  liquidityUSD: Float!
  liquidityUSDChange1w: Float!
  volumeUSD1w: Float!
  volumeUSDChange1w: Float!
}

type ExplorePoolStatistics {
  v2: PoolStatistics!
  v3: PoolStatistics!
  all: PoolStatistics!
}

type Pools {
  data: [Pool!]!
  count: Int!
}

type PoolBuckets {
  hourBuckets: [PoolBucket!]!
  dayBuckets: [PoolBucket!]!
}

type SimpleToken {
  id: String!
  chain: String!
  chainId: Int!
  name: String!
  symbol: String
  decimals: Int!
  logoUrl: String
  protocolId: String!
  price: Float!
  isVerified: Boolean!
  isCore: Boolean!
  isWallet: Boolean!
  timeAt: Int
  amount: Float!
  amountUSD: Float!
}

type PortfolioToken {
  id: String!
  chain: String!
  chainId: Int!
  name: String!
  symbol: String
  decimals: Int!
  logoUrl: String
  protocolId: String!
  price: Float!
  price24hChange: Float
  isVerified: Boolean!
  isCore: Boolean!
  isWallet: Boolean!
  timeAt: Int
  amount: Float!
  rawAmount: Float!
  amountUSD: Float!
}

type V2PortfolioPosition {
  id: String!
  chainId: Int!
  chain: String!
  protocol: String!
  protocolId: String!
  protocolLogoUrl: String!
  address: String!
  name: String!
  swapFee: Float!
  token0: SimpleToken!
  token1: SimpleToken!
  amountUSD: Float!
  updatedAt: Int
}

enum RangeStatus {
  IN_RANGE
  OUT_OF_RANGE
  UNKNOWN
}

type V3PortfolioPosition {
  id: String!
  chainId: Int!
  chain: String!
  protocol: String!
  protocolId: String!
  protocolLogoUrl: String!
  address: String!
  name: String!
  swapFee: Float!
  positionId: Int!
  range: RangeStatus!
  token0: SimpleToken!
  token1: SimpleToken!
  fees: [SimpleToken]!
  amountUSD: Float!
  updatedAt: Int
}

type FuroPosition {
  id: String!
  chainId: Int!
  chain: String!
  protocol: String!
  protocolId: String!
  protocolLogoUrl: String!
  address: String!
  name: String!
  positionId: Int!
  token: SimpleToken!
  updatedAt: Int
}

type PortfolioPositions {
  totalUSD: Float!
  v2Positions: [V2PortfolioPosition]!
  v3Positions: [V3PortfolioPosition]!
}

type PortfolioClaimables {
  totalUSD: Float!
  v2PositionClaimables: [V2PoolClaim]!
  v3PositionClaimables: [V3PoolClaim]!
  furoClaimables: [FuroClaim]!
}

type V2PoolClaim {
  position: V2PortfolioPosition!
  token: SimpleToken!
}

type V3PoolClaim {
  position: V3PortfolioPosition!
  token: SimpleToken!
}

type FuroClaim {
  position: FuroPosition!
  token: SimpleToken!
}

type PortfolioWallet {
  totalUSD: Float!
  amountUSD24Change: Float!
  percentageChange24h: Float!
  tokens: [PortfolioToken]!
}

enum TransactionTokenType {
  ERC20
  NFT
}

type PortfolioTransactionToken {
  id: String!
  name: String!
  symbol: String!
  type: TransactionTokenType!
  logoUrl: String
  amount: Float!
  isVerified: Boolean!
  isCore: Boolean!
  isSuspicious: Boolean!
  isScam: Boolean!
}

enum PortfolioTransactionCategory {
  SEND
  RECEIVE
  APPROVE
  OTHER
}

type PortfolioTransaction {
  chainId: Int
  chain: String!
  txHash: String!
  timestamp: Int!
  functionName: String!
  projectName: String
  protocolLogo: String
  category: PortfolioTransactionCategory!
  receives: [PortfolioTransactionToken]!
  sends: [PortfolioTransactionToken]!
  approve: PortfolioTransactionToken
  gasFeeNative: Float!
  gasFeeUSD: Float!
}

enum LPSource {
  LAMBDA
  ZERION
  WEB3
  SUBGRAPH
  OTHER
}

enum PortfolioV2Protocol {
  V2
  V3
  V4
  BLADE
}

enum PortfolioV2LiquidityPositionOrderBy {
  SIZE
  UNCOLLECTED_FEES
  REWARDS
  APR
}

enum PortfolioTokensOrderBy {
  VALUE
  PRICE
  AMOUNT
}

enum PortfolioChartRange {
  ONE_DAY
  SEVEN_DAYS
  THIRTY_DAYS
  ALL
}

input PortfolioChartTokenFilter {
  chainId: PnLHistoryChainId!
  address: Bytes!
}

type ClaimableRewards {
  token: Token!
  amount: Float!
  amountUSD: Float!
}

type PortfolioV2Position {
  token0: Token!
  token1: Token!
  amountUSD: Float!
  amount0: String!
  amount1: String!
  source: LPSource!
}

type PortfolioV3Position {
  token0: Token!
  token1: Token!
  tokenId: Int!
  amountUSD: Float!
  amount0: String!
  amount1: String!
  unclaimedFees0: String!
  unclaimedFees1: String!
  unclaimedFeesUSD: Float!
  source: LPSource!
}

type PortfolioV2Data {
  pool: Pool!
  position: PortfolioV2Position!
}

type PortfolioV3Data {
  pool: Pool!
  position: PortfolioV3Position!
}

type PortfolioChainAmount {
  chainId: PoolChainId!
  amountUSD: Float!
}

type PortfolioV2LiquidityPositions {
  totalLPPositionsUSD: Float!
  totalClaimableRewardsUSD: Float!
  totalClaimableRewards: [ClaimableRewards!]!
  chains: [PortfolioChainAmount!]!
  v2: [PortfolioV2Data!]!
  v3: [PortfolioV3Data!]!
}

type PortfolioTokenChainBalance {
  chainId: PoolChainId!
  address: Bytes!
  decimals: Int!
  amount: String!
  amountUSD: Float!
}

type PortfolioTokenBridge {
  chainId: PoolChainId!
  address: Bytes!
  decimals: Int!
}

type PortfolioTokenBalance {
  token: Token!
  amount: String!
  amountUSD: Float!
  priceUSD: Float!
  percentageOfPortfolio: Float!
  chains: [PortfolioTokenChainBalance!]!
  bridges: [PortfolioTokenBridge!]!
}

type PortfolioTokensResponse {
  tokens: [PortfolioTokenBalance!]!
  totalValueUSD: Float!
}

type PortfolioChartDataPoint {
  timestamp: Int!
  valueUSD: Float!
}

type PortfolioChartResponse {
  dataPoints: [PortfolioChartDataPoint!]!
  supportedChains: [PoolChainId!]!
  usdChange: Float!
  percentChange: Float!
  totalValueUSD: Float!
}

type PortfolioPnLDataPoint {
  timestamp: Int!
  balanceUSD: Float!
}

type PortfolioAssetPnL {
  address: Bytes!
  uPnL: Float!
  sparklineBalanceUSD30d: [PortfolioPnLDataPoint!]!
}

type PortfolioPnLResponse {
  assets: [PortfolioAssetPnL!]!
}

"""
A field whose value is a byte string: https://en.wikipedia.org/wiki/Byte_string
"""
scalar Bytes

"""A field whose value is a bigint"""
scalar BigInt

"""A field whose value is a chain ID"""
scalar ChainId

"""A field whose value is a sushi swap chain ID"""
scalar SushiSwapChainId

"""A field whose value is a sushi swap v2 chain ID"""
scalar SushiSwapV2ChainId

"""A field whose value is a sushi swap v3 chain ID"""
scalar SushiSwapV3ChainId

"""A field whose value is a pool chain ID"""
scalar PoolChainId

"""A field whose value is a blade chain ID"""
scalar BladeChainId

"""A field whose value is a PnL history chain ID"""
scalar PnLHistoryChainId

"""A field whose value is a token list chain ID"""
scalar TokenListChainId

"""A field whose value is a trending token list chain ID"""
scalar TrendingTokensChainId

"""A field whose value is a token list v2 chain ID"""
scalar TokenListV2ChainId

enum ChainIdFeature {
  SushiSwapChainId
  SushiSwapV2ChainId
  SushiSwapV3ChainId
  PoolChainId
  BladeChainId
  PnLHistoryChainId
  TokenListChainId
  TrendingTokensChainId
  TokenListV2ChainId
}

enum DataSource {
  SUBGRAPH
  CACHE
  STALE_CACHE
  WEB3
  COINGECKO
}

type SushiBarStats {
  id: String!
  sushiXsushiRatio: Float!
  xSushiSushiRatio: Float!
  sushiSupply: Float!
  xSushiSupply: Float!
  apr1m: Float!
  apr3m: Float!
  apr6m: Float!
  apr12m: Float!
}

type SushiBarBucket {
  id: String!
  date: Int!
  xSushiSupply: Float!
  apr1m: Float!
  apr3m: Float!
  apr6m: Float!
  apr12m: Float!
}

type SushiBarHistory {
  hourSnapshots: [SushiBarBucket!]!
  daySnapshots: [SushiBarBucket!]!
  weekSnapshots: [SushiBarBucket!]!
}

type TokenListEntry {
  address: Bytes!
  symbol: String!
  name: String!
  decimals: Int!
  approved: Boolean!
}

type TokenListEntryWithBalance {
  address: Bytes!
  symbol: String!
  name: String!
  decimals: Int!
  balance: BigInt!
  approved: Boolean!
}

type TokenBridgeInfo {
  chainId: TokenListV2ChainId!
  decimals: Int!
  address: Bytes!
}

type TokenListEntryV2 {
  chainId: TokenListV2ChainId!
  address: Bytes!
  symbol: String!
  name: String!
  decimals: Int!
  approved: Boolean!
  priceUSD: Float
}

type TokenListEntryWithBalanceV2 {
  address: Bytes!
  symbol: String!
  name: String!
  chainId: TokenListV2ChainId!
  decimals: Int!
  balance: BigInt!
  balanceUSD: Float!
  priceUSD: Float!
  priceChange1d: Float!
  approved: Boolean!
  bridgeInfo: [TokenBridgeInfo!]
}

type TokenListBalancesV2Response {
  balances: [TokenListEntryWithBalanceV2!]!
  apiResponseTime: Float!
}

type SwapPnL {
  tokenIn: TokenListEntryV2!
  tokenOut: TokenListEntryV2!
  amountIn: Float!
  amountOut: Float!
  amountInUSD: Float!
  amountOutUSD: Float!
  time: Int!
  unrealizedPnl: Float!
  realizedPnl: Float!
  deltaRealizedPnl: Float!
  totalPnl: Float!
  protocol: String!
}

type QuickSelectToken {
  chainId: TokenListV2ChainId!
  address: Bytes!
  symbol: String!
  name: String!
  decimals: Int!
  bridgeInfo: [TokenBridgeInfo!]
}

input MultiChainTokenInput {
  chainId: TokenListV2ChainId!
  address: Bytes!
}

type TokenValidationMetrics {
  age: Int!
  volumeUSD24h: Float!
  marketcapUSD: Float!
  holders: Int!
}

type TokenSubmissionRequirements {
  minimumAge: Int!
  minimumVolumeUSD24h: Float!
  minimumMarketcapUSD: Float!
  minimumHolders: Int!
}

type TokenAnalysis {
  token: Token!
  isExisting: Boolean!
  isPending: Boolean!
  isPassingRequirements: Boolean!
  reasoning: [String!]!
  metrics: TokenValidationMetrics!
  requirements: TokenSubmissionRequirements!
  security: TokenSecurity
}

type PendingToken {
  token: Token!
  logoUrl: String!
  tweetUrl: String
  reasoning: [String!]!
  createdAt: Int!
  metrics: TokenValidationMetrics!
  security: TokenSecurity
}

type TokenSecurity {
  isOpenSource: Boolean!
  isProxy: Boolean!
  isMintable: Boolean!
  canTakeBackOwnership: Boolean!
  ownerChangeBalance: Boolean!
  hiddenOwner: Boolean!
  selfDestruct: Boolean!
  externalCall: Boolean!
  gasAbuse: Boolean!
  buyTax: Boolean
  sellTax: Boolean
  cannotBuy: Boolean!
  cannotSellAll: Boolean!
  slippageModifiable: Boolean!
  isHoneypot: Boolean!
  transferPausable: Boolean!
  isBlacklisted: Boolean!
  isWhitelisted: Boolean!
  isAntiWhale: Boolean!
  tradingCooldown: Boolean!
  isTrueToken: Boolean!
  isAirdropScam: Boolean!
  trustList: Boolean!
  isBuyable: Boolean
  isFakeToken: Boolean
  isSellLimit: Boolean
  holderCount: Float!
}

type ApprovedToken {
  address: Bytes!
  chainId: ChainId!
  symbol: String!
  name: String!
  decimals: Int!
  approved: Boolean!
  logoUrl: String
}

type TrendingToken {
  address: Bytes!
  symbol: String!
  name: String!
  decimals: Int!
  approved: Boolean!
}

type TrendingTokenV2 {
  address: Bytes!
  chainId: TrendingTokensChainId!
  symbol: String!
  name: String!
  decimals: Int!
  approved: Boolean!
  priceUSD: Float
}

type V2LiquidityPosition {
  user: Bytes!
  stakedBalance: String!
  unstakedBalance: String!
  pool: V2Pool!
}

type V2Burn {
  id: ID!
  logIndex: String
  amountUSD: String
  amount1: String
  amount0: String
  liquidity: String!
  sender: ID
  transaction: V2Transaction!
}

type V2Mint {
  id: ID!
  logIndex: String
  amountUSD: String
  amount1: String
  amount0: String
  liquidity: String!
  sender: ID
  transaction: V2Transaction!
}

type V2Swap {
  id: ID!
  logIndex: String
  amountUSD: String!
  feesUSD: Float!
  amount1Out: String!
  amount0Out: String!
  amount1In: String!
  amount0In: String!
  to: ID!
  sender: ID!
  transaction: V2Transaction!
}

type V2Transaction {
  swaps: [V2Swap]
  burns: [V2Burn]
  mints: [V2Mint]
  createdAtBlock: String!
  createdAtTimestamp: String!
  id: ID!
}

type V3Burn {
  id: ID!
  logIndex: String
  amountUSD: String
  amount1: String!
  amount0: String!
  amount: String!
  origin: ID!
  owner: ID
  transaction: V3Transaction!
}

type V3Collect {
  id: ID!
  logIndex: String
  amountUSD: String
  amount1: String!
  amount0: String!
  owner: ID
  transaction: V3Transaction!
}

type V3Mint {
  id: ID!
  logIndex: String
  amountUSD: String
  amount1: String!
  amount0: String!
  amount: String!
  origin: ID!
  sender: ID
  owner: ID!
  transaction: V3Transaction!
}

type V3Swap {
  id: ID!
  logIndex: String
  amountUSD: String!
  feesUSD: Float!
  amount1: String!
  amount0: String!
  origin: ID!
  recipient: ID!
  sender: ID!
  transaction: V3Transaction!
}

type V3Transaction {
  id: ID!
  blockNumber: String!
  timestamp: String!
  collects: [V3Collect]
  swaps: [V3Swap]
  burns: [V3Burn]
  mints: [V3Mint]
}