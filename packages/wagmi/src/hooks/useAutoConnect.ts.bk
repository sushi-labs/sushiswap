import { useEffect, useMemo, useState } from 'react'
import { useAccount, useConfig, useConnect } from 'wagmi'

const AUTOCONNECTED_CONNECTOR_IDS = ['safe']

export const useAutoConnect = () => {
  const client = useConfig()
  const { isConnected } = useAccount()
  const { connect, connectAsync, connectors } = useConnect({ onSuccess: () => setIsAutoConnecting(false) })
  const [isAutoConnecting, setIsAutoConnecting] = useState(false)

  useEffect(() => {
    if (isAutoConnecting) return
    if (isConnected) return

    setIsAutoConnecting(true)

    const ready = connectors.filter((c) => AUTOCONNECTED_CONNECTOR_IDS.includes(c.id)).some((c) => c.ready)
    if (ready) {
      AUTOCONNECTED_CONNECTOR_IDS.forEach((connectorId) => {
        const connector = connectors.find((c) => c.id === connectorId && c.ready)
        if (connector) {
          connect({ connector })
        }
      })
    } else {
      ;(async () => {
        const lastUsedConnector = client.storage?.getItem('wallet')

        const sorted = lastUsedConnector
          ? [...connectors].sort((x) => (x.id === lastUsedConnector ? -1 : 1))
          : connectors

        let triedOnce = false
        for (const connector of sorted) {
          if (!connector.ready || !connector.isAuthorized) continue
          const isAuthorized = await connector.isAuthorized()
          if (!isAuthorized) continue

          await connectAsync({ connector })
          triedOnce = true
          break
        }

        if (!triedOnce) {
          setIsAutoConnecting(false)
        }
      })()
    }
  }, [])

  return useMemo(() => ({ isAutoConnecting }), [isAutoConnecting])
}
