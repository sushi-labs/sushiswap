query Pairs($first: Int = 1000, $skip: Int = 0, $where: Pair_filter, $block: Block_height) {
  pairs(first: $first, skip: $skip, where: $where, block: $block) {
    id
    token0 {
      id
      name
      symbol
      decimals
    }
    token1 {
      id
      name
      symbol
      decimals
    }
    name
    type
    source
    swapFee
    twapEnabled
    reserve0
    reserve1
    liquidity
    token0Price
    token1Price
    liquidityUSD
    liquidityNative
    apr
    aprUpdatedAtTimestamp
    volumeUSD
    feesUSD
    volumeNative
    createdAtTimestamp
    createdAtBlock
  }

  bundle(id: 1, block: $block) {
    nativePrice
  }
}

query V3Pools($first: Int = 1000, $skip: Int = 0, $where: V3_Pool_filter, $block: V3_Block_height) {
  pools: V3_pools(first: $first, skip: $skip, where: $where, block: $block) {
    id
    token0 {
      id
      name
      symbol
      decimals
    }
    token1 {
      id
      name
      symbol
      decimals
    }
    # volumeToken0
    # volumeToken1
    liquidity
    volumeUSD
    untrackedVolumeUSD
    feesUSD
    feeTier
    token0Price
    token1Price
    # txCount
    collectedFeesToken0
    collectedFeesToken1
    collectedFeesUSD
    totalValueLockedToken0
    totalValueLockedToken1
    totalValueLockedETH
    totalValueLockedUSD
    totalValueLockedUSDUntracked
    liquidityProviderCount
    createdAtBlockNumber
  }
}

query PairsVolumeFee(
  $first: Int = 1000
  $skip: Int = 0
  $where: Pair_filter
  $block: Block_height
  # $orderBy: Pair_orderBy = volumeUSD
  # $orderDirection: OrderDirection = desc
) {
  pairs(first: $first, skip: $skip, where: $where, block: $block,
  #  orderBy: $orderBy, orderDirection: $orderDirection
   ) {
    id
    volumeUSD
    feesUSD
  }
}

query V3PoolsVolumeFee(
  $first: Int = 1000
  $skip: Int = 0
  $where: V3_Pool_filter
  $block: V3_Block_height
  # $orderBy: Pool_orderBy = volumeUSD
  # $orderDirection: OrderDirection = desc
) {
  pools: V3_pools(first: $first, skip: $skip, where: $where, block: $block,
  #  orderBy: $orderBy, orderDirection: $orderDirection
   ) {
    id
    volumeUSD
    feesUSD
  }
}

query Tokens($first: Int = 1000, $skip: Int = 0, $where: Token_filter, $block: Block_height) {
  tokens(first: $first, skip: $skip, where: $where, block: $block) {
    id
    symbol
    name
    decimals
    liquidity

    price {
      derivedNative
    }
  }

  bundle(id: 1, block: $block) {
    nativePrice
  }
}

query MasterChefV2Rewarders(
  $first: Int = 1000
  $skip: Int = 0
  $where: MasterChef_MasterChefV2Rewarder_filter
  $block: MasterChef_Block_height
) {
  rewarders: MasterChef_masterChefV2Rewarders(first: $first, skip: $skip, where: $where, block: $block) {
    id
    rewardToken
    rewardPerSecond
  }
}

query MiniChefRewarders(
  $first: Int = 1000
  $skip: Int = 0
  $where: MiniChef_Rewarder_filter
  $block: MiniChef_Block_height
) {
  rewarders: MiniChef_rewarders(first: $first, skip: $skip, where: $where, block: $block) {
    id
    rewardToken
    rewardPerSecond
  }
}

query LatestBlock {
  blocks(first: 1, orderBy: number, orderDirection: desc) {
    id
    number
    timestamp
  }
}

query Block($id: ID!) {
  block(id: $id) {
    id
    number
    timestamp
  }
}

query Blocks(
  $first: Int = 1
  $skip: Int = 0
  $where: Block_filter
  $orderBy: Block_orderBy = timestamp
  $orderDirection: OrderDirection = desc
) {
  blocks(first: $first, skip: $skip, where: $where, orderBy: $orderBy, orderDirection: $orderDirection) {
    id
    number
    timestamp
  }
}

query BlocksByChainIds(
  $first: Int
  $skip: Int
  $where: Block_filter
  $orderBy: Block_orderBy = timestamp
  $orderDirection: OrderDirection = desc
  $chainIds: [Int!]!
) {
  blocks: blocksByChainIds(
    first: $first
    skip: $skip
    where: $where
    orderBy: $orderBy
    orderDirection: $orderDirection
    chainIds: $chainIds
  ) {
    id
    chainId
    number
    timestamp
  }
}

query OneHourBlocks($chainIds: [Int!]!) {
  oneHourBlocks(chainIds: $chainIds) {
    id
    chainId
    number
    timestamp
  }
}

query TwoHourBlocks($chainIds: [Int!]!) {
  twoHourBlocks(chainIds: $chainIds) {
    id
    chainId
    number
    timestamp
  }
}

query OneDayBlocks($chainIds: [Int!]!) {
  oneDayBlocks(chainIds: $chainIds) {
    id
    chainId
    number
    timestamp
  }
}

query TwoDayBlocks($chainIds: [Int!]!) {
  twoDayBlocks(chainIds: $chainIds) {
    id
    chainId
    number
    timestamp
  }
}

query OneWeekBlocks($chainIds: [Int!]!) {
  oneWeekBlocks(chainIds: $chainIds) {
    id
    chainId
    number
    timestamp
  }
}

query TwoWeekBlocks($chainIds: [Int!]!) {
  twoWeekBlocks(chainIds: $chainIds) {
    id
    chainId
    number
    timestamp
  }
}

query OneMonthBlocks($chainIds: [Int!]!) {
  oneMonthBlocks(chainIds: $chainIds) {
    id
    chainId
    number
    timestamp
  }
}

query TwoMonthBlocks($chainIds: [Int!]!) {
  twoMonthBlocks(chainIds: $chainIds) {
    id
    chainId
    number
    timestamp
  }
}

query CustomBlocks($timestamp: Int!, $chainIds: [Int!]!) {
  customBlocks(timestamp: $timestamp, chainIds: $chainIds) {
    id
    chainId
    number
    timestamp
  }
}

query CurrentBlock($first: Int = 1000, $skip: Int = 0) {
  _meta {
    block {
      number
    }
  }
}

query SteerVaults($first: Int = 1000, $skip: Int = 0) {
  vaults: Steer_vaults(first: $first, skip: $skip) {
    id
    feeTier
    reserve0: totalAmount0
    reserve1: totalAmount1
    pool
    state
    payloadIpfs
    strategyToken {
      id
      executionBundle
      name # "Elastic Expansion Strategy"

      creator {
        id
      }
      admin
    #   # creator: {
    #   #     id
    #   # }
    }
    positions(first: 1000) {
      lowerTick
      upperTick
    }
    createdAt
    annualPercentageYield
    annualPercentageDailyYield
    annualPercentageMonthlyYield
    annualPercentageYearlyYield
    annualFeeARR
    token0
    token1
    fees0
    fees1

    manager: vaultManager
  }
}