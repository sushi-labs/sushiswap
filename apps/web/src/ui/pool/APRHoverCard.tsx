import {
  CardDescription,
  HoverCard,
  HoverCardContent,
  HoverCardTrigger,
  Popover,
  PopoverContent,
  PopoverTrigger,
  Separator,
} from '@sushiswap/ui'
import { FC, ReactNode } from 'react'
import { formatPercent } from 'sushi/format'

import type {
  PoolIfIncentivized,
  PoolWithFeeAprs,
  PoolWithIncentiveApr,
} from 'sushi'

type RequiredPool = PoolIfIncentivized<PoolWithIncentiveApr<PoolWithFeeAprs>>

interface APRHoverCardProps {
  children: ReactNode
  pool: RequiredPool
  showEmissions?: boolean
  smartPoolAPR?: number
}

export const APRHoverCard: FC<APRHoverCardProps> = ({
  children,
  pool,
  smartPoolAPR,
}) => {
  const feeApr1d =
    typeof smartPoolAPR === 'number' ? smartPoolAPR : pool.feeApr1d

  const totalAPR = (feeApr1d + pool.incentiveApr) * 100

  const card = (
    <>
      <div className="p-6">
        <CardDescription className="text-xs mb-6">
          APR is calculated based on the fees
          {pool.isIncentivized ? ' and rewards' : ''} generated by the pool over
          the last 24 hours. The APR displayed is algorithmic and subject to
          change.
        </CardDescription>
        <div className="flex flex-col gap-3">
          {typeof smartPoolAPR === 'number' ? (
            <div className="flex justify-between gap-1 items-center">
              <span className="flex flex-grow text-sm text-muted-foreground">
                Smart pool APR
              </span>
              <span className="text-right text-sm">
                {formatPercent(smartPoolAPR)}
              </span>
            </div>
          ) : (
            <div className="flex justify-between gap-1 items-center">
              <span className="flex flex-grow text-sm text-muted-foreground">
                Fees
              </span>
              <span className="text-right text-sm">
                {formatPercent(pool.feeApr1d)}
              </span>
            </div>
          )}
          <div className="flex flex-col gap-1">
            <div className="flex justify-between gap-1 items-center">
              <span className="flex flex-grow text-sm text-muted-foreground">
                Rewards
              </span>
              <span className="text-right text-sm">
                {formatPercent(pool.incentiveApr)}
              </span>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <Separator className="text-muted-foreground" />
          </div>
          <div className="flex justify-between gap-1 items-center">
            <span className="flex flex-grow font-bold text-sm">Total APR</span>
            <span className="text-right text-sm font-bold">
              {formatPercent(totalAPR / 100)}
            </span>
          </div>
        </div>
      </div>
    </>
  )

  return (
    <>
      <div className="hidden sm:block">
        <HoverCard openDelay={300} closeDelay={0}>
          <HoverCardTrigger asChild>{children}</HoverCardTrigger>
          <HoverCardContent
            side="right"
            className="!p-0 max-w-[320px] whitespace-normal text-left"
          >
            {card}
          </HoverCardContent>
        </HoverCard>
      </div>
      <div className="block sm:hidden">
        <Popover>
          <PopoverTrigger onClick={(e) => e.stopPropagation()} asChild>
            {children}
          </PopoverTrigger>
          <PopoverContent
            side="right"
            className="!p-0 max-w-[320px] whitespace-normal text-left"
          >
            {card}
          </PopoverContent>
        </Popover>
      </div>
    </>
  )
}
