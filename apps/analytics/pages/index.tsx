import { SUPPORTED_CHAIN_IDS } from 'config'
import { GetStaticProps, InferGetStaticPropsType } from 'next'
import { FC } from 'react'
import { SWRConfig, unstable_serialize } from 'swr'
import { unstable_serialize as unstable_serialize_infinite } from 'swr/infinite'
import { getPoolCount, getPoolCountUrl, getPools, getPoolsUrl } from '@sushiswap/client'

import { ChartSection, Layout, TableSection } from '../components'
import { getBundles, getCharts, getFuroTokens } from '../lib/api'
import { defaultPoolsArgs } from 'lib/constants'
import { FilterProvider } from 'components/Filters'
import { getFuroTokensUrl } from 'components/TableSection/FuroTokens/useFuroTokens'
import { Container } from '@sushiswap/ui/components/container'

export const getStaticProps: GetStaticProps = async () => {
  const [pools, charts, poolCount, bundles, furoTokens /*tokens, tokenCount*/] = await Promise.all([
    getPools(defaultPoolsArgs),
    getCharts(),
    getPoolCount(defaultPoolsArgs),
    getBundles(),
    getFuroTokens({ chainIds: SUPPORTED_CHAIN_IDS }),
    // getTokens(),
    // getTokenCount(),
  ])

  return {
    props: {
      fallback: {
        [unstable_serialize_infinite(() => getPoolsUrl(defaultPoolsArgs))]: pools,
        [unstable_serialize({
          url: '/analytics/api/charts',
          args: {
            selectedNetworks: SUPPORTED_CHAIN_IDS,
          },
        })]: charts,
        [getPoolCountUrl(defaultPoolsArgs)]: poolCount,
        [`/analytics/api/bundles`]: bundles,
        [getFuroTokensUrl({ chainIds: SUPPORTED_CHAIN_IDS })]: furoTokens,
        // [unstable_serialize({
        //   url: '/analytics/api/tokens',
        //   args: {
        //     sorting: [
        //       {
        //         id: 'liquidityUSD',
        //         desc: true,
        //       },
        //     ],
        //     selectedNetworks: SUPPORTED_CHAIN_IDS,
        //     pagination: {
        //       pageIndex: 0,
        //       pageSize: 20,
        //     },
        //     query: '',
        //     extraQuery: '',
        //   },
        // })]: tokens,
        // [`/analytics/api/tokens/count`]: tokenCount,
      },
    },
    revalidate: 900,
  }
}

const Index: FC<InferGetStaticPropsType<typeof getStaticProps>> = ({ fallback }) => {
  return (
    <SWRConfig value={{ fallback }}>
      <_Index />
    </SWRConfig>
  )
}

const _Index: FC = () => {
  return (
    <Layout>
      <div className="flex flex-col gap-10">
        <Container maxWidth="7xl" className="px-4 mx-auto">
          <section className="flex flex-col gap-6 lg:flex-row">
            <div className="max-w-md space-y-4">
              <h2 className="text-2xl font-semibold text-slate-50">Sushi Analytics</h2>
              <p className="text-slate-300">
                Analytics platform for tracking the liquidity, volume, and fees generated by Sushi products.
              </p>
            </div>
          </section>
        </Container>

        <FilterProvider>
          <ChartSection />
          <TableSection />
        </FilterProvider>
      </div>
    </Layout>
  )
}

export default Index
