{
  "address": "0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBentoBoxMinimal",
          "name": "_bento",
          "type": "address"
        },
        {
          "internalType": "contract IMasterDeployer",
          "name": "_masterDeployer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wETH",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "IncorrectSlippageParams",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughLiquidityMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWethSender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooLittleReceived",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "native",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITridentRouter.TokenInput[]",
          "name": "tokenInput",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "approveMasterContract",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bento",
      "outputs": [
        {
          "internalType": "contract IBentoBoxMinimal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPool.TokenAmount[]",
          "name": "minWithdrawals",
          "type": "tuple[]"
        }
      ],
      "name": "burnLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "minWithdrawal",
          "type": "uint256"
        }
      ],
      "name": "burnLiquiditySingle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenIn",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "pool",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "native",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ITridentRouter.InitialPath[]",
              "name": "initialPath",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenIn",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "pool",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "balancePercentage",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ITridentRouter.PercentagePath[]",
              "name": "percentagePath",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "unwrapBento",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "minAmount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ITridentRouter.Output[]",
              "name": "output",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITridentRouter.ComplexPathParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "complexPath",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "deployData",
          "type": "bytes"
        }
      ],
      "name": "deployPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "pool",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ITridentRouter.Path[]",
              "name": "path",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITridentRouter.ExactInputParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exactInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ITridentRouter.ExactInputSingleParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exactInputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ITridentRouter.ExactInputSingleParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exactInputSingleWithNativeToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "pool",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ITridentRouter.Path[]",
              "name": "path",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITridentRouter.ExactInputParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exactInputWithNativeToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxChangeAmount",
          "type": "uint256"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterDeployer",
      "outputs": [
        {
          "internalType": "contract IMasterDeployer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "selfPermit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "selfPermitAllowed",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "selfPermitAllowedIfNecessary",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "selfPermitIfNecessary",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "fromBento",
          "type": "bool"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "unwrapWETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbfa805f447881ec26672993fd9500051fa0fce272b8451d2ff98a44d82bba267",
  "receipt": {
    "to": null,
    "from": "0xf87BC5535602077d340806D71f805EA9907a843D",
    "contractAddress": "0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c",
    "transactionIndex": 2,
    "gasUsed": "3191241",
    "logsBloom": "0x
    "blockHash": "0x071ebcc1b64450bb6d4af22fdb7f713c89d9c45f2bf4590e1cbf7886fe0f3ea9",
    "transactionHash": "0xbfa805f447881ec26672993fd9500051fa0fce272b8451d2ff98a44d82bba267",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 1853906,
        "transactionHash": "0xbfa805f447881ec26672993fd9500051fa0fce272b8451d2ff98a44d82bba267",
        "address": "0xc35DADB65012eC5796536bD9864eD8773aBc74C4",
        "topics": [
          "0xdfb44ffabf0d3a8f650d3ce43eff98f6d050e7ea1a396d5794f014e7dadabacb",
          "0x0000000000000000000000001be211d8da40bc0ae8719c6663307bfc987b1d6c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x071ebcc1b64450bb6d4af22fdb7f713c89d9c45f2bf4590e1cbf7886fe0f3ea9"
      }
    ],
    "blockNumber": 1853906,
    "cumulativeGasUsed": "3212241",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc35DADB65012eC5796536bD9864eD8773aBc74C4",
    "0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506",
    "0x4200000000000000000000000000000000000006"
  ],
  "numDeployments": 1,
  "solcInputHash": "95e5bf0e3715ed6ab64a12a1a00a61b9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBentoBoxMinimal\",\"name\":\"_bento\",\"type\":\"address\"},{\"internalType\":\"contract IMasterDeployer\",\"name\":\"_masterDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IncorrectSlippageParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughLiquidityMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWethSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooLittleReceived\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"native\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ITridentRouter.TokenInput[]\",\"name\":\"tokenInput\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"approveMasterContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bento\",\"outputs\":[{\"internalType\":\"contract IBentoBoxMinimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPool.TokenAmount[]\",\"name\":\"minWithdrawals\",\"type\":\"tuple[]\"}],\"name\":\"burnLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"minWithdrawal\",\"type\":\"uint256\"}],\"name\":\"burnLiquiditySingle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"native\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ITridentRouter.InitialPath[]\",\"name\":\"initialPath\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"balancePercentage\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ITridentRouter.PercentagePath[]\",\"name\":\"percentagePath\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"unwrapBento\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ITridentRouter.Output[]\",\"name\":\"output\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITridentRouter.ComplexPathParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"complexPath\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"deployData\",\"type\":\"bytes\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ITridentRouter.Path[]\",\"name\":\"path\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITridentRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ITridentRouter.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ITridentRouter.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingleWithNativeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ITridentRouter.Path[]\",\"name\":\"path\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITridentRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputWithNativeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxChangeAmount\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterDeployer\",\"outputs\":[{\"internalType\":\"contract IMasterDeployer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowed\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowedIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromBento\",\"type\":\"bool\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"NotWethSender()\":[{\"details\":\"Custom Errors\"}]},\"kind\":\"dev\",\"methods\":{\"addLiquidity((address,bool,uint256)[],address,uint256,bytes)\":{\"params\":{\"data\":\"Data required by the pool to add liquidity.\",\"minLiquidity\":\"Minimum output liquidity - caps slippage.\",\"pool\":\"Pool address to add liquidity to.\",\"tokenInput\":\"Token address and amount to add as liquidity.\"}},\"burnLiquidity(address,uint256,bytes,(address,uint256)[])\":{\"params\":{\"data\":\"Data required by the pool to burn liquidity.\",\"liquidity\":\"Amount of liquidity tokens to burn.\",\"minWithdrawals\":\"Minimum amount of `bento` tokens to be returned.\",\"pool\":\"Pool address.\"}},\"burnLiquiditySingle(address,uint256,bytes,uint256)\":{\"details\":\"The tokens are swapped automatically and the output is in a single token.\",\"params\":{\"data\":\"Data required by the pool to burn liquidity.\",\"liquidity\":\"Amount of liquidity tokens to burn.\",\"minWithdrawal\":\"Minimum amount of tokens to be returned.\",\"pool\":\"Pool address.\"}},\"complexPath(((address,address,bool,uint256,bytes)[],(address,address,uint64,bytes)[],(address,address,bool,uint256)[]))\":{\"details\":\"This function is not optimized for single swaps and should only be used in complex cases where the amounts are large enough that minimizing slippage by using multiple paths is worth the extra gas.\",\"params\":{\"params\":\"This includes everything needed for the swap. Look at the `ComplexPathParams` struct for more details.\"}},\"exactInput((address,uint256,uint256,(address,bytes)[]))\":{\"details\":\"Ensure that the pools are trusted before calling this function. The pools can steal users' tokens.\",\"params\":{\"params\":\"This includes the addresses of the tokens, pools, amount of token A to swap, minimum amount of token B after the swap and data required by the pools for the swaps.\"}},\"exactInputSingle((uint256,uint256,address,address,bytes))\":{\"details\":\"Ensure that the pool is trusted before calling this function. The pool can steal users' tokens.\",\"params\":{\"params\":\"This includes the address of token A, pool, amount of token A to swap, minimum amount of token B after the swap and data required by the pool for the swap.\"}},\"exactInputSingleWithNativeToken((uint256,uint256,address,address,bytes))\":{\"details\":\"Ensure that the pool is trusted before calling this function. The pool can steal users' tokens.\",\"params\":{\"params\":\"This includes the address of token A, pool, amount of token A to swap, minimum amount of token B after the swap and data required by the pool for the swap.\"}},\"exactInputWithNativeToken((address,uint256,uint256,(address,bytes)[]))\":{\"details\":\"Ensure that the pools are trusted before calling this function. The pools can steal users' tokens.\",\"params\":{\"params\":\"This includes the addresses of the tokens, pools, amount of token A to swap, minimum amount of token B after the swap and data required by the pools for the swaps.\"}},\"harvest(address,uint256)\":{\"details\":\"Should be batched in before a swap.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity((address,bool,uint256)[],address,uint256,bytes)\":{\"notice\":\"Add liquidity to a pool.\"},\"approveMasterContract(uint8,bytes32,bytes32)\":{\"notice\":\"Wrapper function to allow bento set master contract approval to be batched, so the first trade can happen in one transaction.\"},\"bento()\":{\"notice\":\"BentoBox token vault.\"},\"burnLiquidity(address,uint256,bytes,(address,uint256)[])\":{\"notice\":\"Burn liquidity tokens to get back `bento` tokens.\"},\"burnLiquiditySingle(address,uint256,bytes,uint256)\":{\"notice\":\"Burn liquidity tokens to get back `bento` tokens.\"},\"complexPath(((address,address,bool,uint256,bytes)[],(address,address,uint64,bytes)[],(address,address,bool,uint256)[]))\":{\"notice\":\"Swaps multiple input tokens to multiple output tokens using multiple paths, in different percentages. For example, you can swap 50 DAI + 100 USDC into 60% ETH and 40% BTC.\"},\"deployPool(address,bytes)\":{\"notice\":\"Wrapper function to allow pool deployment to be batched.\"},\"exactInput((address,uint256,uint256,(address,bytes)[]))\":{\"notice\":\"Swaps token A to token B indirectly by using multiple hops.\"},\"exactInputSingle((uint256,uint256,address,address,bytes))\":{\"notice\":\"Swaps token A to token B directly. Swaps are done on `bento` tokens.\"},\"exactInputSingleWithNativeToken((uint256,uint256,address,address,bytes))\":{\"notice\":\"Swaps token A to token B directly. It's the same as `exactInputSingle` except it takes raw ERC-20 tokens from the users and deposits them into `bento`.\"},\"exactInputWithNativeToken((address,uint256,uint256,(address,bytes)[]))\":{\"notice\":\"Swaps token A to token B indirectly by using multiple hops. It's the same as `exactInput` except it takes raw ERC-20 tokens from the users and deposits them into `bento`.\"},\"harvest(address,uint256)\":{\"notice\":\"Call BentoBox harvest function to rebalance a BentoBox token strategy and ensure there are enough tokens available to withdraw a swap output.\"},\"masterDeployer()\":{\"notice\":\"Master deployer.\"},\"sweep(address,address,bool)\":{\"notice\":\"Recover mistakenly sent tokens.\"},\"unwrapWETH(address)\":{\"notice\":\"Unwrap this contract's wETH into ETH.\"}},\"notice\":\"Router contract that helps in swapping across Trident pools.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TridentRouter.sol\":\"TridentRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"contracts/TridentRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport {Multicall} from \\\"./abstract/Multicall.sol\\\";\\nimport {SelfPermit} from \\\"./abstract/SelfPermit.sol\\\";\\nimport {Transfer} from \\\"./libraries/Transfer.sol\\\";\\nimport {IBentoBoxMinimal} from \\\"./interfaces/IBentoBoxMinimal.sol\\\";\\nimport {IMasterDeployer} from \\\"./interfaces/IMasterDeployer.sol\\\";\\nimport {IPool} from \\\"./interfaces/IPool.sol\\\";\\nimport {ITridentRouter} from \\\"./interfaces/ITridentRouter.sol\\\";\\nimport {IWETH9} from \\\"./interfaces/IWETH9.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @dev Custom Errors\\nerror NotWethSender();\\nerror TooLittleReceived();\\nerror NotEnoughLiquidityMinted();\\nerror IncorrectTokenWithdrawn();\\nerror IncorrectSlippageParams();\\nerror InsufficientWETH();\\nerror InvalidPool();\\n\\n/// @notice Router contract that helps in swapping across Trident pools.\\ncontract TridentRouter is ITridentRouter, SelfPermit, Multicall {\\n    using Transfer for address;\\n\\n    /// @notice BentoBox token vault.\\n    IBentoBoxMinimal public immutable bento;\\n\\n    /// @notice Master deployer.\\n    IMasterDeployer public immutable masterDeployer;\\n\\n    /// @notice ERC-20 token for wrapped ETH (v9).\\n    address internal immutable wETH;\\n\\n    /// @notice The user should use 0x0 if they want to use native currency, e.g., ETH.\\n    address constant USE_NATIVE = address(0);\\n\\n    constructor(\\n        IBentoBoxMinimal _bento,\\n        IMasterDeployer _masterDeployer,\\n        address _wETH\\n    ) {\\n        bento = _bento;\\n        masterDeployer = _masterDeployer;\\n        wETH = _wETH;\\n        _bento.registerProtocol();\\n    }\\n\\n    receive() external payable {\\n        if (msg.sender != wETH) revert NotWethSender();\\n    }\\n\\n    /// @notice Swaps token A to token B directly. Swaps are done on `bento` tokens.\\n    /// @param params This includes the address of token A, pool, amount of token A to swap,\\n    /// minimum amount of token B after the swap and data required by the pool for the swap.\\n    /// @dev Ensure that the pool is trusted before calling this function. The pool can steal users' tokens.\\n    function exactInputSingle(ExactInputSingleParams calldata params) public payable returns (uint256 amountOut) {\\n        // Prefund the pool with token A.\\n        bento.transfer(params.tokenIn, msg.sender, params.pool, params.amountIn);\\n        // Trigger the swap in the pool.\\n        amountOut = IPool(params.pool).swap(params.data);\\n        // Ensure that the slippage wasn't too much. This assumes that the pool is honest.\\n        if (amountOut < params.amountOutMinimum) revert TooLittleReceived();\\n    }\\n\\n    /// @notice Swaps token A to token B indirectly by using multiple hops.\\n    /// @param params This includes the addresses of the tokens, pools, amount of token A to swap,\\n    /// minimum amount of token B after the swap and data required by the pools for the swaps.\\n    /// @dev Ensure that the pools are trusted before calling this function. The pools can steal users' tokens.\\n    function exactInput(ExactInputParams calldata params) public payable returns (uint256 amountOut) {\\n        // Pay the first pool directly.\\n        bento.transfer(params.tokenIn, msg.sender, params.path[0].pool, params.amountIn);\\n        // Call every pool in the path.\\n        // Pool `N` should transfer its output tokens to pool `N+1` directly.\\n        // The last pool should transfer its output tokens to the user.\\n        // If the user wants to unwrap `wETH`, the final destination should be this contract and\\n        // a batch call should be made to `unwrapWETH`.\\n        uint256 n = params.path.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            amountOut = IPool(params.path[i].pool).swap(params.path[i].data);\\n        }\\n        // Ensure that the slippage wasn't too much. This assumes that the pool is honest.\\n        if (amountOut < params.amountOutMinimum) revert TooLittleReceived();\\n    }\\n\\n    /// @notice Swaps token A to token B directly. It's the same as `exactInputSingle` except\\n    /// it takes raw ERC-20 tokens from the users and deposits them into `bento`.\\n    /// @param params This includes the address of token A, pool, amount of token A to swap,\\n    /// minimum amount of token B after the swap and data required by the pool for the swap.\\n    /// @dev Ensure that the pool is trusted before calling this function. The pool can steal users' tokens.\\n    function exactInputSingleWithNativeToken(ExactInputSingleParams calldata params) public payable returns (uint256 amountOut) {\\n        // Deposits the native ERC-20 token from the user into the pool's `bento`.\\n        _depositToBentoBox(params.tokenIn, params.pool, params.amountIn);\\n        // Trigger the swap in the pool.\\n        amountOut = IPool(params.pool).swap(params.data);\\n        // Ensure that the slippage wasn't too much. This assumes that the pool is honest.\\n        if (amountOut < params.amountOutMinimum) revert TooLittleReceived();\\n    }\\n\\n    /// @notice Swaps token A to token B indirectly by using multiple hops. It's the same as `exactInput` except\\n    /// it takes raw ERC-20 tokens from the users and deposits them into `bento`.\\n    /// @param params This includes the addresses of the tokens, pools, amount of token A to swap,\\n    /// minimum amount of token B after the swap and data required by the pools for the swaps.\\n    /// @dev Ensure that the pools are trusted before calling this function. The pools can steal users' tokens.\\n    function exactInputWithNativeToken(ExactInputParams calldata params) public payable returns (uint256 amountOut) {\\n        // Deposits the native ERC-20 token from the user into the pool's `bento`.\\n        _depositToBentoBox(params.tokenIn, params.path[0].pool, params.amountIn);\\n        // Call every pool in the path.\\n        // Pool `N` should transfer its output tokens to pool `N+1` directly.\\n        // The last pool should transfer its output tokens to the user.\\n        uint256 n = params.path.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            amountOut = IPool(params.path[i].pool).swap(params.path[i].data);\\n        }\\n        // Ensure that the slippage wasn't too much. This assumes that the pool is honest.\\n        if (amountOut < params.amountOutMinimum) revert TooLittleReceived();\\n    }\\n\\n    /// @notice Swaps multiple input tokens to multiple output tokens using multiple paths, in different percentages.\\n    /// For example, you can swap 50 DAI + 100 USDC into 60% ETH and 40% BTC.\\n    /// @param params This includes everything needed for the swap. Look at the `ComplexPathParams` struct for more details.\\n    /// @dev This function is not optimized for single swaps and should only be used in complex cases where\\n    /// the amounts are large enough that minimizing slippage by using multiple paths is worth the extra gas.\\n    function complexPath(ComplexPathParams calldata params) public payable {\\n        // Deposit all initial tokens to respective pools and initiate the swaps.\\n        // Input tokens come from the user - output goes to following pools.\\n        uint256 n = params.initialPath.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            if (params.initialPath[i].native) {\\n                _depositToBentoBox(params.initialPath[i].tokenIn, params.initialPath[i].pool, params.initialPath[i].amount);\\n            } else {\\n                bento.transfer(params.initialPath[i].tokenIn, msg.sender, params.initialPath[i].pool, params.initialPath[i].amount);\\n            }\\n            IPool(params.initialPath[i].pool).swap(params.initialPath[i].data);\\n        }\\n        // Do all the middle swaps. Input comes from previous pools.\\n        n = params.percentagePath.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            uint256 balanceShares = bento.balanceOf(params.percentagePath[i].tokenIn, address(this));\\n            uint256 transferShares = (balanceShares * params.percentagePath[i].balancePercentage) / uint256(10)**8;\\n            bento.transfer(params.percentagePath[i].tokenIn, address(this), params.percentagePath[i].pool, transferShares);\\n            IPool(params.percentagePath[i].pool).swap(params.percentagePath[i].data);\\n        }\\n        // Ensure enough was received and transfer the ouput to the recipient.\\n        n = params.output.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            uint256 balanceShares = bento.balanceOf(params.output[i].token, address(this));\\n            if (balanceShares < params.output[i].minAmount) revert TooLittleReceived();\\n            if (params.output[i].unwrapBento) {\\n                bento.withdraw(params.output[i].token, address(this), params.output[i].to, 0, balanceShares);\\n            } else {\\n                bento.transfer(params.output[i].token, address(this), params.output[i].to, balanceShares);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add liquidity to a pool.\\n    /// @param tokenInput Token address and amount to add as liquidity.\\n    /// @param pool Pool address to add liquidity to.\\n    /// @param minLiquidity Minimum output liquidity - caps slippage.\\n    /// @param data Data required by the pool to add liquidity.\\n    function addLiquidity(\\n        TokenInput[] calldata tokenInput,\\n        address pool,\\n        uint256 minLiquidity,\\n        bytes calldata data\\n    ) public payable returns (uint256 liquidity) {\\n        // Send all input tokens to the pool.\\n        uint256 n = tokenInput.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            if (tokenInput[i].native) {\\n                _depositToBentoBox(tokenInput[i].token, pool, tokenInput[i].amount);\\n            } else {\\n                bento.transfer(tokenInput[i].token, msg.sender, pool, tokenInput[i].amount);\\n            }\\n        }\\n        liquidity = IPool(pool).mint(data);\\n        if (liquidity < minLiquidity) revert NotEnoughLiquidityMinted();\\n    }\\n\\n    /// @notice Burn liquidity tokens to get back `bento` tokens.\\n    /// @param pool Pool address.\\n    /// @param liquidity Amount of liquidity tokens to burn.\\n    /// @param data Data required by the pool to burn liquidity.\\n    /// @param minWithdrawals Minimum amount of `bento` tokens to be returned.\\n    function burnLiquidity(\\n        address pool,\\n        uint256 liquidity,\\n        bytes calldata data,\\n        IPool.TokenAmount[] calldata minWithdrawals\\n    ) public payable {\\n        pool.safeTransferFrom(msg.sender, pool, liquidity);\\n        IPool.TokenAmount[] memory withdrawnLiquidity = IPool(pool).burn(data);\\n        uint256 n = minWithdrawals.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            if (minWithdrawals[i].token != withdrawnLiquidity[i].token) revert IncorrectSlippageParams();\\n            if (withdrawnLiquidity[i].amount < minWithdrawals[i].amount) revert TooLittleReceived();\\n        }\\n    }\\n\\n    /// @notice Burn liquidity tokens to get back `bento` tokens.\\n    /// @dev The tokens are swapped automatically and the output is in a single token.\\n    /// @param pool Pool address.\\n    /// @param liquidity Amount of liquidity tokens to burn.\\n    /// @param data Data required by the pool to burn liquidity.\\n    /// @param minWithdrawal Minimum amount of tokens to be returned.\\n    function burnLiquiditySingle(\\n        address pool,\\n        uint256 liquidity,\\n        bytes calldata data,\\n        uint256 minWithdrawal\\n    ) public payable {\\n        // Use 'liquidity = 0' for prefunding.\\n        pool.safeTransferFrom(msg.sender, pool, liquidity);\\n        uint256 withdrawn = IPool(pool).burnSingle(data);\\n        if (withdrawn < minWithdrawal) revert TooLittleReceived();\\n    }\\n\\n    /// @notice Recover mistakenly sent tokens.\\n    function sweep(\\n        address token,\\n        address recipient,\\n        bool fromBento\\n    ) external payable {\\n        if (fromBento) {\\n            uint256 shares = bento.balanceOf(token, address(this));\\n            bento.transfer(token, address(this), recipient, shares);\\n        } else {\\n            uint256 amount = token == USE_NATIVE ? address(this).balance : (IERC20(token).balanceOf(address(this)) - 1);\\n            token == USE_NATIVE ? recipient.safeTransferETH(amount) : token.safeTransfer(recipient, amount);\\n        }\\n    }\\n\\n    /// @notice Unwrap this contract's wETH into ETH.\\n    function unwrapWETH(address recipient) external payable {\\n        uint256 balance = IWETH9(wETH).balanceOf(address(this));\\n        IWETH9(wETH).withdraw(balance);\\n        recipient.safeTransferETH(balance);\\n    }\\n\\n    /// @notice Wrapper function to allow pool deployment to be batched.\\n    function deployPool(address factory, bytes calldata deployData) external payable returns (address) {\\n        return masterDeployer.deployPool(factory, deployData);\\n    }\\n\\n    /// @notice Wrapper function to allow bento set master contract approval to be batched, so the first trade can happen in one transaction.\\n    function approveMasterContract(\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable {\\n        bento.setMasterContractApproval(msg.sender, address(this), true, v, r, s);\\n    }\\n\\n    /// @notice Call BentoBox harvest function to rebalance a BentoBox token strategy and ensure there are enough tokens available to withdraw a swap output.\\n    /// @dev Should be batched in before a swap.\\n    function harvest(address token, uint256 maxChangeAmount) external payable {\\n        bento.harvest(token, true, maxChangeAmount);\\n    }\\n\\n    /// @notice Deposit from the user's wallet into BentoBox.\\n    /// @dev Amount is the native token amount. We let BentoBox do the conversion into shares.\\n    function _depositToBentoBox(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        bento.deposit{value: token == USE_NATIVE ? amount : 0}(token, msg.sender, recipient, amount, 0);\\n    }\\n\\n    function _increment(uint256 i) internal pure returns (uint256) {\\n        unchecked {\\n            return i + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x20743f0ac844bc7888a0e8e43b0a3b4ad2546b0830e0e4e2f6c7275bd77b303b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/abstract/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Helper utility that enables calling multiple local methods in a single call.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/v3-periphery/blob/main/contracts/base/Multicall.sol)\\n/// License-Identifier: GPL-2.0-or-later\\nabstract contract Multicall {\\n    function multicall(bytes[] calldata data) public payable returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        \\n        for (uint256 i; i < data.length;) {\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n            if (!success) {\\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n                if (result.length < 68) revert();\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n\\n            results[i] = result;\\n\\n            // cannot realistically overflow on human timescales\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6f23b4ab12c911b68e01bac097dcf6d6b88c2ac86a41f7b180c3792fc68e7d59\",\"license\":\"GPL-3.0-or-later\"},\"contracts/abstract/SelfPermit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\nimport \\\"../interfaces/IERC20PermitAllowed.sol\\\";\\n\\nabstract contract SelfPermit {\\n    function selfPermit(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable {\\n        IERC20Permit(token).permit(msg.sender, address(this), value, deadline, v, r, s);\\n    }\\n\\n    function selfPermitIfNecessary(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable {\\n        if (IERC20(token).allowance(msg.sender, address(this)) < value) selfPermit(token, value, deadline, v, r, s);\\n    }\\n\\n    function selfPermitAllowed(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable {\\n        IERC20PermitAllowed(token).permit(msg.sender, address(this), nonce, expiry, true, v, r, s);\\n    }\\n\\n    function selfPermitAllowedIfNecessary(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable {\\n        if (IERC20(token).allowance(msg.sender, address(this)) < type(uint256).max)\\n            selfPermitAllowed(token, nonce, expiry, v, r, s);\\n    }\\n}\",\"keccak256\":\"0x7c3fc6ac4702a69fd99e90daaa8a40deed174a6d55034acf36c9e8f5aff60e46\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBentoBoxMinimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../libraries/RebaseLibrary.sol\\\";\\n\\n/// @notice Minimal BentoBox vault interface.\\n/// @dev `token` is aliased as `address` from `IERC20` for simplicity.\\ninterface IBentoBoxMinimal {\\n    /// @notice Balance per ERC-20 token per account in shares.\\n    function balanceOf(address, address) external view returns (uint256);\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        address token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    /// @dev Helper function to represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        address token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n\\n    /// @notice Registers this contract so that users can approve it for BentoBox.\\n    function registerProtocol() external;\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    function transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    /// @dev Reads the Rebase `totals`from storage for a given token\\n    function totals(address token) external view returns (Rebase memory total);\\n\\n    /// @dev Approves users' BentoBox assets to a \\\"master\\\" contract.\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function harvest(\\n        address token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe9dfcff95da3b487ff37f646aef14a998a36f90122fd5693096b5e3b14ea09af\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20PermitAllowed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\ninterface IERC20PermitAllowed {\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\",\"keccak256\":\"0xe943e4b44f10a53f75a23b957da3206c7c9fc0a38fe95aecd982073b061d651d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IMasterDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident pool deployer interface.\\ninterface IMasterDeployer {\\n    function barFee() external view returns (uint256);\\n\\n    function barFeeTo() external view returns (address);\\n\\n    function bento() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function pools(address pool) external view returns (bool);\\n\\n    function deployPool(address factory, bytes calldata deployData) external returns (address);\\n}\\n\",\"keccak256\":\"0x91c23deb7e4372faa35a0ae4ef6ccd684049aea7b2c75cf63009b28591b91cbc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @notice Trident pool interface.\\ninterface IPool {\\n    /// @notice Executes a swap from one token to another.\\n    /// @dev The input tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function swap(bytes calldata data) external returns (uint256 finalAmountOut);\\n\\n    /// @notice Executes a swap from one token to another with a callback.\\n    /// @dev This function allows borrowing the output tokens and sending the input tokens in the callback.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function flashSwap(bytes calldata data) external returns (uint256 finalAmountOut);\\n\\n    /// @notice Mints liquidity tokens.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return liquidity The amount of liquidity tokens that were minted for the user.\\n    function mint(bytes calldata data) external returns (uint256 liquidity);\\n\\n    /// @notice Burns liquidity tokens.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return withdrawnAmounts The amount of various output tokens that were sent to the user.\\n    function burn(bytes calldata data) external returns (TokenAmount[] memory withdrawnAmounts);\\n\\n    /// @notice Burns liquidity tokens for a single output token.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return amountOut The amount of output tokens that were sent to the user.\\n    function burnSingle(bytes calldata data) external returns (uint256 amountOut);\\n\\n    /// @return A unique identifier for the pool type.\\n    function poolIdentifier() external pure returns (bytes32);\\n\\n    /// @return An array of tokens supported by the pool.\\n    function getAssets() external view returns (address[] memory);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that will be sent to the user if the trade is executed.\\n    function getAmountOut(bytes calldata data) external view returns (uint256 finalAmountOut);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountIn The amount of input tokens that are required from the user if the trade is executed.\\n    function getAmountIn(bytes calldata data) external view returns (uint256 finalAmountIn);\\n\\n    /// @dev This event must be emitted on all swaps.\\n    event Swap(address indexed recipient, address indexed tokenIn, address indexed tokenOut, uint256 amountIn, uint256 amountOut);\\n\\n    /// @dev This struct frames output tokens for burns.\\n    struct TokenAmount {\\n        address token;\\n        uint256 amount;\\n    }\\n}\\n\",\"keccak256\":\"0xa6f92ccb525b018c0c209819640e8d746f1134b4c4d9acd4f22d3e170323f1fa\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ITridentRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Trident pool router interface.\\ninterface ITridentRouter {\\n    struct Path {\\n        address pool;\\n        bytes data;\\n    }\\n\\n    struct ExactInputSingleParams {\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        address pool;\\n        address tokenIn;\\n        bytes data;\\n    }\\n\\n    struct ExactInputParams {\\n        address tokenIn;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        Path[] path;\\n    }\\n\\n    struct TokenInput {\\n        address token;\\n        bool native;\\n        uint256 amount;\\n    }\\n\\n    struct InitialPath {\\n        address tokenIn;\\n        address pool;\\n        bool native;\\n        uint256 amount;\\n        bytes data;\\n    }\\n\\n    struct PercentagePath {\\n        address tokenIn;\\n        address pool;\\n        uint64 balancePercentage; // Multiplied by 10^6. 100% = 100_000_000\\n        bytes data;\\n    }\\n\\n    struct Output {\\n        address token;\\n        address to;\\n        bool unwrapBento;\\n        uint256 minAmount;\\n    }\\n\\n    struct ComplexPathParams {\\n        InitialPath[] initialPath;\\n        PercentagePath[] percentagePath;\\n        Output[] output;\\n    }\\n}\\n\",\"keccak256\":\"0x40f1af6b213ff8827d515460f9057eb87ddc35d8020501f727d229ea239cbf24\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\ninterface IWETH9 is IERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint256) external;\\n}\",\"keccak256\":\"0x78727343dc3c9cd81a8cc84e093d824a0dd3d9b3dd1ab9d59f843622bcfca45a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/RebaseLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8;\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library\\nlibrary RebaseLibrary {\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(Rebase memory total, uint256 elastic) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = (elastic * total.base) / total.elastic;\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(Rebase memory total, uint256 base) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = (base * total.elastic) / total.base;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa83360497e7e2a04332211832a8ceb41ef0301892fcf1b17174d7d4466782d44\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary Transfer {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"STF\\\");\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"ST\\\");\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"SA\\\");\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"STE\\\");\\n    }\\n}\",\"keccak256\":\"0x649ac8fbd58be14704e4b8605d06a5cc309296741536e35298f0e9be6b539cc6\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162003a4c38038062003a4c8339810160408190526200003491620000c3565b6001600160a01b03808416608081905283821660a05290821660c0526040805163577268d960e11b8152905163aee4d1b29160048082019260009290919082900301818387803b1580156200008857600080fd5b505af11580156200009d573d6000803e3d6000fd5b5050505050505062000117565b6001600160a01b0381168114620000c057600080fd5b50565b600080600060608486031215620000d957600080fd5b8351620000e681620000aa565b6020850151909350620000f981620000aa565b60408501519092506200010c81620000aa565b809150509250925092565b60805160a05160c05161388e620001be600039600081816101800152818161152901526115db0152600081816103ac015261095a0152600081816102d30152818161043401528181610669015281816109f701528181610caf01528181610f000152818161129f0152818161136901528181611a0f01528181611ca201528181611e1e01528181612099015281816122370152818161238f01526125f6015261388e6000f3fe6080604052600436106101635760003560e01c8063783312d9116100c0578063ac9650d811610074578063c2e3140a11610059578063c2e3140a14610387578063cf58879a1461039a578063f3995c67146103ce57600080fd5b8063ac9650d814610354578063b96c5c0e1461037457600080fd5b806389a3f136116100a557806389a3f1361461031b5780639fa744911461032e578063a4a78f0c1461034157600080fd5b8063783312d9146102f55780637f6ad4551461030857600080fd5b80632c0d9a0111610117578063403335a8116100fc578063403335a81461029b5780634659a494146102ae5780634da31827146102c157600080fd5b80632c0d9a01146102755780632cfcb94f1461028857600080fd5b80630f93d439116101485780630f93d439146102175780631aa349a81461022a578063250558dc1461023d57600080fd5b8063018ee9b7146101de5780630b0d1b1e146101f157600080fd5b366101d9573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101d7576040517fe7218bb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b005b600080fd5b6101d76101ec366004612acc565b6103e1565b6102046101ff366004612af8565b610494565b6040519081526020015b60405180910390f35b610204610225366004612b3a565b610650565b6101d7610238366004612bbe565b610822565b61025061024b366004612c22565b61091a565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161020e565b610204610283366004612af8565b6109de565b610204610296366004612c77565b610c1f565b6101d76102a9366004612d43565b610eae565b6101d76102bc366004612d76565b610f76565b3480156102cd57600080fd5b506102507f000000000000000000000000000000000000000000000000000000000000000081565b6101d7610303366004612dd0565b611031565b6101d7610316366004612e99565b61124b565b6101d7610329366004612ee4565b6114f8565b61020461033c366004612b3a565b611671565b6101d761034f366004612d76565b6116ad565b610367610362366004612f01565b611777565b60405161020e9190612fec565b6101d761038236600461306c565b6118e7565b6101d7610395366004612d76565b6124bc565b3480156103a657600080fd5b506102507f000000000000000000000000000000000000000000000000000000000000000081565b6101d76103dc366004612d76565b612562565b6040517f66c6bb0b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015260016024830152604482018390527f000000000000000000000000000000000000000000000000000000000000000016906366c6bb0b90606401600060405180830381600087803b15801561047857600080fd5b505af115801561048c573d6000803e3d6000fd5b505050505050565b60006104ee6104a66020840184612ee4565b6104b360608501856130a7565b60008181106104c4576104c461310f565b90506020028101906104d6919061313e565b6104e4906020810190612ee4565b84602001356125df565b60006104fd60608401846130a7565b9050905060005b8181101561060b5761051960608501856130a7565b828181106105295761052961310f565b905060200281019061053b919061313e565b610549906020810190612ee4565b73ffffffffffffffffffffffffffffffffffffffff1663627dd56a61057160608701876130a7565b848181106105815761058161310f565b9050602002810190610593919061313e565b6105a190602081019061317c565b6040518363ffffffff1660e01b81526004016105be92919061322a565b6020604051808303816000875af11580156105dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610601919061323e565b9250600101610504565b50826040013582101561064a576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50919050565b600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f18d03cc61069e6080850160608601612ee4565b336106af6060870160408801612ee4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152909116604482015284356064820152608401600060405180830381600087803b15801561072c57600080fd5b505af1158015610740573d6000803e3d6000fd5b50610755925050506060830160408401612ee4565b73ffffffffffffffffffffffffffffffffffffffff1663627dd56a61077d608085018561317c565b6040518363ffffffff1660e01b815260040161079a92919061322a565b6020604051808303816000875af11580156107b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107dd919061323e565b9050816020013581101561081d576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b61084473ffffffffffffffffffffffffffffffffffffffff86163387876126de565b6040517faf8c09bf00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff87169063af8c09bf9061089b908790879060040161322a565b6020604051808303816000875af11580156108ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108de919061323e565b90508181101561048c576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f250558dc00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063250558dc9061099390879087908790600401613257565b6020604051808303816000875af11580156109b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d69190613290565b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f18d03cc610a296020850185612ee4565b33610a3760608701876130a7565b6000818110610a4857610a4861310f565b9050602002810190610a5a919061313e565b610a68906020810190612ee4565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152909116604482015260208501356064820152608401600060405180830381600087803b158015610ae857600080fd5b505af1158015610afc573d6000803e3d6000fd5b5060009250610b1191505060608401846130a7565b9050905060005b8181101561060b57610b2d60608501856130a7565b82818110610b3d57610b3d61310f565b9050602002810190610b4f919061313e565b610b5d906020810190612ee4565b73ffffffffffffffffffffffffffffffffffffffff1663627dd56a610b8560608701876130a7565b84818110610b9557610b9561310f565b9050602002810190610ba7919061313e565b610bb590602081019061317c565b6040518363ffffffff1660e01b8152600401610bd292919061322a565b6020604051808303816000875af1158015610bf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c15919061323e565b9250600101610b18565b600085815b81811015610dcf57888882818110610c3e57610c3e61310f565b9050606002016020016020810190610c5691906132ad565b15610cad57610ca8898983818110610c7057610c7061310f565b610c869260206060909202019081019150612ee4565b888b8b85818110610c9957610c9961310f565b905060600201604001356125df565b610dc7565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f18d03cc8a8a84818110610cfb57610cfb61310f565b610d119260206060909202019081019150612ee4565b338a8d8d87818110610d2557610d2561310f565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e08a901b16815273ffffffffffffffffffffffffffffffffffffffff978816600482015295871660248701529590931660448501525060609091020191909101356064820152608401600060405180830381600087803b158015610dae57600080fd5b505af1158015610dc2573d6000803e3d6000fd5b505050505b600101610c24565b506040517f7ba0e2e700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff871690637ba0e2e790610e24908790879060040161322a565b6020604051808303816000875af1158015610e43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e67919061323e565b915084821015610ea3576040517f249942be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b509695505050505050565b6040517fc0a47c930000000000000000000000000000000000000000000000000000000081523360048201523060248201526001604482015260ff841660648201526084810183905260a481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063c0a47c939060c401600060405180830381600087803b158015610f5957600080fd5b505af1158015610f6d573d6000803e3d6000fd5b50505050505050565b6040517f8fcbaf0c00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101869052606481018590526001608482015260ff841660a482015260c4810183905260e4810182905273ffffffffffffffffffffffffffffffffffffffff871690638fcbaf0c90610104015b600060405180830381600087803b15801561101157600080fd5b505af1158015611025573d6000803e3d6000fd5b50505050505050505050565b61105373ffffffffffffffffffffffffffffffffffffffff87163388886126de565b6040517f2a07b6c700000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff881690632a07b6c7906110aa908890889060040161322a565b6000604051808303816000875af11580156110c9573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261110f9190810190613371565b90508160005b818110156112405782818151811061112f5761112f61310f565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168585838181106111635761116361310f565b6111799260206040909202019081019150612ee4565b73ffffffffffffffffffffffffffffffffffffffff16146111c6576040517f2664ab9d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8484828181106111d8576111d861310f565b905060400201602001358382815181106111f4576111f461310f565b6020026020010151602001511015611238576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600101611115565b505050505050505050565b80156113cd576040517ff7888aec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301523060248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063f7888aec90604401602060405180830381865afa1580156112e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130c919061323e565b6040517ff18d03cc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301523060248301528581166044830152606482018390529192507f00000000000000000000000000000000000000000000000000000000000000009091169063f18d03cc90608401600060405180830381600087803b1580156113af57600080fd5b505af11580156113c3573d6000803e3d6000fd5b5050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff84161561148b576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260019073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa158015611458573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147c919061323e565b6114869190613476565b61148d565b475b905073ffffffffffffffffffffffffffffffffffffffff8416156114d1576114cc73ffffffffffffffffffffffffffffffffffffffff8516848361284f565b6114f1565b6114f173ffffffffffffffffffffffffffffffffffffffff8416826129b8565b505b505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015611585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a9919061323e565b6040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018290529091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b15801561163457600080fd5b505af1158015611648573d6000803e3d6000fd5b5061166d9250505073ffffffffffffffffffffffffffffffffffffffff8316826129b8565b5050565b600061169d6116866080840160608501612ee4565b6116966060850160408601612ee4565b84356125df565b6107556060830160408401612ee4565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523360048201523060248201527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9073ffffffffffffffffffffffffffffffffffffffff88169063dd62ed3e90604401602060405180830381865afa15801561173f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611763919061323e565b101561048c5761048c868686868686610f76565b60608167ffffffffffffffff811115611792576117926132ca565b6040519080825280602002602001820160405280156117c557816020015b60608152602001906001900390816117b05790505b50905060005b828110156118e057600080308686858181106117e9576117e961310f565b90506020028101906117fb919061317c565b60405161180992919061348d565b600060405180830381855af49150503d8060008114611844576040519150601f19603f3d011682016040523d82523d6000602084013e611849565b606091505b5091509150816118b85760448151101561186257600080fd5b6004810190508080602001905181019061187c919061349d565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118af919061354f565b60405180910390fd5b808484815181106118cb576118cb61310f565b602090810291909101015250506001016117cb565b5092915050565b60006118f382806130a7565b9050905060005b81811015611c6c5761190c83806130a7565b8281811061191c5761191c61310f565b905060200281019061192e9190613562565b61193f9060608101906040016132ad565b156119f8576119f361195184806130a7565b838181106119615761196161310f565b90506020028101906119739190613562565b611981906020810190612ee4565b61198b85806130a7565b8481811061199b5761199b61310f565b90506020028101906119ad9190613562565b6119be906040810190602001612ee4565b6119c886806130a7565b858181106119d8576119d861310f565b90506020028101906119ea9190613562565b606001356125df565b611b71565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f18d03cc611a3e85806130a7565b84818110611a4e57611a4e61310f565b9050602002810190611a609190613562565b611a6e906020810190612ee4565b33611a7987806130a7565b86818110611a8957611a8961310f565b9050602002810190611a9b9190613562565b611aac906040810190602001612ee4565b611ab688806130a7565b87818110611ac657611ac661310f565b9050602002810190611ad89190613562565b60405160e086901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff94851660048201529284166024840152921660448201526060909101356064820152608401600060405180830381600087803b158015611b5857600080fd5b505af1158015611b6c573d6000803e3d6000fd5b505050505b611b7b83806130a7565b82818110611b8b57611b8b61310f565b9050602002810190611b9d9190613562565b611bae906040810190602001612ee4565b73ffffffffffffffffffffffffffffffffffffffff1663627dd56a611bd385806130a7565b84818110611be357611be361310f565b9050602002810190611bf59190613562565b611c0390608081019061317c565b6040518363ffffffff1660e01b8152600401611c2092919061322a565b6020604051808303816000875af1158015611c3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c63919061323e565b506001016118fa565b50611c7a60208301836130a7565b9050905060005b8181101561206357600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f7888aec611cd460208701876130a7565b85818110611ce457611ce461310f565b9050602002810190611cf69190613596565b611d04906020810190612ee4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604401602060405180830381865afa158015611d73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d97919061323e565b90506000611da76008600a6136ec565b611db460208701876130a7565b85818110611dc457611dc461310f565b9050602002810190611dd69190613596565b611de79060608101906040016136fb565b611dfb9067ffffffffffffffff1684613725565b611e059190613762565b905073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f18d03cc611e5060208801886130a7565b86818110611e6057611e6061310f565b9050602002810190611e729190613596565b611e80906020810190612ee4565b30611e8e60208a018a6130a7565b88818110611e9e57611e9e61310f565b9050602002810190611eb09190613596565b611ec1906040810190602001612ee4565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152909116604482015260648101849052608401600060405180830381600087803b158015611f3e57600080fd5b505af1158015611f52573d6000803e3d6000fd5b50611f649250505060208601866130a7565b84818110611f7457611f7461310f565b9050602002810190611f869190613596565b611f97906040810190602001612ee4565b73ffffffffffffffffffffffffffffffffffffffff1663627dd56a611fbf60208801886130a7565b86818110611fcf57611fcf61310f565b9050602002810190611fe19190613596565b611fef90606081019061317c565b6040518363ffffffff1660e01b815260040161200c92919061322a565b6020604051808303816000875af115801561202b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204f919061323e565b50505061205c8160010190565b9050611c81565b50612071604083018361379d565b9050905060005b818110156114f357600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f7888aec6120cb604087018761379d565b858181106120db576120db61310f565b6120f19260206080909202019081019150612ee4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604401602060405180830381865afa158015612160573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612184919061323e565b9050612193604085018561379d565b838181106121a3576121a361310f565b905060800201606001358110156121e6576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6121f3604085018561379d565b838181106122035761220361310f565b905060800201604001602081019061221b91906132ad565b156123785773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166397da6d30612269604087018761379d565b858181106122795761227961310f565b61228f9260206080909202019081019150612ee4565b3061229d604089018961379d565b878181106122ad576122ad61310f565b90506080020160200160208101906122c59190612ee4565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff938416600482015291831660248301529091166044820152600060648201526084810184905260a40160408051808303816000875af115801561234d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123719190613805565b50506124b3565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f18d03cc6123c1604087018761379d565b858181106123d1576123d161310f565b6123e79260206080909202019081019150612ee4565b306123f5604089018961379d565b878181106124055761240561310f565b905060800201602001602081019061241d9190612ee4565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152909116604482015260648101849052608401600060405180830381600087803b15801561249a57600080fd5b505af11580156124ae573d6000803e3d6000fd5b505050505b50600101612078565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152859073ffffffffffffffffffffffffffffffffffffffff88169063dd62ed3e90604401602060405180830381865afa15801561252e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612552919061323e565b101561048c5761048c8686868686865b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c4810182905273ffffffffffffffffffffffffffffffffffffffff87169063d505accf9060e401610ff7565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116906302b9446c9085161561262c57600061262e565b825b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff808816600483015233602483015286166044820152606481018590526000608482015260a401604080518083038185885af11580156126b2573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906126d79190613805565b5050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052915160009283929088169161277d9190613829565b6000604051808303816000865af19150503d80600081146127ba576040519150601f19603f3d011682016040523d82523d6000602084013e6127bf565b606091505b50915091508180156127e95750805115806127e95750808060200190518101906127e9919061383b565b61048c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f535446000000000000000000000000000000000000000000000000000000000060448201526064016118af565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916128e69190613829565b6000604051808303816000865af19150503d8060008114612923576040519150601f19603f3d011682016040523d82523d6000602084013e612928565b606091505b5091509150818015612952575080511580612952575080806020019051810190612952919061383b565b6126d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f535400000000000000000000000000000000000000000000000000000000000060448201526064016118af565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040516129ef9190613829565b60006040518083038185875af1925050503d8060008114612a2c576040519150601f19603f3d011682016040523d82523d6000602084013e612a31565b606091505b50509050806114f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f535445000000000000000000000000000000000000000000000000000000000060448201526064016118af565b73ffffffffffffffffffffffffffffffffffffffff81168114612abe57600080fd5b50565b803561081d81612a9c565b60008060408385031215612adf57600080fd5b8235612aea81612a9c565b946020939093013593505050565b600060208284031215612b0a57600080fd5b813567ffffffffffffffff811115612b2157600080fd5b820160808185031215612b3357600080fd5b9392505050565b600060208284031215612b4c57600080fd5b813567ffffffffffffffff811115612b6357600080fd5b820160a08185031215612b3357600080fd5b60008083601f840112612b8757600080fd5b50813567ffffffffffffffff811115612b9f57600080fd5b602083019150836020828501011115612bb757600080fd5b9250929050565b600080600080600060808688031215612bd657600080fd5b8535612be181612a9c565b945060208601359350604086013567ffffffffffffffff811115612c0457600080fd5b612c1088828901612b75565b96999598509660600135949350505050565b600080600060408486031215612c3757600080fd5b8335612c4281612a9c565b9250602084013567ffffffffffffffff811115612c5e57600080fd5b612c6a86828701612b75565b9497909650939450505050565b60008060008060008060808789031215612c9057600080fd5b863567ffffffffffffffff80821115612ca857600080fd5b818901915089601f830112612cbc57600080fd5b813581811115612ccb57600080fd5b8a6020606083028501011115612ce057600080fd5b60208301985080975050612cf660208a01612ac1565b9550604089013594506060890135915080821115612d1357600080fd5b50612d2089828a01612b75565b979a9699509497509295939492505050565b803560ff8116811461081d57600080fd5b600080600060608486031215612d5857600080fd5b612d6184612d32565b95602085013595506040909401359392505050565b60008060008060008060c08789031215612d8f57600080fd5b8635612d9a81612a9c565b95506020870135945060408701359350612db660608801612d32565b92506080870135915060a087013590509295509295509295565b60008060008060008060808789031215612de957600080fd5b8635612df481612a9c565b955060208701359450604087013567ffffffffffffffff80821115612e1857600080fd5b612e248a838b01612b75565b90965094506060890135915080821115612e3d57600080fd5b818901915089601f830112612e5157600080fd5b813581811115612e6057600080fd5b8a60208260061b8501011115612e7557600080fd5b6020830194508093505050509295509295509295565b8015158114612abe57600080fd5b600080600060608486031215612eae57600080fd5b8335612eb981612a9c565b92506020840135612ec981612a9c565b91506040840135612ed981612e8b565b809150509250925092565b600060208284031215612ef657600080fd5b8135612b3381612a9c565b60008060208385031215612f1457600080fd5b823567ffffffffffffffff80821115612f2c57600080fd5b818501915085601f830112612f4057600080fd5b813581811115612f4f57600080fd5b8660208260051b8501011115612f6457600080fd5b60209290920196919550909350505050565b60005b83811015612f91578181015183820152602001612f79565b838111156114f15750506000910152565b60008151808452612fba816020860160208601612f76565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561305f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845261304d858351612fa2565b94509285019290850190600101613013565b5092979650505050505050565b60006020828403121561307e57600080fd5b813567ffffffffffffffff81111561309557600080fd5b820160608185031215612b3357600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126130dc57600080fd5b83018035915067ffffffffffffffff8211156130f757600080fd5b6020019150600581901b3603821315612bb757600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc183360301811261317257600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126131b157600080fd5b83018035915067ffffffffffffffff8211156131cc57600080fd5b602001915036819003821315612bb757600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b6020815260006109d66020830184866131e1565b60006020828403121561325057600080fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff841681526040602082015260006132876040830184866131e1565b95945050505050565b6000602082840312156132a257600080fd5b8151612b3381612a9c565b6000602082840312156132bf57600080fd5b8135612b3381612e8b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561331c5761331c6132ca565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613369576133696132ca565b604052919050565b6000602080838503121561338457600080fd5b825167ffffffffffffffff8082111561339c57600080fd5b818501915085601f8301126133b057600080fd5b8151818111156133c2576133c26132ca565b6133d0848260051b01613322565b818152848101925060069190911b8301840190878211156133f057600080fd5b928401925b8184101561343c576040848903121561340e5760008081fd5b6134166132f9565b845161342181612a9c565b815284860151868201528352604090930192918401916133f5565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561348857613488613447565b500390565b8183823760009101908152919050565b6000602082840312156134af57600080fd5b815167ffffffffffffffff808211156134c757600080fd5b818401915084601f8301126134db57600080fd5b8151818111156134ed576134ed6132ca565b61351e60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613322565b915080825285602082850101111561353557600080fd5b613546816020840160208601612f76565b50949350505050565b602081526000612b336020830184612fa2565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6183360301811261317257600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8183360301811261317257600080fd5b600181815b8085111561362357817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561360957613609613447565b8085161561361657918102915b93841c93908002906135cf565b509250929050565b60008261363a575060016136e6565b81613647575060006136e6565b816001811461365d576002811461366757613683565b60019150506136e6565b60ff84111561367857613678613447565b50506001821b6136e6565b5060208310610133831016604e8410600b84101617156136a6575081810a6136e6565b6136b083836135ca565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156136e2576136e2613447565b0290505b92915050565b6000612b3360ff84168361362b565b60006020828403121561370d57600080fd5b813567ffffffffffffffff81168114612b3357600080fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561375d5761375d613447565b500290565b600082613798577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126137d257600080fd5b83018035915067ffffffffffffffff8211156137ed57600080fd5b6020019150600781901b3603821315612bb757600080fd5b6000806040838503121561381857600080fd5b505080516020909101519092909150565b60008251613172818460208701612f76565b60006020828403121561384d57600080fd5b8151612b3381612e8b56fea2646970667358221220db096409adc99875f8e25f7188bcdacd92dddd58d74b0077481705aa4830a95864736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106101635760003560e01c8063783312d9116100c0578063ac9650d811610074578063c2e3140a11610059578063c2e3140a14610387578063cf58879a1461039a578063f3995c67146103ce57600080fd5b8063ac9650d814610354578063b96c5c0e1461037457600080fd5b806389a3f136116100a557806389a3f1361461031b5780639fa744911461032e578063a4a78f0c1461034157600080fd5b8063783312d9146102f55780637f6ad4551461030857600080fd5b80632c0d9a0111610117578063403335a8116100fc578063403335a81461029b5780634659a494146102ae5780634da31827146102c157600080fd5b80632c0d9a01146102755780632cfcb94f1461028857600080fd5b80630f93d439116101485780630f93d439146102175780631aa349a81461022a578063250558dc1461023d57600080fd5b8063018ee9b7146101de5780630b0d1b1e146101f157600080fd5b366101d9573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101d7576040517fe7218bb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b005b600080fd5b6101d76101ec366004612acc565b6103e1565b6102046101ff366004612af8565b610494565b6040519081526020015b60405180910390f35b610204610225366004612b3a565b610650565b6101d7610238366004612bbe565b610822565b61025061024b366004612c22565b61091a565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161020e565b610204610283366004612af8565b6109de565b610204610296366004612c77565b610c1f565b6101d76102a9366004612d43565b610eae565b6101d76102bc366004612d76565b610f76565b3480156102cd57600080fd5b506102507f000000000000000000000000000000000000000000000000000000000000000081565b6101d7610303366004612dd0565b611031565b6101d7610316366004612e99565b61124b565b6101d7610329366004612ee4565b6114f8565b61020461033c366004612b3a565b611671565b6101d761034f366004612d76565b6116ad565b610367610362366004612f01565b611777565b60405161020e9190612fec565b6101d761038236600461306c565b6118e7565b6101d7610395366004612d76565b6124bc565b3480156103a657600080fd5b506102507f000000000000000000000000000000000000000000000000000000000000000081565b6101d76103dc366004612d76565b612562565b6040517f66c6bb0b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015260016024830152604482018390527f000000000000000000000000000000000000000000000000000000000000000016906366c6bb0b90606401600060405180830381600087803b15801561047857600080fd5b505af115801561048c573d6000803e3d6000fd5b505050505050565b60006104ee6104a66020840184612ee4565b6104b360608501856130a7565b60008181106104c4576104c461310f565b90506020028101906104d6919061313e565b6104e4906020810190612ee4565b84602001356125df565b60006104fd60608401846130a7565b9050905060005b8181101561060b5761051960608501856130a7565b828181106105295761052961310f565b905060200281019061053b919061313e565b610549906020810190612ee4565b73ffffffffffffffffffffffffffffffffffffffff1663627dd56a61057160608701876130a7565b848181106105815761058161310f565b9050602002810190610593919061313e565b6105a190602081019061317c565b6040518363ffffffff1660e01b81526004016105be92919061322a565b6020604051808303816000875af11580156105dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610601919061323e565b9250600101610504565b50826040013582101561064a576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50919050565b600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f18d03cc61069e6080850160608601612ee4565b336106af6060870160408801612ee4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152909116604482015284356064820152608401600060405180830381600087803b15801561072c57600080fd5b505af1158015610740573d6000803e3d6000fd5b50610755925050506060830160408401612ee4565b73ffffffffffffffffffffffffffffffffffffffff1663627dd56a61077d608085018561317c565b6040518363ffffffff1660e01b815260040161079a92919061322a565b6020604051808303816000875af11580156107b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107dd919061323e565b9050816020013581101561081d576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b61084473ffffffffffffffffffffffffffffffffffffffff86163387876126de565b6040517faf8c09bf00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff87169063af8c09bf9061089b908790879060040161322a565b6020604051808303816000875af11580156108ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108de919061323e565b90508181101561048c576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f250558dc00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063250558dc9061099390879087908790600401613257565b6020604051808303816000875af11580156109b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d69190613290565b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f18d03cc610a296020850185612ee4565b33610a3760608701876130a7565b6000818110610a4857610a4861310f565b9050602002810190610a5a919061313e565b610a68906020810190612ee4565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152909116604482015260208501356064820152608401600060405180830381600087803b158015610ae857600080fd5b505af1158015610afc573d6000803e3d6000fd5b5060009250610b1191505060608401846130a7565b9050905060005b8181101561060b57610b2d60608501856130a7565b82818110610b3d57610b3d61310f565b9050602002810190610b4f919061313e565b610b5d906020810190612ee4565b73ffffffffffffffffffffffffffffffffffffffff1663627dd56a610b8560608701876130a7565b84818110610b9557610b9561310f565b9050602002810190610ba7919061313e565b610bb590602081019061317c565b6040518363ffffffff1660e01b8152600401610bd292919061322a565b6020604051808303816000875af1158015610bf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c15919061323e565b9250600101610b18565b600085815b81811015610dcf57888882818110610c3e57610c3e61310f565b9050606002016020016020810190610c5691906132ad565b15610cad57610ca8898983818110610c7057610c7061310f565b610c869260206060909202019081019150612ee4565b888b8b85818110610c9957610c9961310f565b905060600201604001356125df565b610dc7565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f18d03cc8a8a84818110610cfb57610cfb61310f565b610d119260206060909202019081019150612ee4565b338a8d8d87818110610d2557610d2561310f565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e08a901b16815273ffffffffffffffffffffffffffffffffffffffff978816600482015295871660248701529590931660448501525060609091020191909101356064820152608401600060405180830381600087803b158015610dae57600080fd5b505af1158015610dc2573d6000803e3d6000fd5b505050505b600101610c24565b506040517f7ba0e2e700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff871690637ba0e2e790610e24908790879060040161322a565b6020604051808303816000875af1158015610e43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e67919061323e565b915084821015610ea3576040517f249942be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b509695505050505050565b6040517fc0a47c930000000000000000000000000000000000000000000000000000000081523360048201523060248201526001604482015260ff841660648201526084810183905260a481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063c0a47c939060c401600060405180830381600087803b158015610f5957600080fd5b505af1158015610f6d573d6000803e3d6000fd5b50505050505050565b6040517f8fcbaf0c00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101869052606481018590526001608482015260ff841660a482015260c4810183905260e4810182905273ffffffffffffffffffffffffffffffffffffffff871690638fcbaf0c90610104015b600060405180830381600087803b15801561101157600080fd5b505af1158015611025573d6000803e3d6000fd5b50505050505050505050565b61105373ffffffffffffffffffffffffffffffffffffffff87163388886126de565b6040517f2a07b6c700000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff881690632a07b6c7906110aa908890889060040161322a565b6000604051808303816000875af11580156110c9573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261110f9190810190613371565b90508160005b818110156112405782818151811061112f5761112f61310f565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168585838181106111635761116361310f565b6111799260206040909202019081019150612ee4565b73ffffffffffffffffffffffffffffffffffffffff16146111c6576040517f2664ab9d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8484828181106111d8576111d861310f565b905060400201602001358382815181106111f4576111f461310f565b6020026020010151602001511015611238576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600101611115565b505050505050505050565b80156113cd576040517ff7888aec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301523060248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063f7888aec90604401602060405180830381865afa1580156112e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130c919061323e565b6040517ff18d03cc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301523060248301528581166044830152606482018390529192507f00000000000000000000000000000000000000000000000000000000000000009091169063f18d03cc90608401600060405180830381600087803b1580156113af57600080fd5b505af11580156113c3573d6000803e3d6000fd5b5050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff84161561148b576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260019073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa158015611458573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147c919061323e565b6114869190613476565b61148d565b475b905073ffffffffffffffffffffffffffffffffffffffff8416156114d1576114cc73ffffffffffffffffffffffffffffffffffffffff8516848361284f565b6114f1565b6114f173ffffffffffffffffffffffffffffffffffffffff8416826129b8565b505b505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015611585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a9919061323e565b6040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018290529091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b15801561163457600080fd5b505af1158015611648573d6000803e3d6000fd5b5061166d9250505073ffffffffffffffffffffffffffffffffffffffff8316826129b8565b5050565b600061169d6116866080840160608501612ee4565b6116966060850160408601612ee4565b84356125df565b6107556060830160408401612ee4565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523360048201523060248201527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9073ffffffffffffffffffffffffffffffffffffffff88169063dd62ed3e90604401602060405180830381865afa15801561173f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611763919061323e565b101561048c5761048c868686868686610f76565b60608167ffffffffffffffff811115611792576117926132ca565b6040519080825280602002602001820160405280156117c557816020015b60608152602001906001900390816117b05790505b50905060005b828110156118e057600080308686858181106117e9576117e961310f565b90506020028101906117fb919061317c565b60405161180992919061348d565b600060405180830381855af49150503d8060008114611844576040519150601f19603f3d011682016040523d82523d6000602084013e611849565b606091505b5091509150816118b85760448151101561186257600080fd5b6004810190508080602001905181019061187c919061349d565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118af919061354f565b60405180910390fd5b808484815181106118cb576118cb61310f565b602090810291909101015250506001016117cb565b5092915050565b60006118f382806130a7565b9050905060005b81811015611c6c5761190c83806130a7565b8281811061191c5761191c61310f565b905060200281019061192e9190613562565b61193f9060608101906040016132ad565b156119f8576119f361195184806130a7565b838181106119615761196161310f565b90506020028101906119739190613562565b611981906020810190612ee4565b61198b85806130a7565b8481811061199b5761199b61310f565b90506020028101906119ad9190613562565b6119be906040810190602001612ee4565b6119c886806130a7565b858181106119d8576119d861310f565b90506020028101906119ea9190613562565b606001356125df565b611b71565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f18d03cc611a3e85806130a7565b84818110611a4e57611a4e61310f565b9050602002810190611a609190613562565b611a6e906020810190612ee4565b33611a7987806130a7565b86818110611a8957611a8961310f565b9050602002810190611a9b9190613562565b611aac906040810190602001612ee4565b611ab688806130a7565b87818110611ac657611ac661310f565b9050602002810190611ad89190613562565b60405160e086901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff94851660048201529284166024840152921660448201526060909101356064820152608401600060405180830381600087803b158015611b5857600080fd5b505af1158015611b6c573d6000803e3d6000fd5b505050505b611b7b83806130a7565b82818110611b8b57611b8b61310f565b9050602002810190611b9d9190613562565b611bae906040810190602001612ee4565b73ffffffffffffffffffffffffffffffffffffffff1663627dd56a611bd385806130a7565b84818110611be357611be361310f565b9050602002810190611bf59190613562565b611c0390608081019061317c565b6040518363ffffffff1660e01b8152600401611c2092919061322a565b6020604051808303816000875af1158015611c3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c63919061323e565b506001016118fa565b50611c7a60208301836130a7565b9050905060005b8181101561206357600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f7888aec611cd460208701876130a7565b85818110611ce457611ce461310f565b9050602002810190611cf69190613596565b611d04906020810190612ee4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604401602060405180830381865afa158015611d73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d97919061323e565b90506000611da76008600a6136ec565b611db460208701876130a7565b85818110611dc457611dc461310f565b9050602002810190611dd69190613596565b611de79060608101906040016136fb565b611dfb9067ffffffffffffffff1684613725565b611e059190613762565b905073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f18d03cc611e5060208801886130a7565b86818110611e6057611e6061310f565b9050602002810190611e729190613596565b611e80906020810190612ee4565b30611e8e60208a018a6130a7565b88818110611e9e57611e9e61310f565b9050602002810190611eb09190613596565b611ec1906040810190602001612ee4565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152909116604482015260648101849052608401600060405180830381600087803b158015611f3e57600080fd5b505af1158015611f52573d6000803e3d6000fd5b50611f649250505060208601866130a7565b84818110611f7457611f7461310f565b9050602002810190611f869190613596565b611f97906040810190602001612ee4565b73ffffffffffffffffffffffffffffffffffffffff1663627dd56a611fbf60208801886130a7565b86818110611fcf57611fcf61310f565b9050602002810190611fe19190613596565b611fef90606081019061317c565b6040518363ffffffff1660e01b815260040161200c92919061322a565b6020604051808303816000875af115801561202b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204f919061323e565b50505061205c8160010190565b9050611c81565b50612071604083018361379d565b9050905060005b818110156114f357600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f7888aec6120cb604087018761379d565b858181106120db576120db61310f565b6120f19260206080909202019081019150612ee4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604401602060405180830381865afa158015612160573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612184919061323e565b9050612193604085018561379d565b838181106121a3576121a361310f565b905060800201606001358110156121e6576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6121f3604085018561379d565b838181106122035761220361310f565b905060800201604001602081019061221b91906132ad565b156123785773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166397da6d30612269604087018761379d565b858181106122795761227961310f565b61228f9260206080909202019081019150612ee4565b3061229d604089018961379d565b878181106122ad576122ad61310f565b90506080020160200160208101906122c59190612ee4565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff938416600482015291831660248301529091166044820152600060648201526084810184905260a40160408051808303816000875af115801561234d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123719190613805565b50506124b3565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f18d03cc6123c1604087018761379d565b858181106123d1576123d161310f565b6123e79260206080909202019081019150612ee4565b306123f5604089018961379d565b878181106124055761240561310f565b905060800201602001602081019061241d9190612ee4565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152909116604482015260648101849052608401600060405180830381600087803b15801561249a57600080fd5b505af11580156124ae573d6000803e3d6000fd5b505050505b50600101612078565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152859073ffffffffffffffffffffffffffffffffffffffff88169063dd62ed3e90604401602060405180830381865afa15801561252e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612552919061323e565b101561048c5761048c8686868686865b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c4810182905273ffffffffffffffffffffffffffffffffffffffff87169063d505accf9060e401610ff7565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116906302b9446c9085161561262c57600061262e565b825b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff808816600483015233602483015286166044820152606481018590526000608482015260a401604080518083038185885af11580156126b2573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906126d79190613805565b5050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052915160009283929088169161277d9190613829565b6000604051808303816000865af19150503d80600081146127ba576040519150601f19603f3d011682016040523d82523d6000602084013e6127bf565b606091505b50915091508180156127e95750805115806127e95750808060200190518101906127e9919061383b565b61048c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f535446000000000000000000000000000000000000000000000000000000000060448201526064016118af565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916128e69190613829565b6000604051808303816000865af19150503d8060008114612923576040519150601f19603f3d011682016040523d82523d6000602084013e612928565b606091505b5091509150818015612952575080511580612952575080806020019051810190612952919061383b565b6126d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f535400000000000000000000000000000000000000000000000000000000000060448201526064016118af565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040516129ef9190613829565b60006040518083038185875af1925050503d8060008114612a2c576040519150601f19603f3d011682016040523d82523d6000602084013e612a31565b606091505b50509050806114f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f535445000000000000000000000000000000000000000000000000000000000060448201526064016118af565b73ffffffffffffffffffffffffffffffffffffffff81168114612abe57600080fd5b50565b803561081d81612a9c565b60008060408385031215612adf57600080fd5b8235612aea81612a9c565b946020939093013593505050565b600060208284031215612b0a57600080fd5b813567ffffffffffffffff811115612b2157600080fd5b820160808185031215612b3357600080fd5b9392505050565b600060208284031215612b4c57600080fd5b813567ffffffffffffffff811115612b6357600080fd5b820160a08185031215612b3357600080fd5b60008083601f840112612b8757600080fd5b50813567ffffffffffffffff811115612b9f57600080fd5b602083019150836020828501011115612bb757600080fd5b9250929050565b600080600080600060808688031215612bd657600080fd5b8535612be181612a9c565b945060208601359350604086013567ffffffffffffffff811115612c0457600080fd5b612c1088828901612b75565b96999598509660600135949350505050565b600080600060408486031215612c3757600080fd5b8335612c4281612a9c565b9250602084013567ffffffffffffffff811115612c5e57600080fd5b612c6a86828701612b75565b9497909650939450505050565b60008060008060008060808789031215612c9057600080fd5b863567ffffffffffffffff80821115612ca857600080fd5b818901915089601f830112612cbc57600080fd5b813581811115612ccb57600080fd5b8a6020606083028501011115612ce057600080fd5b60208301985080975050612cf660208a01612ac1565b9550604089013594506060890135915080821115612d1357600080fd5b50612d2089828a01612b75565b979a9699509497509295939492505050565b803560ff8116811461081d57600080fd5b600080600060608486031215612d5857600080fd5b612d6184612d32565b95602085013595506040909401359392505050565b60008060008060008060c08789031215612d8f57600080fd5b8635612d9a81612a9c565b95506020870135945060408701359350612db660608801612d32565b92506080870135915060a087013590509295509295509295565b60008060008060008060808789031215612de957600080fd5b8635612df481612a9c565b955060208701359450604087013567ffffffffffffffff80821115612e1857600080fd5b612e248a838b01612b75565b90965094506060890135915080821115612e3d57600080fd5b818901915089601f830112612e5157600080fd5b813581811115612e6057600080fd5b8a60208260061b8501011115612e7557600080fd5b6020830194508093505050509295509295509295565b8015158114612abe57600080fd5b600080600060608486031215612eae57600080fd5b8335612eb981612a9c565b92506020840135612ec981612a9c565b91506040840135612ed981612e8b565b809150509250925092565b600060208284031215612ef657600080fd5b8135612b3381612a9c565b60008060208385031215612f1457600080fd5b823567ffffffffffffffff80821115612f2c57600080fd5b818501915085601f830112612f4057600080fd5b813581811115612f4f57600080fd5b8660208260051b8501011115612f6457600080fd5b60209290920196919550909350505050565b60005b83811015612f91578181015183820152602001612f79565b838111156114f15750506000910152565b60008151808452612fba816020860160208601612f76565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561305f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845261304d858351612fa2565b94509285019290850190600101613013565b5092979650505050505050565b60006020828403121561307e57600080fd5b813567ffffffffffffffff81111561309557600080fd5b820160608185031215612b3357600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126130dc57600080fd5b83018035915067ffffffffffffffff8211156130f757600080fd5b6020019150600581901b3603821315612bb757600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc183360301811261317257600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126131b157600080fd5b83018035915067ffffffffffffffff8211156131cc57600080fd5b602001915036819003821315612bb757600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b6020815260006109d66020830184866131e1565b60006020828403121561325057600080fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff841681526040602082015260006132876040830184866131e1565b95945050505050565b6000602082840312156132a257600080fd5b8151612b3381612a9c565b6000602082840312156132bf57600080fd5b8135612b3381612e8b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561331c5761331c6132ca565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613369576133696132ca565b604052919050565b6000602080838503121561338457600080fd5b825167ffffffffffffffff8082111561339c57600080fd5b818501915085601f8301126133b057600080fd5b8151818111156133c2576133c26132ca565b6133d0848260051b01613322565b818152848101925060069190911b8301840190878211156133f057600080fd5b928401925b8184101561343c576040848903121561340e5760008081fd5b6134166132f9565b845161342181612a9c565b815284860151868201528352604090930192918401916133f5565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561348857613488613447565b500390565b8183823760009101908152919050565b6000602082840312156134af57600080fd5b815167ffffffffffffffff808211156134c757600080fd5b818401915084601f8301126134db57600080fd5b8151818111156134ed576134ed6132ca565b61351e60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613322565b915080825285602082850101111561353557600080fd5b613546816020840160208601612f76565b50949350505050565b602081526000612b336020830184612fa2565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6183360301811261317257600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8183360301811261317257600080fd5b600181815b8085111561362357817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561360957613609613447565b8085161561361657918102915b93841c93908002906135cf565b509250929050565b60008261363a575060016136e6565b81613647575060006136e6565b816001811461365d576002811461366757613683565b60019150506136e6565b60ff84111561367857613678613447565b50506001821b6136e6565b5060208310610133831016604e8410600b84101617156136a6575081810a6136e6565b6136b083836135ca565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156136e2576136e2613447565b0290505b92915050565b6000612b3360ff84168361362b565b60006020828403121561370d57600080fd5b813567ffffffffffffffff81168114612b3357600080fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561375d5761375d613447565b500290565b600082613798577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126137d257600080fd5b83018035915067ffffffffffffffff8211156137ed57600080fd5b6020019150600781901b3603821315612bb757600080fd5b6000806040838503121561381857600080fd5b505080516020909101519092909150565b60008251613172818460208701612f76565b60006020828403121561384d57600080fd5b8151612b3381612e8b56fea2646970667358221220db096409adc99875f8e25f7188bcdacd92dddd58d74b0077481705aa4830a95864736f6c634300080a0033",
  "devdoc": {
    "errors": {
      "NotWethSender()": [
        {
          "details": "Custom Errors"
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addLiquidity((address,bool,uint256)[],address,uint256,bytes)": {
        "params": {
          "data": "Data required by the pool to add liquidity.",
          "minLiquidity": "Minimum output liquidity - caps slippage.",
          "pool": "Pool address to add liquidity to.",
          "tokenInput": "Token address and amount to add as liquidity."
        }
      },
      "burnLiquidity(address,uint256,bytes,(address,uint256)[])": {
        "params": {
          "data": "Data required by the pool to burn liquidity.",
          "liquidity": "Amount of liquidity tokens to burn.",
          "minWithdrawals": "Minimum amount of `bento` tokens to be returned.",
          "pool": "Pool address."
        }
      },
      "burnLiquiditySingle(address,uint256,bytes,uint256)": {
        "details": "The tokens are swapped automatically and the output is in a single token.",
        "params": {
          "data": "Data required by the pool to burn liquidity.",
          "liquidity": "Amount of liquidity tokens to burn.",
          "minWithdrawal": "Minimum amount of tokens to be returned.",
          "pool": "Pool address."
        }
      },
      "complexPath(((address,address,bool,uint256,bytes)[],(address,address,uint64,bytes)[],(address,address,bool,uint256)[]))": {
        "details": "This function is not optimized for single swaps and should only be used in complex cases where the amounts are large enough that minimizing slippage by using multiple paths is worth the extra gas.",
        "params": {
          "params": "This includes everything needed for the swap. Look at the `ComplexPathParams` struct for more details."
        }
      },
      "exactInput((address,uint256,uint256,(address,bytes)[]))": {
        "details": "Ensure that the pools are trusted before calling this function. The pools can steal users' tokens.",
        "params": {
          "params": "This includes the addresses of the tokens, pools, amount of token A to swap, minimum amount of token B after the swap and data required by the pools for the swaps."
        }
      },
      "exactInputSingle((uint256,uint256,address,address,bytes))": {
        "details": "Ensure that the pool is trusted before calling this function. The pool can steal users' tokens.",
        "params": {
          "params": "This includes the address of token A, pool, amount of token A to swap, minimum amount of token B after the swap and data required by the pool for the swap."
        }
      },
      "exactInputSingleWithNativeToken((uint256,uint256,address,address,bytes))": {
        "details": "Ensure that the pool is trusted before calling this function. The pool can steal users' tokens.",
        "params": {
          "params": "This includes the address of token A, pool, amount of token A to swap, minimum amount of token B after the swap and data required by the pool for the swap."
        }
      },
      "exactInputWithNativeToken((address,uint256,uint256,(address,bytes)[]))": {
        "details": "Ensure that the pools are trusted before calling this function. The pools can steal users' tokens.",
        "params": {
          "params": "This includes the addresses of the tokens, pools, amount of token A to swap, minimum amount of token B after the swap and data required by the pools for the swaps."
        }
      },
      "harvest(address,uint256)": {
        "details": "Should be batched in before a swap."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity((address,bool,uint256)[],address,uint256,bytes)": {
        "notice": "Add liquidity to a pool."
      },
      "approveMasterContract(uint8,bytes32,bytes32)": {
        "notice": "Wrapper function to allow bento set master contract approval to be batched, so the first trade can happen in one transaction."
      },
      "bento()": {
        "notice": "BentoBox token vault."
      },
      "burnLiquidity(address,uint256,bytes,(address,uint256)[])": {
        "notice": "Burn liquidity tokens to get back `bento` tokens."
      },
      "burnLiquiditySingle(address,uint256,bytes,uint256)": {
        "notice": "Burn liquidity tokens to get back `bento` tokens."
      },
      "complexPath(((address,address,bool,uint256,bytes)[],(address,address,uint64,bytes)[],(address,address,bool,uint256)[]))": {
        "notice": "Swaps multiple input tokens to multiple output tokens using multiple paths, in different percentages. For example, you can swap 50 DAI + 100 USDC into 60% ETH and 40% BTC."
      },
      "deployPool(address,bytes)": {
        "notice": "Wrapper function to allow pool deployment to be batched."
      },
      "exactInput((address,uint256,uint256,(address,bytes)[]))": {
        "notice": "Swaps token A to token B indirectly by using multiple hops."
      },
      "exactInputSingle((uint256,uint256,address,address,bytes))": {
        "notice": "Swaps token A to token B directly. Swaps are done on `bento` tokens."
      },
      "exactInputSingleWithNativeToken((uint256,uint256,address,address,bytes))": {
        "notice": "Swaps token A to token B directly. It's the same as `exactInputSingle` except it takes raw ERC-20 tokens from the users and deposits them into `bento`."
      },
      "exactInputWithNativeToken((address,uint256,uint256,(address,bytes)[]))": {
        "notice": "Swaps token A to token B indirectly by using multiple hops. It's the same as `exactInput` except it takes raw ERC-20 tokens from the users and deposits them into `bento`."
      },
      "harvest(address,uint256)": {
        "notice": "Call BentoBox harvest function to rebalance a BentoBox token strategy and ensure there are enough tokens available to withdraw a swap output."
      },
      "masterDeployer()": {
        "notice": "Master deployer."
      },
      "sweep(address,address,bool)": {
        "notice": "Recover mistakenly sent tokens."
      },
      "unwrapWETH(address)": {
        "notice": "Unwrap this contract's wETH into ETH."
      }
    },
    "notice": "Router contract that helps in swapping across Trident pools.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}